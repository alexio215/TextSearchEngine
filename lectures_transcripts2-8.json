[{"source_name": "lecture2", "index": 1, "time": "00:16:45.920 --> 00:16:47.960", "speaker": "Alexander Vasserman", "text": "Hello, everyone!"}, {"source_name": "lecture2", "index": 2, "time": "00:16:48.700 --> 00:16:49.740", "speaker": "Alexander Vasserman", "text": "Good afternoon"}, {"source_name": "lecture2", "index": 3, "time": "00:16:50.120 --> 00:16:53.500", "speaker": "Alexander Vasserman", "text": "welcome to the second lecture."}, {"source_name": "lecture2", "index": 4, "time": "00:16:53.800 --> 00:16:55.230", "speaker": "Alexander Vasserman", "text": "or plus"}, {"source_name": "lecture2", "index": 5, "time": "00:16:58.470 --> 00:16:59.510", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 6, "time": "00:17:00.750 --> 00:17:03.079", "speaker": "Alexander Vasserman", "text": "today we are going to"}, {"source_name": "lecture2", "index": 7, "time": "00:17:04.650 --> 00:17:10.450", "speaker": "Alexander Vasserman", "text": "review a little bit what we did yesterday and or not yesterday last lecture."}, {"source_name": "lecture2", "index": 8, "time": "00:17:10.490 --> 00:17:11.930", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture2", "index": 9, "time": "00:17:12.810 --> 00:17:17.049", "speaker": "Alexander Vasserman", "text": "and then also do a bit of python review."}, {"source_name": "lecture2", "index": 10, "time": "00:17:18.280 --> 00:17:19.319", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 11, "time": "00:17:19.510 --> 00:17:24.110", "speaker": "Alexander Vasserman", "text": "I know a lot of you already done a lot. A bunch of python."}, {"source_name": "lecture2", "index": 12, "time": "00:17:24.130 --> 00:17:41.419", "speaker": "Alexander Vasserman", "text": "but hopefully, this is still going to be relevant and interesting for you. for 2 reasons. One is i'm going to emphasize a bit more the things that we are going to need in this class. So it"}, {"source_name": "lecture2", "index": 13, "time": "00:17:42.610 --> 00:17:50.969", "speaker": "Alexander Vasserman", "text": "some of the things might be things that you've already done before. But other things maybe not, or at least not in."}, {"source_name": "lecture2", "index": 14, "time": "00:17:51.090 --> 00:17:51.920", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 15, "time": "00:17:52.630 --> 00:17:59.329", "speaker": "Alexander Vasserman", "text": "in the way that i'm going to be presenting them. So you know I'm also going to be"}, {"source_name": "lecture2", "index": 16, "time": "00:18:00.000 --> 00:18:01.759", "speaker": "Alexander Vasserman", "text": "giving you some"}, {"source_name": "lecture2", "index": 17, "time": "00:18:02.460 --> 00:18:11.670", "speaker": "Alexander Vasserman", "text": "different ways to do things that you've all done before that are a little bit more convenient, a little bit more standard potentially than what you're used to"}, {"source_name": "lecture2", "index": 18, "time": "00:18:12.180 --> 00:18:15.080", "speaker": "Alexander Vasserman", "text": "so hopefully. It's going to be"}, {"source_name": "lecture2", "index": 19, "time": "00:18:15.560 --> 00:18:20.309", "speaker": "Alexander Vasserman", "text": "relevant for this view for home python, as it at the top of your mind."}, {"source_name": "lecture2", "index": 20, "time": "00:18:20.330 --> 00:18:21.610", "speaker": "Alexander Vasserman", "text": "And if it's not."}, {"source_name": "lecture2", "index": 21, "time": "00:18:21.750 --> 00:18:22.540", "speaker": "Alexander Vasserman", "text": "then"}, {"source_name": "lecture2", "index": 22, "time": "00:18:22.860 --> 00:18:23.440", "speaker": "Alexander Vasserman", "text": "you know."}, {"source_name": "lecture2", "index": 23, "time": "00:18:23.920 --> 00:18:29.900", "speaker": "Alexander Vasserman", "text": "then, hopefully, that's going to set you up well for the rest of the day for us."}, {"source_name": "lecture2", "index": 24, "time": "00:18:31.790 --> 00:18:33.549", "speaker": "Alexander Vasserman", "text": "But first"}, {"source_name": "lecture2", "index": 25, "time": "00:18:33.910 --> 00:18:37.349", "speaker": "Alexander Vasserman", "text": "let's review what we did last time."}, {"source_name": "lecture2", "index": 26, "time": "00:18:38.310 --> 00:18:39.450", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 27, "time": "00:18:39.560 --> 00:18:50.909", "speaker": "Alexander Vasserman", "text": "you know this this course there the building is search engine from scratch. So we'll learn a lot about how search engines work while doing that."}, {"source_name": "lecture2", "index": 28, "time": "00:18:51.160 --> 00:18:52.950", "speaker": "Alexander Vasserman", "text": "But also"}, {"source_name": "lecture2", "index": 29, "time": "00:18:53.430 --> 00:18:56.519", "speaker": "Alexander Vasserman", "text": "we'll learn how to"}, {"source_name": "lecture2", "index": 30, "time": "00:18:57.270 --> 00:18:59.230", "speaker": "Alexander Vasserman", "text": "deal the larger software project."}, {"source_name": "lecture2", "index": 31, "time": "00:18:59.320 --> 00:19:03.160", "speaker": "Alexander Vasserman", "text": "So hopefully, that's going to be in"}, {"source_name": "lecture2", "index": 32, "time": "00:19:03.510 --> 00:19:10.700", "speaker": "Alexander Vasserman", "text": "interesting experience for you and good practice of your python skills. And you know."}, {"source_name": "lecture2", "index": 33, "time": "00:19:11.200 --> 00:19:14.919", "speaker": "Alexander Vasserman", "text": "improvement on your python. Still, some confidence in"}, {"source_name": "lecture2", "index": 34, "time": "00:19:15.170 --> 00:19:25.089", "speaker": "Alexander Vasserman", "text": "software development in general and kind of give you an idea of what software development is like and especially what it's like in the in this name."}, {"source_name": "lecture2", "index": 35, "time": "00:19:28.970 --> 00:19:30.010", "speaker": "Alexander Vasserman", "text": "grading"}, {"source_name": "lecture2", "index": 36, "time": "00:19:30.290 --> 00:19:38.739", "speaker": "Alexander Vasserman", "text": "plus participation 20. Again, I wanna stress asking questions. like I said before"}, {"source_name": "lecture2", "index": 37, "time": "00:19:39.010 --> 00:19:41.799", "speaker": "Alexander Vasserman", "text": "the kind of social interactions"}, {"source_name": "lecture2", "index": 38, "time": "00:19:41.850 --> 00:19:42.780", "speaker": "Alexander Vasserman", "text": "are"}, {"source_name": "lecture2", "index": 39, "time": "00:19:43.510 --> 00:19:48.760", "speaker": "Alexander Vasserman", "text": "under emphasized part of software development. but this is extremely"}, {"source_name": "lecture2", "index": 40, "time": "00:19:48.810 --> 00:19:50.459", "speaker": "Alexander Vasserman", "text": "of the important part."}, {"source_name": "lecture2", "index": 41, "time": "00:19:51.100 --> 00:19:52.560", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 42, "time": "00:19:53.700 --> 00:19:55.640", "speaker": "Alexander Vasserman", "text": "I would even say that"}, {"source_name": "lecture2", "index": 43, "time": "00:19:55.810 --> 00:19:58.219", "speaker": "Alexander Vasserman", "text": "it's one of the"}, {"source_name": "lecture2", "index": 44, "time": "00:19:58.240 --> 00:20:01.909", "speaker": "Alexander Vasserman", "text": "key things in software development."}, {"source_name": "lecture2", "index": 45, "time": "00:20:01.950 --> 00:20:03.150", "speaker": "Alexander Vasserman", "text": "because"}, {"source_name": "lecture2", "index": 46, "time": "00:20:03.210 --> 00:20:05.099", "speaker": "Alexander Vasserman", "text": "a lot of the"}, {"source_name": "lecture2", "index": 47, "time": "00:20:05.220 --> 00:20:12.340", "speaker": "Alexander Vasserman", "text": "decisions that you're making is, or you know, you're kind of communicating with the computer. But you're also communicating with"}, {"source_name": "lecture2", "index": 48, "time": "00:20:12.390 --> 00:20:31.789", "speaker": "Alexander Vasserman", "text": "through code. Is your your teammates? So a lot of our questions in software engineering is, how do I write code? So that, me and my teammates can work together on a larger project without interfering with each other without necessarily standing at the same computer."}, {"source_name": "lecture2", "index": 49, "time": "00:20:31.800 --> 00:20:34.390", "speaker": "Alexander Vasserman", "text": "you know, at the same time."}, {"source_name": "lecture2", "index": 50, "time": "00:20:35.010 --> 00:20:37.569", "speaker": "Alexander Vasserman", "text": "it's also about"}, {"source_name": "lecture2", "index": 51, "time": "00:20:37.860 --> 00:20:40.720", "speaker": "Alexander Vasserman", "text": "even communicating this future itself."}, {"source_name": "lecture2", "index": 52, "time": "00:20:40.800 --> 00:20:43.730", "speaker": "Alexander Vasserman", "text": "because every project that's"}, {"source_name": "lecture2", "index": 53, "time": "00:20:43.920 --> 00:20:45.020", "speaker": "Alexander Vasserman", "text": "beyond"}, {"source_name": "lecture2", "index": 54, "time": "00:20:45.070 --> 00:20:50.649", "speaker": "Alexander Vasserman", "text": "classroom is a living project. So it's something that"}, {"source_name": "lecture2", "index": 55, "time": "00:20:50.730 --> 00:20:57.769", "speaker": "Alexander Vasserman", "text": "keeps getting developed and keeps getting improved, and oftentimes even you yourself wrote something."}, {"source_name": "lecture2", "index": 56, "time": "00:20:57.820 --> 00:21:04.519", "speaker": "Alexander Vasserman", "text": "And then some number of months later you go back to it, and it's hard to remember what you've done."}, {"source_name": "lecture2", "index": 57, "time": "00:21:04.680 --> 00:21:05.800", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 58, "time": "00:21:06.630 --> 00:21:14.619", "speaker": "Alexander Vasserman", "text": "a lot of software development practices are about. How do I make sure that the code that I right is readable enough that"}, {"source_name": "lecture2", "index": 59, "time": "00:21:14.900 --> 00:21:18.529", "speaker": "Alexander Vasserman", "text": "when I come back to it i'll actually understand what's happening here"}, {"source_name": "lecture2", "index": 60, "time": "00:21:19.560 --> 00:21:22.250", "speaker": "Alexander Vasserman", "text": "or somebody else looking at it and understand"}, {"source_name": "lecture2", "index": 61, "time": "00:21:22.300 --> 00:21:23.989", "speaker": "Alexander Vasserman", "text": "what's happening here"}, {"source_name": "lecture2", "index": 62, "time": "00:21:24.550 --> 00:21:26.519", "speaker": "Alexander Vasserman", "text": "and find it it."}, {"source_name": "lecture2", "index": 63, "time": "00:21:26.980 --> 00:21:30.010", "speaker": "Alexander Vasserman", "text": "what I mentioned last time is that"}, {"source_name": "lecture2", "index": 64, "time": "00:21:31.010 --> 00:21:38.610", "speaker": "Alexander Vasserman", "text": "there is a lot of stuff to know somebody else wrote something it's all this: that there is all this"}, {"source_name": "lecture2", "index": 65, "time": "00:21:38.650 --> 00:21:44.479", "speaker": "Alexander Vasserman", "text": "going to be things that you don't know, and so asking questions is definitely one of the most important things."}, {"source_name": "lecture2", "index": 66, "time": "00:21:47.880 --> 00:21:52.440", "speaker": "Alexander Vasserman", "text": "going back to grading. So homework is going to be 40% of the grade"}, {"source_name": "lecture2", "index": 67, "time": "00:21:52.480 --> 00:21:53.830", "speaker": "Alexander Vasserman", "text": "you can."}, {"source_name": "lecture2", "index": 68, "time": "00:21:53.860 --> 00:21:55.910", "speaker": "Alexander Vasserman", "text": "I'll collaborate with each other."}, {"source_name": "lecture2", "index": 69, "time": "00:21:56.070 --> 00:21:57.270", "speaker": "Alexander Vasserman", "text": "but."}, {"source_name": "lecture2", "index": 70, "time": "00:21:57.800 --> 00:21:58.900", "speaker": "Alexander Vasserman", "text": "each"}, {"source_name": "lecture2", "index": 71, "time": "00:21:59.420 --> 00:22:07.989", "speaker": "Alexander Vasserman", "text": "person needs to submit their own copy. Even if you worked entirely together, submissions should be separate, and also you."}, {"source_name": "lecture2", "index": 72, "time": "00:22:08.190 --> 00:22:13.200", "speaker": "Alexander Vasserman", "text": "have to give credit to everyone you collaborated with. So."}, {"source_name": "lecture2", "index": 73, "time": "00:22:13.290 --> 00:22:17.759", "speaker": "Alexander Vasserman", "text": "as part of your submission. You have to, say who you collaborate with."}, {"source_name": "lecture2", "index": 74, "time": "00:22:18.910 --> 00:22:21.750", "speaker": "Alexander Vasserman", "text": "or in particular, if"}, {"source_name": "lecture2", "index": 75, "time": "00:22:22.020 --> 00:22:30.540", "speaker": "Alexander Vasserman", "text": "you collaborated with someone. I expect it to be mentioned. Your submission in and their submission. So"}, {"source_name": "lecture2", "index": 76, "time": "00:22:31.140 --> 00:22:31.990", "speaker": "Alexander Vasserman", "text": "all right."}, {"source_name": "lecture2", "index": 77, "time": "00:22:33.760 --> 00:22:35.030", "speaker": "Alexander Vasserman", "text": "Also"}, {"source_name": "lecture2", "index": 78, "time": "00:22:35.140 --> 00:22:40.829", "speaker": "Alexander Vasserman", "text": "content from the Internet is you're welcome to use it as much as you want. Google is your friend."}, {"source_name": "lecture2", "index": 79, "time": "00:22:40.850 --> 00:22:43.950", "speaker": "Alexander Vasserman", "text": "you know, stuck overflow as your friend"}, {"source_name": "lecture2", "index": 80, "time": "00:22:44.000 --> 00:22:46.779", "speaker": "Alexander Vasserman", "text": "all of that, except"}, {"source_name": "lecture2", "index": 81, "time": "00:22:47.310 --> 00:22:49.099", "speaker": "Alexander Vasserman", "text": "previous version of this class."}, {"source_name": "lecture2", "index": 82, "time": "00:22:49.510 --> 00:22:57.310", "speaker": "Alexander Vasserman", "text": "Do not, you know, try to reach out to people who you might know who's taken this bus last quarter?"}, {"source_name": "lecture2", "index": 83, "time": "00:22:57.820 --> 00:23:03.829", "speaker": "Alexander Vasserman", "text": "yeah, there might be some of this code from this class online already from left order."}, {"source_name": "lecture2", "index": 84, "time": "00:23:04.200 --> 00:23:09.469", "speaker": "Alexander Vasserman", "text": "the class is going to be slightly different, so i'll know when you copy and stuff."}, {"source_name": "lecture2", "index": 85, "time": "00:23:09.790 --> 00:23:15.429", "speaker": "Alexander Vasserman", "text": "and just generally, if you just copy stuff, you're not going to learn, so please do not."}, {"source_name": "lecture2", "index": 86, "time": "00:23:15.560 --> 00:23:17.930", "speaker": "Alexander Vasserman", "text": "you know, trying to"}, {"source_name": "lecture2", "index": 87, "time": "00:23:18.470 --> 00:23:20.579", "speaker": "Alexander Vasserman", "text": "do your homework that way."}, {"source_name": "lecture2", "index": 88, "time": "00:23:21.410 --> 00:23:26.370", "speaker": "Alexander Vasserman", "text": "otherwise you know any kind of collaboration. This in the"}, {"source_name": "lecture2", "index": 89, "time": "00:23:26.500 --> 00:23:38.960", "speaker": "Alexander Vasserman", "text": "you know, these other people in this course are are great. you know anything on the Internet all this reach out to me, ask questions definitely come to the office hours."}, {"source_name": "lecture2", "index": 90, "time": "00:23:38.980 --> 00:23:45.670", "speaker": "Alexander Vasserman", "text": "you know, I happy to help with the homework. I will not provide the answers, but i'll definitely help."}, {"source_name": "lecture2", "index": 91, "time": "00:23:46.470 --> 00:24:00.770", "speaker": "Alexander Vasserman", "text": "And or if there's something that you're not understanding, it's much easier to explain in one on one environment or like small group environment. Then you know, kind of spending sometimes time"}, {"source_name": "lecture2", "index": 92, "time": "00:24:01.040 --> 00:24:03.269", "speaker": "Alexander Vasserman", "text": "in the full classroom."}, {"source_name": "lecture2", "index": 93, "time": "00:24:03.610 --> 00:24:04.860", "speaker": "Alexander Vasserman", "text": "On the other hand."}, {"source_name": "lecture2", "index": 94, "time": "00:24:04.930 --> 00:24:15.630", "speaker": "Alexander Vasserman", "text": "if you don't understand something. It's likely that somebody else doesn't understand something so definitely. Raise your hand, ask questions interrupt me whenever you need to"}, {"source_name": "lecture2", "index": 95, "time": "00:24:19.030 --> 00:24:24.639", "speaker": "Alexander Vasserman", "text": "and finally grading for part of grading is final project. We'll be working"}, {"source_name": "lecture2", "index": 96, "time": "00:24:24.660 --> 00:24:30.699", "speaker": "Alexander Vasserman", "text": "together on it. for the last few weeks of the course, and it's going to be due."}, {"source_name": "lecture2", "index": 97, "time": "00:24:30.720 --> 00:24:34.009", "speaker": "Alexander Vasserman", "text": "Oh, at the end of the final week"}, {"source_name": "lecture2", "index": 98, "time": "00:24:34.200 --> 00:24:35.030", "speaker": "Alexander Vasserman", "text": "i'll be here."}, {"source_name": "lecture2", "index": 99, "time": "00:24:35.090 --> 00:24:36.510", "speaker": "Alexander Vasserman", "text": "You're going to"}, {"source_name": "lecture2", "index": 100, "time": "00:24:36.830 --> 00:24:47.699", "speaker": "Alexander Vasserman", "text": "give a proposal that as a presentation to to everyone in the class, and then you know, implement it, and do a little bit of a right out"}, {"source_name": "lecture2", "index": 101, "time": "00:24:47.780 --> 00:24:50.030", "speaker": "Alexander Vasserman", "text": "as a final project"}, {"source_name": "lecture2", "index": 102, "time": "00:24:51.500 --> 00:24:52.920", "speaker": "Alexander Vasserman", "text": "It's"}, {"source_name": "lecture2", "index": 103, "time": "00:24:53.450 --> 00:25:00.880", "speaker": "Alexander Vasserman", "text": "likely to be a new feature for the search engine, or by significant improvement of something"}, {"source_name": "lecture2", "index": 104, "time": "00:25:01.840 --> 00:25:03.719", "speaker": "Alexander Vasserman", "text": "oh, part of search engine."}, {"source_name": "lecture2", "index": 105, "time": "00:25:06.200 --> 00:25:07.250", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 106, "time": "00:25:07.960 --> 00:25:13.940", "speaker": "Alexander Vasserman", "text": "quickly going into kind of what we talked about in terms of what search engines"}, {"source_name": "lecture2", "index": 107, "time": "00:25:15.270 --> 00:25:16.090", "speaker": "Alexander Vasserman", "text": "our"}, {"source_name": "lecture2", "index": 108, "time": "00:25:16.280 --> 00:25:19.010", "speaker": "Alexander Vasserman", "text": "out there, and that basically it's"}, {"source_name": "lecture2", "index": 109, "time": "00:25:20.060 --> 00:25:23.199", "speaker": "Alexander Vasserman", "text": "currently the search engine, market web, search engine"}, {"source_name": "lecture2", "index": 110, "time": "00:25:23.220 --> 00:25:32.130", "speaker": "Alexander Vasserman", "text": "web search is dominated by Google and few other more local competitors. But there is a lot of work in the industry and"}, {"source_name": "lecture2", "index": 111, "time": "00:25:32.170 --> 00:25:33.599", "speaker": "Alexander Vasserman", "text": "more"}, {"source_name": "lecture2", "index": 112, "time": "00:25:34.610 --> 00:25:38.690", "speaker": "Alexander Vasserman", "text": "in a search that's not web. Search necessarily."}, {"source_name": "lecture2", "index": 113, "time": "00:25:38.730 --> 00:25:45.829", "speaker": "Alexander Vasserman", "text": "And so that's why this is relevant, and this is going to be continuing to be relevant. So some of the things that we talked about are"}, {"source_name": "lecture2", "index": 114, "time": "00:25:45.890 --> 00:25:58.250", "speaker": "Alexander Vasserman", "text": "vertical search. So in some particular domain and kind of even more extension, that is, some company might have their own data that they want to build search engine over or"}, {"source_name": "lecture2", "index": 115, "time": "00:25:58.320 --> 00:25:59.670", "speaker": "Alexander Vasserman", "text": "just"}, {"source_name": "lecture2", "index": 116, "time": "00:25:59.890 --> 00:26:07.269", "speaker": "Alexander Vasserman", "text": "they're all neutron that. So some of the larger companies have documentation throughout or like any other kind of"}, {"source_name": "lecture2", "index": 117, "time": "00:26:07.300 --> 00:26:08.090", "speaker": "Alexander Vasserman", "text": "oh"}, {"source_name": "lecture2", "index": 118, "time": "00:26:09.470 --> 00:26:14.390", "speaker": "Alexander Vasserman", "text": "documents that they want to be easily available. So that's often"}, {"source_name": "lecture2", "index": 119, "time": "00:26:14.600 --> 00:26:25.799", "speaker": "Alexander Vasserman", "text": "the case. And also you go to to a lot of different sites, and oftentimes you can have a site specific search. So there is a search bar on that website"}, {"source_name": "lecture2", "index": 120, "time": "00:26:25.840 --> 00:26:32.119", "speaker": "Alexander Vasserman", "text": "that enables you to search that website, the content of that website, and so on."}, {"source_name": "lecture2", "index": 121, "time": "00:26:33.350 --> 00:26:35.510", "speaker": "Alexander Vasserman", "text": "Somebody had to build that search as well."}, {"source_name": "lecture2", "index": 122, "time": "00:26:36.570 --> 00:26:38.820", "speaker": "Alexander Vasserman", "text": "So this is some of the"}, {"source_name": "lecture2", "index": 123, "time": "00:26:41.120 --> 00:26:53.449", "speaker": "Alexander Vasserman", "text": "where a lot of current work, is it's also integrating with other applications like we talked about, you know, searches integrated into the browser integrated into"}, {"source_name": "lecture2", "index": 124, "time": "00:26:53.600 --> 00:26:57.740", "speaker": "Alexander Vasserman", "text": "digital assistance and a lot of different apps."}, {"source_name": "lecture2", "index": 125, "time": "00:26:59.390 --> 00:27:12.720", "speaker": "Alexander Vasserman", "text": "and finally, another dimension is like traditional searches very much about text, mostly. and a lot of current is going beyond text."}, {"source_name": "lecture2", "index": 126, "time": "00:27:12.750 --> 00:27:21.110", "speaker": "Alexander Vasserman", "text": "And even this text kind of going beyond just keywords into more semantics"}, {"source_name": "lecture2", "index": 127, "time": "00:27:21.750 --> 00:27:27.539", "speaker": "Alexander Vasserman", "text": "so kind of really understanding what the the user is asking for, and"}, {"source_name": "lecture2", "index": 128, "time": "00:27:27.660 --> 00:27:29.620", "speaker": "Alexander Vasserman", "text": "what the documents"}, {"source_name": "lecture2", "index": 129, "time": "00:27:29.860 --> 00:27:30.700", "speaker": "Alexander Vasserman", "text": "Me?"}, {"source_name": "lecture2", "index": 130, "time": "00:27:35.230 --> 00:27:36.540", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 131, "time": "00:27:38.800 --> 00:27:41.579", "speaker": "Alexander Vasserman", "text": "we also talked a little bit about"}, {"source_name": "lecture2", "index": 132, "time": "00:27:41.830 --> 00:27:43.439", "speaker": "Alexander Vasserman", "text": "the difference between"}, {"source_name": "lecture2", "index": 133, "time": "00:27:43.480 --> 00:27:58.659", "speaker": "Alexander Vasserman", "text": "search and databases and database look up and difference between documents and the odd database records. So in one case you have, in case of databases you have kind of structured information with"}, {"source_name": "lecture2", "index": 134, "time": "00:27:58.690 --> 00:28:01.009", "speaker": "Alexander Vasserman", "text": "very well-defined semantics of what"}, {"source_name": "lecture2", "index": 135, "time": "00:28:01.090 --> 00:28:05.900", "speaker": "Alexander Vasserman", "text": "it means for the record to match equity"}, {"source_name": "lecture2", "index": 136, "time": "00:28:06.390 --> 00:28:10.059", "speaker": "Alexander Vasserman", "text": "and in search it's"}, {"source_name": "lecture2", "index": 137, "time": "00:28:10.910 --> 00:28:22.609", "speaker": "Alexander Vasserman", "text": "The information is more ambiguous, and also, the idea of match is more ambiguous, and some documents are more relevant than others. So there is kind of an ordering"}, {"source_name": "lecture2", "index": 138, "time": "00:28:22.630 --> 00:28:24.509", "speaker": "Alexander Vasserman", "text": "to the"}, {"source_name": "lecture2", "index": 139, "time": "00:28:24.570 --> 00:28:25.600", "speaker": "Alexander Vasserman", "text": "results."}, {"source_name": "lecture2", "index": 140, "time": "00:28:26.540 --> 00:28:28.139", "speaker": "Alexander Vasserman", "text": "And so"}, {"source_name": "lecture2", "index": 141, "time": "00:28:28.290 --> 00:28:36.280", "speaker": "Alexander Vasserman", "text": "in general for the search engine, we have kind of 2 goals improving relevance, which is for"}, {"source_name": "lecture2", "index": 142, "time": "00:28:36.430 --> 00:28:38.800", "speaker": "Alexander Vasserman", "text": "the quiz that the"}, {"source_name": "lecture2", "index": 143, "time": "00:28:39.000 --> 00:28:45.570", "speaker": "Alexander Vasserman", "text": "the search engine accepts. How do we provide better results? So better quality results, more relevant results"}, {"source_name": "lecture2", "index": 144, "time": "00:28:45.640 --> 00:28:51.080", "speaker": "Alexander Vasserman", "text": "and performance. How quickly those results are provided, both in terms of"}, {"source_name": "lecture2", "index": 145, "time": "00:28:51.460 --> 00:28:52.230", "speaker": "Alexander Vasserman", "text": "oh!"}, {"source_name": "lecture2", "index": 146, "time": "00:28:53.050 --> 00:28:58.800", "speaker": "Alexander Vasserman", "text": "The time span between user typing and the search and results being presented back."}, {"source_name": "lecture2", "index": 147, "time": "00:28:58.820 --> 00:29:03.630", "speaker": "Alexander Vasserman", "text": "and also in terms of how fresh results are or like"}, {"source_name": "lecture2", "index": 148, "time": "00:29:03.700 --> 00:29:05.860", "speaker": "Alexander Vasserman", "text": "how the documents"}, {"source_name": "lecture2", "index": 149, "time": "00:29:06.410 --> 00:29:07.170", "speaker": "Alexander Vasserman", "text": "come."}, {"source_name": "lecture2", "index": 150, "time": "00:29:07.450 --> 00:29:12.519", "speaker": "Alexander Vasserman", "text": "Oh, yeah, basically the how the documents make it into this search engine"}, {"source_name": "lecture2", "index": 151, "time": "00:29:12.910 --> 00:29:15.060", "speaker": "Alexander Vasserman", "text": "the second part will"}, {"source_name": "lecture2", "index": 152, "time": "00:29:15.290 --> 00:29:23.020", "speaker": "Alexander Vasserman", "text": "won't be focusing in this course as much. But definitely, we're working on relevance and performance."}, {"source_name": "lecture2", "index": 153, "time": "00:29:23.570 --> 00:29:30.319", "speaker": "Alexander Vasserman", "text": "we also talked a little bit about topical and relevance versus user relevance"}, {"source_name": "lecture2", "index": 154, "time": "00:29:30.350 --> 00:29:42.660", "speaker": "Alexander Vasserman", "text": "and kind of how? That's also a unique thing for search engines versus you know again, databases where context matters. who is the user"}, {"source_name": "lecture2", "index": 155, "time": "00:29:42.720 --> 00:29:51.800", "speaker": "Alexander Vasserman", "text": "the typing in aquarium errors other types of context, like their location their preferences. They are."}, {"source_name": "lecture2", "index": 156, "time": "00:29:53.050 --> 00:30:03.079", "speaker": "Alexander Vasserman", "text": "you know, previous behavior all of that. So topical relevance is basically the"}, {"source_name": "lecture2", "index": 157, "time": "00:30:04.120 --> 00:30:11.660", "speaker": "Alexander Vasserman", "text": "how related the query is to the topic in a particular document. So 2"}, {"source_name": "lecture2", "index": 158, "time": "00:30:11.870 --> 00:30:13.970", "speaker": "Alexander Vasserman", "text": "kind of the meaning of the query."}, {"source_name": "lecture2", "index": 159, "time": "00:30:14.100 --> 00:30:17.879", "speaker": "Alexander Vasserman", "text": "independently of independent of the user and the meeting document."}, {"source_name": "lecture2", "index": 160, "time": "00:30:18.050 --> 00:30:27.980", "speaker": "Alexander Vasserman", "text": "And user relevance is how that is adjusted based on characteristics of the user and the user context"}, {"source_name": "lecture2", "index": 161, "time": "00:30:32.460 --> 00:30:33.880", "speaker": "Alexander Vasserman", "text": "So some"}, {"source_name": "lecture2", "index": 162, "time": "00:30:34.330 --> 00:30:37.479", "speaker": "Alexander Vasserman", "text": "of the scope of this course a little bit more so."}, {"source_name": "lecture2", "index": 163, "time": "00:30:37.630 --> 00:30:38.590", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 164, "time": "00:30:39.110 --> 00:30:45.930", "speaker": "Alexander Vasserman", "text": "basically, like, I said, we're going to be building from scratch a functioning but simplified search engine."}, {"source_name": "lecture2", "index": 165, "time": "00:30:46.980 --> 00:30:47.890", "speaker": "Alexander Vasserman", "text": "It's"}, {"source_name": "lecture2", "index": 166, "time": "00:30:48.150 --> 00:30:49.080", "speaker": "Alexander Vasserman", "text": "just"}, {"source_name": "lecture2", "index": 167, "time": "00:30:49.170 --> 00:30:52.209", "speaker": "Alexander Vasserman", "text": "a back end. So basically just the logic"}, {"source_name": "lecture2", "index": 168, "time": "00:30:52.290 --> 00:30:58.189", "speaker": "Alexander Vasserman", "text": "that is not good, like web, interface or apps, or anything like that. So it's text in text out"}, {"source_name": "lecture2", "index": 169, "time": "00:31:00.090 --> 00:31:01.640", "speaker": "Alexander Vasserman", "text": "It's"}, {"source_name": "lecture2", "index": 170, "time": "00:31:01.780 --> 00:31:04.259", "speaker": "Alexander Vasserman", "text": "they're not going to be using"}, {"source_name": "lecture2", "index": 171, "time": "00:31:04.320 --> 00:31:08.989", "speaker": "Alexander Vasserman", "text": "much outside of standard python libraries. So that's kind of what I mean by"}, {"source_name": "lecture2", "index": 172, "time": "00:31:09.010 --> 00:31:16.859", "speaker": "Alexander Vasserman", "text": "from scratch. There is certainly tools available out there, and the implementation of associations that are available out there. That."}, {"source_name": "lecture2", "index": 173, "time": "00:31:16.890 --> 00:31:25.299", "speaker": "Alexander Vasserman", "text": "can I? But in order for us to understand how things work. I feel like doing it from scratch is"}, {"source_name": "lecture2", "index": 174, "time": "00:31:26.400 --> 00:31:27.370", "speaker": "Alexander Vasserman", "text": "important."}, {"source_name": "lecture2", "index": 175, "time": "00:31:27.680 --> 00:31:28.900", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture2", "index": 176, "time": "00:31:28.990 --> 00:31:36.819", "speaker": "Alexander Vasserman", "text": "also kind of the course we will be starting this very name implementation that we are going to get to pretty quickly. And then the"}, {"source_name": "lecture2", "index": 177, "time": "00:31:36.900 --> 00:31:40.390", "speaker": "Alexander Vasserman", "text": "improving the relevance and performance throughout the course."}, {"source_name": "lecture2", "index": 178, "time": "00:31:41.050 --> 00:31:43.079", "speaker": "Alexander Vasserman", "text": "Ralph, you have a question."}, {"source_name": "lecture2", "index": 179, "time": "00:31:43.550 --> 00:31:49.060", "speaker": "Ralph", "text": "yes, sir, what do you mean by like back end? And I also hear the term front end"}, {"source_name": "lecture2", "index": 180, "time": "00:31:49.380 --> 00:31:55.349", "speaker": "Alexander Vasserman", "text": "perfect question. And basically so definitely something that."}, {"source_name": "lecture2", "index": 181, "time": "00:31:56.680 --> 00:32:02.540", "speaker": "Alexander Vasserman", "text": "you know, needs more explanation, and so kind of zooming into that. so"}, {"source_name": "lecture2", "index": 182, "time": "00:32:02.960 --> 00:32:06.819", "speaker": "Alexander Vasserman", "text": "most of the time, whenever you're building an application or"}, {"source_name": "lecture2", "index": 183, "time": "00:32:07.200 --> 00:32:12.090", "speaker": "Alexander Vasserman", "text": "anything like that. There is some kind of a service that provides all the logic."}, {"source_name": "lecture2", "index": 184, "time": "00:32:12.320 --> 00:32:14.320", "speaker": "Alexander Vasserman", "text": "And then there are"}, {"source_name": "lecture2", "index": 185, "time": "00:32:14.420 --> 00:32:16.240", "speaker": "Alexander Vasserman", "text": "maybe a"}, {"source_name": "lecture2", "index": 186, "time": "00:32:16.350 --> 00:32:17.120", "speaker": "Alexander Vasserman", "text": "you know."}, {"source_name": "lecture2", "index": 187, "time": "00:32:17.160 --> 00:32:26.610", "speaker": "Alexander Vasserman", "text": "a phone app that communicates with that back end server. So this is just user interface, and that interface will be different."}, {"source_name": "lecture2", "index": 188, "time": "00:32:26.720 --> 00:32:28.370", "speaker": "Alexander Vasserman", "text": "For let's say."}, {"source_name": "lecture2", "index": 189, "time": "00:32:28.390 --> 00:32:34.110", "speaker": "Alexander Vasserman", "text": "apple phone, iphone versus android. Phone. It's going to be completely defective. Limitations"}, {"source_name": "lecture2", "index": 190, "time": "00:32:34.140 --> 00:32:43.439", "speaker": "Alexander Vasserman", "text": "versus maybe you have a nap on on the website. So it's going to be a different of limitation for that."}, {"source_name": "lecture2", "index": 191, "time": "00:32:43.490 --> 00:32:50.259", "speaker": "Alexander Vasserman", "text": "or maybe it's an you know, on the computer, on windows, whatever on the on the Mac"}, {"source_name": "lecture2", "index": 192, "time": "00:32:50.290 --> 00:33:07.240", "speaker": "Alexander Vasserman", "text": "Again, each one will have separate implementation, because that implementation. That is the from that limitation. So the bottom part kind of is of a front of the implementation that controls essentially the Ui and user interruptions that are device, specific"}, {"source_name": "lecture2", "index": 193, "time": "00:33:07.430 --> 00:33:09.520", "speaker": "Alexander Vasserman", "text": "or or environment specific."}, {"source_name": "lecture2", "index": 194, "time": "00:33:09.920 --> 00:33:14.290", "speaker": "Alexander Vasserman", "text": "But you don't want to implement everything"}, {"source_name": "lecture2", "index": 195, "time": "00:33:14.610 --> 00:33:17.779", "speaker": "Alexander Vasserman", "text": "for all these different configurations"}, {"source_name": "lecture2", "index": 196, "time": "00:33:17.850 --> 00:33:23.550", "speaker": "Alexander Vasserman", "text": "so as much as possible. All the logic is concentrated in it"}, {"source_name": "lecture2", "index": 197, "time": "00:33:23.690 --> 00:33:28.590", "speaker": "Alexander Vasserman", "text": "back end service. So that's a single implementation that"}, {"source_name": "lecture2", "index": 198, "time": "00:33:28.690 --> 00:33:31.260", "speaker": "Alexander Vasserman", "text": "all the different devices talk to you."}, {"source_name": "lecture2", "index": 199, "time": "00:33:31.950 --> 00:33:39.839", "speaker": "Alexander Vasserman", "text": "And so that's the the back end. Server is where all the logic is, and that's for specifically for a search engine."}, {"source_name": "lecture2", "index": 200, "time": "00:33:39.930 --> 00:33:45.630", "speaker": "Alexander Vasserman", "text": "that's something that would take a query and output the results."}, {"source_name": "lecture2", "index": 201, "time": "00:33:45.960 --> 00:33:52.999", "speaker": "Alexander Vasserman", "text": "Now the results will be out. Output it in some, you know text form. But then you know, when that comes"}, {"source_name": "lecture2", "index": 202, "time": "00:33:53.470 --> 00:33:54.330", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture2", "index": 203, "time": "00:33:54.430 --> 00:34:02.659", "speaker": "Alexander Vasserman", "text": "to a particular device, then you know that the layout of the search results and all of that is happening on the device."}, {"source_name": "lecture2", "index": 204, "time": "00:34:03.100 --> 00:34:04.160", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 205, "time": "00:34:04.510 --> 00:34:05.300", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture2", "index": 206, "time": "00:34:05.330 --> 00:34:07.679", "speaker": "Alexander Vasserman", "text": "usually the"}, {"source_name": "lecture2", "index": 207, "time": "00:34:08.340 --> 00:34:13.719", "speaker": "Alexander Vasserman", "text": "communication between front and and back end. It's happening through Http."}, {"source_name": "lecture2", "index": 208, "time": "00:34:14.020 --> 00:34:18.079", "speaker": "Alexander Vasserman", "text": "Many of you may have seen it in the URL addresses."}, {"source_name": "lecture2", "index": 209, "time": "00:34:18.110 --> 00:34:21.440", "speaker": "Alexander Vasserman", "text": "Most of them start is http or https."}, {"source_name": "lecture2", "index": 210, "time": "00:34:21.610 --> 00:34:26.679", "speaker": "Alexander Vasserman", "text": "so that's just the that protocol. That's all of that traffic."}, {"source_name": "lecture2", "index": 211, "time": "00:34:27.710 --> 00:34:29.240", "speaker": "Alexander Vasserman", "text": "or most of the"}, {"source_name": "lecture2", "index": 212, "time": "00:34:29.280 --> 00:34:30.199", "speaker": "Alexander Vasserman", "text": "that topic."}, {"source_name": "lecture2", "index": 213, "time": "00:34:30.239 --> 00:34:32.680", "speaker": "Alexander Vasserman", "text": "God he saw"}, {"source_name": "lecture2", "index": 214, "time": "00:34:33.010 --> 00:34:40.370", "speaker": "Alexander Vasserman", "text": "implemented. In Essentially so it's just the protocol for communication between computers on the Internet. But it's also something that"}, {"source_name": "lecture2", "index": 215, "time": "00:34:40.639 --> 00:34:42.979", "speaker": "Alexander Vasserman", "text": "most often used to communicate"}, {"source_name": "lecture2", "index": 216, "time": "00:34:43.020 --> 00:34:45.600", "speaker": "Alexander Vasserman", "text": "between front and the back end."}, {"source_name": "lecture2", "index": 217, "time": "00:34:46.699 --> 00:34:51.400", "speaker": "Alexander Vasserman", "text": "so basically you're just defining a protocol how"}, {"source_name": "lecture2", "index": 218, "time": "00:34:51.770 --> 00:34:53.009", "speaker": "Alexander Vasserman", "text": "to communicate"}, {"source_name": "lecture2", "index": 219, "time": "00:34:53.040 --> 00:34:56.979", "speaker": "Alexander Vasserman", "text": "these, your back end, and"}, {"source_name": "lecture2", "index": 220, "time": "00:34:58.000 --> 00:34:58.859", "speaker": "Alexander Vasserman", "text": "then"}, {"source_name": "lecture2", "index": 221, "time": "00:34:58.880 --> 00:35:03.890", "speaker": "Alexander Vasserman", "text": "the back end implementation is just how to take greedies"}, {"source_name": "lecture2", "index": 222, "time": "00:35:03.940 --> 00:35:05.830", "speaker": "Alexander Vasserman", "text": "according to that protocol and"}, {"source_name": "lecture2", "index": 223, "time": "00:35:05.860 --> 00:35:07.479", "speaker": "Alexander Vasserman", "text": "incremental logic."}, {"source_name": "lecture2", "index": 224, "time": "00:35:07.830 --> 00:35:08.799", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 225, "time": "00:35:09.610 --> 00:35:24.710", "speaker": "Alexander Vasserman", "text": "it might be a little bit surface like I kind of there is definitely a lot more to talk about here, and I i'm sure this is something that you'll see a lot of in your other classes. so but kind of"}, {"source_name": "lecture2", "index": 226, "time": "00:35:24.800 --> 00:35:31.239", "speaker": "Alexander Vasserman", "text": "the the main point here is that what we're focused going to be focused on is"}, {"source_name": "lecture2", "index": 227, "time": "00:35:31.360 --> 00:35:49.990", "speaker": "Alexander Vasserman", "text": "not even back in service, but kind of just the logic of the back end. So they're going to have just the little, you know program that runs on our local machine, and we type in the query and 8 outputs you know, some text for for the results."}, {"source_name": "lecture2", "index": 228, "time": "00:35:50.530 --> 00:35:54.509", "speaker": "Alexander Vasserman", "text": "So it's kind of that's what I mean by text and text out that."}, {"source_name": "lecture2", "index": 229, "time": "00:35:54.530 --> 00:35:56.230", "speaker": "Alexander Vasserman", "text": "Oh, you know there is."}, {"source_name": "lecture2", "index": 230, "time": "00:35:56.320 --> 00:35:57.229", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 231, "time": "00:35:58.860 --> 00:36:07.539", "speaker": "Alexander Vasserman", "text": "yeah. So the the query is going to be text, and the output is going to be just text. Not the do I any kind of which form"}, {"source_name": "lecture2", "index": 232, "time": "00:36:15.460 --> 00:36:16.080", "speaker": "Alexander Vasserman", "text": "Yep."}, {"source_name": "lecture2", "index": 233, "time": "00:36:17.410 --> 00:36:19.349", "speaker": "Alexander Vasserman", "text": "thank you, Hannah. For"}, {"source_name": "lecture2", "index": 234, "time": "00:36:20.620 --> 00:36:21.640", "speaker": "Alexander Vasserman", "text": "basically"}, {"source_name": "lecture2", "index": 235, "time": "00:36:21.890 --> 00:36:23.890", "speaker": "Alexander Vasserman", "text": "giving another"}, {"source_name": "lecture2", "index": 236, "time": "00:36:24.350 --> 00:36:26.419", "speaker": "Alexander Vasserman", "text": "explanation for this. This is very good."}, {"source_name": "lecture2", "index": 237, "time": "00:36:31.430 --> 00:36:32.319", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture2", "index": 238, "time": "00:36:32.570 --> 00:36:34.370", "speaker": "Alexander Vasserman", "text": "So hopefully."}, {"source_name": "lecture2", "index": 239, "time": "00:36:36.260 --> 00:36:40.760", "speaker": "Alexander Vasserman", "text": "This is kind of a review that answers some of your questions."}, {"source_name": "lecture2", "index": 240, "time": "00:36:41.070 --> 00:36:48.079", "speaker": "Alexander Vasserman", "text": "do you have any other questions about anything that we talked about last time, or anything the tape"}, {"source_name": "lecture2", "index": 241, "time": "00:36:48.170 --> 00:36:49.750", "speaker": "Alexander Vasserman", "text": "review today."}, {"source_name": "lecture2", "index": 242, "time": "00:36:55.080 --> 00:36:56.360", "speaker": "Alexander Vasserman", "text": "There must be something."}, {"source_name": "lecture2", "index": 243, "time": "00:36:56.840 --> 00:36:59.059", "speaker": "Alexander Vasserman", "text": "Come on, People asking questions"}, {"source_name": "lecture2", "index": 244, "time": "00:36:59.320 --> 00:37:01.979", "speaker": "Alexander Vasserman", "text": "important. Come up with a question."}, {"source_name": "lecture2", "index": 245, "time": "00:37:03.340 --> 00:37:04.220", "speaker": "Alexander Vasserman", "text": "5"}, {"source_name": "lecture2", "index": 246, "time": "00:37:05.280 --> 00:37:14.460", "speaker": "Alexander Vasserman", "text": "you mentioned the word cue, Curie a couple of times. Could you explain what that is? Again."}, {"source_name": "lecture2", "index": 247, "time": "00:37:14.600 --> 00:37:19.000", "speaker": "Alexander Vasserman", "text": "basically the text that you type into the"}, {"source_name": "lecture2", "index": 248, "time": "00:37:19.660 --> 00:37:23.420", "speaker": "Alexander Vasserman", "text": "input field of the search engine? Right? So"}, {"source_name": "lecture2", "index": 249, "time": "00:37:23.710 --> 00:37:27.579", "speaker": "Alexander Vasserman", "text": "that's kind of the the technical term. Right? So,"}, {"source_name": "lecture2", "index": 250, "time": "00:37:27.700 --> 00:37:36.389", "speaker": "Alexander Vasserman", "text": "query is essentially the request that you send you to the search for the text. So if you're searching for"}, {"source_name": "lecture2", "index": 251, "time": "00:37:37.770 --> 00:37:40.169", "speaker": "Alexander Vasserman", "text": "I you know new shoes."}, {"source_name": "lecture2", "index": 252, "time": "00:37:40.320 --> 00:37:47.390", "speaker": "Alexander Vasserman", "text": "You might be just typing in whatever new shoes into search engine, you know shoes is the way"}, {"source_name": "lecture2", "index": 253, "time": "00:37:48.050 --> 00:37:52.109", "speaker": "Alexander Vasserman", "text": "or whatever it is you're searching for."}, {"source_name": "lecture2", "index": 254, "time": "00:37:52.500 --> 00:37:58.139", "speaker": "Alexander Vasserman", "text": "maybe you want to get some information on back-end service right? So you Google back end service."}, {"source_name": "lecture2", "index": 255, "time": "00:37:58.160 --> 00:38:02.530", "speaker": "Alexander Vasserman", "text": "and that that back end service is the query."}, {"source_name": "lecture2", "index": 256, "time": "00:38:03.360 --> 00:38:04.700", "speaker": "Alexander Vasserman", "text": "In"}, {"source_name": "lecture2", "index": 257, "time": "00:38:05.080 --> 00:38:13.469", "speaker": "Alexander Vasserman", "text": "some cases like we've talked last time. The query might be not text like, you know, you can search by picture. You can search by"}, {"source_name": "lecture2", "index": 258, "time": "00:38:13.530 --> 00:38:17.199", "speaker": "Alexander Vasserman", "text": "something else. But in our context it's always going to be text."}, {"source_name": "lecture2", "index": 259, "time": "00:38:19.270 --> 00:38:20.460", "speaker": "Alexander Vasserman", "text": "Does that make sense?"}, {"source_name": "lecture2", "index": 260, "time": "00:38:21.870 --> 00:38:22.929", "speaker": "Fahad Khan", "text": "Yes, thank you."}, {"source_name": "lecture2", "index": 261, "time": "00:38:23.020 --> 00:38:24.589", "speaker": "Alexander Vasserman", "text": "Yeah, thank you for the question."}, {"source_name": "lecture2", "index": 262, "time": "00:38:28.280 --> 00:38:29.229", "speaker": "Alexander Vasserman", "text": "All right."}, {"source_name": "lecture2", "index": 263, "time": "00:38:29.440 --> 00:38:32.360", "speaker": "Alexander Vasserman", "text": "So if this is"}, {"source_name": "lecture2", "index": 264, "time": "00:38:33.950 --> 00:38:35.200", "speaker": "Alexander Vasserman", "text": "all clear."}, {"source_name": "lecture2", "index": 265, "time": "00:38:35.570 --> 00:38:37.270", "speaker": "Alexander Vasserman", "text": "then let's"}, {"source_name": "lecture2", "index": 266, "time": "00:38:37.400 --> 00:38:39.000", "speaker": "Alexander Vasserman", "text": "shift. Here's a little bit."}, {"source_name": "lecture2", "index": 267, "time": "00:38:39.550 --> 00:38:41.009", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture2", "index": 268, "time": "00:38:41.030 --> 00:38:43.230", "speaker": "Alexander Vasserman", "text": "go to"}, {"source_name": "lecture2", "index": 269, "time": "00:38:43.690 --> 00:38:45.950", "speaker": "Alexander Vasserman", "text": "and do some python review."}, {"source_name": "lecture2", "index": 270, "time": "00:38:47.440 --> 00:38:48.540", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 271, "time": "00:38:49.170 --> 00:38:50.709", "speaker": "Alexander Vasserman", "text": "one of the things that"}, {"source_name": "lecture2", "index": 272, "time": "00:38:51.770 --> 00:38:57.290", "speaker": "Alexander Vasserman", "text": "I don't know if you've seen before so Python is kind of"}, {"source_name": "lecture2", "index": 273, "time": "00:38:57.620 --> 00:39:05.920", "speaker": "Alexander Vasserman", "text": "nice in the sense that you can write code iteratively, essentially and interactively."}, {"source_name": "lecture2", "index": 274, "time": "00:39:06.480 --> 00:39:15.060", "speaker": "Alexander Vasserman", "text": "And so i'm sure you've you've seen that before doing things in in the interpreter. But,"}, {"source_name": "lecture2", "index": 275, "time": "00:39:15.930 --> 00:39:16.779", "speaker": "Alexander Vasserman", "text": "what"}, {"source_name": "lecture2", "index": 276, "time": "00:39:17.290 --> 00:39:26.369", "speaker": "Alexander Vasserman", "text": "you might have not seen before is having notebooks. So no books been popular kind of way of"}, {"source_name": "lecture2", "index": 277, "time": "00:39:26.830 --> 00:39:37.380", "speaker": "Alexander Vasserman", "text": "in combining python code and the output interactive output, and some notes, or the visualizations or things like that."}, {"source_name": "lecture2", "index": 278, "time": "00:39:37.580 --> 00:39:42.379", "speaker": "Alexander Vasserman", "text": "So in this class we are going to use this"}, {"source_name": "lecture2", "index": 279, "time": "00:39:42.520 --> 00:39:44.209", "speaker": "Alexander Vasserman", "text": "call up"}, {"source_name": "lecture2", "index": 280, "time": "00:39:44.500 --> 00:39:46.830", "speaker": "Alexander Vasserman", "text": "which is a"}, {"source_name": "lecture2", "index": 281, "time": "00:39:48.080 --> 00:39:49.109", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 282, "time": "00:39:49.800 --> 00:39:50.410", "speaker": "Alexander Vasserman", "text": "let's see"}, {"source_name": "lecture2", "index": 283, "time": "00:39:51.370 --> 00:39:53.609", "speaker": "Alexander Vasserman", "text": "a service that's"}, {"source_name": "lecture2", "index": 284, "time": "00:39:53.730 --> 00:39:59.190", "speaker": "Alexander Vasserman", "text": "run by Google, that basically where you can run"}, {"source_name": "lecture2", "index": 285, "time": "00:39:59.380 --> 00:40:01.229", "speaker": "Alexander Vasserman", "text": "awesome quote"}, {"source_name": "lecture2", "index": 286, "time": "00:40:01.320 --> 00:40:06.570", "speaker": "Alexander Vasserman", "text": "on a a remote service provided by Google and"}, {"source_name": "lecture2", "index": 287, "time": "00:40:07.280 --> 00:40:08.149", "speaker": "Alexander Vasserman", "text": "yet"}, {"source_name": "lecture2", "index": 288, "time": "00:40:08.300 --> 00:40:10.099", "speaker": "Alexander Vasserman", "text": "some output"}, {"source_name": "lecture2", "index": 289, "time": "00:40:10.220 --> 00:40:19.369", "speaker": "Alexander Vasserman", "text": "it Also, it incorporates some of the kind of text and other things. So it's"}, {"source_name": "lecture2", "index": 290, "time": "00:40:19.390 --> 00:40:24.789", "speaker": "Alexander Vasserman", "text": "a good tool for playing around with things and for presenting things."}, {"source_name": "lecture2", "index": 291, "time": "00:40:25.610 --> 00:40:27.169", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture2", "index": 292, "time": "00:40:27.630 --> 00:40:28.550", "speaker": "Alexander Vasserman", "text": "I know"}, {"source_name": "lecture2", "index": 293, "time": "00:40:28.570 --> 00:40:30.009", "speaker": "Alexander Vasserman", "text": "the text."}, {"source_name": "lecture2", "index": 294, "time": "00:40:30.390 --> 00:40:32.049", "speaker": "Alexander Vasserman", "text": "He's"}, {"source_name": "lecture2", "index": 295, "time": "00:40:35.080 --> 00:40:39.590", "speaker": "Alexander Vasserman", "text": "is not done in markup language. If you are"}, {"source_name": "lecture2", "index": 296, "time": "00:40:39.780 --> 00:40:44.699", "speaker": "Alexander Vasserman", "text": "Kevin. I've seen markup language before. This is, you know, basically"}, {"source_name": "lecture2", "index": 297, "time": "00:40:44.760 --> 00:40:45.899", "speaker": "Alexander Vasserman", "text": "great new flake."}, {"source_name": "lecture2", "index": 298, "time": "00:40:45.940 --> 00:40:54.290", "speaker": "Alexander Vasserman", "text": "very simplistic each time. Well, if that makes any sense. But basically there are just a few special symbols that"}, {"source_name": "lecture2", "index": 299, "time": "00:40:54.430 --> 00:40:57.859", "speaker": "Alexander Vasserman", "text": "you can use to format"}, {"source_name": "lecture2", "index": 300, "time": "00:40:57.970 --> 00:40:59.259", "speaker": "Alexander Vasserman", "text": "the text."}, {"source_name": "lecture2", "index": 301, "time": "00:40:59.580 --> 00:41:01.249", "speaker": "Alexander Vasserman", "text": "So, for example."}, {"source_name": "lecture2", "index": 302, "time": "00:41:01.650 --> 00:41:02.529", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture2", "index": 303, "time": "00:41:04.400 --> 00:41:09.810", "speaker": "Alexander Vasserman", "text": "the the pound is or this symbol which I will compound."}, {"source_name": "lecture2", "index": 304, "time": "00:41:11.020 --> 00:41:13.210", "speaker": "Alexander Vasserman", "text": "he's all for headings."}, {"source_name": "lecture2", "index": 305, "time": "00:41:14.010 --> 00:41:16.750", "speaker": "Alexander Vasserman", "text": "So if I"}, {"source_name": "lecture2", "index": 306, "time": "00:41:17.510 --> 00:41:24.790", "speaker": "Alexander Vasserman", "text": "execute this part, and I did that by just heating shift enter on my computer."}, {"source_name": "lecture2", "index": 307, "time": "00:41:24.960 --> 00:41:26.349", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture2", "index": 308, "time": "00:41:26.640 --> 00:41:29.400", "speaker": "Alexander Vasserman", "text": "there are the other ways as well. But"}, {"source_name": "lecture2", "index": 309, "time": "00:41:29.420 --> 00:41:33.380", "speaker": "Alexander Vasserman", "text": "basically it's presented as a header here."}, {"source_name": "lecture2", "index": 310, "time": "00:41:36.120 --> 00:41:37.129", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 311, "time": "00:41:40.210 --> 00:41:45.200", "speaker": "Alexander Vasserman", "text": "let me actually introduce another section. So we'll"}, {"source_name": "lecture2", "index": 312, "time": "00:41:45.230 --> 00:41:46.839", "speaker": "Alexander Vasserman", "text": "start"}, {"source_name": "lecture2", "index": 313, "time": "00:41:47.070 --> 00:41:48.890", "speaker": "Alexander Vasserman", "text": "today is interviewing"}, {"source_name": "lecture2", "index": 314, "time": "00:41:48.960 --> 00:41:50.939", "speaker": "Alexander Vasserman", "text": "containers."}, {"source_name": "lecture2", "index": 315, "time": "00:41:53.470 --> 00:41:54.479", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture2", "index": 316, "time": "00:41:54.900 --> 00:41:56.200", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture2", "index": 317, "time": "00:41:56.700 --> 00:41:58.130", "speaker": "Alexander Vasserman", "text": "in particular."}, {"source_name": "lecture2", "index": 318, "time": "00:41:58.640 --> 00:41:59.740", "speaker": "Alexander Vasserman", "text": "let's"}, {"source_name": "lecture2", "index": 319, "time": "00:42:00.200 --> 00:42:02.000", "speaker": "Alexander Vasserman", "text": "start."}, {"source_name": "lecture2", "index": 320, "time": "00:42:02.210 --> 00:42:03.060", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 321, "time": "00:42:05.280 --> 00:42:06.310", "speaker": "Alexander Vasserman", "text": "at least"}, {"source_name": "lecture2", "index": 322, "time": "00:42:06.910 --> 00:42:13.340", "speaker": "Alexander Vasserman", "text": "so hopefully. most of you have seen lists something that looks like."}, {"source_name": "lecture2", "index": 323, "time": "00:42:13.380 --> 00:42:14.210", "speaker": "Alexander Vasserman", "text": "you know."}, {"source_name": "lecture2", "index": 324, "time": "00:42:14.530 --> 00:42:16.619", "speaker": "Alexander Vasserman", "text": "whatever a"}, {"source_name": "lecture2", "index": 325, "time": "00:42:16.690 --> 00:42:17.310", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture2", "index": 326, "time": "00:42:17.890 --> 00:42:18.709", "speaker": "Alexander Vasserman", "text": "All right."}, {"source_name": "lecture2", "index": 327, "time": "00:42:19.100 --> 00:42:26.530", "speaker": "Alexander Vasserman", "text": "see? So in python just putting stuff in the square brackets creates a list"}, {"source_name": "lecture2", "index": 328, "time": "00:42:28.700 --> 00:42:34.290", "speaker": "Alexander Vasserman", "text": "so and as you can see, once I execute here the output."}, {"source_name": "lecture2", "index": 329, "time": "00:42:34.320 --> 00:42:37.429", "speaker": "Alexander Vasserman", "text": "or basically the output of last command is"}, {"source_name": "lecture2", "index": 330, "time": "00:42:37.980 --> 00:42:39.870", "speaker": "Alexander Vasserman", "text": "provided here in a separate"}, {"source_name": "lecture2", "index": 331, "time": "00:42:40.100 --> 00:42:40.859", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 332, "time": "00:42:42.330 --> 00:42:43.489", "speaker": "Alexander Vasserman", "text": "oh, it here"}, {"source_name": "lecture2", "index": 333, "time": "00:42:44.050 --> 00:42:51.810", "speaker": "Alexander Vasserman", "text": "so obviously you can assign least to variables. So again that same"}, {"source_name": "lecture2", "index": 334, "time": "00:42:51.940 --> 00:42:54.730", "speaker": "Alexander Vasserman", "text": "let's say this: ABC. You can"}, {"source_name": "lecture2", "index": 335, "time": "00:42:58.480 --> 00:43:00.670", "speaker": "Alexander Vasserman", "text": "set whatever. Let's pull it"}, {"source_name": "lecture2", "index": 336, "time": "00:43:01.850 --> 00:43:04.509", "speaker": "Alexander Vasserman", "text": "this out. It goes to that. And"}, {"source_name": "lecture2", "index": 337, "time": "00:43:04.580 --> 00:43:06.189", "speaker": "Alexander Vasserman", "text": "no, it's right."}, {"source_name": "lecture2", "index": 338, "time": "00:43:06.990 --> 00:43:09.769", "speaker": "Alexander Vasserman", "text": "Hotel there that that's what gets output"}, {"source_name": "lecture2", "index": 339, "time": "00:43:10.810 --> 00:43:12.459", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture2", "index": 340, "time": "00:43:12.560 --> 00:43:14.799", "speaker": "Alexander Vasserman", "text": "list, of course, have"}, {"source_name": "lecture2", "index": 341, "time": "00:43:14.820 --> 00:43:17.709", "speaker": "Alexander Vasserman", "text": "direct access. So I can say."}, {"source_name": "lecture2", "index": 342, "time": "00:43:20.040 --> 00:43:23.390", "speaker": "Alexander Vasserman", "text": "oh, one, basically what's the"}, {"source_name": "lecture2", "index": 343, "time": "00:43:24.090 --> 00:43:28.849", "speaker": "Alexander Vasserman", "text": "about second element in the Middle East? So that's direct access."}, {"source_name": "lecture2", "index": 344, "time": "00:43:28.950 --> 00:43:30.349", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture2", "index": 345, "time": "00:43:33.330 --> 00:43:34.509", "speaker": "Alexander Vasserman", "text": "also"}, {"source_name": "lecture2", "index": 346, "time": "00:43:35.320 --> 00:43:39.539", "speaker": "Alexander Vasserman", "text": "you can modify the list by saying, Well, let's say"}, {"source_name": "lecture2", "index": 347, "time": "00:43:39.960 --> 00:43:41.600", "speaker": "Alexander Vasserman", "text": "I love 0"}, {"source_name": "lecture2", "index": 348, "time": "00:43:42.790 --> 00:43:44.639", "speaker": "Alexander Vasserman", "text": "assign in different string to it."}, {"source_name": "lecture2", "index": 349, "time": "00:43:46.460 --> 00:43:51.550", "speaker": "Alexander Vasserman", "text": "and so if now, the printel l is is different."}, {"source_name": "lecture2", "index": 350, "time": "00:43:54.000 --> 00:43:55.020", "speaker": "Alexander Vasserman", "text": "a"}, {"source_name": "lecture2", "index": 351, "time": "00:43:55.670 --> 00:43:59.369", "speaker": "Alexander Vasserman", "text": "interesting thing here is that if I"}, {"source_name": "lecture2", "index": 352, "time": "00:43:59.740 --> 00:44:01.049", "speaker": "Alexander Vasserman", "text": "say"}, {"source_name": "lecture2", "index": 353, "time": "00:44:02.110 --> 00:44:04.369", "speaker": "Alexander Vasserman", "text": "l 2 is equal to L"}, {"source_name": "lecture2", "index": 354, "time": "00:44:04.830 --> 00:44:06.160", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture2", "index": 355, "time": "00:44:09.580 --> 00:44:15.179", "speaker": "Alexander Vasserman", "text": "display L. Of course it's the same. and now, if I like, modify"}, {"source_name": "lecture2", "index": 356, "time": "00:44:15.430 --> 00:44:16.689", "speaker": "Alexander Vasserman", "text": "L."}, {"source_name": "lecture2", "index": 357, "time": "00:44:17.550 --> 00:44:18.969", "speaker": "Alexander Vasserman", "text": "So let's say"}, {"source_name": "lecture2", "index": 358, "time": "00:44:22.830 --> 00:44:25.709", "speaker": "Alexander Vasserman", "text": "L 2 is also"}, {"source_name": "lecture2", "index": 359, "time": "00:44:25.990 --> 00:44:27.459", "speaker": "Alexander Vasserman", "text": "modified."}, {"source_name": "lecture2", "index": 360, "time": "00:44:28.250 --> 00:44:30.049", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 361, "time": "00:44:30.680 --> 00:44:43.090", "speaker": "Alexander Vasserman", "text": "basically the when you're assigning variables like this. It's what all what's referred to is assigning by reference or basically all variables in python."}, {"source_name": "lecture2", "index": 362, "time": "00:44:43.110 --> 00:44:43.859", "speaker": "Alexander Vasserman", "text": "our"}, {"source_name": "lecture2", "index": 363, "time": "00:44:43.990 --> 00:44:54.680", "speaker": "Alexander Vasserman", "text": "essentially references to things rather than things themselves. So it would be variable contains kind of a reference to this structure."}, {"source_name": "lecture2", "index": 364, "time": "00:44:56.550 --> 00:45:00.370", "speaker": "Alexander Vasserman", "text": "then there are some basic functions"}, {"source_name": "lecture2", "index": 365, "time": "00:45:00.670 --> 00:45:02.399", "speaker": "Alexander Vasserman", "text": "like."}, {"source_name": "lecture2", "index": 366, "time": "00:45:02.610 --> 00:45:03.470", "speaker": "Alexander Vasserman", "text": "you know."}, {"source_name": "lecture2", "index": 367, "time": "00:45:03.690 --> 00:45:04.649", "speaker": "Alexander Vasserman", "text": "you can"}, {"source_name": "lecture2", "index": 368, "time": "00:45:06.160 --> 00:45:07.590", "speaker": "Alexander Vasserman", "text": "offense something"}, {"source_name": "lecture2", "index": 369, "time": "00:45:08.500 --> 00:45:10.090", "speaker": "Alexander Vasserman", "text": "right? So"}, {"source_name": "lecture2", "index": 370, "time": "00:45:10.390 --> 00:45:11.020", "speaker": "Alexander Vasserman", "text": "Yup."}, {"source_name": "lecture2", "index": 371, "time": "00:45:11.580 --> 00:45:12.189", "speaker": "Alexander Vasserman", "text": "Sorry."}, {"source_name": "lecture2", "index": 372, "time": "00:45:17.960 --> 00:45:19.179", "speaker": "Alexander Vasserman", "text": "you know. So"}, {"source_name": "lecture2", "index": 373, "time": "00:45:19.590 --> 00:45:22.129", "speaker": "Alexander Vasserman", "text": "yeah, you can also"}, {"source_name": "lecture2", "index": 374, "time": "00:45:23.750 --> 00:45:26.920", "speaker": "Alexander Vasserman", "text": "extend by a"}, {"source_name": "lecture2", "index": 375, "time": "00:45:27.100 --> 00:45:28.069", "speaker": "Alexander Vasserman", "text": "least"}, {"source_name": "lecture2", "index": 376, "time": "00:45:28.260 --> 00:45:30.029", "speaker": "Alexander Vasserman", "text": "another list. So."}, {"source_name": "lecture2", "index": 377, "time": "00:45:30.120 --> 00:45:31.990", "speaker": "Alexander Vasserman", "text": "let's say we"}, {"source_name": "lecture2", "index": 378, "time": "00:45:32.220 --> 00:45:33.350", "speaker": "Alexander Vasserman", "text": "stand it."}, {"source_name": "lecture2", "index": 379, "time": "00:45:36.120 --> 00:45:43.419", "speaker": "Alexander Vasserman", "text": "and in general there is a whole bunch of other functions. But this is kind of just to give you a little bit of an idea."}, {"source_name": "lecture2", "index": 380, "time": "00:45:44.780 --> 00:45:46.330", "speaker": "Alexander Vasserman", "text": "there are also"}, {"source_name": "lecture2", "index": 381, "time": "00:45:46.860 --> 00:45:49.730", "speaker": "Alexander Vasserman", "text": "operators. So you can say"}, {"source_name": "lecture2", "index": 382, "time": "00:45:49.900 --> 00:45:51.600", "speaker": "Alexander Vasserman", "text": "something like."}, {"source_name": "lecture2", "index": 383, "time": "00:45:57.770 --> 00:46:03.229", "speaker": "Alexander Vasserman", "text": "and that's that needs the 2 lists. you can also"}, {"source_name": "lecture2", "index": 384, "time": "00:46:03.380 --> 00:46:06.110", "speaker": "Alexander Vasserman", "text": "make multiple purpose of the same list."}, {"source_name": "lecture2", "index": 385, "time": "00:46:06.250 --> 00:46:14.689", "speaker": "Alexander Vasserman", "text": "Of course these do not modify the list itself. If you wanted to modify the list itself, you could say something you like"}, {"source_name": "lecture2", "index": 386, "time": "00:46:14.820 --> 00:46:16.800", "speaker": "Alexander Vasserman", "text": "plus equal"}, {"source_name": "lecture2", "index": 387, "time": "00:46:17.120 --> 00:46:18.849", "speaker": "Alexander Vasserman", "text": "and so"}, {"source_name": "lecture2", "index": 388, "time": "00:46:19.130 --> 00:46:20.040", "speaker": "Alexander Vasserman", "text": "you fight."}, {"source_name": "lecture2", "index": 389, "time": "00:46:20.580 --> 00:46:21.419", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 390, "time": "00:46:21.850 --> 00:46:23.189", "speaker": "Alexander Vasserman", "text": "do that! And"}, {"source_name": "lecture2", "index": 391, "time": "00:46:23.240 --> 00:46:25.369", "speaker": "Alexander Vasserman", "text": "the list itself is modified."}, {"source_name": "lecture2", "index": 392, "time": "00:46:26.450 --> 00:46:29.029", "speaker": "Alexander Vasserman", "text": "Zoom, and it's another to be at them."}, {"source_name": "lecture2", "index": 393, "time": "00:46:31.620 --> 00:46:33.609", "speaker": "Alexander Vasserman", "text": "So yeah, so hopefully"}, {"source_name": "lecture2", "index": 394, "time": "00:46:33.640 --> 00:46:37.309", "speaker": "Alexander Vasserman", "text": "that all is kind of"}, {"source_name": "lecture2", "index": 395, "time": "00:46:37.760 --> 00:46:38.649", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture2", "index": 396, "time": "00:46:39.980 --> 00:46:40.899", "speaker": "Alexander Vasserman", "text": "simple"}, {"source_name": "lecture2", "index": 397, "time": "00:46:41.110 --> 00:46:43.270", "speaker": "Alexander Vasserman", "text": "something that you've seen before."}, {"source_name": "lecture2", "index": 398, "time": "00:46:44.450 --> 00:46:54.009", "speaker": "Alexander Vasserman", "text": "also another thing that I want to kind of quickly. Review is in operator. So I can say."}, {"source_name": "lecture2", "index": 399, "time": "00:46:54.030 --> 00:46:55.959", "speaker": "Alexander Vasserman", "text": "basically"}, {"source_name": "lecture2", "index": 400, "time": "00:46:56.030 --> 00:46:56.959", "speaker": "Alexander Vasserman", "text": "a."}, {"source_name": "lecture2", "index": 401, "time": "00:46:58.180 --> 00:47:03.879", "speaker": "Alexander Vasserman", "text": "and also is a stream a in element of the this style."}, {"source_name": "lecture2", "index": 402, "time": "00:47:04.090 --> 00:47:09.699", "speaker": "Alexander Vasserman", "text": "and yes, it is and of course, you know, if I"}, {"source_name": "lecture2", "index": 403, "time": "00:47:09.720 --> 00:47:10.560", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture2", "index": 404, "time": "00:47:10.620 --> 00:47:13.539", "speaker": "Alexander Vasserman", "text": "with something that's not in there like"}, {"source_name": "lecture2", "index": 405, "time": "00:47:13.740 --> 00:47:16.619", "speaker": "Alexander Vasserman", "text": "let's say 3 a. B."}, {"source_name": "lecture2", "index": 406, "time": "00:47:17.970 --> 00:47:18.830", "speaker": "Alexander Vasserman", "text": "He is"}, {"source_name": "lecture2", "index": 407, "time": "00:47:19.220 --> 00:47:21.619", "speaker": "Alexander Vasserman", "text": "not in there. So"}, {"source_name": "lecture2", "index": 408, "time": "00:47:21.740 --> 00:47:25.189", "speaker": "Alexander Vasserman", "text": "yeah, probably it isn't I never mind. well."}, {"source_name": "lecture2", "index": 409, "time": "00:47:25.260 --> 00:47:26.810", "speaker": "Alexander Vasserman", "text": "let's say,"}, {"source_name": "lecture2", "index": 410, "time": "00:47:27.080 --> 00:47:28.590", "speaker": "Alexander Vasserman", "text": "ABC. Right"}, {"source_name": "lecture2", "index": 411, "time": "00:47:32.200 --> 00:47:34.909", "speaker": "Alexander Vasserman", "text": "also kind of if"}, {"source_name": "lecture2", "index": 412, "time": "00:47:34.940 --> 00:47:36.210", "speaker": "Alexander Vasserman", "text": "I want it"}, {"source_name": "lecture2", "index": 413, "time": "00:47:36.370 --> 00:47:38.350", "speaker": "Alexander Vasserman", "text": "to see if"}, {"source_name": "lecture2", "index": 414, "time": "00:47:38.640 --> 00:47:39.470", "speaker": "Alexander Vasserman", "text": "yeah."}, {"source_name": "lecture2", "index": 415, "time": "00:47:39.640 --> 00:47:40.419", "speaker": "Alexander Vasserman", "text": "8"}, {"source_name": "lecture2", "index": 416, "time": "00:47:41.810 --> 00:47:45.239", "speaker": "Alexander Vasserman", "text": "list of elements is kind of suble of"}, {"source_name": "lecture2", "index": 417, "time": "00:47:45.790 --> 00:47:46.600", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture2", "index": 418, "time": "00:47:46.840 --> 00:47:48.649", "speaker": "Alexander Vasserman", "text": "least L"}, {"source_name": "lecture2", "index": 419, "time": "00:47:50.290 --> 00:47:52.849", "speaker": "Alexander Vasserman", "text": "I might try this"}, {"source_name": "lecture2", "index": 420, "time": "00:47:53.220 --> 00:47:55.330", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture2", "index": 421, "time": "00:47:55.920 --> 00:48:01.160", "speaker": "Alexander Vasserman", "text": "but this actually doesn't do. What you think it does, it basically says."}, {"source_name": "lecture2", "index": 422, "time": "00:48:01.210 --> 00:48:03.330", "speaker": "Alexander Vasserman", "text": "is that least part"}, {"source_name": "lecture2", "index": 423, "time": "00:48:03.410 --> 00:48:06.609", "speaker": "Alexander Vasserman", "text": "an element of the this out?"}, {"source_name": "lecture2", "index": 424, "time": "00:48:08.690 --> 00:48:10.960", "speaker": "Alexander Vasserman", "text": "okay, we have the"}, {"source_name": "lecture2", "index": 425, "time": "00:48:12.190 --> 00:48:15.330", "speaker": "Alexander Vasserman", "text": "actually let me do just one last thing"}, {"source_name": "lecture2", "index": 426, "time": "00:48:15.370 --> 00:48:16.870", "speaker": "Alexander Vasserman", "text": "to say that"}, {"source_name": "lecture2", "index": 427, "time": "00:48:17.810 --> 00:48:19.220", "speaker": "Alexander Vasserman", "text": "basically the"}, {"source_name": "lecture2", "index": 428, "time": "00:48:19.700 --> 00:48:25.789", "speaker": "Alexander Vasserman", "text": "the way it could be is that, you know, let's say L 2 is equal to"}, {"source_name": "lecture2", "index": 429, "time": "00:48:26.880 --> 00:48:30.290", "speaker": "Alexander Vasserman", "text": "A, but also has a list"}, {"source_name": "lecture2", "index": 430, "time": "00:48:34.460 --> 00:48:36.759", "speaker": "Alexander Vasserman", "text": "and containing a and B."}, {"source_name": "lecture2", "index": 431, "time": "00:48:36.780 --> 00:48:38.189", "speaker": "Alexander Vasserman", "text": "So here"}, {"source_name": "lecture2", "index": 432, "time": "00:48:38.460 --> 00:48:44.550", "speaker": "Alexander Vasserman", "text": "one of the elements of the list itself is the list right? So that's why we have"}, {"source_name": "lecture2", "index": 433, "time": "00:48:45.700 --> 00:48:47.899", "speaker": "Alexander Vasserman", "text": "2 sets of square brackets."}, {"source_name": "lecture2", "index": 434, "time": "00:48:48.770 --> 00:48:49.779", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture2", "index": 435, "time": "00:48:50.240 --> 00:48:50.919", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 436, "time": "00:48:50.980 --> 00:48:53.399", "speaker": "Alexander Vasserman", "text": "it's kind of looks the same."}, {"source_name": "lecture2", "index": 437, "time": "00:48:53.710 --> 00:48:54.649", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture2", "index": 438, "time": "00:48:55.230 --> 00:48:56.629", "speaker": "Alexander Vasserman", "text": "if I"}, {"source_name": "lecture2", "index": 439, "time": "00:48:56.790 --> 00:48:57.759", "speaker": "Alexander Vasserman", "text": "no"}, {"source_name": "lecture2", "index": 440, "time": "00:49:00.240 --> 00:49:01.540", "speaker": "Alexander Vasserman", "text": "do this"}, {"source_name": "lecture2", "index": 441, "time": "00:49:07.870 --> 00:49:10.279", "speaker": "Alexander Vasserman", "text": "the at least isn't there."}, {"source_name": "lecture2", "index": 442, "time": "00:49:11.260 --> 00:49:12.059", "speaker": "Alexander Vasserman", "text": "All right."}, {"source_name": "lecture2", "index": 443, "time": "00:49:12.120 --> 00:49:14.460", "speaker": "Alexander Vasserman", "text": "So questions."}, {"source_name": "lecture2", "index": 444, "time": "00:49:14.830 --> 00:49:25.590", "speaker": "Alexander Vasserman", "text": "Yeah. So will you post this on d 12 or anything, so we can review them. Yes, absolutely so. One great thing about this call up is that it's a sharp"}, {"source_name": "lecture2", "index": 445, "time": "00:49:25.720 --> 00:49:36.860", "speaker": "Alexander Vasserman", "text": "link. So in particular it's designed to be collaborated to be a collaborative environment. so i'll definitely share the link"}, {"source_name": "lecture2", "index": 446, "time": "00:49:37.250 --> 00:49:39.849", "speaker": "Alexander Vasserman", "text": "to this afterwards."}, {"source_name": "lecture2", "index": 447, "time": "00:49:40.670 --> 00:49:41.309", "speaker": "Alexander Vasserman", "text": "the election"}, {"source_name": "lecture2", "index": 448, "time": "00:49:45.210 --> 00:49:46.479", "speaker": "Alexander Vasserman", "text": "thought."}, {"source_name": "lecture2", "index": 449, "time": "00:49:47.520 --> 00:49:51.729", "speaker": "Fahad Khan", "text": "Yeah, is it possible for you to zoom in a little on the screen, so we could see it better."}, {"source_name": "lecture2", "index": 450, "time": "00:49:51.930 --> 00:49:55.060", "speaker": "Alexander Vasserman", "text": "Absolutely. Thank you for letting me know."}, {"source_name": "lecture2", "index": 451, "time": "00:49:55.080 --> 00:49:56.260", "speaker": "Alexander Vasserman", "text": "Is this."}, {"source_name": "lecture2", "index": 452, "time": "00:49:56.330 --> 00:49:58.939", "speaker": "Alexander Vasserman", "text": "Yeah, that's good, alright, awesome."}, {"source_name": "lecture2", "index": 453, "time": "00:50:02.260 --> 00:50:03.120", "speaker": "Alexander Vasserman", "text": "Alex."}, {"source_name": "lecture2", "index": 454, "time": "00:50:04.210 --> 00:50:05.990", "speaker": "Alex Wojtowicz", "text": "I had a question. So when you do like"}, {"source_name": "lecture2", "index": 455, "time": "00:50:06.200 --> 00:50:12.519", "speaker": "Alex Wojtowicz", "text": "a in L, and it sees a B. Does it read the substring, or does it just read the element?"}, {"source_name": "lecture2", "index": 456, "time": "00:50:12.710 --> 00:50:18.630", "speaker": "Alexander Vasserman", "text": "That's a very good question. Yes. So here it's quality by the element."}, {"source_name": "lecture2", "index": 457, "time": "00:50:18.720 --> 00:50:20.899", "speaker": "Alexander Vasserman", "text": "Right? So"}, {"source_name": "lecture2", "index": 458, "time": "00:50:21.670 --> 00:50:24.529", "speaker": "Alexander Vasserman", "text": "yeah, like in this particular case, you know."}, {"source_name": "lecture2", "index": 459, "time": "00:50:24.730 --> 00:50:32.320", "speaker": "Alexander Vasserman", "text": "we have a this thing and also individual a and B but yes, it's it's actually just looking element by element."}, {"source_name": "lecture2", "index": 460, "time": "00:50:32.810 --> 00:50:33.500", "speaker": "Alex Wojtowicz", "text": "Okay."}, {"source_name": "lecture2", "index": 461, "time": "00:50:33.670 --> 00:50:34.500", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 462, "time": "00:50:35.290 --> 00:50:36.289", "speaker": "Alexander Vasserman", "text": "let's say it."}, {"source_name": "lecture2", "index": 463, "time": "00:50:36.440 --> 00:50:37.779", "speaker": "Alexander Vasserman", "text": "Very good question."}, {"source_name": "lecture2", "index": 464, "time": "00:50:41.750 --> 00:50:42.870", "speaker": "Alexander Vasserman", "text": "Any"}, {"source_name": "lecture2", "index": 465, "time": "00:50:43.640 --> 00:50:46.230", "speaker": "Alexander Vasserman", "text": "other questions about"}, {"source_name": "lecture2", "index": 466, "time": "00:50:46.730 --> 00:50:50.490", "speaker": "Alexander Vasserman", "text": "lists and things that I've covered so far."}, {"source_name": "lecture2", "index": 467, "time": "00:50:51.730 --> 00:50:54.849", "speaker": "Alexander Vasserman", "text": "obviously, you know, there is more"}, {"source_name": "lecture2", "index": 468, "time": "00:50:55.040 --> 00:50:57.220", "speaker": "Alexander Vasserman", "text": "I think, about lists"}, {"source_name": "lecture2", "index": 469, "time": "00:50:57.240 --> 00:51:05.469", "speaker": "Alexander Vasserman", "text": "and things might come up that they haven't covered. But hopefully, this gives you a little bit of an idea of"}, {"source_name": "lecture2", "index": 470, "time": "00:51:05.540 --> 00:51:07.839", "speaker": "Alexander Vasserman", "text": "I at least operate."}, {"source_name": "lecture2", "index": 471, "time": "00:51:08.200 --> 00:51:09.310", "speaker": "Alexander Vasserman", "text": "did you?"}, {"source_name": "lecture2", "index": 472, "time": "00:51:09.410 --> 00:51:10.690", "speaker": "Alexander Vasserman", "text": "You have another question?"}, {"source_name": "lecture2", "index": 473, "time": "00:51:12.320 --> 00:51:21.319", "speaker": "D.J Davis", "text": "Yeah, I was just wearing Well, I know you had mentioned this when you were typing it out. But so what is what is exactly like the difference between"}, {"source_name": "lecture2", "index": 474, "time": "00:51:21.350 --> 00:51:24.520", "speaker": "D.J Davis", "text": "appending a list versus if you're just"}, {"source_name": "lecture2", "index": 475, "time": "00:51:24.730 --> 00:51:26.000", "speaker": "D.J Davis", "text": "extending"}, {"source_name": "lecture2", "index": 476, "time": "00:51:26.820 --> 00:51:29.880", "speaker": "Alexander Vasserman", "text": "Oh, great! Yes, so"}, {"source_name": "lecture2", "index": 477, "time": "00:51:30.620 --> 00:51:34.100", "speaker": "Alexander Vasserman", "text": "yes. So here the functions append versus extent."}, {"source_name": "lecture2", "index": 478, "time": "00:51:34.350 --> 00:51:37.450", "speaker": "Alexander Vasserman", "text": "So append is this individual element."}, {"source_name": "lecture2", "index": 479, "time": "00:51:37.650 --> 00:51:39.279", "speaker": "Alexander Vasserman", "text": "So the element."}, {"source_name": "lecture2", "index": 480, "time": "00:51:39.300 --> 00:51:42.199", "speaker": "Alexander Vasserman", "text": "the was added to the list at the end"}, {"source_name": "lecture2", "index": 481, "time": "00:51:43.390 --> 00:51:46.270", "speaker": "Alexander Vasserman", "text": "extend is,"}, {"source_name": "lecture2", "index": 482, "time": "00:51:46.670 --> 00:51:47.660", "speaker": "Alexander Vasserman", "text": "takes"}, {"source_name": "lecture2", "index": 483, "time": "00:51:47.780 --> 00:51:50.099", "speaker": "Alexander Vasserman", "text": "he not at least as an argument?"}, {"source_name": "lecture2", "index": 484, "time": "00:51:50.280 --> 00:51:51.279", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 485, "time": "00:51:51.530 --> 00:51:52.940", "speaker": "Alexander Vasserman", "text": "when you want to."}, {"source_name": "lecture2", "index": 486, "time": "00:51:53.030 --> 00:51:53.740", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 487, "time": "00:51:54.140 --> 00:51:56.829", "speaker": "Alexander Vasserman", "text": "it's actually up and multiple elements."}, {"source_name": "lecture2", "index": 488, "time": "00:51:58.730 --> 00:52:03.570", "speaker": "Alexander Vasserman", "text": "It's You can extend the list with another list."}, {"source_name": "lecture2", "index": 489, "time": "00:52:03.710 --> 00:52:04.759", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 490, "time": "00:52:04.900 --> 00:52:05.799", "speaker": "Alexander Vasserman", "text": "this"}, {"source_name": "lecture2", "index": 491, "time": "00:52:05.910 --> 00:52:07.750", "speaker": "Alexander Vasserman", "text": "is equivalent"}, {"source_name": "lecture2", "index": 492, "time": "00:52:07.940 --> 00:52:08.990", "speaker": "Alexander Vasserman", "text": "to"}, {"source_name": "lecture2", "index": 493, "time": "00:52:09.880 --> 00:52:14.760", "speaker": "Alexander Vasserman", "text": "so or the the the same thing could be done by say."}, {"source_name": "lecture2", "index": 494, "time": "00:52:15.220 --> 00:52:15.939", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 495, "time": "00:52:18.230 --> 00:52:20.089", "speaker": "Alexander Vasserman", "text": "so up engine a."}, {"source_name": "lecture2", "index": 496, "time": "00:52:20.220 --> 00:52:21.180", "speaker": "Alexander Vasserman", "text": "and then"}, {"source_name": "lecture2", "index": 497, "time": "00:52:22.100 --> 00:52:23.509", "speaker": "Alexander Vasserman", "text": "separately"}, {"source_name": "lecture2", "index": 498, "time": "00:52:29.360 --> 00:52:31.969", "speaker": "Alexander Vasserman", "text": "so extend is kind of"}, {"source_name": "lecture2", "index": 499, "time": "00:52:32.210 --> 00:52:32.990", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture2", "index": 500, "time": "00:52:33.050 --> 00:52:34.919", "speaker": "Alexander Vasserman", "text": "the same as plus equal"}, {"source_name": "lecture2", "index": 501, "time": "00:52:36.900 --> 00:52:37.939", "speaker": "Alexander Vasserman", "text": "for this."}, {"source_name": "lecture2", "index": 502, "time": "00:52:38.960 --> 00:52:48.289", "speaker": "Alexander Vasserman", "text": "in a lot of cases we will have kind of a function that's spells out things but"}, {"source_name": "lecture2", "index": 503, "time": "00:52:52.920 --> 00:53:01.289", "speaker": "Alexander Vasserman", "text": "but also sometimes we have operators. That kind of just make things a little quicker, and like more compact"}, {"source_name": "lecture2", "index": 504, "time": "00:53:01.330 --> 00:53:03.909", "speaker": "Alexander Vasserman", "text": "that kind of do similar things"}, {"source_name": "lecture2", "index": 505, "time": "00:53:11.040 --> 00:53:14.490", "speaker": "Alexander Vasserman", "text": "right. So yeah, so one thing to to keep in mind."}, {"source_name": "lecture2", "index": 506, "time": "00:53:14.740 --> 00:53:17.000", "speaker": "Alexander Vasserman", "text": "so if"}, {"source_name": "lecture2", "index": 507, "time": "00:53:19.030 --> 00:53:21.390", "speaker": "Alexander Vasserman", "text": "so, let's see if my least"}, {"source_name": "lecture2", "index": 508, "time": "00:53:21.410 --> 00:53:22.879", "speaker": "Alexander Vasserman", "text": "l is this."}, {"source_name": "lecture2", "index": 509, "time": "00:53:22.970 --> 00:53:24.390", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture2", "index": 510, "time": "00:53:25.340 --> 00:53:26.220", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 511, "time": "00:53:26.350 --> 00:53:27.430", "speaker": "Alexander Vasserman", "text": "I say."}, {"source_name": "lecture2", "index": 512, "time": "00:53:27.480 --> 00:53:28.640", "speaker": "Alexander Vasserman", "text": "l dot"}, {"source_name": "lecture2", "index": 513, "time": "00:53:31.230 --> 00:53:32.129", "speaker": "Alexander Vasserman", "text": "a pen."}, {"source_name": "lecture2", "index": 514, "time": "00:53:37.630 --> 00:53:40.140", "speaker": "Alexander Vasserman", "text": "So if I use their own function"}, {"source_name": "lecture2", "index": 515, "time": "00:53:40.380 --> 00:53:41.679", "speaker": "Alexander Vasserman", "text": "and say"}, {"source_name": "lecture2", "index": 516, "time": "00:53:41.900 --> 00:53:44.120", "speaker": "Alexander Vasserman", "text": "a pen when when I meant"}, {"source_name": "lecture2", "index": 517, "time": "00:53:44.190 --> 00:53:45.560", "speaker": "Alexander Vasserman", "text": "extend"}, {"source_name": "lecture2", "index": 518, "time": "00:53:45.740 --> 00:53:47.409", "speaker": "Alexander Vasserman", "text": "what happens is."}, {"source_name": "lecture2", "index": 519, "time": "00:53:48.370 --> 00:53:50.179", "speaker": "Alexander Vasserman", "text": "just at least is"}, {"source_name": "lecture2", "index": 520, "time": "00:53:50.310 --> 00:53:52.139", "speaker": "Alexander Vasserman", "text": "appended as a single element."}, {"source_name": "lecture2", "index": 521, "time": "00:53:53.010 --> 00:53:54.029", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 522, "time": "00:53:54.810 --> 00:54:00.369", "speaker": "Alexander Vasserman", "text": "Python is basically very flexible. Sometimes it's"}, {"source_name": "lecture2", "index": 523, "time": "00:54:00.970 --> 00:54:05.640", "speaker": "Alexander Vasserman", "text": "actually, it makes things a little harder, because you know it's easier to make a mistake"}, {"source_name": "lecture2", "index": 524, "time": "00:54:06.280 --> 00:54:15.400", "speaker": "Alexander Vasserman", "text": "in other some other languages. This is not something that you could do potentially, because a function would only take an element of a particular type."}, {"source_name": "lecture2", "index": 525, "time": "00:54:16.820 --> 00:54:18.189", "speaker": "Alexander Vasserman", "text": "in"}, {"source_name": "lecture2", "index": 526, "time": "00:54:18.270 --> 00:54:20.979", "speaker": "Alexander Vasserman", "text": "python types are more fluid."}, {"source_name": "lecture2", "index": 527, "time": "00:54:21.190 --> 00:54:26.860", "speaker": "Alexander Vasserman", "text": "and we'll talk to the but a little bit about it as well. But basically here it"}, {"source_name": "lecture2", "index": 528, "time": "00:54:27.010 --> 00:54:31.590", "speaker": "Alexander Vasserman", "text": "maybe something that you actually wanted to do, but maybe made it to him. State."}, {"source_name": "lecture2", "index": 529, "time": "00:54:32.690 --> 00:54:34.319", "speaker": "Alexander Vasserman", "text": "Did you have another question?"}, {"source_name": "lecture2", "index": 530, "time": "00:54:35.140 --> 00:54:42.940", "speaker": "D.J Davis", "text": "Yeah, just a follow up on that. Does that same logic apply for dictionaries as well? Or is this just for lists?"}, {"source_name": "lecture2", "index": 531, "time": "00:54:43.090 --> 00:54:49.669", "speaker": "Alexander Vasserman", "text": "So this is just for a list. So dictionaries do not have append and extend"}, {"source_name": "lecture2", "index": 532, "time": "00:54:49.800 --> 00:54:54.339", "speaker": "Alexander Vasserman", "text": "but that's a dictionary, something that you're going to."}, {"source_name": "lecture2", "index": 533, "time": "00:54:54.390 --> 00:54:56.099", "speaker": "Alexander Vasserman", "text": "I'll go into"}, {"source_name": "lecture2", "index": 534, "time": "00:54:58.470 --> 00:54:59.799", "speaker": "Alexander Vasserman", "text": "as well today."}, {"source_name": "lecture2", "index": 535, "time": "00:54:59.940 --> 00:55:04.510", "speaker": "Alexander Vasserman", "text": "Hopefully. They will get have time for for everything. But if not, that's okay to you."}, {"source_name": "lecture2", "index": 536, "time": "00:55:04.610 --> 00:55:08.780", "speaker": "Alexander Vasserman", "text": "but yes, good question about dictionaries. We'll get the dictionaries."}, {"source_name": "lecture2", "index": 537, "time": "00:55:09.020 --> 00:55:10.569", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 538, "time": "00:55:11.360 --> 00:55:12.129", "speaker": "Alexander Vasserman", "text": "let's"}, {"source_name": "lecture2", "index": 539, "time": "00:55:13.330 --> 00:55:18.389", "speaker": "Alexander Vasserman", "text": "do things first. In some sense you already done strings a bit"}, {"source_name": "lecture2", "index": 540, "time": "00:55:20.090 --> 00:55:24.449", "speaker": "Alexander Vasserman", "text": "because we you know we're putting them into"}, {"source_name": "lecture2", "index": 541, "time": "00:55:26.320 --> 00:55:27.510", "speaker": "Alexander Vasserman", "text": "into the list."}, {"source_name": "lecture2", "index": 542, "time": "00:55:27.640 --> 00:55:28.819", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture2", "index": 543, "time": "00:55:29.870 --> 00:55:30.950", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture2", "index": 544, "time": "00:55:31.600 --> 00:55:35.020", "speaker": "Alexander Vasserman", "text": "what's interesting is, I guess that"}, {"source_name": "lecture2", "index": 545, "time": "00:55:35.060 --> 00:55:37.620", "speaker": "Alexander Vasserman", "text": "all streams are the same"}, {"source_name": "lecture2", "index": 546, "time": "00:55:37.860 --> 00:55:39.049", "speaker": "Alexander Vasserman", "text": "themselves"}, {"source_name": "lecture2", "index": 547, "time": "00:55:39.810 --> 00:55:50.379", "speaker": "Alexander Vasserman", "text": "a kind of container, so you can have direct access on the stream the same way that, or similar to"}, {"source_name": "lecture2", "index": 548, "time": "00:55:50.420 --> 00:55:58.000", "speaker": "Alexander Vasserman", "text": "what you have is the list, so I can get the character at the second position. This is the"}, {"source_name": "lecture2", "index": 549, "time": "00:55:58.050 --> 00:55:59.970", "speaker": "Alexander Vasserman", "text": "the same way that,"}, {"source_name": "lecture2", "index": 550, "time": "00:56:00.020 --> 00:56:03.629", "speaker": "Alexander Vasserman", "text": "I would have it for a list"}, {"source_name": "lecture2", "index": 551, "time": "00:56:04.200 --> 00:56:09.509", "speaker": "Alexander Vasserman", "text": "also sometimes convenient, and also works for at least"}, {"source_name": "lecture2", "index": 552, "time": "00:56:10.830 --> 00:56:14.319", "speaker": "Alexander Vasserman", "text": "python supports various ranges. So"}, {"source_name": "lecture2", "index": 553, "time": "00:56:15.830 --> 00:56:20.220", "speaker": "Alexander Vasserman", "text": "let's say if I say from 0 to 2"}, {"source_name": "lecture2", "index": 554, "time": "00:56:20.700 --> 00:56:22.259", "speaker": "Alexander Vasserman", "text": "that's"}, {"source_name": "lecture2", "index": 555, "time": "00:56:22.290 --> 00:56:23.149", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture2", "index": 556, "time": "00:56:24.040 --> 00:56:29.690", "speaker": "Alexander Vasserman", "text": "the upstream from position 0, which is before."}, {"source_name": "lecture2", "index": 557, "time": "00:56:29.810 --> 00:56:30.669", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 558, "time": "00:56:30.830 --> 00:56:31.629", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture2", "index": 559, "time": "00:56:31.680 --> 00:56:32.850", "speaker": "Alexander Vasserman", "text": "first"}, {"source_name": "lecture2", "index": 560, "time": "00:56:32.910 --> 00:56:36.550", "speaker": "Alexander Vasserman", "text": "element up to a second position"}, {"source_name": "lecture2", "index": 561, "time": "00:56:37.010 --> 00:56:41.450", "speaker": "Alexander Vasserman", "text": "so element that position 2 is not included."}, {"source_name": "lecture2", "index": 562, "time": "00:56:41.970 --> 00:56:44.350", "speaker": "Alexander Vasserman", "text": "and there are"}, {"source_name": "lecture2", "index": 563, "time": "00:56:44.520 --> 00:56:47.250", "speaker": "Alexander Vasserman", "text": "also shortcuts, or that like"}, {"source_name": "lecture2", "index": 564, "time": "00:56:47.980 --> 00:56:57.259", "speaker": "Alexander Vasserman", "text": "this. So if the one end is not specified. It's basically to the end of the same. So I can do this for all you know."}, {"source_name": "lecture2", "index": 565, "time": "00:56:57.330 --> 00:56:58.979", "speaker": "Alexander Vasserman", "text": "on the other side"}, {"source_name": "lecture2", "index": 566, "time": "00:57:02.070 --> 00:57:03.060", "speaker": "Alexander Vasserman", "text": "so."}, {"source_name": "lecture2", "index": 567, "time": "00:57:03.600 --> 00:57:06.719", "speaker": "Alexander Vasserman", "text": "but going back to kind of"}, {"source_name": "lecture2", "index": 568, "time": "00:57:08.790 --> 00:57:11.749", "speaker": "Alexander Vasserman", "text": "direct taxes by just index"}, {"source_name": "lecture2", "index": 569, "time": "00:57:12.090 --> 00:57:13.809", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture2", "index": 570, "time": "00:57:15.500 --> 00:57:16.459", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 571, "time": "00:57:17.580 --> 00:57:18.459", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture2", "index": 572, "time": "00:57:19.330 --> 00:57:20.919", "speaker": "Alexander Vasserman", "text": "what you might"}, {"source_name": "lecture2", "index": 573, "time": "00:57:21.000 --> 00:57:22.520", "speaker": "Alexander Vasserman", "text": "thing in"}, {"source_name": "lecture2", "index": 574, "time": "00:57:22.760 --> 00:57:24.169", "speaker": "Alexander Vasserman", "text": "similarities"}, {"source_name": "lecture2", "index": 575, "time": "00:57:24.310 --> 00:57:30.520", "speaker": "Alexander Vasserman", "text": "to the at least you might want to assign using direct access. So let's say."}, {"source_name": "lecture2", "index": 576, "time": "00:57:32.890 --> 00:57:34.129", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture2", "index": 577, "time": "00:57:34.890 --> 00:57:36.259", "speaker": "Alexander Vasserman", "text": "that is"}, {"source_name": "lecture2", "index": 578, "time": "00:57:36.440 --> 00:57:37.549", "speaker": "Alexander Vasserman", "text": "not allowed."}, {"source_name": "lecture2", "index": 579, "time": "00:57:37.730 --> 00:57:40.869", "speaker": "Alexander Vasserman", "text": "So in Python, strings are not mutable."}, {"source_name": "lecture2", "index": 580, "time": "00:57:41.040 --> 00:57:43.630", "speaker": "Alexander Vasserman", "text": "so you can"}, {"source_name": "lecture2", "index": 581, "time": "00:57:44.180 --> 00:57:51.189", "speaker": "Alexander Vasserman", "text": "apply different operators, combining streams and different ways or taking substance."}, {"source_name": "lecture2", "index": 582, "time": "00:57:51.220 --> 00:57:52.879", "speaker": "Alexander Vasserman", "text": "etc. But your"}, {"source_name": "lecture2", "index": 583, "time": "00:57:52.930 --> 00:57:55.550", "speaker": "Alexander Vasserman", "text": "essentially creating a new stream every time."}, {"source_name": "lecture2", "index": 584, "time": "00:57:55.570 --> 00:57:58.430", "speaker": "Alexander Vasserman", "text": "And so the way that we've"}, {"source_name": "lecture2", "index": 585, "time": "00:57:59.470 --> 00:58:03.250", "speaker": "Alexander Vasserman", "text": "operated on the list, variable"}, {"source_name": "lecture2", "index": 586, "time": "00:58:03.700 --> 00:58:10.270", "speaker": "Alexander Vasserman", "text": "itself, and kind of extending the list in place, or, you know, changing elements of the list."}, {"source_name": "lecture2", "index": 587, "time": "00:58:10.600 --> 00:58:12.919", "speaker": "Alexander Vasserman", "text": "You cannot do that. This"}, {"source_name": "lecture2", "index": 588, "time": "00:58:15.110 --> 00:58:21.379", "speaker": "Alexander Vasserman", "text": "so that's kind of a little bit interesting and out the idea of"}, {"source_name": "lecture2", "index": 589, "time": "00:58:21.700 --> 00:58:27.029", "speaker": "Alexander Vasserman", "text": "mutable versus non mutable containers is"}, {"source_name": "lecture2", "index": 590, "time": "00:58:27.350 --> 00:58:28.379", "speaker": "Alexander Vasserman", "text": "actually"}, {"source_name": "lecture2", "index": 591, "time": "00:58:28.620 --> 00:58:30.349", "speaker": "Alexander Vasserman", "text": "a"}, {"source_name": "lecture2", "index": 592, "time": "00:58:31.990 --> 00:58:32.810", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 593, "time": "00:58:34.190 --> 00:58:37.249", "speaker": "Alexander Vasserman", "text": "something that we'll talk a little bit"}, {"source_name": "lecture2", "index": 594, "time": "00:58:37.340 --> 00:58:39.479", "speaker": "Alexander Vasserman", "text": "more about the small"}, {"source_name": "lecture2", "index": 595, "time": "00:58:39.540 --> 00:58:43.250", "speaker": "Alexander Vasserman", "text": "but Austin is one of the examples"}, {"source_name": "lecture2", "index": 596, "time": "00:58:46.180 --> 00:58:49.609", "speaker": "Alexander Vasserman", "text": "This streams you still have operators like"}, {"source_name": "lecture2", "index": 597, "time": "00:58:49.660 --> 00:58:50.590", "speaker": "Alexander Vasserman", "text": "you can."}, {"source_name": "lecture2", "index": 598, "time": "00:58:50.770 --> 00:58:51.580", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 599, "time": "00:58:52.900 --> 00:58:53.740", "speaker": "Alexander Vasserman", "text": "add."}, {"source_name": "lecture2", "index": 600, "time": "00:58:53.870 --> 00:58:54.689", "speaker": "Alexander Vasserman", "text": "you know."}, {"source_name": "lecture2", "index": 601, "time": "00:58:55.390 --> 00:58:57.869", "speaker": "Alexander Vasserman", "text": "wherever another stream."}, {"source_name": "lecture2", "index": 602, "time": "00:58:58.270 --> 00:59:00.290", "speaker": "Alexander Vasserman", "text": "you can"}, {"source_name": "lecture2", "index": 603, "time": "00:59:01.800 --> 00:59:02.919", "speaker": "Alexander Vasserman", "text": "also"}, {"source_name": "lecture2", "index": 604, "time": "00:59:03.570 --> 00:59:07.209", "speaker": "Alexander Vasserman", "text": "have 2 copies of the same string. You are concatenated"}, {"source_name": "lecture2", "index": 605, "time": "00:59:08.990 --> 00:59:10.090", "speaker": "Alexander Vasserman", "text": "etc."}, {"source_name": "lecture2", "index": 606, "time": "00:59:10.300 --> 00:59:13.350", "speaker": "Alexander Vasserman", "text": "you also have an"}, {"source_name": "lecture2", "index": 607, "time": "00:59:13.690 --> 00:59:15.129", "speaker": "Alexander Vasserman", "text": "in operator."}, {"source_name": "lecture2", "index": 608, "time": "00:59:15.200 --> 00:59:17.299", "speaker": "Alexander Vasserman", "text": "so I can say a"}, {"source_name": "lecture2", "index": 609, "time": "00:59:17.830 --> 00:59:19.779", "speaker": "Alexander Vasserman", "text": "and as"}, {"source_name": "lecture2", "index": 610, "time": "00:59:22.790 --> 00:59:25.060", "speaker": "Alexander Vasserman", "text": "and the that returns through"}, {"source_name": "lecture2", "index": 611, "time": "00:59:25.430 --> 00:59:28.320", "speaker": "Alexander Vasserman", "text": "but the streams it's"}, {"source_name": "lecture2", "index": 612, "time": "00:59:28.400 --> 00:59:32.100", "speaker": "Alexander Vasserman", "text": "a little bit more powerful than that. So I can"}, {"source_name": "lecture2", "index": 613, "time": "00:59:32.340 --> 00:59:34.120", "speaker": "Alexander Vasserman", "text": "say something like"}, {"source_name": "lecture2", "index": 614, "time": "00:59:35.620 --> 00:59:36.879", "speaker": "Alexander Vasserman", "text": "BC."}, {"source_name": "lecture2", "index": 615, "time": "00:59:37.660 --> 00:59:38.939", "speaker": "Alexander Vasserman", "text": "In S,"}, {"source_name": "lecture2", "index": 616, "time": "00:59:39.640 --> 00:59:46.899", "speaker": "Alexander Vasserman", "text": "and that's also returns through to in operator actually matches something. So if"}, {"source_name": "lecture2", "index": 617, "time": "00:59:46.990 --> 00:59:52.220", "speaker": "Alexander Vasserman", "text": "a particular stream is part of another stream. Then."}, {"source_name": "lecture2", "index": 618, "time": "00:59:52.320 --> 00:59:55.039", "speaker": "Alexander Vasserman", "text": "in operator, would this turn? True?"}, {"source_name": "lecture2", "index": 619, "time": "00:59:56.910 --> 00:59:57.770", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture2", "index": 620, "time": "00:59:58.200 --> 00:59:59.739", "speaker": "Alexander Vasserman", "text": "of course, if it's not like."}, {"source_name": "lecture2", "index": 621, "time": "00:59:59.880 --> 01:00:00.859", "speaker": "Alexander Vasserman", "text": "let's see."}, {"source_name": "lecture2", "index": 622, "time": "01:00:01.510 --> 01:00:02.190", "speaker": "Alexander Vasserman", "text": "I don't know."}, {"source_name": "lecture2", "index": 623, "time": "01:00:05.950 --> 01:00:06.879", "speaker": "Alexander Vasserman", "text": "Yes."}, {"source_name": "lecture2", "index": 624, "time": "01:00:07.340 --> 01:00:08.309", "speaker": "Alexander Vasserman", "text": "at all."}, {"source_name": "lecture2", "index": 625, "time": "01:00:08.770 --> 01:00:10.180", "speaker": "Alexander Vasserman", "text": "We turn false."}, {"source_name": "lecture2", "index": 626, "time": "01:00:10.550 --> 01:00:12.229", "speaker": "Alexander Vasserman", "text": "That's just for phone"}, {"source_name": "lecture2", "index": 627, "time": "01:00:15.770 --> 01:00:17.379", "speaker": "Alexander Vasserman", "text": "he is."}, {"source_name": "lecture2", "index": 628, "time": "01:00:18.260 --> 01:00:18.919", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture2", "index": 629, "time": "01:00:19.100 --> 01:00:22.299", "speaker": "Alexander Vasserman", "text": "congratulations of 2 copies of us."}, {"source_name": "lecture2", "index": 630, "time": "01:00:22.820 --> 01:00:24.490", "speaker": "Alexander Vasserman", "text": "So it's right. You"}, {"source_name": "lecture2", "index": 631, "time": "01:00:29.540 --> 01:00:30.560", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 632, "time": "01:00:30.580 --> 01:00:32.290", "speaker": "Alexander Vasserman", "text": "this is"}, {"source_name": "lecture2", "index": 633, "time": "01:00:34.920 --> 01:00:36.089", "speaker": "Alexander Vasserman", "text": "strings"}, {"source_name": "lecture2", "index": 634, "time": "01:00:37.040 --> 01:00:38.339", "speaker": "Alexander Vasserman", "text": "as"}, {"source_name": "lecture2", "index": 635, "time": "01:00:38.790 --> 01:00:41.060", "speaker": "Alexander Vasserman", "text": "yeah contain her"}, {"source_name": "lecture2", "index": 636, "time": "01:00:41.140 --> 01:00:45.459", "speaker": "Alexander Vasserman", "text": "strings can be also converted to lists. So I can"}, {"source_name": "lecture2", "index": 637, "time": "01:00:45.580 --> 01:00:46.819", "speaker": "Alexander Vasserman", "text": "say at least."}, {"source_name": "lecture2", "index": 638, "time": "01:00:47.150 --> 01:00:48.470", "speaker": "Alexander Vasserman", "text": "ABC."}, {"source_name": "lecture2", "index": 639, "time": "01:00:48.690 --> 01:00:52.729", "speaker": "Alexander Vasserman", "text": "And that creates a list of characters."}, {"source_name": "lecture2", "index": 640, "time": "01:00:53.360 --> 01:00:55.240", "speaker": "Alexander Vasserman", "text": "Oftentimes that"}, {"source_name": "lecture2", "index": 641, "time": "01:00:55.770 --> 01:00:59.380", "speaker": "Alexander Vasserman", "text": "is convenient to create example lists."}, {"source_name": "lecture2", "index": 642, "time": "01:00:59.420 --> 01:01:04.880", "speaker": "Alexander Vasserman", "text": "But, but more generally kind of you. You can have this type of"}, {"source_name": "lecture2", "index": 643, "time": "01:01:05.040 --> 01:01:09.680", "speaker": "Alexander Vasserman", "text": "transformations between different containers."}, {"source_name": "lecture2", "index": 644, "time": "01:01:12.660 --> 01:01:13.490", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 645, "time": "01:01:14.170 --> 01:01:16.450", "speaker": "Alexander Vasserman", "text": "any questions about the strings?"}, {"source_name": "lecture2", "index": 646, "time": "01:01:18.460 --> 01:01:30.639", "speaker": "Alexander Vasserman", "text": "We'll definitely be doing a lot with the strings in this class. Basically, strings are the representation of text and a lot of the things that we're going to do in"}, {"source_name": "lecture2", "index": 647, "time": "01:01:30.930 --> 01:01:33.729", "speaker": "Alexander Vasserman", "text": "this class will be"}, {"source_name": "lecture2", "index": 648, "time": "01:01:33.760 --> 01:01:35.079", "speaker": "Alexander Vasserman", "text": "getting this text."}, {"source_name": "lecture2", "index": 649, "time": "01:01:36.340 --> 01:01:37.889", "speaker": "Alexander Vasserman", "text": "one actually"}, {"source_name": "lecture2", "index": 650, "time": "01:01:37.960 --> 01:01:40.429", "speaker": "Alexander Vasserman", "text": "a function that we are going to"}, {"source_name": "lecture2", "index": 651, "time": "01:01:40.480 --> 01:01:45.559", "speaker": "Alexander Vasserman", "text": "use quite a bit is a split function, so it's."}, {"source_name": "lecture2", "index": 652, "time": "01:01:45.630 --> 01:01:49.180", "speaker": "Alexander Vasserman", "text": "If I have something separated by spaces."}, {"source_name": "lecture2", "index": 653, "time": "01:01:49.670 --> 01:01:50.540", "speaker": "Alexander Vasserman", "text": "I can"}, {"source_name": "lecture2", "index": 654, "time": "01:01:52.600 --> 01:01:55.089", "speaker": "Alexander Vasserman", "text": "split it and get at least"}, {"source_name": "lecture2", "index": 655, "time": "01:01:57.900 --> 01:02:02.749", "speaker": "Alexander Vasserman", "text": "so. This is kind of an interesting syntax as well. Where, like, you know, I i'm creating me"}, {"source_name": "lecture2", "index": 656, "time": "01:02:03.750 --> 01:02:06.699", "speaker": "Alexander Vasserman", "text": "is constant string, and then apply any function"}, {"source_name": "lecture2", "index": 657, "time": "01:02:06.750 --> 01:02:08.330", "speaker": "Alexander Vasserman", "text": "on it right away."}, {"source_name": "lecture2", "index": 658, "time": "01:02:08.390 --> 01:02:14.340", "speaker": "Alexander Vasserman", "text": "you might not have seen that syntax. It's a little you know, usually maybe. No."}, {"source_name": "lecture2", "index": 659, "time": "01:02:14.370 --> 01:02:15.250", "speaker": "Alexander Vasserman", "text": "Again."}, {"source_name": "lecture2", "index": 660, "time": "01:02:15.620 --> 01:02:17.109", "speaker": "Alexander Vasserman", "text": "you say that"}, {"source_name": "lecture2", "index": 661, "time": "01:02:17.440 --> 01:02:18.879", "speaker": "Alexander Vasserman", "text": "create a variable"}, {"source_name": "lecture2", "index": 662, "time": "01:02:26.040 --> 01:02:27.019", "speaker": "Alexander Vasserman", "text": "and then"}, {"source_name": "lecture2", "index": 663, "time": "01:02:30.890 --> 01:02:32.960", "speaker": "Alexander Vasserman", "text": "use a split function"}, {"source_name": "lecture2", "index": 664, "time": "01:02:33.110 --> 01:02:34.469", "speaker": "Alexander Vasserman", "text": "on that variable"}, {"source_name": "lecture2", "index": 665, "time": "01:02:34.510 --> 01:02:41.910", "speaker": "Alexander Vasserman", "text": "and so they they split by default splits on any white space, and the"}, {"source_name": "lecture2", "index": 666, "time": "01:02:42.790 --> 01:02:47.169", "speaker": "Alexander Vasserman", "text": "one of the reasons why we are going to use. It is because"}, {"source_name": "lecture2", "index": 667, "time": "01:02:47.670 --> 01:02:50.830", "speaker": "Alexander Vasserman", "text": "it's the most basic way to"}, {"source_name": "lecture2", "index": 668, "time": "01:02:51.710 --> 01:02:56.470", "speaker": "Alexander Vasserman", "text": "take a string and split it into words. We'll talk a lot about"}, {"source_name": "lecture2", "index": 669, "time": "01:02:56.880 --> 01:02:57.950", "speaker": "Alexander Vasserman", "text": "what"}, {"source_name": "lecture2", "index": 670, "time": "01:02:58.060 --> 01:02:59.529", "speaker": "Alexander Vasserman", "text": "you mean by words."}, {"source_name": "lecture2", "index": 671, "time": "01:02:59.580 --> 01:03:02.959", "speaker": "Alexander Vasserman", "text": "and that's kind of a big topic in search engine"}, {"source_name": "lecture2", "index": 672, "time": "01:03:02.980 --> 01:03:05.020", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture2", "index": 673, "time": "01:03:05.090 --> 01:03:05.850", "speaker": "Alexander Vasserman", "text": "I know"}, {"source_name": "lecture2", "index": 674, "time": "01:03:06.500 --> 01:03:12.239", "speaker": "Alexander Vasserman", "text": "might not make sense to you right now that it's a big topic. But we'll we'll go get into it"}, {"source_name": "lecture2", "index": 675, "time": "01:03:15.700 --> 01:03:19.290", "speaker": "Alexander Vasserman", "text": "all right. So any questions about strings."}, {"source_name": "lecture2", "index": 676, "time": "01:03:25.470 --> 01:03:26.450", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 677, "time": "01:03:27.930 --> 01:03:29.069", "speaker": "Alexander Vasserman", "text": "it's not"}, {"source_name": "lecture2", "index": 678, "time": "01:03:30.540 --> 01:03:31.540", "speaker": "Alexander Vasserman", "text": "that's"}, {"source_name": "lecture2", "index": 679, "time": "01:03:34.560 --> 01:03:35.790", "speaker": "Alexander Vasserman", "text": "get in June"}, {"source_name": "lecture2", "index": 680, "time": "01:03:36.020 --> 01:03:37.319", "speaker": "Alexander Vasserman", "text": "sets."}, {"source_name": "lecture2", "index": 681, "time": "01:03:40.280 --> 01:03:41.330", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 682, "time": "01:03:42.910 --> 01:03:44.630", "speaker": "Alexander Vasserman", "text": "another container type"}, {"source_name": "lecture2", "index": 683, "time": "01:03:45.590 --> 01:03:50.180", "speaker": "Alexander Vasserman", "text": "similar to to a list. In some sense, I"}, {"source_name": "lecture2", "index": 684, "time": "01:03:50.700 --> 01:03:51.810", "speaker": "Alexander Vasserman", "text": "hey? That"}, {"source_name": "lecture2", "index": 685, "time": "01:03:51.830 --> 01:03:55.620", "speaker": "Alexander Vasserman", "text": "if you want to create a constant container of typeset."}, {"source_name": "lecture2", "index": 686, "time": "01:03:55.640 --> 01:04:00.019", "speaker": "Alexander Vasserman", "text": "You paid it similarly to list, except using curly braces."}, {"source_name": "lecture2", "index": 687, "time": "01:04:00.450 --> 01:04:03.500", "speaker": "Alexander Vasserman", "text": "so something like this."}, {"source_name": "lecture2", "index": 688, "time": "01:04:09.440 --> 01:04:11.280", "speaker": "Alexander Vasserman", "text": "You can also"}, {"source_name": "lecture2", "index": 689, "time": "01:04:12.100 --> 01:04:13.189", "speaker": "Alexander Vasserman", "text": "converge"}, {"source_name": "lecture2", "index": 690, "time": "01:04:13.980 --> 01:04:17.110", "speaker": "Alexander Vasserman", "text": "streams, or at least 2 sets."}, {"source_name": "lecture2", "index": 691, "time": "01:04:17.260 --> 01:04:18.310", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture2", "index": 692, "time": "01:04:18.500 --> 01:04:21.470", "speaker": "Alexander Vasserman", "text": "that also works. So"}, {"source_name": "lecture2", "index": 693, "time": "01:04:21.850 --> 01:04:28.540", "speaker": "Alexander Vasserman", "text": "you can use. Set that as the constructor for for a set the same way that we use least before."}, {"source_name": "lecture2", "index": 694, "time": "01:04:31.880 --> 01:04:34.950", "speaker": "Alexander Vasserman", "text": "and yeah. So this thing works for a list."}, {"source_name": "lecture2", "index": 695, "time": "01:04:35.720 --> 01:04:37.109", "speaker": "Alexander Vasserman", "text": "So I can"}, {"source_name": "lecture2", "index": 696, "time": "01:04:38.010 --> 01:04:38.819", "speaker": "Alexander Vasserman", "text": "say"}, {"source_name": "lecture2", "index": 697, "time": "01:04:48.960 --> 01:04:50.999", "speaker": "Alexander Vasserman", "text": "and get that set."}, {"source_name": "lecture2", "index": 698, "time": "01:04:53.500 --> 01:04:55.590", "speaker": "Alexander Vasserman", "text": "So what are the differences?"}, {"source_name": "lecture2", "index": 699, "time": "01:04:55.920 --> 01:04:59.419", "speaker": "Alexander Vasserman", "text": "Well, one of the big difference is"}, {"source_name": "lecture2", "index": 700, "time": "01:04:59.910 --> 01:05:00.950", "speaker": "Alexander Vasserman", "text": "sets"}, {"source_name": "lecture2", "index": 701, "time": "01:05:02.190 --> 01:05:04.589", "speaker": "Alexander Vasserman", "text": "contain only"}, {"source_name": "lecture2", "index": 702, "time": "01:05:05.040 --> 01:05:06.000", "speaker": "Alexander Vasserman", "text": "unique"}, {"source_name": "lecture2", "index": 703, "time": "01:05:07.060 --> 01:05:08.259", "speaker": "Alexander Vasserman", "text": "elements."}, {"source_name": "lecture2", "index": 704, "time": "01:05:10.140 --> 01:05:15.299", "speaker": "Alexander Vasserman", "text": "by the way, if you haven't seen in Python, this is the the pound is how the"}, {"source_name": "lecture2", "index": 705, "time": "01:05:15.410 --> 01:05:21.389", "speaker": "Alexander Vasserman", "text": "do you? comments? So the anything that follows this pound sign"}, {"source_name": "lecture2", "index": 706, "time": "01:05:21.410 --> 01:05:25.280", "speaker": "Alexander Vasserman", "text": "is basically not by interpreter. And just for"}, {"source_name": "lecture2", "index": 707, "time": "01:05:25.490 --> 01:05:26.540", "speaker": "Alexander Vasserman", "text": "people."}, {"source_name": "lecture2", "index": 708, "time": "01:05:26.590 --> 01:05:28.330", "speaker": "Alexander Vasserman", "text": "I mean. But"}, {"source_name": "lecture2", "index": 709, "time": "01:05:28.400 --> 01:05:31.680", "speaker": "Alexander Vasserman", "text": "going back to sets a 5, for example."}, {"source_name": "lecture2", "index": 710, "time": "01:05:31.910 --> 01:05:33.580", "speaker": "Alexander Vasserman", "text": "have a"}, {"source_name": "lecture2", "index": 711, "time": "01:05:33.880 --> 01:05:34.620", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture2", "index": 712, "time": "01:05:36.860 --> 01:05:38.000", "speaker": "Alexander Vasserman", "text": "see."}, {"source_name": "lecture2", "index": 713, "time": "01:05:39.950 --> 01:05:40.750", "speaker": "Alexander Vasserman", "text": "a"}, {"source_name": "lecture2", "index": 714, "time": "01:05:41.520 --> 01:05:42.450", "speaker": "Alexander Vasserman", "text": "see?"}, {"source_name": "lecture2", "index": 715, "time": "01:05:42.530 --> 01:05:44.060", "speaker": "Alexander Vasserman", "text": "Start with that list"}, {"source_name": "lecture2", "index": 716, "time": "01:05:44.150 --> 01:05:45.940", "speaker": "Alexander Vasserman", "text": "and converted it. To set."}, {"source_name": "lecture2", "index": 717, "time": "01:05:46.240 --> 01:05:47.949", "speaker": "Alexander Vasserman", "text": "The set is"}, {"source_name": "lecture2", "index": 718, "time": "01:05:48.280 --> 01:05:50.660", "speaker": "Alexander Vasserman", "text": "contains only the unique"}, {"source_name": "lecture2", "index": 719, "time": "01:05:50.780 --> 01:05:53.930", "speaker": "Alexander Vasserman", "text": "elements. So it does not have repeated elements."}, {"source_name": "lecture2", "index": 720, "time": "01:05:54.120 --> 01:05:57.040", "speaker": "Alexander Vasserman", "text": "so the the the least had 2 ways"}, {"source_name": "lecture2", "index": 721, "time": "01:05:57.100 --> 01:06:01.399", "speaker": "Alexander Vasserman", "text": "set. There is no such a you know, concept inside the set."}, {"source_name": "lecture2", "index": 722, "time": "01:06:01.480 --> 01:06:02.549", "speaker": "Alexander Vasserman", "text": "How many"}, {"source_name": "lecture2", "index": 723, "time": "01:06:02.660 --> 01:06:05.829", "speaker": "Alexander Vasserman", "text": "times something appears in the set."}, {"source_name": "lecture2", "index": 724, "time": "01:06:06.680 --> 01:06:07.439", "speaker": "Alexander Vasserman", "text": "Got it"}, {"source_name": "lecture2", "index": 725, "time": "01:06:07.940 --> 01:06:12.580", "speaker": "Rana Hani", "text": "by unique elements, you mean, like there's no repeats"}, {"source_name": "lecture2", "index": 726, "time": "01:06:14.300 --> 01:06:15.160", "speaker": "Alexander Vasserman", "text": "exactly"}, {"source_name": "lecture2", "index": 727, "time": "01:06:15.470 --> 01:06:16.970", "speaker": "Alexander Vasserman", "text": "so."}, {"source_name": "lecture2", "index": 728, "time": "01:06:19.620 --> 01:06:21.200", "speaker": "Alexander Vasserman", "text": "Oh, yes."}, {"source_name": "lecture2", "index": 729, "time": "01:06:25.660 --> 01:06:28.700", "speaker": "Alexander Vasserman", "text": "another difference is that"}, {"source_name": "lecture2", "index": 730, "time": "01:06:29.060 --> 01:06:31.680", "speaker": "Alexander Vasserman", "text": "sets are not"}, {"source_name": "lecture2", "index": 731, "time": "01:06:32.160 --> 01:06:33.189", "speaker": "Alexander Vasserman", "text": "order."}, {"source_name": "lecture2", "index": 732, "time": "01:06:34.130 --> 01:06:35.669", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture2", "index": 733, "time": "01:06:36.380 --> 01:06:40.230", "speaker": "Alexander Vasserman", "text": "whichever way you will list the elements, and"}, {"source_name": "lecture2", "index": 734, "time": "01:06:40.260 --> 01:06:42.569", "speaker": "Alexander Vasserman", "text": "as an input, it doesn't really matter if"}, {"source_name": "lecture2", "index": 735, "time": "01:06:43.120 --> 01:06:45.630", "speaker": "Alexander Vasserman", "text": "and in particular because of that."}, {"source_name": "lecture2", "index": 736, "time": "01:06:46.940 --> 01:06:49.130", "speaker": "Alexander Vasserman", "text": "if I say something like."}, {"source_name": "lecture2", "index": 737, "time": "01:06:50.960 --> 01:06:51.799", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 738, "time": "01:06:52.010 --> 01:06:53.429", "speaker": "Alexander Vasserman", "text": "I want to."}, {"source_name": "lecture2", "index": 739, "time": "01:06:53.840 --> 01:06:59.540", "speaker": "Alexander Vasserman", "text": "or get the whatever second element of the set that doesn't make sense, because"}, {"source_name": "lecture2", "index": 740, "time": "01:07:00.630 --> 01:07:02.479", "speaker": "Alexander Vasserman", "text": "indexing like that"}, {"source_name": "lecture2", "index": 741, "time": "01:07:02.530 --> 01:07:08.530", "speaker": "Alexander Vasserman", "text": "implies ordering right? So that's why set the object does not"}, {"source_name": "lecture2", "index": 742, "time": "01:07:09.300 --> 01:07:11.049", "speaker": "Alexander Vasserman", "text": "have the subscript"}, {"source_name": "lecture2", "index": 743, "time": "01:07:11.180 --> 01:07:13.920", "speaker": "Alexander Vasserman", "text": "operator, or you can't."}, {"source_name": "lecture2", "index": 744, "time": "01:07:14.080 --> 01:07:14.870", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 745, "time": "01:07:15.420 --> 01:07:16.450", "speaker": "Alexander Vasserman", "text": "basically"}, {"source_name": "lecture2", "index": 746, "time": "01:07:16.670 --> 01:07:18.659", "speaker": "Alexander Vasserman", "text": "do direct access"}, {"source_name": "lecture2", "index": 747, "time": "01:07:18.720 --> 01:07:20.149", "speaker": "Alexander Vasserman", "text": "in this way."}, {"source_name": "lecture2", "index": 748, "time": "01:07:24.690 --> 01:07:28.980", "speaker": "Alexander Vasserman", "text": "But what sets are very good at"}, {"source_name": "lecture2", "index": 749, "time": "01:07:29.090 --> 01:07:30.160", "speaker": "Alexander Vasserman", "text": "he is"}, {"source_name": "lecture2", "index": 750, "time": "01:07:30.320 --> 01:07:33.650", "speaker": "Alexander Vasserman", "text": "testing if something is in the set."}, {"source_name": "lecture2", "index": 751, "time": "01:07:34.050 --> 01:07:35.169", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture2", "index": 752, "time": "01:07:35.400 --> 01:07:41.390", "speaker": "Alexander Vasserman", "text": "we again can the same way as we did with lists. We can say"}, {"source_name": "lecture2", "index": 753, "time": "01:07:45.370 --> 01:07:51.300", "speaker": "Alexander Vasserman", "text": "something like that, and it's still true, not anything particularly interesting."}, {"source_name": "lecture2", "index": 754, "time": "01:07:51.470 --> 01:07:52.930", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture2", "index": 755, "time": "01:07:53.990 --> 01:07:54.870", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture2", "index": 756, "time": "01:07:55.530 --> 01:07:56.540", "speaker": "Alexander Vasserman", "text": "look up"}, {"source_name": "lecture2", "index": 757, "time": "01:07:57.170 --> 01:07:59.240", "speaker": "Alexander Vasserman", "text": "like that. It is"}, {"source_name": "lecture2", "index": 758, "time": "01:07:59.680 --> 01:08:00.939", "speaker": "Alexander Vasserman", "text": "very efficient."}, {"source_name": "lecture2", "index": 759, "time": "01:08:02.800 --> 01:08:03.500", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 760, "time": "01:08:07.360 --> 01:08:08.410", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture2", "index": 761, "time": "01:08:11.620 --> 01:08:13.700", "speaker": "Alexander Vasserman", "text": "You know. There to demonstrate it."}, {"source_name": "lecture2", "index": 762, "time": "01:08:14.080 --> 01:08:15.410", "speaker": "Alexander Vasserman", "text": "Let me"}, {"source_name": "lecture2", "index": 763, "time": "01:08:16.830 --> 01:08:20.470", "speaker": "Alexander Vasserman", "text": "introduce another library called time with."}, {"source_name": "lecture2", "index": 764, "time": "01:08:20.890 --> 01:08:31.259", "speaker": "Alexander Vasserman", "text": "so something that you're going to use later as well. This is basically just the way to to see how how old something takes"}, {"source_name": "lecture2", "index": 765, "time": "01:08:31.310 --> 01:08:38.900", "speaker": "Alexander Vasserman", "text": "and they're not going to go into details of usage of time. It right now. But I just wanted to"}, {"source_name": "lecture2", "index": 766, "time": "01:08:39.250 --> 01:08:43.669", "speaker": "Alexander Vasserman", "text": "kind of give you an example of"}, {"source_name": "lecture2", "index": 767, "time": "01:08:45.189 --> 01:08:46.800", "speaker": "Alexander Vasserman", "text": "Oh, so let's say."}, {"source_name": "lecture2", "index": 768, "time": "01:08:47.010 --> 01:08:48.610", "speaker": "Alexander Vasserman", "text": "let's create the least"}, {"source_name": "lecture2", "index": 769, "time": "01:08:55.500 --> 01:08:57.500", "speaker": "Alexander Vasserman", "text": "that's kind of maybe."}, {"source_name": "lecture2", "index": 770, "time": "01:09:00.760 --> 01:09:03.439", "speaker": "Alexander Vasserman", "text": "By the way, if you are not familiar with"}, {"source_name": "lecture2", "index": 771, "time": "01:09:03.910 --> 01:09:09.160", "speaker": "Alexander Vasserman", "text": "range, that's also a very common operator in"}, {"source_name": "lecture2", "index": 772, "time": "01:09:09.300 --> 01:09:14.700", "speaker": "Alexander Vasserman", "text": "or function in the in a python that just generates"}, {"source_name": "lecture2", "index": 773, "time": "01:09:15.109 --> 01:09:25.250", "speaker": "Alexander Vasserman", "text": "in case of one argument is basically all the numbers from 0 to 99 in this case, and this is all the numbers from 200 to 299."}, {"source_name": "lecture2", "index": 774, "time": "01:09:25.790 --> 01:09:26.700", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 775, "time": "01:09:26.800 --> 01:09:30.239", "speaker": "Alexander Vasserman", "text": "let's say we have that this as it"}, {"source_name": "lecture2", "index": 776, "time": "01:09:30.370 --> 01:09:31.490", "speaker": "Alexander Vasserman", "text": "list."}, {"source_name": "lecture2", "index": 777, "time": "01:09:31.680 --> 01:09:33.880", "speaker": "Alexander Vasserman", "text": "and let's say we have"}, {"source_name": "lecture2", "index": 778, "time": "01:09:34.050 --> 01:09:35.090", "speaker": "Alexander Vasserman", "text": "it's set."}, {"source_name": "lecture2", "index": 779, "time": "01:09:35.220 --> 01:09:37.140", "speaker": "Alexander Vasserman", "text": "That is just"}, {"source_name": "lecture2", "index": 780, "time": "01:09:38.500 --> 01:09:39.740", "speaker": "Alexander Vasserman", "text": "the same thing."}, {"source_name": "lecture2", "index": 781, "time": "01:09:39.850 --> 01:09:40.630", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture2", "index": 782, "time": "01:09:44.029 --> 01:09:44.950", "speaker": "Alexander Vasserman", "text": "you know, just"}, {"source_name": "lecture2", "index": 783, "time": "01:09:44.970 --> 01:09:46.680", "speaker": "Alexander Vasserman", "text": "converting that to set."}, {"source_name": "lecture2", "index": 784, "time": "01:09:47.979 --> 01:09:49.309", "speaker": "Alexander Vasserman", "text": "and then"}, {"source_name": "lecture2", "index": 785, "time": "01:09:49.680 --> 01:09:50.630", "speaker": "Alexander Vasserman", "text": "let's"}, {"source_name": "lecture2", "index": 786, "time": "01:09:53.500 --> 01:09:54.440", "speaker": "Alexander Vasserman", "text": "very much"}, {"source_name": "lecture2", "index": 787, "time": "01:09:54.480 --> 01:09:55.490", "speaker": "Alexander Vasserman", "text": "so."}, {"source_name": "lecture2", "index": 788, "time": "01:09:55.510 --> 01:09:59.969", "speaker": "Alexander Vasserman", "text": "Time it is a package, and inside of it there is a function called time it as well."}, {"source_name": "lecture2", "index": 789, "time": "01:10:00.040 --> 01:10:01.480", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture2", "index": 790, "time": "01:10:03.550 --> 01:10:07.940", "speaker": "Alexander Vasserman", "text": "ignore the the hold on the thing. This is kind of"}, {"source_name": "lecture2", "index": 791, "time": "01:10:08.250 --> 01:10:11.309", "speaker": "Alexander Vasserman", "text": "how anonymous functions"}, {"source_name": "lecture2", "index": 792, "time": "01:10:11.380 --> 01:10:27.230", "speaker": "Alexander Vasserman", "text": "work in Python. If the anonymous function means nothing to you, don't worry about it, we might get into it a little bit later. but for now don't worry about it. But basically this is just the one way to"}, {"source_name": "lecture2", "index": 793, "time": "01:10:29.680 --> 01:10:32.359", "speaker": "Alexander Vasserman", "text": "for me to execute."}, {"source_name": "lecture2", "index": 794, "time": "01:10:32.410 --> 01:10:33.219", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 795, "time": "01:10:33.830 --> 01:10:34.700", "speaker": "Alexander Vasserman", "text": "a"}, {"source_name": "lecture2", "index": 796, "time": "01:10:35.170 --> 01:10:39.659", "speaker": "Alexander Vasserman", "text": "basically test, whether or not 1 50 is in the"}, {"source_name": "lecture2", "index": 797, "time": "01:10:41.290 --> 01:10:42.550", "speaker": "Alexander Vasserman", "text": "in my tem set."}, {"source_name": "lecture2", "index": 798, "time": "01:10:43.260 --> 01:10:45.099", "speaker": "Alexander Vasserman", "text": "So if I execute that."}, {"source_name": "lecture2", "index": 799, "time": "01:10:45.340 --> 01:10:46.280", "speaker": "Alexander Vasserman", "text": "I guess."}, {"source_name": "lecture2", "index": 800, "time": "01:10:46.520 --> 01:10:50.710", "speaker": "Alexander Vasserman", "text": "and it time it executes something many, many, many times."}, {"source_name": "lecture2", "index": 801, "time": "01:10:50.760 --> 01:11:01.590", "speaker": "Alexander Vasserman", "text": "that's you. You can specify how many times as an argument. So you know the the actual numbers don't make that much of a difference. but"}, {"source_name": "lecture2", "index": 802, "time": "01:11:01.680 --> 01:11:06.049", "speaker": "Alexander Vasserman", "text": "what does make difference is relative numbers."}, {"source_name": "lecture2", "index": 803, "time": "01:11:06.080 --> 01:11:07.190", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 804, "time": "01:11:07.630 --> 01:11:09.750", "speaker": "Alexander Vasserman", "text": "if I"}, {"source_name": "lecture2", "index": 805, "time": "01:11:12.990 --> 01:11:15.250", "speaker": "Alexander Vasserman", "text": "do the same thing. But with the"}, {"source_name": "lecture2", "index": 806, "time": "01:11:15.680 --> 01:11:16.599", "speaker": "Alexander Vasserman", "text": "list"}, {"source_name": "lecture2", "index": 807, "time": "01:11:21.080 --> 01:11:23.080", "speaker": "Alexander Vasserman", "text": "it takes significantly longer."}, {"source_name": "lecture2", "index": 808, "time": "01:11:23.730 --> 01:11:26.290", "speaker": "Alexander Vasserman", "text": "and, moreover, this is set"}, {"source_name": "lecture2", "index": 809, "time": "01:11:26.520 --> 01:11:32.319", "speaker": "Alexander Vasserman", "text": "it kind of doesn't matter how large the set is, access will be very fast"}, {"source_name": "lecture2", "index": 810, "time": "01:11:32.550 --> 01:11:36.629", "speaker": "Alexander Vasserman", "text": "with the least, the bigger the least the the longer it's going to take."}, {"source_name": "lecture2", "index": 811, "time": "01:11:37.010 --> 01:11:43.929", "speaker": "Alexander Vasserman", "text": "So when we're going to deal, this large collections sets are going to be our friends."}, {"source_name": "lecture2", "index": 812, "time": "01:11:45.560 --> 01:11:47.889", "speaker": "Alexander Vasserman", "text": "and really, do you have a question?"}, {"source_name": "lecture2", "index": 813, "time": "01:11:48.180 --> 01:11:56.480", "speaker": "Amirali Djalilvand", "text": "Yeah. So when you're converting those to a set, are you automatically removing any duplicate entries when you're converting it."}, {"source_name": "lecture2", "index": 814, "time": "01:11:56.690 --> 01:11:58.529", "speaker": "Alexander Vasserman", "text": "That's exactly right. Yes."}, {"source_name": "lecture2", "index": 815, "time": "01:11:58.660 --> 01:11:59.440", "speaker": "Amirali Djalilvand", "text": "Okay."}, {"source_name": "lecture2", "index": 816, "time": "01:12:03.380 --> 01:12:04.150", "speaker": "Alexander Vasserman", "text": "no, no"}, {"source_name": "lecture2", "index": 817, "time": "01:12:04.520 --> 01:12:06.779", "speaker": "Rana Hani", "text": "our sets mutable or no."}, {"source_name": "lecture2", "index": 818, "time": "01:12:07.800 --> 01:12:11.160", "speaker": "Alexander Vasserman", "text": "Oh, yes, that's all sets."}, {"source_name": "lecture2", "index": 819, "time": "01:12:11.460 --> 01:12:12.120", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture2", "index": 820, "time": "01:12:15.090 --> 01:12:16.530", "speaker": "Alexander Vasserman", "text": "that's a good question."}, {"source_name": "lecture2", "index": 821, "time": "01:12:17.950 --> 01:12:23.089", "speaker": "Alexander Vasserman", "text": "Yeah, no sets are definitely mutable. Yes. So it took me a second. So"}, {"source_name": "lecture2", "index": 822, "time": "01:12:23.790 --> 01:12:25.150", "speaker": "Alexander Vasserman", "text": "you can say."}, {"source_name": "lecture2", "index": 823, "time": "01:12:26.500 --> 01:12:27.130", "speaker": "Alexander Vasserman", "text": "sorry"}, {"source_name": "lecture2", "index": 824, "time": "01:12:28.390 --> 01:12:29.519", "speaker": "Alexander Vasserman", "text": "i'm set"}, {"source_name": "lecture2", "index": 825, "time": "01:12:29.880 --> 01:12:31.240", "speaker": "Alexander Vasserman", "text": "yeah to add"}, {"source_name": "lecture2", "index": 826, "time": "01:12:31.750 --> 01:12:34.569", "speaker": "Alexander Vasserman", "text": "and let's say, add"}, {"source_name": "lecture2", "index": 827, "time": "01:12:34.610 --> 01:12:35.340", "speaker": "Alexander Vasserman", "text": "you know"}, {"source_name": "lecture2", "index": 828, "time": "01:12:35.490 --> 01:12:37.369", "speaker": "Alexander Vasserman", "text": "number 1 50 to it."}, {"source_name": "lecture2", "index": 829, "time": "01:12:37.500 --> 01:12:39.660", "speaker": "Alexander Vasserman", "text": "Oh, sorry! Number 150"}, {"source_name": "lecture2", "index": 830, "time": "01:12:39.990 --> 01:12:41.449", "speaker": "Alexander Vasserman", "text": "and then"}, {"source_name": "lecture2", "index": 831, "time": "01:12:41.780 --> 01:12:43.540", "speaker": "Alexander Vasserman", "text": "check if"}, {"source_name": "lecture2", "index": 832, "time": "01:12:43.810 --> 01:12:45.559", "speaker": "Alexander Vasserman", "text": "no 1, 15"}, {"source_name": "lecture2", "index": 833, "time": "01:12:45.800 --> 01:12:47.360", "speaker": "Alexander Vasserman", "text": "should be in"}, {"source_name": "lecture2", "index": 37, "time": "01:12:47.510 --> 01:12:48.340", "speaker": "Alexander Vasserman", "text": "should be in"}, {"source_name": "lecture2", "index": 835, "time": "01:12:52.820 --> 01:12:54.139", "speaker": "Alexander Vasserman", "text": "Louise."}, {"source_name": "lecture2", "index": 836, "time": "01:12:57.320 --> 01:13:01.290", "speaker": "Luis Gonzalez", "text": "I'm sorry you might have already know what is the purpose of time. It again."}, {"source_name": "lecture2", "index": 837, "time": "01:13:01.760 --> 01:13:06.019", "speaker": "Alexander Vasserman", "text": "Oh, yes, so time it is basically just the"}, {"source_name": "lecture2", "index": 838, "time": "01:13:06.620 --> 01:13:10.369", "speaker": "Alexander Vasserman", "text": "showing how long and operation takes."}, {"source_name": "lecture2", "index": 839, "time": "01:13:11.080 --> 01:13:14.190", "speaker": "Alexander Vasserman", "text": "So basically here"}, {"source_name": "lecture2", "index": 840, "time": "01:13:14.640 --> 01:13:15.800", "speaker": "Alexander Vasserman", "text": "I was"}, {"source_name": "lecture2", "index": 841, "time": "01:13:15.820 --> 01:13:17.600", "speaker": "Alexander Vasserman", "text": "doing a look up."}, {"source_name": "lecture2", "index": 842, "time": "01:13:17.620 --> 01:13:18.550", "speaker": "Alexander Vasserman", "text": "saying."}, {"source_name": "lecture2", "index": 843, "time": "01:13:18.860 --> 01:13:23.910", "speaker": "Alexander Vasserman", "text": "Let me check. If 1 50 is in the site."}, {"source_name": "lecture2", "index": 844, "time": "01:13:24.560 --> 01:13:26.420", "speaker": "Alexander Vasserman", "text": "How long is it going to take"}, {"source_name": "lecture2", "index": 845, "time": "01:13:26.710 --> 01:13:29.070", "speaker": "Alexander Vasserman", "text": "they compute my computer to"}, {"source_name": "lecture2", "index": 846, "time": "01:13:29.210 --> 01:13:31.229", "speaker": "Alexander Vasserman", "text": "to execute that operation?"}, {"source_name": "lecture2", "index": 847, "time": "01:13:32.020 --> 01:13:34.809", "speaker": "Alexander Vasserman", "text": "And so time? It basically"}, {"source_name": "lecture2", "index": 848, "time": "01:13:35.270 --> 01:13:39.539", "speaker": "Alexander Vasserman", "text": "executes the operation many, many, many times."}, {"source_name": "lecture2", "index": 849, "time": "01:13:39.820 --> 01:13:44.060", "speaker": "Alexander Vasserman", "text": "so that you get kind of average performance over many times"}, {"source_name": "lecture2", "index": 850, "time": "01:13:44.210 --> 01:13:47.449", "speaker": "Alexander Vasserman", "text": "as an estimate how long it's going to take."}, {"source_name": "lecture2", "index": 851, "time": "01:13:47.770 --> 01:13:50.299", "speaker": "Alexander Vasserman", "text": "and I introduced it here just"}, {"source_name": "lecture2", "index": 852, "time": "01:13:50.970 --> 01:13:52.540", "speaker": "Alexander Vasserman", "text": "to see the difference."}, {"source_name": "lecture2", "index": 853, "time": "01:13:52.630 --> 01:13:53.769", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 854, "time": "01:13:55.010 --> 01:13:57.660", "speaker": "Alexander Vasserman", "text": "let's say the the it took"}, {"source_name": "lecture2", "index": 855, "time": "01:13:57.820 --> 01:14:01.869", "speaker": "Alexander Vasserman", "text": "point 1, 2\u00c2\u00a0s in to"}, {"source_name": "lecture2", "index": 856, "time": "01:14:01.900 --> 01:14:06.119", "speaker": "Alexander Vasserman", "text": "do a look up inside the set, or many lookups"}, {"source_name": "lecture2", "index": 857, "time": "01:14:06.500 --> 01:14:09.670", "speaker": "Alexander Vasserman", "text": "but the same number or full cups"}, {"source_name": "lecture2", "index": 858, "time": "01:14:09.870 --> 01:14:13.359", "speaker": "Alexander Vasserman", "text": "in the least, that contains all the same elements"}, {"source_name": "lecture2", "index": 859, "time": "01:14:13.530 --> 01:14:17.019", "speaker": "Alexander Vasserman", "text": "2, almost 3\u00c2\u00a0s. So"}, {"source_name": "lecture2", "index": 860, "time": "01:14:17.190 --> 01:14:17.920", "speaker": "Alexander Vasserman", "text": "you know."}, {"source_name": "lecture2", "index": 861, "time": "01:14:18.050 --> 01:14:20.169", "speaker": "Alexander Vasserman", "text": "whatever it is almost 30 times"}, {"source_name": "lecture2", "index": 862, "time": "01:14:20.240 --> 01:14:21.480", "speaker": "Alexander Vasserman", "text": "longer."}, {"source_name": "lecture2", "index": 863, "time": "01:14:22.210 --> 01:14:23.920", "speaker": "Alexander Vasserman", "text": "So just kind of from"}, {"source_name": "lecture2", "index": 864, "time": "01:14:23.970 --> 01:14:26.730", "speaker": "Alexander Vasserman", "text": "illustration. How sets"}, {"source_name": "lecture2", "index": 865, "time": "01:14:26.840 --> 01:14:28.609", "speaker": "Alexander Vasserman", "text": "are fast for a lookout"}, {"source_name": "lecture2", "index": 866, "time": "01:14:30.350 --> 01:14:31.279", "speaker": "Alexander Vasserman", "text": "Make sense."}, {"source_name": "lecture2", "index": 867, "time": "01:14:31.760 --> 01:14:33.160", "speaker": "Luis Gonzalez", "text": "Sounds good. Thank you."}, {"source_name": "lecture2", "index": 868, "time": "01:14:34.000 --> 01:14:36.120", "speaker": "Alexander Vasserman", "text": "any other questions."}, {"source_name": "lecture2", "index": 869, "time": "01:14:36.800 --> 01:14:39.779", "speaker": "Alexander Vasserman", "text": "Thank you, guys, for asking me all this questions. This is like"}, {"source_name": "lecture2", "index": 870, "time": "01:14:39.970 --> 01:14:41.010", "speaker": "Alexander Vasserman", "text": "really"}, {"source_name": "lecture2", "index": 871, "time": "01:14:41.030 --> 01:14:47.019", "speaker": "Alexander Vasserman", "text": "helping me helping everybody else in the class, because if you have questions, somebody else might have that question."}, {"source_name": "lecture2", "index": 872, "time": "01:14:47.110 --> 01:14:50.500", "speaker": "Alexander Vasserman", "text": "and also, for me."}, {"source_name": "lecture2", "index": 873, "time": "01:14:50.600 --> 01:14:51.990", "speaker": "Alexander Vasserman", "text": "Oh, sometimes"}, {"source_name": "lecture2", "index": 874, "time": "01:14:52.240 --> 01:14:58.739", "speaker": "Alexander Vasserman", "text": "it's hard to know what it is, you guys know, and what you don't know. So you know I might assume that."}, {"source_name": "lecture2", "index": 875, "time": "01:14:58.820 --> 01:15:10.129", "speaker": "Alexander Vasserman", "text": "you know something or not even think about the fact that you might have not heard the term or before. And so when you ask me questions that that follow me alive."}, {"source_name": "lecture2", "index": 876, "time": "01:15:12.780 --> 01:15:15.190", "speaker": "Alexander Vasserman", "text": "so what else can we do?"}, {"source_name": "lecture2", "index": 877, "time": "01:15:15.270 --> 01:15:16.730", "speaker": "Alexander Vasserman", "text": "This sets?"}, {"source_name": "lecture2", "index": 878, "time": "01:15:17.450 --> 01:15:18.870", "speaker": "Alexander Vasserman", "text": "If"}, {"source_name": "lecture2", "index": 879, "time": "01:15:20.190 --> 01:15:21.219", "speaker": "Alexander Vasserman", "text": "any"}, {"source_name": "lecture2", "index": 880, "time": "01:15:21.670 --> 01:15:23.460", "speaker": "Alexander Vasserman", "text": "of you"}, {"source_name": "lecture2", "index": 881, "time": "01:15:23.760 --> 01:15:25.790", "speaker": "Alexander Vasserman", "text": "taken some"}, {"source_name": "lecture2", "index": 882, "time": "01:15:25.860 --> 01:15:28.710", "speaker": "Alexander Vasserman", "text": "math courses we like"}, {"source_name": "lecture2", "index": 883, "time": "01:15:29.140 --> 01:15:31.120", "speaker": "Alexander Vasserman", "text": "not even sure what it would be"}, {"source_name": "lecture2", "index": 884, "time": "01:15:32.260 --> 01:15:34.519", "speaker": "Alexander Vasserman", "text": "discrete math or something like that."}, {"source_name": "lecture2", "index": 885, "time": "01:15:34.600 --> 01:15:37.510", "speaker": "Alexander Vasserman", "text": "you've since that operations"}, {"source_name": "lecture2", "index": 886, "time": "01:15:37.790 --> 01:15:40.239", "speaker": "Alexander Vasserman", "text": "to deal"}, {"source_name": "lecture2", "index": 887, "time": "01:15:40.780 --> 01:15:41.559", "speaker": "Alexander Vasserman", "text": "yeah"}, {"source_name": "lecture2", "index": 888, "time": "01:15:42.490 --> 01:15:43.400", "speaker": "Alexander Vasserman", "text": "set"}, {"source_name": "lecture2", "index": 889, "time": "01:15:44.170 --> 01:15:46.570", "speaker": "Alexander Vasserman", "text": "operations in python as well."}, {"source_name": "lecture2", "index": 890, "time": "01:15:46.840 --> 01:15:48.690", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture2", "index": 891, "time": "01:15:49.360 --> 01:15:50.290", "speaker": "Alexander Vasserman", "text": "Hi ken"}, {"source_name": "lecture2", "index": 892, "time": "01:15:50.360 --> 01:15:51.280", "speaker": "Alexander Vasserman", "text": "say."}, {"source_name": "lecture2", "index": 893, "time": "01:15:56.920 --> 01:15:59.679", "speaker": "Alexander Vasserman", "text": "I can do an intersection between 2 sets"}, {"source_name": "lecture2", "index": 894, "time": "01:16:00.340 --> 01:16:01.349", "speaker": "Alexander Vasserman", "text": "zoom"}, {"source_name": "lecture2", "index": 895, "time": "01:16:01.860 --> 01:16:03.329", "speaker": "Alexander Vasserman", "text": "and let's say"}, {"source_name": "lecture2", "index": 896, "time": "01:16:03.650 --> 01:16:05.299", "speaker": "Alexander Vasserman", "text": "a CD."}, {"source_name": "lecture2", "index": 897, "time": "01:16:05.530 --> 01:16:06.309", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture2", "index": 898, "time": "01:16:08.190 --> 01:16:10.290", "speaker": "Alexander Vasserman", "text": "so it gives me the"}, {"source_name": "lecture2", "index": 899, "time": "01:16:10.500 --> 01:16:13.359", "speaker": "Alexander Vasserman", "text": "set of common elements between 2 sets."}, {"source_name": "lecture2", "index": 900, "time": "01:16:13.670 --> 01:16:14.500", "speaker": "Alexander Vasserman", "text": "Well."}, {"source_name": "lecture2", "index": 901, "time": "01:16:14.850 --> 01:16:15.719", "speaker": "Alexander Vasserman", "text": "a question"}, {"source_name": "lecture2", "index": 902, "time": "01:16:16.190 --> 01:16:20.289", "speaker": "Ralph", "text": "yes, sir, slightly off topic. But I've heard people say"}, {"source_name": "lecture2", "index": 903, "time": "01:16:21.000 --> 01:16:31.810", "speaker": "Ralph", "text": "that you need to be like a mathematical genius in order to make it in to be a programmer. And then I hear other people say that, hey? You don't. You don't need any math skills. You just need to know."}, {"source_name": "lecture2", "index": 904, "time": "01:16:32.060 --> 01:16:33.920", "speaker": "Ralph", "text": "You need to know how to program"}, {"source_name": "lecture2", "index": 905, "time": "01:16:34.190 --> 01:16:36.060", "speaker": "Ralph", "text": "on like on the job."}, {"source_name": "lecture2", "index": 906, "time": "01:16:36.160 --> 01:16:39.010", "speaker": "Ralph", "text": "A real world example. Obviously you have the experience"}, {"source_name": "lecture2", "index": 907, "time": "01:16:39.350 --> 01:16:41.069", "speaker": "Ralph", "text": "which one of those is true."}, {"source_name": "lecture2", "index": 908, "time": "01:16:41.400 --> 01:16:44.330", "speaker": "Alexander Vasserman", "text": "I think that"}, {"source_name": "lecture2", "index": 909, "time": "01:16:44.750 --> 01:16:45.849", "speaker": "Alexander Vasserman", "text": "math"}, {"source_name": "lecture2", "index": 910, "time": "01:16:45.900 --> 01:16:48.760", "speaker": "Alexander Vasserman", "text": "gives you practice."}, {"source_name": "lecture2", "index": 911, "time": "01:16:48.890 --> 01:16:54.470", "speaker": "Alexander Vasserman", "text": "Yeah, for kind of more logical thinking that helps you in computer science."}, {"source_name": "lecture2", "index": 912, "time": "01:16:56.600 --> 01:17:00.500", "speaker": "Alexander Vasserman", "text": "And then there are some areas of computer science. They are definitely."}, {"source_name": "lecture2", "index": 913, "time": "01:17:00.580 --> 01:17:03.549", "speaker": "Alexander Vasserman", "text": "very kindly math dependent."}, {"source_name": "lecture2", "index": 914, "time": "01:17:04.120 --> 01:17:05.519", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture2", "index": 915, "time": "01:17:05.860 --> 01:17:08.479", "speaker": "Alexander Vasserman", "text": "day to day software engineering."}, {"source_name": "lecture2", "index": 916, "time": "01:17:08.940 --> 01:17:10.679", "speaker": "Alexander Vasserman", "text": "You probably don't need"}, {"source_name": "lecture2", "index": 917, "time": "01:17:10.840 --> 01:17:12.029", "speaker": "Alexander Vasserman", "text": "too much math"}, {"source_name": "lecture2", "index": 918, "time": "01:17:12.620 --> 01:17:15.709", "speaker": "Alexander Vasserman", "text": "except for things like that"}, {"source_name": "lecture2", "index": 919, "time": "01:17:15.940 --> 01:17:19.850", "speaker": "Alexander Vasserman", "text": "discrete math like here. So I intersections on like"}, {"source_name": "lecture2", "index": 920, "time": "01:17:19.960 --> 01:17:34.259", "speaker": "Alexander Vasserman", "text": "knowing what that means. there are some math in terms of estimating how long things going to take, but that's kind of funny that's well or like, put in on meals or things like that. So there is a little bit of not there, certainly."}, {"source_name": "lecture2", "index": 921, "time": "01:17:34.340 --> 01:17:37.830", "speaker": "Alexander Vasserman", "text": "but I wouldn't say you have to be math genius."}, {"source_name": "lecture2", "index": 922, "time": "01:17:38.600 --> 01:17:41.250", "speaker": "Alexander Vasserman", "text": "you know, that is definitely"}, {"source_name": "lecture2", "index": 923, "time": "01:17:41.410 --> 01:17:44.270", "speaker": "Alexander Vasserman", "text": "Yeah, I I think that connection is a little over"}, {"source_name": "lecture2", "index": 924, "time": "01:17:45.180 --> 01:17:48.800", "speaker": "Alexander Vasserman", "text": "overblown. it helps"}, {"source_name": "lecture2", "index": 925, "time": "01:17:48.980 --> 01:17:50.810", "speaker": "Alexander Vasserman", "text": "to kind of practice math."}, {"source_name": "lecture2", "index": 926, "time": "01:17:51.010 --> 01:17:53.410", "speaker": "Alexander Vasserman", "text": "because the the"}, {"source_name": "lecture2", "index": 927, "time": "01:17:54.110 --> 01:17:57.089", "speaker": "Alexander Vasserman", "text": "kind of the type of thinking is maybe a little bit overlapping."}, {"source_name": "lecture2", "index": 928, "time": "01:17:57.320 --> 01:18:01.700", "speaker": "Alexander Vasserman", "text": "but also, you know, defensive kind of map you're doing in kind of"}, {"source_name": "lecture2", "index": 929, "time": "01:18:05.850 --> 01:18:09.090", "speaker": "Alexander Vasserman", "text": "anyways, getting back to our sets."}, {"source_name": "lecture2", "index": 930, "time": "01:18:09.380 --> 01:18:10.510", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 931, "time": "01:18:11.230 --> 01:18:15.050", "speaker": "Alexander Vasserman", "text": "they, a lot of this set operations"}, {"source_name": "lecture2", "index": 932, "time": "01:18:15.100 --> 01:18:17.360", "speaker": "Alexander Vasserman", "text": "have a an equivalent"}, {"source_name": "lecture2", "index": 933, "time": "01:18:17.500 --> 01:18:19.199", "speaker": "Alexander Vasserman", "text": "operators."}, {"source_name": "lecture2", "index": 934, "time": "01:18:19.420 --> 01:18:21.270", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 935, "time": "01:18:22.110 --> 01:18:24.360", "speaker": "Alexander Vasserman", "text": "the same thing as I did."}, {"source_name": "lecture2", "index": 936, "time": "01:18:24.670 --> 01:18:25.540", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 937, "time": "01:18:25.970 --> 01:18:26.990", "speaker": "Alexander Vasserman", "text": "hey, buff"}, {"source_name": "lecture2", "index": 938, "time": "01:18:27.110 --> 01:18:29.820", "speaker": "Alexander Vasserman", "text": "can be a little bit shorter like this."}, {"source_name": "lecture2", "index": 939, "time": "01:18:31.460 --> 01:18:33.800", "speaker": "Alexander Vasserman", "text": "So the same thing."}, {"source_name": "lecture2", "index": 940, "time": "01:18:34.100 --> 01:18:35.290", "speaker": "Alexander Vasserman", "text": "if"}, {"source_name": "lecture2", "index": 941, "time": "01:18:36.140 --> 01:18:44.849", "speaker": "Alexander Vasserman", "text": "you've seen maybe some other programming languages, or in other contexts the virtual bar is sometimes used"}, {"source_name": "lecture2", "index": 942, "time": "01:18:44.960 --> 01:18:47.109", "speaker": "Alexander Vasserman", "text": "Oops. I actually messed it up."}, {"source_name": "lecture2", "index": 943, "time": "01:18:47.910 --> 01:18:51.830", "speaker": "Alexander Vasserman", "text": "Never mind. That should be an end, of course. so"}, {"source_name": "lecture2", "index": 944, "time": "01:18:52.010 --> 01:18:54.640", "speaker": "Alexander Vasserman", "text": "but yeah, so"}, {"source_name": "lecture2", "index": 945, "time": "01:18:54.840 --> 01:18:57.400", "speaker": "Alexander Vasserman", "text": "this is an end operation."}, {"source_name": "lecture2", "index": 946, "time": "01:18:57.480 --> 01:19:04.719", "speaker": "Alexander Vasserman", "text": "and then some sense. That's kind of the the semantics of the intersection is, you know, all the elements that are"}, {"source_name": "lecture2", "index": 947, "time": "01:19:04.960 --> 01:19:08.539", "speaker": "Alexander Vasserman", "text": "in first set, and in the second set."}, {"source_name": "lecture2", "index": 948, "time": "01:19:11.240 --> 01:19:12.300", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 949, "time": "01:19:12.380 --> 01:19:15.399", "speaker": "Alexander Vasserman", "text": "what I was doing before, of course."}, {"source_name": "lecture2", "index": 950, "time": "01:19:15.450 --> 01:19:16.829", "speaker": "Alexander Vasserman", "text": "is the Union"}, {"source_name": "lecture2", "index": 951, "time": "01:19:17.030 --> 01:19:18.250", "speaker": "Alexander Vasserman", "text": "operation."}, {"source_name": "lecture2", "index": 952, "time": "01:19:18.320 --> 01:19:19.400", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 953, "time": "01:19:25.270 --> 01:19:27.419", "speaker": "Alexander Vasserman", "text": "let's use the same things."}, {"source_name": "lecture2", "index": 954, "time": "01:19:27.450 --> 01:19:30.210", "speaker": "Alexander Vasserman", "text": "So the Union is"}, {"source_name": "lecture2", "index": 955, "time": "01:19:31.780 --> 01:19:36.090", "speaker": "Alexander Vasserman", "text": "is a set of elements that are"}, {"source_name": "lecture2", "index": 956, "time": "01:19:36.200 --> 01:19:37.929", "speaker": "Alexander Vasserman", "text": "either in"}, {"source_name": "lecture2", "index": 957, "time": "01:19:38.240 --> 01:19:42.779", "speaker": "Alexander Vasserman", "text": "all one set for in another set. So it's kind of like for operation."}, {"source_name": "lecture2", "index": 958, "time": "01:19:42.820 --> 01:19:47.619", "speaker": "Alexander Vasserman", "text": "and what I was saying that the this vertical bar, in some languages"}, {"source_name": "lecture2", "index": 959, "time": "01:19:47.700 --> 01:20:03.620", "speaker": "Alexander Vasserman", "text": "oh, it represents some sort of, or sometimes oftentimes it's 2 bars that represent, or but either way so kind of that's a little bit of any morning device. but why this bar? Is the Union operator"}, {"source_name": "lecture2", "index": 960, "time": "01:20:03.670 --> 01:20:04.950", "speaker": "Alexander Vasserman", "text": "so kind of"}, {"source_name": "lecture2", "index": 961, "time": "01:20:05.250 --> 01:20:08.669", "speaker": "Alexander Vasserman", "text": "again like these all sets"}, {"source_name": "lecture2", "index": 962, "time": "01:20:09.130 --> 01:20:17.730", "speaker": "Alexander Vasserman", "text": "you know it doesn't matter that kind of when the combining 2 sets together, one of them Academy, another kind of what an a. There is no such thing as"}, {"source_name": "lecture2", "index": 963, "time": "01:20:17.890 --> 01:20:20.039", "speaker": "Alexander Vasserman", "text": "to ace in the same set."}, {"source_name": "lecture2", "index": 964, "time": "01:20:20.110 --> 01:20:21.080", "speaker": "Alexander Vasserman", "text": "And just"}, {"source_name": "lecture2", "index": 965, "time": "01:20:21.160 --> 01:20:24.400", "speaker": "Alexander Vasserman", "text": "whether or not there is something in that set."}, {"source_name": "lecture2", "index": 966, "time": "01:20:27.770 --> 01:20:29.190", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture2", "index": 967, "time": "01:20:30.530 --> 01:20:31.860", "speaker": "Alexander Vasserman", "text": "another"}, {"source_name": "lecture2", "index": 968, "time": "01:20:32.450 --> 01:20:35.370", "speaker": "Alexander Vasserman", "text": "operation that I will. Highlight is the difference."}, {"source_name": "lecture2", "index": 969, "time": "01:20:35.560 --> 01:20:36.950", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture2", "index": 970, "time": "01:20:49.660 --> 01:20:50.550", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture2", "index": 971, "time": "01:20:50.830 --> 01:20:51.469", "speaker": "Alexander Vasserman", "text": "oops."}, {"source_name": "lecture2", "index": 972, "time": "01:20:51.880 --> 01:20:52.740", "speaker": "Alexander Vasserman", "text": "I meant"}, {"source_name": "lecture2", "index": 973, "time": "01:20:55.080 --> 01:20:57.580", "speaker": "Alexander Vasserman", "text": "it. Doesn't really matter. But"}, {"source_name": "lecture2", "index": 974, "time": "01:20:57.830 --> 01:20:59.709", "speaker": "Alexander Vasserman", "text": "basically"}, {"source_name": "lecture2", "index": 975, "time": "01:20:59.990 --> 01:21:02.969", "speaker": "Alexander Vasserman", "text": "the difference means beach. Elements"}, {"source_name": "lecture2", "index": 976, "time": "01:21:03.240 --> 01:21:05.769", "speaker": "Alexander Vasserman", "text": "of the first set are not"}, {"source_name": "lecture2", "index": 977, "time": "01:21:05.840 --> 01:21:07.230", "speaker": "Alexander Vasserman", "text": "in the second set."}, {"source_name": "lecture2", "index": 978, "time": "01:21:07.410 --> 01:21:11.049", "speaker": "Alexander Vasserman", "text": "so remove essentially all the elements of the second set"}, {"source_name": "lecture2", "index": 979, "time": "01:21:11.210 --> 01:21:12.650", "speaker": "Alexander Vasserman", "text": "from the first set."}, {"source_name": "lecture2", "index": 980, "time": "01:21:12.840 --> 01:21:14.789", "speaker": "Alexander Vasserman", "text": "and of course the"}, {"source_name": "lecture2", "index": 981, "time": "01:21:18.610 --> 01:21:22.890", "speaker": "Alexander Vasserman", "text": "Oh, they operated for that. This minus operator."}, {"source_name": "lecture2", "index": 982, "time": "01:21:27.770 --> 01:21:30.529", "speaker": "Alexander Vasserman", "text": "that's that's the same thing."}, {"source_name": "lecture2", "index": 983, "time": "01:21:31.390 --> 01:21:32.929", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture2", "index": 984, "time": "01:21:37.080 --> 01:21:38.070", "speaker": "Alexander Vasserman", "text": "plus"}, {"source_name": "lecture2", "index": 985, "time": "01:21:44.380 --> 01:21:48.089", "speaker": "Alexander Vasserman", "text": "that doesn't mean anything. It's not the legal"}, {"source_name": "lecture2", "index": 986, "time": "01:21:48.610 --> 01:21:49.880", "speaker": "Alexander Vasserman", "text": "just"}, {"source_name": "lecture2", "index": 987, "time": "01:21:50.230 --> 01:21:51.199", "speaker": "Alexander Vasserman", "text": "for the"}, {"source_name": "lecture2", "index": 988, "time": "01:21:51.340 --> 01:21:55.040", "speaker": "Alexander Vasserman", "text": "fun of it. So like basically minus it."}, {"source_name": "lecture2", "index": 989, "time": "01:21:55.520 --> 01:21:56.280", "speaker": "Alexander Vasserman", "text": "just"}, {"source_name": "lecture2", "index": 990, "time": "01:21:56.350 --> 01:22:04.529", "speaker": "Alexander Vasserman", "text": "kind of a shorthand for a different separation and a different separation is well defined on on sets."}, {"source_name": "lecture2", "index": 991, "time": "01:22:04.590 --> 01:22:06.359", "speaker": "Alexander Vasserman", "text": "There is no kind of"}, {"source_name": "lecture2", "index": 992, "time": "01:22:06.590 --> 01:22:08.330", "speaker": "Alexander Vasserman", "text": "good use for"}, {"source_name": "lecture2", "index": 993, "time": "01:22:08.430 --> 01:22:11.410", "speaker": "Alexander Vasserman", "text": "plus on set, so it's not different."}, {"source_name": "lecture2", "index": 994, "time": "01:22:15.660 --> 01:22:16.910", "speaker": "Alexander Vasserman", "text": "any"}, {"source_name": "lecture2", "index": 995, "time": "01:22:17.630 --> 01:22:18.870", "speaker": "Alexander Vasserman", "text": "questions"}, {"source_name": "lecture2", "index": 996, "time": "01:22:19.260 --> 01:22:20.090", "speaker": "Alexander Vasserman", "text": "on"}, {"source_name": "lecture2", "index": 997, "time": "01:22:20.710 --> 01:22:21.840", "speaker": "Alexander Vasserman", "text": "sets"}, {"source_name": "lecture2", "index": 998, "time": "01:22:25.560 --> 01:22:26.769", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 999, "time": "01:22:27.810 --> 01:22:28.740", "speaker": "Alexander Vasserman", "text": "One"}, {"source_name": "lecture2", "index": 1000, "time": "01:22:28.950 --> 01:22:36.200", "speaker": "Alexander Vasserman", "text": "last thing that I wanted to do is this set actually is to say again that you can combine"}, {"source_name": "lecture2", "index": 1001, "time": "01:22:36.330 --> 01:22:38.950", "speaker": "Alexander Vasserman", "text": "all kinds of things. So"}, {"source_name": "lecture2", "index": 1002, "time": "01:22:39.240 --> 01:22:43.819", "speaker": "Alexander Vasserman", "text": "you you can have a stream ABC. and"}, {"source_name": "lecture2", "index": 1003, "time": "01:22:44.530 --> 01:22:45.450", "speaker": "Alexander Vasserman", "text": "least"}, {"source_name": "lecture2", "index": 1004, "time": "01:22:47.060 --> 01:22:48.160", "speaker": "Alexander Vasserman", "text": "oh, actually."}, {"source_name": "lecture2", "index": 1005, "time": "01:22:50.590 --> 01:22:52.129", "speaker": "Alexander Vasserman", "text": "and another set"}, {"source_name": "lecture2", "index": 1006, "time": "01:22:52.430 --> 01:22:53.619", "speaker": "Alexander Vasserman", "text": "let's see."}, {"source_name": "lecture2", "index": 1007, "time": "01:22:54.690 --> 01:22:55.559", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture2", "index": 1008, "time": "01:23:02.760 --> 01:23:11.180", "speaker": "Alexander Vasserman", "text": "so sometimes, you know, I start saying things, and then I pay myself, and the the fact that, python is interpreted"}, {"source_name": "lecture2", "index": 1009, "time": "01:23:11.250 --> 01:23:14.369", "speaker": "Alexander Vasserman", "text": "that, and it gives you right away the"}, {"source_name": "lecture2", "index": 1010, "time": "01:23:14.420 --> 01:23:16.849", "speaker": "Alexander Vasserman", "text": "back, the"}, {"source_name": "lecture2", "index": 1011, "time": "01:23:17.720 --> 01:23:19.309", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture2", "index": 1012, "time": "01:23:19.360 --> 01:23:21.460", "speaker": "Alexander Vasserman", "text": "errors. So"}, {"source_name": "lecture2", "index": 1013, "time": "01:23:21.630 --> 01:23:24.960", "speaker": "Alexander Vasserman", "text": "you cannot put things like that into a set."}, {"source_name": "lecture2", "index": 1014, "time": "01:23:25.160 --> 01:23:26.809", "speaker": "Alexander Vasserman", "text": "It isn't being that"}, {"source_name": "lecture2", "index": 1015, "time": "01:23:26.890 --> 01:23:33.750", "speaker": "Alexander Vasserman", "text": "what we discussed in terms of mutable versus not mutable. You cannot put mutable things inside the set"}, {"source_name": "lecture2", "index": 1016, "time": "01:23:34.770 --> 01:23:38.610", "speaker": "Alexander Vasserman", "text": "so I can have a list"}, {"source_name": "lecture2", "index": 1017, "time": "01:23:38.930 --> 01:23:39.710", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture2", "index": 1018, "time": "01:23:39.910 --> 01:23:41.110", "speaker": "Alexander Vasserman", "text": "contains"}, {"source_name": "lecture2", "index": 1019, "time": "01:23:41.410 --> 01:23:44.259", "speaker": "Alexander Vasserman", "text": "it's set for another list."}, {"source_name": "lecture2", "index": 1020, "time": "01:23:46.960 --> 01:23:47.910", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture2", "index": 1021, "time": "01:23:49.020 --> 01:23:51.889", "speaker": "Alexander Vasserman", "text": "so that will be okay."}, {"source_name": "lecture2", "index": 1022, "time": "01:23:53.450 --> 01:23:55.080", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture2", "index": 1023, "time": "01:23:55.460 --> 01:23:58.220", "speaker": "Alexander Vasserman", "text": "the same thing with the sets."}, {"source_name": "lecture2", "index": 1024, "time": "01:23:58.250 --> 01:23:59.040", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 1025, "time": "01:23:59.620 --> 01:24:01.550", "speaker": "Alexander Vasserman", "text": "you know they'll not be so"}, {"source_name": "lecture2", "index": 1026, "time": "01:24:01.680 --> 01:24:02.530", "speaker": "Alexander Vasserman", "text": "all"}, {"source_name": "lecture2", "index": 1027, "time": "01:24:02.780 --> 01:24:03.440", "speaker": "Alexander Vasserman", "text": "just"}, {"source_name": "lecture2", "index": 1028, "time": "01:24:03.680 --> 01:24:05.880", "speaker": "Alexander Vasserman", "text": "self-containing at least"}, {"source_name": "lecture2", "index": 1029, "time": "01:24:06.280 --> 01:24:07.460", "speaker": "Alexander Vasserman", "text": "for example."}, {"source_name": "lecture2", "index": 1030, "time": "01:24:10.740 --> 01:24:12.119", "speaker": "Alexander Vasserman", "text": "he's"}, {"source_name": "lecture2", "index": 1031, "time": "01:24:13.700 --> 01:24:15.370", "speaker": "Alexander Vasserman", "text": "not legal."}, {"source_name": "lecture2", "index": 1032, "time": "01:24:16.910 --> 01:24:17.929", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 1033, "time": "01:24:17.980 --> 01:24:22.189", "speaker": "Alexander Vasserman", "text": "a little Gotcha there, and like, you know, kind of sometimes"}, {"source_name": "lecture2", "index": 1034, "time": "01:24:22.390 --> 01:24:28.239", "speaker": "Alexander Vasserman", "text": "I even forget things, and you know kind of it's nice to be able to just test things out."}, {"source_name": "lecture2", "index": 1035, "time": "01:24:28.480 --> 01:24:31.150", "speaker": "Alexander Vasserman", "text": "and that's one way to learn, for sure."}, {"source_name": "lecture2", "index": 1036, "time": "01:24:31.420 --> 01:24:33.930", "speaker": "Alexander Vasserman", "text": "but but yes, so"}, {"source_name": "lecture2", "index": 1037, "time": "01:24:34.150 --> 01:24:35.730", "speaker": "Alexander Vasserman", "text": "kind of"}, {"source_name": "lecture2", "index": 1038, "time": "01:24:36.000 --> 01:24:38.360", "speaker": "Alexander Vasserman", "text": "we'll be dealing, though, with like"}, {"source_name": "lecture2", "index": 1039, "time": "01:24:38.500 --> 01:24:39.430", "speaker": "Alexander Vasserman", "text": "a lot of"}, {"source_name": "lecture2", "index": 1040, "time": "01:24:39.680 --> 01:24:40.789", "speaker": "Alexander Vasserman", "text": "come. But"}, {"source_name": "lecture2", "index": 1041, "time": "01:24:41.200 --> 01:24:43.790", "speaker": "Alexander Vasserman", "text": "data structures that are combination. So"}, {"source_name": "lecture2", "index": 1042, "time": "01:24:44.990 --> 01:24:47.769", "speaker": "Alexander Vasserman", "text": "least some sets. And"}, {"source_name": "lecture2", "index": 1043, "time": "01:24:48.980 --> 01:24:50.080", "speaker": "Alexander Vasserman", "text": "also"}, {"source_name": "lecture2", "index": 1044, "time": "01:24:51.000 --> 01:24:52.210", "speaker": "Alexander Vasserman", "text": "dictionaries."}, {"source_name": "lecture2", "index": 1045, "time": "01:24:52.420 --> 01:24:53.480", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 1046, "time": "01:24:53.990 --> 01:24:55.150", "speaker": "Alexander Vasserman", "text": "what's a"}, {"source_name": "lecture2", "index": 1047, "time": "01:24:58.100 --> 01:24:59.290", "speaker": "Alexander Vasserman", "text": "dictionated"}, {"source_name": "lecture2", "index": 1048, "time": "01:25:04.660 --> 01:25:05.690", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 1049, "time": "01:25:06.170 --> 01:25:09.670", "speaker": "Alexander Vasserman", "text": "dictionaries are basically going to associate."}, {"source_name": "lecture2", "index": 1050, "time": "01:25:15.210 --> 01:25:17.510", "speaker": "Alexander Vasserman", "text": "And so let me just"}, {"source_name": "lecture2", "index": 1051, "time": "01:25:17.800 --> 01:25:21.590", "speaker": "Alexander Vasserman", "text": "give you an example. Where? I"}, {"source_name": "lecture2", "index": 1052, "time": "01:25:22.050 --> 01:25:22.929", "speaker": "Alexander Vasserman", "text": "might"}, {"source_name": "lecture2", "index": 1053, "time": "01:25:24.430 --> 01:25:25.780", "speaker": "Alexander Vasserman", "text": "associate"}, {"source_name": "lecture2", "index": 1054, "time": "01:25:26.010 --> 01:25:27.400", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture2", "index": 1055, "time": "01:25:28.700 --> 01:25:30.730", "speaker": "Alexander Vasserman", "text": "all letters through numbers"}, {"source_name": "lecture2", "index": 1056, "time": "01:25:30.920 --> 01:25:32.459", "speaker": "Alexander Vasserman", "text": "to all"}, {"source_name": "lecture2", "index": 1057, "time": "01:25:33.050 --> 01:25:34.839", "speaker": "Alexander Vasserman", "text": "something like this."}, {"source_name": "lecture2", "index": 1058, "time": "01:25:35.110 --> 01:25:36.090", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 1059, "time": "01:25:36.220 --> 01:25:39.389", "speaker": "Alexander Vasserman", "text": "curly brackets similar to a"}, {"source_name": "lecture2", "index": 1060, "time": "01:25:39.550 --> 01:25:40.849", "speaker": "Alexander Vasserman", "text": "set."}, {"source_name": "lecture2", "index": 1061, "time": "01:25:40.950 --> 01:25:42.509", "speaker": "Alexander Vasserman", "text": "But now kind of"}, {"source_name": "lecture2", "index": 1062, "time": "01:25:42.540 --> 01:25:46.380", "speaker": "Alexander Vasserman", "text": "each thing has this kind of a pair of"}, {"source_name": "lecture2", "index": 1063, "time": "01:25:47.640 --> 01:25:51.799", "speaker": "Alexander Vasserman", "text": "elements, and the one is the key, and another is the value"}, {"source_name": "lecture2", "index": 1064, "time": "01:25:52.040 --> 01:25:55.189", "speaker": "Alexander Vasserman", "text": "right? That's just kind of how we refer to things."}, {"source_name": "lecture2", "index": 1065, "time": "01:25:55.480 --> 01:25:56.859", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture2", "index": 1066, "time": "01:25:58.400 --> 01:26:01.279", "speaker": "Alexander Vasserman", "text": "so in particular."}, {"source_name": "lecture2", "index": 1067, "time": "01:26:01.400 --> 01:26:03.670", "speaker": "Alexander Vasserman", "text": "if I can say."}, {"source_name": "lecture2", "index": 1068, "time": "01:26:05.630 --> 01:26:07.440", "speaker": "Alexander Vasserman", "text": "give me"}, {"source_name": "lecture2", "index": 1069, "time": "01:26:07.690 --> 01:26:08.570", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture2", "index": 1070, "time": "01:26:08.970 --> 01:26:10.750", "speaker": "Alexander Vasserman", "text": "piece of the dictionary."}, {"source_name": "lecture2", "index": 1071, "time": "01:26:10.960 --> 01:26:14.999", "speaker": "Alexander Vasserman", "text": "and the while you know it's a separate type."}, {"source_name": "lecture2", "index": 1072, "time": "01:26:15.510 --> 01:26:20.400", "speaker": "Alexander Vasserman", "text": "actually the piece of a dictionary are very similar to a set"}, {"source_name": "lecture2", "index": 1073, "time": "01:26:22.940 --> 01:26:24.589", "speaker": "Alexander Vasserman", "text": "or I can say."}, {"source_name": "lecture2", "index": 1074, "time": "01:26:26.850 --> 01:26:27.800", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 1075, "time": "01:26:28.180 --> 01:26:29.269", "speaker": "Alexander Vasserman", "text": "I use."}, {"source_name": "lecture2", "index": 1076, "time": "01:26:29.500 --> 01:26:31.599", "speaker": "Alexander Vasserman", "text": "and that's us."}, {"source_name": "lecture2", "index": 1077, "time": "01:26:31.930 --> 01:26:33.610", "speaker": "Alexander Vasserman", "text": "Oh, the values"}, {"source_name": "lecture2", "index": 1078, "time": "01:26:33.780 --> 01:26:35.410", "speaker": "Alexander Vasserman", "text": "so that's just kind of"}, {"source_name": "lecture2", "index": 1079, "time": "01:26:36.020 --> 01:26:38.259", "speaker": "Alexander Vasserman", "text": "a little bit of on."}, {"source_name": "lecture2", "index": 1080, "time": "01:26:39.390 --> 01:26:40.150", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 1081, "time": "01:26:41.280 --> 01:26:43.660", "speaker": "Alexander Vasserman", "text": "basically meaning to some degree."}, {"source_name": "lecture2", "index": 1082, "time": "01:26:43.750 --> 01:26:51.749", "speaker": "Alexander Vasserman", "text": "So what our dictionary is good for in some sense you also have a direct access in the dictionary."}, {"source_name": "lecture2", "index": 1083, "time": "01:26:51.800 --> 01:26:54.350", "speaker": "Alexander Vasserman", "text": "So you can look up a key."}, {"source_name": "lecture2", "index": 1084, "time": "01:26:54.750 --> 01:26:57.709", "speaker": "Alexander Vasserman", "text": "and it's already turned the value."}, {"source_name": "lecture2", "index": 1085, "time": "01:26:58.760 --> 01:27:02.889", "speaker": "Alexander Vasserman", "text": "So that's kind of one of the most common users for the dictionary."}, {"source_name": "lecture2", "index": 1086, "time": "01:27:05.100 --> 01:27:06.240", "speaker": "Alexander Vasserman", "text": "you will."}, {"source_name": "lecture2", "index": 1087, "time": "01:27:06.510 --> 01:27:07.370", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 1088, "time": "01:27:07.610 --> 01:27:13.489", "speaker": "Alexander Vasserman", "text": "dictionaries are also mutable, so you can do the same kind of"}, {"source_name": "lecture2", "index": 1089, "time": "01:27:13.650 --> 01:27:14.630", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 1090, "time": "01:27:15.130 --> 01:27:18.700", "speaker": "Alexander Vasserman", "text": "and let's say, if I, for some reason wanted to"}, {"source_name": "lecture2", "index": 1091, "time": "01:27:18.750 --> 01:27:21.469", "speaker": "Alexander Vasserman", "text": "change the value of it to be"}, {"source_name": "lecture2", "index": 1092, "time": "01:27:23.960 --> 01:27:26.060", "speaker": "Alexander Vasserman", "text": "I can do it like that."}, {"source_name": "lecture2", "index": 1093, "time": "01:27:26.240 --> 01:27:28.840", "speaker": "Alexander Vasserman", "text": "So if now."}, {"source_name": "lecture2", "index": 1094, "time": "01:27:29.880 --> 01:27:31.300", "speaker": "Alexander Vasserman", "text": "Dictionary"}, {"source_name": "lecture2", "index": 1095, "time": "01:27:31.400 --> 01:27:35.369", "speaker": "Alexander Vasserman", "text": "as value of 5 associated to to be."}, {"source_name": "lecture2", "index": 1096, "time": "01:27:36.800 --> 01:27:37.889", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 1097, "time": "01:27:38.000 --> 01:27:39.070", "speaker": "Alexander Vasserman", "text": "I can."}, {"source_name": "lecture2", "index": 1098, "time": "01:27:39.600 --> 01:27:43.909", "speaker": "Alexander Vasserman", "text": "I'll add new things to dictionary in a similar."}, {"source_name": "lecture2", "index": 1099, "time": "01:27:43.930 --> 01:27:45.570", "speaker": "Alexander Vasserman", "text": "always. So"}, {"source_name": "lecture2", "index": 1100, "time": "01:27:45.740 --> 01:27:46.860", "speaker": "Alexander Vasserman", "text": "let's see"}, {"source_name": "lecture2", "index": 1101, "time": "01:27:47.540 --> 01:27:49.210", "speaker": "Alexander Vasserman", "text": "I can."}, {"source_name": "lecture2", "index": 1102, "time": "01:27:49.830 --> 01:27:50.670", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 1103, "time": "01:27:51.710 --> 01:27:52.650", "speaker": "Alexander Vasserman", "text": "at"}, {"source_name": "lecture2", "index": 1104, "time": "01:27:53.110 --> 01:27:53.990", "speaker": "Alexander Vasserman", "text": "oh!"}, {"source_name": "lecture2", "index": 1105, "time": "01:27:54.140 --> 01:27:57.030", "speaker": "Alexander Vasserman", "text": "Values that weren't there before."}, {"source_name": "lecture2", "index": 1106, "time": "01:27:57.380 --> 01:27:59.920", "speaker": "Alexander Vasserman", "text": "So this is a little bit different than the list"}, {"source_name": "lecture2", "index": 1107, "time": "01:27:59.960 --> 01:28:06.460", "speaker": "Alexander Vasserman", "text": "where you could not put an index that's not already in the at least."}, {"source_name": "lecture2", "index": 1108, "time": "01:28:06.530 --> 01:28:15.440", "speaker": "Alexander Vasserman", "text": "and the kind of add things to the list this way. But in the dictionary that's kind of the easiest way to add an element to the dictionary."}, {"source_name": "lecture2", "index": 1109, "time": "01:28:20.460 --> 01:28:21.740", "speaker": "Alexander Vasserman", "text": "also"}, {"source_name": "lecture2", "index": 1110, "time": "01:28:23.330 --> 01:28:24.400", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture2", "index": 1111, "time": "01:28:25.260 --> 01:28:26.110", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 1112, "time": "01:28:27.840 --> 01:28:28.880", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture2", "index": 1113, "time": "01:28:28.980 --> 01:28:34.059", "speaker": "Alexander Vasserman", "text": "like I said, basically the keys of a dictionary are kind of like sets."}, {"source_name": "lecture2", "index": 1114, "time": "01:28:34.100 --> 01:28:35.179", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 1115, "time": "01:28:35.330 --> 01:28:36.880", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture2", "index": 1116, "time": "01:28:37.410 --> 01:28:39.309", "speaker": "Alexander Vasserman", "text": "keys are unique."}, {"source_name": "lecture2", "index": 1117, "time": "01:28:39.450 --> 01:28:42.109", "speaker": "Alexander Vasserman", "text": "right? So you cannot have the"}, {"source_name": "lecture2", "index": 1118, "time": "01:28:42.220 --> 01:28:44.479", "speaker": "Alexander Vasserman", "text": "or 2 entries in the dictionary."}, {"source_name": "lecture2", "index": 1119, "time": "01:28:44.950 --> 01:28:46.450", "speaker": "Alexander Vasserman", "text": "This the same key."}, {"source_name": "lecture2", "index": 1120, "time": "01:28:46.600 --> 01:28:49.900", "speaker": "Alexander Vasserman", "text": "because well, you know here."}, {"source_name": "lecture2", "index": 1121, "time": "01:28:50.550 --> 01:28:52.919", "speaker": "Alexander Vasserman", "text": "like I would know whether or not i'm"}, {"source_name": "lecture2", "index": 1122, "time": "01:28:53.120 --> 01:28:55.950", "speaker": "Alexander Vasserman", "text": "adding a new one, or modifying"}, {"source_name": "lecture2", "index": 1123, "time": "01:28:55.980 --> 01:28:57.499", "speaker": "Alexander Vasserman", "text": "the existing one."}, {"source_name": "lecture2", "index": 1124, "time": "01:28:57.550 --> 01:29:03.780", "speaker": "Alexander Vasserman", "text": "So you know, basically it's always modifying the existing one if if it's there."}, {"source_name": "lecture2", "index": 1125, "time": "01:29:04.190 --> 01:29:07.420", "speaker": "Alexander Vasserman", "text": "so the keys are like sets"}, {"source_name": "lecture2", "index": 1126, "time": "01:29:07.550 --> 01:29:16.810", "speaker": "Alexander Vasserman", "text": "on the unique piece, and that's what allows us to to have well defined semantics for for this type of access direct access as well."}, {"source_name": "lecture2", "index": 1127, "time": "01:29:16.940 --> 01:29:18.330", "speaker": "Alexander Vasserman", "text": "there is only one"}, {"source_name": "lecture2", "index": 1128, "time": "01:29:18.420 --> 01:29:23.070", "speaker": "Alexander Vasserman", "text": "element in dictionary guarantee that associated. Yes, i'll let her be"}, {"source_name": "lecture2", "index": 1129, "time": "01:29:25.210 --> 01:29:27.149", "speaker": "Alexander Vasserman", "text": "the values, on the other hand."}, {"source_name": "lecture2", "index": 1130, "time": "01:29:27.450 --> 01:29:28.399", "speaker": "Alexander Vasserman", "text": "can be repeated."}, {"source_name": "lecture2", "index": 1131, "time": "01:29:28.600 --> 01:29:31.310", "speaker": "Alexander Vasserman", "text": "So here we have 5 multiple times."}, {"source_name": "lecture2", "index": 1132, "time": "01:29:31.520 --> 01:29:37.780", "speaker": "Alexander Vasserman", "text": "and that's fine. we generally do not address things by value."}, {"source_name": "lecture2", "index": 1133, "time": "01:29:37.920 --> 01:29:40.769", "speaker": "Alexander Vasserman", "text": "so that's not a problem."}, {"source_name": "lecture2", "index": 1134, "time": "01:29:46.640 --> 01:29:47.540", "speaker": "Alexander Vasserman", "text": "okay."}, {"source_name": "lecture2", "index": 1135, "time": "01:29:48.100 --> 01:29:49.170", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 1136, "time": "01:29:49.620 --> 01:29:50.730", "speaker": "Alexander Vasserman", "text": "we've seen"}, {"source_name": "lecture2", "index": 1137, "time": "01:29:51.160 --> 01:29:52.090", "speaker": "Alexander Vasserman", "text": "all"}, {"source_name": "lecture2", "index": 1138, "time": "01:29:53.800 --> 01:29:54.809", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture2", "index": 1139, "time": "01:29:55.250 --> 01:29:57.490", "speaker": "Alexander Vasserman", "text": "or keys and values."}, {"source_name": "lecture2", "index": 1140, "time": "01:29:57.690 --> 01:29:59.979", "speaker": "Alexander Vasserman", "text": "another thing that"}, {"source_name": "lecture2", "index": 1141, "time": "01:30:01.800 --> 01:30:08.119", "speaker": "Alexander Vasserman", "text": "is commonly used in terms of just kind of representing a"}, {"source_name": "lecture2", "index": 1142, "time": "01:30:09.320 --> 01:30:18.410", "speaker": "bai wu", "text": "yes before we move on, i'm. I'm. Still a little confused on set and dictionary, or Isn't Dictionary. Just it's like a better version of says i'm i'm no confused on that."}, {"source_name": "lecture2", "index": 1143, "time": "01:30:19.000 --> 01:30:19.929", "speaker": "Alexander Vasserman", "text": "Well."}, {"source_name": "lecture2", "index": 1144, "time": "01:30:20.960 --> 01:30:22.769", "speaker": "Alexander Vasserman", "text": "in some sense"}, {"source_name": "lecture2", "index": 1145, "time": "01:30:22.850 --> 01:30:29.069", "speaker": "Alexander Vasserman", "text": "the you can do a lot of things. This is a dictionary that you can do with a set."}, {"source_name": "lecture2", "index": 1146, "time": "01:30:29.190 --> 01:30:31.429", "speaker": "Alexander Vasserman", "text": "So, for example, you can."}, {"source_name": "lecture2", "index": 1147, "time": "01:30:31.580 --> 01:30:32.450", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 1148, "time": "01:30:32.540 --> 01:30:34.120", "speaker": "Alexander Vasserman", "text": "have a"}, {"source_name": "lecture2", "index": 1149, "time": "01:30:34.360 --> 01:30:38.690", "speaker": "Alexander Vasserman", "text": "particular value. Let's say value of one or whatever or true"}, {"source_name": "lecture2", "index": 1150, "time": "01:30:38.760 --> 01:30:45.490", "speaker": "Alexander Vasserman", "text": "that you are assigning as a value to each element that you want to represent. And then this is kind of"}, {"source_name": "lecture2", "index": 1151, "time": "01:30:45.550 --> 01:30:48.620", "speaker": "Alexander Vasserman", "text": "implementing a set using a dictionary."}, {"source_name": "lecture2", "index": 1152, "time": "01:30:48.660 --> 01:30:53.219", "speaker": "Alexander Vasserman", "text": "right? So you can look up and check if if the"}, {"source_name": "lecture2", "index": 1153, "time": "01:30:53.250 --> 01:30:56.190", "speaker": "Alexander Vasserman", "text": "if something is in the dictionary."}, {"source_name": "lecture2", "index": 1154, "time": "01:30:58.290 --> 01:30:59.280", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture2", "index": 1155, "time": "01:31:00.060 --> 01:31:01.730", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture2", "index": 1156, "time": "01:31:01.910 --> 01:31:03.809", "speaker": "Alexander Vasserman", "text": "cell decorations are"}, {"source_name": "lecture2", "index": 1157, "time": "01:31:04.190 --> 01:31:06.720", "speaker": "Alexander Vasserman", "text": "not as easily gone"}, {"source_name": "lecture2", "index": 1158, "time": "01:31:06.780 --> 01:31:07.650", "speaker": "Alexander Vasserman", "text": "on"}, {"source_name": "lecture2", "index": 1159, "time": "01:31:07.930 --> 01:31:09.730", "speaker": "Alexander Vasserman", "text": "dictionaries"}, {"source_name": "lecture2", "index": 1160, "time": "01:31:09.770 --> 01:31:11.610", "speaker": "Alexander Vasserman", "text": "and in general."}, {"source_name": "lecture2", "index": 1161, "time": "01:31:11.730 --> 01:31:15.420", "speaker": "Alexander Vasserman", "text": "if you just want the keys"}, {"source_name": "lecture2", "index": 1162, "time": "01:31:15.700 --> 01:31:17.780", "speaker": "Alexander Vasserman", "text": "you can, you use the sets."}, {"source_name": "lecture2", "index": 1163, "time": "01:31:18.020 --> 01:31:20.720", "speaker": "Alexander Vasserman", "text": "If you want these and values"}, {"source_name": "lecture2", "index": 1164, "time": "01:31:21.150 --> 01:31:24.229", "speaker": "Alexander Vasserman", "text": "use dictionaries, there is no reason to."}, {"source_name": "lecture2", "index": 1165, "time": "01:31:25.560 --> 01:31:27.160", "speaker": "Alexander Vasserman", "text": "kind of try to"}, {"source_name": "lecture2", "index": 1166, "time": "01:31:27.650 --> 01:31:29.830", "speaker": "Alexander Vasserman", "text": "implement one through the other."}, {"source_name": "lecture2", "index": 1167, "time": "01:31:30.030 --> 01:31:30.790", "speaker": "Alexander Vasserman", "text": "Alright."}, {"source_name": "lecture2", "index": 1168, "time": "01:31:30.810 --> 01:31:31.790", "speaker": "Alexander Vasserman", "text": "you can."}, {"source_name": "lecture2", "index": 1169, "time": "01:31:31.840 --> 01:31:32.580", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture2", "index": 1170, "time": "01:31:32.920 --> 01:31:39.729", "speaker": "Alexander Vasserman", "text": "there is no reason to. And so, when when you need the set users that when we need the dictionary, use the dictionary."}, {"source_name": "lecture2", "index": 1171, "time": "01:31:40.270 --> 01:31:44.039", "speaker": "Alexander Vasserman", "text": "and sometimes maybe you'll need to convert between the 2."}, {"source_name": "lecture2", "index": 1172, "time": "01:31:44.200 --> 01:31:45.800", "speaker": "Alexander Vasserman", "text": "and that's fine, too."}, {"source_name": "lecture2", "index": 1173, "time": "01:31:46.360 --> 01:31:48.989", "speaker": "bai wu", "text": "Oh, I see, I hey? Thank you, Professor."}, {"source_name": "lecture2", "index": 1174, "time": "01:31:50.400 --> 01:31:53.419", "speaker": "Alexander Vasserman", "text": "so I can certainly say."}, {"source_name": "lecture2", "index": 1175, "time": "01:31:55.010 --> 01:31:57.379", "speaker": "Alexander Vasserman", "text": "you know, convert again the"}, {"source_name": "lecture2", "index": 1176, "time": "01:32:00.320 --> 01:32:02.049", "speaker": "Alexander Vasserman", "text": "something like this."}, {"source_name": "lecture2", "index": 1177, "time": "01:32:04.770 --> 01:32:05.940", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture2", "index": 1178, "time": "01:32:08.050 --> 01:32:16.239", "speaker": "Alexander Vasserman", "text": "anyways, yes, so so yes. A lot of people do more things with dictionaries and dictionaries are kind of"}, {"source_name": "lecture2", "index": 1179, "time": "01:32:18.790 --> 01:32:21.599", "speaker": "Alexander Vasserman", "text": "very core to python."}, {"source_name": "lecture2", "index": 1180, "time": "01:32:21.760 --> 01:32:24.149", "speaker": "Alexander Vasserman", "text": "So you might have"}, {"source_name": "lecture2", "index": 1181, "time": "01:32:24.180 --> 01:32:27.319", "speaker": "Alexander Vasserman", "text": "learn dictionaries and not sets"}, {"source_name": "lecture2", "index": 1182, "time": "01:32:27.520 --> 01:32:32.109", "speaker": "Alexander Vasserman", "text": "in your previous classes, because how much?"}, {"source_name": "lecture2", "index": 1183, "time": "01:32:32.210 --> 01:32:33.090", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 1184, "time": "01:32:33.510 --> 01:32:37.499", "speaker": "Alexander Vasserman", "text": "how many things actually implemented by phone using dictionaries."}, {"source_name": "lecture2", "index": 1185, "time": "01:32:38.920 --> 01:32:40.410", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture2", "index": 1186, "time": "01:32:40.850 --> 01:32:49.060", "speaker": "Alexander Vasserman", "text": "in this course they'll be using the right tool for the you know, right purpose. So, and the sets are going to be useful"}, {"source_name": "lecture2", "index": 1187, "time": "01:32:49.150 --> 01:32:50.310", "speaker": "Alexander Vasserman", "text": "for us."}, {"source_name": "lecture2", "index": 1188, "time": "01:32:55.680 --> 01:32:56.760", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 1189, "time": "01:32:58.320 --> 01:32:59.389", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture2", "index": 1190, "time": "01:33:03.590 --> 01:33:10.890", "speaker": "Alexander Vasserman", "text": "kind of the items represented just to go back a little bit is just another way to"}, {"source_name": "lecture2", "index": 1191, "time": "01:33:11.380 --> 01:33:12.540", "speaker": "Alexander Vasserman", "text": "view"}, {"source_name": "lecture2", "index": 1192, "time": "01:33:12.580 --> 01:33:19.490", "speaker": "Alexander Vasserman", "text": "the dictionary. So it's basically it can be viewed as a list of Paris"}, {"source_name": "lecture2", "index": 1193, "time": "01:33:19.650 --> 01:33:21.709", "speaker": "Alexander Vasserman", "text": "of key value purse."}, {"source_name": "lecture2", "index": 1194, "time": "01:33:22.950 --> 01:33:23.929", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 1195, "time": "01:33:25.560 --> 01:33:26.739", "speaker": "Alexander Vasserman", "text": "this is, you know"}, {"source_name": "lecture2", "index": 1196, "time": "01:33:27.700 --> 01:33:29.020", "speaker": "Alexander Vasserman", "text": "each per and"}, {"source_name": "lecture2", "index": 1197, "time": "01:33:29.070 --> 01:33:35.760", "speaker": "Alexander Vasserman", "text": "sometimes when, especially when you want to iterate over a dictionary that's pretty convenient"}, {"source_name": "lecture2", "index": 1198, "time": "01:33:35.810 --> 01:33:37.390", "speaker": "Alexander Vasserman", "text": "i'll function to use."}, {"source_name": "lecture2", "index": 1199, "time": "01:33:37.640 --> 01:33:39.160", "speaker": "Alexander Vasserman", "text": "Oh, and"}, {"source_name": "lecture2", "index": 1200, "time": "01:33:39.250 --> 01:33:43.280", "speaker": "Alexander Vasserman", "text": "we'll use it frequently, and I will show you."}, {"source_name": "lecture2", "index": 1201, "time": "01:33:43.440 --> 01:33:44.309", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 1202, "time": "01:33:44.720 --> 01:33:45.440", "speaker": "Alexander Vasserman", "text": "you know"}, {"source_name": "lecture2", "index": 1203, "time": "01:33:45.760 --> 01:33:47.340", "speaker": "Alexander Vasserman", "text": "I will leave you that."}, {"source_name": "lecture2", "index": 1204, "time": "01:33:47.400 --> 01:33:48.110", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 1205, "time": "01:33:48.590 --> 01:33:49.750", "speaker": "Alexander Vasserman", "text": "a bit more"}, {"source_name": "lecture2", "index": 1206, "time": "01:33:49.960 --> 01:33:51.050", "speaker": "Alexander Vasserman", "text": "later."}, {"source_name": "lecture2", "index": 1207, "time": "01:33:52.330 --> 01:33:54.029", "speaker": "Alexander Vasserman", "text": "another"}, {"source_name": "lecture2", "index": 1208, "time": "01:33:54.380 --> 01:33:55.840", "speaker": "Alexander Vasserman", "text": "quite useful"}, {"source_name": "lecture2", "index": 1209, "time": "01:33:56.070 --> 01:33:59.230", "speaker": "Alexander Vasserman", "text": "function for dictionaries is"}, {"source_name": "lecture2", "index": 1210, "time": "01:33:59.480 --> 01:34:01.170", "speaker": "Alexander Vasserman", "text": "update."}, {"source_name": "lecture2", "index": 1211, "time": "01:34:02.040 --> 01:34:03.110", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 1212, "time": "01:34:03.560 --> 01:34:06.540", "speaker": "Alexander Vasserman", "text": "it's kind of like extent for lists."}, {"source_name": "lecture2", "index": 1213, "time": "01:34:06.650 --> 01:34:09.410", "speaker": "Alexander Vasserman", "text": "So I can give it another dictionary."}, {"source_name": "lecture2", "index": 1214, "time": "01:34:09.530 --> 01:34:11.059", "speaker": "Alexander Vasserman", "text": "let's say"}, {"source_name": "lecture2", "index": 1215, "time": "01:34:11.210 --> 01:34:12.370", "speaker": "Alexander Vasserman", "text": "I'll"}, {"source_name": "lecture2", "index": 1216, "time": "01:34:25.380 --> 01:34:26.740", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture2", "index": 1217, "time": "01:34:27.730 --> 01:34:30.190", "speaker": "Alexander Vasserman", "text": "basically this is overriding."}, {"source_name": "lecture2", "index": 1218, "time": "01:34:30.570 --> 01:34:31.500", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture2", "index": 1219, "time": "01:34:31.560 --> 01:34:32.490", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture2", "index": 1220, "time": "01:34:33.700 --> 01:34:40.580", "speaker": "Alexander Vasserman", "text": "values for that were in D, these new values, and potentially adding new values. If you did it"}, {"source_name": "lecture2", "index": 1221, "time": "01:34:41.000 --> 01:34:49.780", "speaker": "Alexander Vasserman", "text": "right. So in case of a you already have that as a key in a dictionary, so the value was changed to"}, {"source_name": "lecture2", "index": 1222, "time": "01:34:50.170 --> 01:34:54.600", "speaker": "Alexander Vasserman", "text": "in case of F. It was not in the dictionary, so it was added."}, {"source_name": "lecture2", "index": 1223, "time": "01:34:55.370 --> 01:35:01.530", "speaker": "Alexander Vasserman", "text": "So update is kind of a nice function for combining dictionaries."}, {"source_name": "lecture2", "index": 1224, "time": "01:35:02.860 --> 01:35:03.599", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture2", "index": 1225, "time": "01:35:05.170 --> 01:35:09.509", "speaker": "Fahad Khan", "text": "does order matter in a dictionary like it doesn't in a set."}, {"source_name": "lecture2", "index": 1226, "time": "01:35:09.550 --> 01:35:10.929", "speaker": "Alexander Vasserman", "text": "No, it does not."}, {"source_name": "lecture2", "index": 1227, "time": "01:35:11.240 --> 01:35:12.219", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture2", "index": 1228, "time": "01:35:12.360 --> 01:35:15.760", "speaker": "Alexander Vasserman", "text": "dictionaries are also UN ordered. yeah."}, {"source_name": "lecture2", "index": 1229, "time": "01:35:16.110 --> 01:35:17.849", "speaker": "Alexander Vasserman", "text": "Basically, in yeah."}, {"source_name": "lecture2", "index": 1230, "time": "01:35:18.290 --> 01:35:19.179", "speaker": "Alexander Vasserman", "text": "my question."}, {"source_name": "lecture2", "index": 1231, "time": "01:35:24.960 --> 01:35:26.019", "speaker": "Alexander Vasserman", "text": "The"}, {"source_name": "lecture2", "index": 1232, "time": "01:35:27.970 --> 01:35:28.990", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 1233, "time": "01:35:29.460 --> 01:35:31.389", "speaker": "Alexander Vasserman", "text": "another way in which"}, {"source_name": "lecture2", "index": 1234, "time": "01:35:31.450 --> 01:35:34.239", "speaker": "Alexander Vasserman", "text": "dictionaries are kind of related to sets"}, {"source_name": "lecture2", "index": 1235, "time": "01:35:34.440 --> 01:35:36.279", "speaker": "Alexander Vasserman", "text": "is that I can't."}, {"source_name": "lecture2", "index": 1236, "time": "01:35:41.980 --> 01:35:43.949", "speaker": "Alexander Vasserman", "text": "I can do this so I"}, {"source_name": "lecture2", "index": 1237, "time": "01:35:44.020 --> 01:35:47.810", "speaker": "Alexander Vasserman", "text": "can't have a key. That, at least, is the list."}, {"source_name": "lecture2", "index": 1238, "time": "01:35:48.180 --> 01:35:49.490", "speaker": "Alexander Vasserman", "text": "So again"}, {"source_name": "lecture2", "index": 1239, "time": "01:35:49.540 --> 01:35:51.109", "speaker": "Alexander Vasserman", "text": "has to be not mutable."}, {"source_name": "lecture2", "index": 1240, "time": "01:35:52.900 --> 01:35:53.760", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture2", "index": 1241, "time": "01:35:54.190 --> 01:35:55.040", "speaker": "Alexander Vasserman", "text": "I"}, {"source_name": "lecture2", "index": 1242, "time": "01:35:55.620 --> 01:35:57.540", "speaker": "Alexander Vasserman", "text": "can have"}, {"source_name": "lecture2", "index": 1243, "time": "01:35:57.580 --> 01:35:59.880", "speaker": "Alexander Vasserman", "text": "values that are at least"}, {"source_name": "lecture2", "index": 1244, "time": "01:35:59.910 --> 01:36:01.410", "speaker": "Alexander Vasserman", "text": "so all"}, {"source_name": "lecture2", "index": 1245, "time": "01:36:08.180 --> 01:36:09.670", "speaker": "Alexander Vasserman", "text": "this is perfectly fine."}, {"source_name": "lecture2", "index": 1246, "time": "01:36:12.860 --> 01:36:13.570", "speaker": "Alexander Vasserman", "text": "Hmm."}, {"source_name": "lecture2", "index": 1247, "time": "01:36:13.980 --> 01:36:17.339", "speaker": "Alexander Vasserman", "text": "So now, again, the value"}, {"source_name": "lecture2", "index": 1248, "time": "01:36:17.660 --> 01:36:21.860", "speaker": "Alexander Vasserman", "text": "can be a simple thing, like an integer, or a stream."}, {"source_name": "lecture2", "index": 1249, "time": "01:36:21.880 --> 01:36:24.050", "speaker": "Alexander Vasserman", "text": "or a more complex thing like"}, {"source_name": "lecture2", "index": 1250, "time": "01:36:24.220 --> 01:36:28.289", "speaker": "Alexander Vasserman", "text": "in my list another dictionary, or anything at all."}, {"source_name": "lecture2", "index": 1251, "time": "01:36:28.500 --> 01:36:34.660", "speaker": "Alexander Vasserman", "text": "So in particular. now I can say things like"}, {"source_name": "lecture2", "index": 1252, "time": "01:36:40.160 --> 01:36:41.400", "speaker": "Alexander Vasserman", "text": "things like this."}, {"source_name": "lecture2", "index": 1253, "time": "01:36:41.770 --> 01:36:44.090", "speaker": "Alexander Vasserman", "text": "So, combining the access"}, {"source_name": "lecture2", "index": 1254, "time": "01:36:44.110 --> 01:36:48.880", "speaker": "Alexander Vasserman", "text": "operators for dictionary, and least"}, {"source_name": "lecture2", "index": 1255, "time": "01:36:49.000 --> 01:36:50.859", "speaker": "Alexander Vasserman", "text": "so give me the value"}, {"source_name": "lecture2", "index": 1256, "time": "01:36:51.300 --> 01:36:52.879", "speaker": "Alexander Vasserman", "text": "all for a"}, {"source_name": "lecture2", "index": 1257, "time": "01:36:53.120 --> 01:36:54.889", "speaker": "Alexander Vasserman", "text": "and take the first element"}, {"source_name": "lecture2", "index": 1258, "time": "01:36:55.610 --> 01:36:57.030", "speaker": "Alexander Vasserman", "text": "in the least. That"}, {"source_name": "lecture2", "index": 1259, "time": "01:36:57.110 --> 01:36:58.179", "speaker": "Alexander Vasserman", "text": "was it."}, {"source_name": "lecture2", "index": 1260, "time": "01:37:01.430 --> 01:37:03.439", "speaker": "Alexander Vasserman", "text": "Does that make sense to people"}, {"source_name": "lecture2", "index": 1261, "time": "01:37:05.480 --> 01:37:07.289", "speaker": "Alexander Vasserman", "text": "sure you have questions about that?"}, {"source_name": "lecture2", "index": 1262, "time": "01:37:08.000 --> 01:37:10.460", "speaker": "Alexander Vasserman", "text": "but you have a question."}, {"source_name": "lecture2", "index": 1263, "time": "01:37:10.890 --> 01:37:23.929", "speaker": "Fahad Khan", "text": "Yeah, it's not about that. But so far we've only for the keys. We've only used strings. Can it be like integers or anything else? Yes, absolutely anything not mutable can be so"}, {"source_name": "lecture2", "index": 1264, "time": "01:37:23.970 --> 01:37:25.380", "speaker": "Alexander Vasserman", "text": "I can"}, {"source_name": "lecture2", "index": 1265, "time": "01:37:31.780 --> 01:37:34.659", "speaker": "Alexander Vasserman", "text": "do something like that. And this is fine."}, {"source_name": "lecture2", "index": 1266, "time": "01:37:34.850 --> 01:37:36.319", "speaker": "Alexander Vasserman", "text": "right? And"}, {"source_name": "lecture2", "index": 1267, "time": "01:37:36.600 --> 01:37:42.340", "speaker": "Alexander Vasserman", "text": "it is kind of weird, and some languages do not allow you to do that. To mix types like that"}, {"source_name": "lecture2", "index": 1268, "time": "01:37:42.540 --> 01:37:54.289", "speaker": "Alexander Vasserman", "text": "Python is not very strict about what allows you to do so. You know in general. In this dictionary we had things of skis, and up until"}, {"source_name": "lecture2", "index": 1269, "time": "01:37:54.870 --> 01:37:57.970", "speaker": "Alexander Vasserman", "text": "some point integers as values"}, {"source_name": "lecture2", "index": 1270, "time": "01:37:58.060 --> 01:37:59.360", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture2", "index": 1271, "time": "01:37:59.880 --> 01:38:02.670", "speaker": "Alexander Vasserman", "text": "python does not enforce it in a way"}, {"source_name": "lecture2", "index": 1272, "time": "01:38:03.460 --> 01:38:05.840", "speaker": "Alexander Vasserman", "text": "most of the time you don't"}, {"source_name": "lecture2", "index": 1273, "time": "01:38:05.880 --> 01:38:07.800", "speaker": "Alexander Vasserman", "text": "want to do something like this"}, {"source_name": "lecture2", "index": 1274, "time": "01:38:09.250 --> 01:38:11.500", "speaker": "Alexander Vasserman", "text": "it. It's for our"}, {"source_name": "lecture2", "index": 1275, "time": "01:38:11.690 --> 01:38:12.620", "speaker": "Alexander Vasserman", "text": "that."}, {"source_name": "lecture2", "index": 1276, "time": "01:38:12.830 --> 01:38:18.500", "speaker": "Alexander Vasserman", "text": "You want to mix types like that, and it's going to be very confusing most of the time."}, {"source_name": "lecture2", "index": 1277, "time": "01:38:18.580 --> 01:38:20.320", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 1278, "time": "01:38:20.380 --> 01:38:22.789", "speaker": "Alexander Vasserman", "text": "most of the time they are going to."}, {"source_name": "lecture2", "index": 1279, "time": "01:38:22.860 --> 01:38:23.750", "speaker": "Alexander Vasserman", "text": "or"}, {"source_name": "lecture2", "index": 1280, "time": "01:38:25.160 --> 01:38:27.599", "speaker": "Alexander Vasserman", "text": "to have a specific type"}, {"source_name": "lecture2", "index": 1281, "time": "01:38:27.800 --> 01:38:30.910", "speaker": "Alexander Vasserman", "text": "associated with the keys and the values"}, {"source_name": "lecture2", "index": 1282, "time": "01:38:32.820 --> 01:38:33.910", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 1283, "time": "01:38:37.030 --> 01:38:40.309", "speaker": "Alexander Vasserman", "text": "it actually brings me to another"}, {"source_name": "lecture2", "index": 1284, "time": "01:38:40.370 --> 01:38:42.290", "speaker": "Alexander Vasserman", "text": "kind of a point."}, {"source_name": "lecture2", "index": 1285, "time": "01:38:42.440 --> 01:38:43.309", "speaker": "Alexander Vasserman", "text": "That."}, {"source_name": "lecture2", "index": 1286, "time": "01:38:46.150 --> 01:38:47.019", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture2", "index": 1287, "time": "01:38:50.560 --> 01:38:53.680", "speaker": "Alexander Vasserman", "text": "probably is a good place."}, {"source_name": "lecture2", "index": 1288, "time": "01:38:57.910 --> 01:39:00.190", "speaker": "Alexander Vasserman", "text": "yeah. So"}, {"source_name": "lecture2", "index": 1289, "time": "01:39:04.810 --> 01:39:05.790", "speaker": "Alexander Vasserman", "text": "well, actually"}, {"source_name": "lecture2", "index": 1290, "time": "01:39:05.920 --> 01:39:06.670", "speaker": "Alexander Vasserman", "text": "sorry."}, {"source_name": "lecture2", "index": 1291, "time": "01:39:06.790 --> 01:39:08.550", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture2", "index": 1292, "time": "01:39:10.360 --> 01:39:13.149", "speaker": "Alexander Vasserman", "text": "another thing that I wanted to on"}, {"source_name": "lecture2", "index": 1293, "time": "01:39:14.000 --> 01:39:17.000", "speaker": "Alexander Vasserman", "text": "to point out in terms of our operators"}, {"source_name": "lecture2", "index": 1294, "time": "01:39:18.450 --> 01:39:23.189", "speaker": "Alexander Vasserman", "text": "in operator is again a very common commonly used to this dictionaries."}, {"source_name": "lecture2", "index": 1295, "time": "01:39:23.360 --> 01:39:26.750", "speaker": "Alexander Vasserman", "text": "So I can say."}, {"source_name": "lecture2", "index": 1296, "time": "01:39:28.780 --> 01:39:30.040", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture2", "index": 1297, "time": "01:39:32.680 --> 01:39:33.800", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture2", "index": 1298, "time": "01:39:34.110 --> 01:39:38.059", "speaker": "Alexander Vasserman", "text": "interesting thing, the or important thing these dictionaries is that."}, {"source_name": "lecture2", "index": 1299, "time": "01:39:38.180 --> 01:39:42.249", "speaker": "Alexander Vasserman", "text": "when you check whether or not something is in dictionary."}, {"source_name": "lecture2", "index": 1300, "time": "01:39:42.340 --> 01:39:44.309", "speaker": "Alexander Vasserman", "text": "Python assumes that humanity."}, {"source_name": "lecture2", "index": 1301, "time": "01:39:44.550 --> 01:39:45.510", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 1302, "time": "01:39:45.590 --> 01:39:48.260", "speaker": "Alexander Vasserman", "text": "basically you're checking if the key is"}, {"source_name": "lecture2", "index": 1303, "time": "01:39:48.320 --> 01:39:49.789", "speaker": "Alexander Vasserman", "text": "is in the dictionary."}, {"source_name": "lecture2", "index": 1304, "time": "01:39:51.960 --> 01:39:53.340", "speaker": "Alexander Vasserman", "text": "so he's"}, {"source_name": "lecture2", "index": 1305, "time": "01:39:53.630 --> 01:39:57.680", "speaker": "Alexander Vasserman", "text": "kind of have more of an importance for addiction within values."}, {"source_name": "lecture2", "index": 1306, "time": "01:39:59.430 --> 01:40:01.780", "speaker": "Alexander Vasserman", "text": "sometimes that's"}, {"source_name": "lecture2", "index": 1307, "time": "01:40:02.410 --> 01:40:07.159", "speaker": "Alexander Vasserman", "text": "I mean, I sometimes find it a little confusing for myself, and"}, {"source_name": "lecture2", "index": 1308, "time": "01:40:07.240 --> 01:40:12.820", "speaker": "Alexander Vasserman", "text": "check, whether or not like the key value. Part, for example, is in dictionary."}, {"source_name": "lecture2", "index": 1309, "time": "01:40:12.840 --> 01:40:16.360", "speaker": "Alexander Vasserman", "text": "and that's not how it works, if I you know"}, {"source_name": "lecture2", "index": 1310, "time": "01:40:16.740 --> 01:40:22.740", "speaker": "Alexander Vasserman", "text": "so anyways, so it. But again, kind of just you"}, {"source_name": "lecture2", "index": 1311, "time": "01:40:23.510 --> 01:40:24.250", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture2", "index": 1312, "time": "01:40:25.960 --> 01:40:31.730", "speaker": "Alexander Vasserman", "text": "yeah to to basically it works kind of like we set right. So again,"}, {"source_name": "lecture2", "index": 1313, "time": "01:40:32.400 --> 01:40:35.279", "speaker": "Alexander Vasserman", "text": "hey, this separation is very fast."}, {"source_name": "lecture2", "index": 1314, "time": "01:40:35.340 --> 01:40:36.559", "speaker": "Alexander Vasserman", "text": "like the sets"}, {"source_name": "lecture2", "index": 1315, "time": "01:40:36.590 --> 01:40:41.780", "speaker": "Alexander Vasserman", "text": "so, or checking whether or not something is in the dictionary is"}, {"source_name": "lecture2", "index": 1316, "time": "01:40:42.130 --> 01:40:43.870", "speaker": "Alexander Vasserman", "text": "as fast as you can. Something"}, {"source_name": "lecture2", "index": 1317, "time": "01:40:44.310 --> 01:40:45.520", "speaker": "Alexander Vasserman", "text": "is in a set"}, {"source_name": "lecture2", "index": 1318, "time": "01:40:45.630 --> 01:40:46.550", "speaker": "Alexander Vasserman", "text": "of keys"}, {"source_name": "lecture2", "index": 1319, "time": "01:40:48.220 --> 01:40:49.969", "speaker": "Alexander Vasserman", "text": "and a lot faster than that"}, {"source_name": "lecture2", "index": 1320, "time": "01:40:50.380 --> 01:40:52.800", "speaker": "Alexander Vasserman", "text": "checking if something is in the list."}, {"source_name": "lecture2", "index": 1321, "time": "01:40:59.910 --> 01:41:01.000", "speaker": "Alexander Vasserman", "text": "zoom."}, {"source_name": "lecture2", "index": 1322, "time": "01:41:07.850 --> 01:41:10.179", "speaker": "Alexander Vasserman", "text": "Let's see. So they did the last"}, {"source_name": "lecture2", "index": 1323, "time": "01:41:10.610 --> 01:41:11.400", "speaker": "Alexander Vasserman", "text": "type"}, {"source_name": "lecture2", "index": 1324, "time": "01:41:11.480 --> 01:41:13.809", "speaker": "Alexander Vasserman", "text": "that I wanted to discuss"}, {"source_name": "lecture2", "index": 1325, "time": "01:41:14.300 --> 01:41:17.479", "speaker": "Alexander Vasserman", "text": "in the last few minutes, and i'll probably pick up"}, {"source_name": "lecture2", "index": 1326, "time": "01:41:18.830 --> 01:41:20.750", "speaker": "Alexander Vasserman", "text": "in the next lecture as well."}, {"source_name": "lecture2", "index": 1327, "time": "01:41:20.910 --> 01:41:22.809", "speaker": "Alexander Vasserman", "text": "he's"}, {"source_name": "lecture2", "index": 1328, "time": "01:41:24.650 --> 01:41:26.010", "speaker": "Alexander Vasserman", "text": "so called couples."}, {"source_name": "lecture2", "index": 1329, "time": "01:41:26.620 --> 01:41:31.650", "speaker": "Alexander Vasserman", "text": "which is kind of generate generalization of"}, {"source_name": "lecture2", "index": 1330, "time": "01:41:32.020 --> 01:41:33.620", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture2", "index": 1331, "time": "01:41:33.890 --> 01:41:34.880", "speaker": "Alexander Vasserman", "text": "you know"}, {"source_name": "lecture2", "index": 1332, "time": "01:41:35.130 --> 01:41:36.170", "speaker": "Alexander Vasserman", "text": "I can"}, {"source_name": "lecture2", "index": 1333, "time": "01:41:36.600 --> 01:41:38.719", "speaker": "Alexander Vasserman", "text": "use parentheses to create"}, {"source_name": "lecture2", "index": 1334, "time": "01:41:41.290 --> 01:41:43.230", "speaker": "Alexander Vasserman", "text": "a bird like this."}, {"source_name": "lecture2", "index": 1335, "time": "01:41:45.180 --> 01:41:46.889", "speaker": "Alexander Vasserman", "text": "I can"}, {"source_name": "lecture2", "index": 1336, "time": "01:41:48.160 --> 01:41:49.190", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture2", "index": 1337, "time": "01:41:51.660 --> 01:41:53.120", "speaker": "Alexander Vasserman", "text": "have"}, {"source_name": "lecture2", "index": 1338, "time": "01:41:53.780 --> 01:41:54.740", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture2", "index": 1339, "time": "01:41:55.160 --> 01:41:55.990", "speaker": "Alexander Vasserman", "text": "a"}, {"source_name": "lecture2", "index": 1340, "time": "01:42:01.590 --> 01:42:02.510", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture2", "index": 1341, "time": "01:42:08.460 --> 01:42:13.670", "speaker": "Alexander Vasserman", "text": "again! Kind of topple as a container. It contains multiple elements."}, {"source_name": "lecture2", "index": 1342, "time": "01:42:14.120 --> 01:42:20.099", "speaker": "Alexander Vasserman", "text": "so what is the main difference between the least and a topple."}, {"source_name": "lecture2", "index": 1343, "time": "01:42:20.740 --> 01:42:23.120", "speaker": "Alexander Vasserman", "text": "Well, the main difference is that"}, {"source_name": "lecture2", "index": 1344, "time": "01:42:23.170 --> 01:42:26.780", "speaker": "Alexander Vasserman", "text": "couple is actually not mutable, unlikely."}, {"source_name": "lecture2", "index": 1345, "time": "01:42:27.100 --> 01:42:29.060", "speaker": "Alexander Vasserman", "text": "and so I can"}, {"source_name": "lecture2", "index": 1346, "time": "01:42:29.130 --> 01:42:31.170", "speaker": "Alexander Vasserman", "text": "say something like"}, {"source_name": "lecture2", "index": 1347, "time": "01:42:35.030 --> 01:42:36.080", "speaker": "Alexander Vasserman", "text": "like this."}, {"source_name": "lecture2", "index": 1348, "time": "01:42:36.320 --> 01:42:38.100", "speaker": "Alexander Vasserman", "text": "and it is fine."}, {"source_name": "lecture2", "index": 1349, "time": "01:42:38.390 --> 01:42:39.849", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture2", "index": 1350, "time": "01:42:40.130 --> 01:42:41.579", "speaker": "Alexander Vasserman", "text": "you know it just"}, {"source_name": "lecture2", "index": 1351, "time": "01:42:41.800 --> 01:42:44.450", "speaker": "Alexander Vasserman", "text": "one of the keys by."}, {"source_name": "lecture2", "index": 1352, "time": "01:42:45.290 --> 01:42:47.130", "speaker": "Alexander Vasserman", "text": "So that is"}, {"source_name": "lecture2", "index": 1353, "time": "01:42:47.260 --> 01:42:49.400", "speaker": "Alexander Vasserman", "text": "quite convenient in some cases."}, {"source_name": "lecture2", "index": 1354, "time": "01:42:51.130 --> 01:42:55.240", "speaker": "Alexander Vasserman", "text": "and in some cases you also want things to be"}, {"source_name": "lecture2", "index": 1355, "time": "01:42:55.490 --> 01:42:56.750", "speaker": "Alexander Vasserman", "text": "not"}, {"source_name": "lecture2", "index": 1356, "time": "01:42:56.810 --> 01:42:57.710", "speaker": "Alexander Vasserman", "text": "musical."}, {"source_name": "lecture2", "index": 1357, "time": "01:42:57.840 --> 01:42:58.550", "speaker": "Alexander Vasserman", "text": "Just"}, {"source_name": "lecture2", "index": 1358, "time": "01:43:01.760 --> 01:43:05.160", "speaker": "Alexander Vasserman", "text": "Anyways, I think you'll continue from there"}, {"source_name": "lecture2", "index": 1359, "time": "01:43:05.430 --> 01:43:09.549", "speaker": "Alexander Vasserman", "text": "tomorrow or not tomorrow next week."}, {"source_name": "lecture2", "index": 1360, "time": "01:43:09.940 --> 01:43:11.260", "speaker": "Alexander Vasserman", "text": "hopefully, it"}, {"source_name": "lecture2", "index": 1361, "time": "01:43:11.360 --> 01:43:16.209", "speaker": "Alexander Vasserman", "text": "you guys find that somewhat useful, even if you know python"}, {"source_name": "lecture2", "index": 1362, "time": "01:43:16.500 --> 01:43:21.540", "speaker": "Alexander Vasserman", "text": "next lecture, we are going to actually do"}, {"source_name": "lecture2", "index": 1363, "time": "01:43:21.910 --> 01:43:25.250", "speaker": "Alexander Vasserman", "text": "even more things that you probably haven't seen before."}, {"source_name": "lecture2", "index": 1364, "time": "01:43:25.330 --> 01:43:27.940", "speaker": "Alexander Vasserman", "text": "or kind of a little bit of"}, {"source_name": "lecture2", "index": 1365, "time": "01:43:28.150 --> 01:43:36.920", "speaker": "Alexander Vasserman", "text": "some syntactic sugar, some like, you know, kind of convenient things, etc. so hopefully, it's going to be a good review, but also you'll learn something new."}, {"source_name": "lecture2", "index": 1366, "time": "01:43:37.400 --> 01:43:39.380", "speaker": "Alexander Vasserman", "text": "did you have a question?"}, {"source_name": "lecture2", "index": 1367, "time": "01:43:40.180 --> 01:43:48.849", "speaker": "D.J Davis", "text": "Yeah, I was just wondering. These examples that we did here today in class are these going to be available for us to reference to, or to be able to look at."}, {"source_name": "lecture2", "index": 1368, "time": "01:43:49.250 --> 01:43:56.479", "speaker": "Alexander Vasserman", "text": "Yes, absolutely so. I'll share this notebook with you on on Gtl: Shortly after the thislection"}, {"source_name": "lecture2", "index": 1369, "time": "01:44:01.860 --> 01:44:02.670", "speaker": "Alexander Vasserman", "text": "fad."}, {"source_name": "lecture2", "index": 1370, "time": "01:44:03.310 --> 01:44:07.299", "speaker": "Fahad Khan", "text": "when are we gonna actually start like the search engine?"}, {"source_name": "lecture2", "index": 1371, "time": "01:44:10.110 --> 01:44:14.530", "speaker": "Alexander Vasserman", "text": "So we'll probably do just another"}, {"source_name": "lecture2", "index": 1372, "time": "01:44:15.300 --> 01:44:17.740", "speaker": "Alexander Vasserman", "text": "just one more class of reviewing Python."}, {"source_name": "lecture2", "index": 1373, "time": "01:44:18.110 --> 01:44:25.709", "speaker": "Alexander Vasserman", "text": "I know that it might be a little bit boring if you for done a bunch of python before."}, {"source_name": "lecture2", "index": 1374, "time": "01:44:25.780 --> 01:44:27.669", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture2", "index": 1375, "time": "01:44:28.210 --> 01:44:29.460", "speaker": "Alexander Vasserman", "text": "you know, I"}, {"source_name": "lecture2", "index": 1376, "time": "01:44:31.160 --> 01:44:37.110", "speaker": "Alexander Vasserman", "text": "This kind of allows us to be on the same page. And"}, {"source_name": "lecture2", "index": 1377, "time": "01:44:37.520 --> 01:44:38.309", "speaker": "Alexander Vasserman", "text": "you know."}, {"source_name": "lecture2", "index": 1378, "time": "01:44:38.940 --> 01:44:42.960", "speaker": "Alexander Vasserman", "text": "basically not get distracted by"}, {"source_name": "lecture2", "index": 1379, "time": "01:44:44.000 --> 01:44:51.340", "speaker": "Alexander Vasserman", "text": "all these things. Once we get into search engines, so we'll definitely get a more into"}, {"source_name": "lecture2", "index": 1380, "time": "01:44:51.430 --> 01:44:57.940", "speaker": "Alexander Vasserman", "text": "a search next week, and you'll start seeing how all of this is relevant"}, {"source_name": "lecture2", "index": 1381, "time": "01:44:58.150 --> 01:44:59.730", "speaker": "Alexander Vasserman", "text": "for search engines."}, {"source_name": "lecture2", "index": 1382, "time": "01:45:03.570 --> 01:45:16.030", "speaker": "Alexander Vasserman", "text": "so you it it might look like just I'm, i'm doing giving you another course in python. But you know, as some of strategic in terms of what? What are the things that i'm covering"}, {"source_name": "lecture2", "index": 1383, "time": "01:45:19.620 --> 01:45:21.559", "speaker": "Alexander Vasserman", "text": "any other questions?"}, {"source_name": "lecture2", "index": 1384, "time": "01:45:25.430 --> 01:45:26.410", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture2", "index": 1385, "time": "01:45:27.150 --> 01:45:30.420", "speaker": "Alexander Vasserman", "text": "yes, we are done for today. Thank you very much."}, {"source_name": "lecture2", "index": 1386, "time": "01:45:30.650 --> 01:45:33.300", "speaker": "Alexander Vasserman", "text": "Everyone have a good"}, {"source_name": "lecture2", "index": 1387, "time": "01:45:33.410 --> 01:45:34.230", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture2", "index": 1388, "time": "01:45:34.440 --> 01:45:37.250", "speaker": "Alexander Vasserman", "text": "day and a good weekend."}, {"source_name": "lecture2", "index": 1389, "time": "01:45:37.600 --> 01:45:43.949", "speaker": "Alexander Vasserman", "text": "And if you still have questions that you wanted to ask. Personally, i'm happy to stay"}, {"source_name": "lecture2", "index": 1390, "time": "01:45:44.100 --> 01:45:45.719", "speaker": "Alexander Vasserman", "text": "so just stay in the poll."}, {"source_name": "lecture2", "index": 1391, "time": "01:45:48.550 --> 01:45:49.910", "speaker": "Luis Gonzalez", "text": "Thank you. Have a good one."}, {"source_name": "lecture2", "index": 1392, "time": "01:45:52.100 --> 01:45:53.130", "speaker": "Ralph", "text": "thank you."}, {"source_name": "lecture2", "index": 1393, "time": "01:45:57.490 --> 01:46:06.489", "speaker": "Aimun Anwer", "text": "Oh, Professor, I just said a quick a very like just quick question. So when you were saying mutable during the conversation, was that basically like"}, {"source_name": "lecture2", "index": 1394, "time": "01:46:06.550 --> 01:46:23.309", "speaker": "Alexander Vasserman", "text": "like, from what I could tell, that just meant like not changeable right? Really, Yes, mutable means changeable and not mutable, not changeable. Essentially. Okay. Okay, that's all. I have. No, that that's a good point. That's like, you know. Kind of again one of those sharkens"}, {"source_name": "lecture2", "index": 1395, "time": "01:46:23.350 --> 01:46:36.520", "speaker": "Alexander Vasserman", "text": "that like used in computer science, you'll get You'll hear it in other places as well. But you know, Yes, sometimes it's also not mutable sometimes. If I do, it's constant."}, {"source_name": "lecture2", "index": 1396, "time": "01:46:37.440 --> 01:46:40.260", "speaker": "Aimun Anwer", "text": "Yes, thank you. Have a good weekend."}, {"source_name": "lecture2", "index": 1397, "time": "01:46:41.710 --> 01:46:53.620", "speaker": "Rana Hani", "text": "Hi, Professor I was able to make it to office. I was yesterday because I was in it for another class, but I just wanted to introduce myself real quick, and ask you a couple of questions, if that's fine."}, {"source_name": "lecture2", "index": 1398, "time": "01:46:53.720 --> 01:47:09.760", "speaker": "Rana Hani", "text": "So I know you mentioned you worked at Google, and you have experience in the field as well. is it okay? If like next week or something. I schedule an appointment with you or come into office hours just talking a few about the field, some questions."}, {"source_name": "lecture2", "index": 1399, "time": "01:47:09.850 --> 01:47:14.239", "speaker": "Alexander Vasserman", "text": "Just email me, and we'll schedule something over the email."}, {"source_name": "lecture2", "index": 1400, "time": "01:47:14.460 --> 01:47:16.850", "speaker": "Alexander Vasserman", "text": "Yeah. And like."}, {"source_name": "lecture2", "index": 1401, "time": "01:47:16.890 --> 01:47:24.459", "speaker": "Alexander Vasserman", "text": "obviously, if you ever free during my office hours to stop by but yeah, I understand that you're doing that time. And"}, {"source_name": "lecture2", "index": 1402, "time": "01:47:26.450 --> 01:47:28.439", "speaker": "Rana Hani", "text": "alright, thank you. Yeah, sure."}, {"source_name": "lecture2", "index": 1403, "time": "01:47:28.580 --> 01:47:29.200", "speaker": "Rana Hani", "text": "Bye."}, {"source_name": "lecture2", "index": 1404, "time": "01:47:29.240 --> 01:47:29.820", "speaker": "Rana Hani", "text": "bye."}, {"source_name": "lecture2", "index": 1405, "time": "01:47:30.520 --> 01:47:43.159", "speaker": "D.J Davis", "text": "hi, Professor last one here I I was still like solidifying classes and whatnot this week. So I think I missed on Tuesday's class."}, {"source_name": "lecture2", "index": 1406, "time": "01:47:43.170 --> 01:47:51.299", "speaker": "D.J Davis", "text": "is there any like assignments that I need to catch up on or do?"}, {"source_name": "lecture2", "index": 1407, "time": "01:47:51.520 --> 01:47:59.020", "speaker": "Alexander Vasserman", "text": "Yeah, I I have not done any assignments yet. they'll start with assignments next week."}, {"source_name": "lecture2", "index": 1408, "time": "01:47:59.110 --> 01:48:02.010", "speaker": "Alexander Vasserman", "text": "Okay, you know, basically there"}, {"source_name": "lecture2", "index": 1409, "time": "01:48:02.070 --> 01:48:05.790", "speaker": "Alexander Vasserman", "text": "optional region. You you can read"}, {"source_name": "lecture2", "index": 1410, "time": "01:48:05.870 --> 01:48:08.140", "speaker": "Alexander Vasserman", "text": "the textbook chapter. One"}, {"source_name": "lecture2", "index": 1411, "time": "01:48:08.310 --> 01:48:18.189", "speaker": "Alexander Vasserman", "text": "that's kind of introduction to search engines and kind of goes in a little bit more details about the things that we talked about all last time."}, {"source_name": "lecture2", "index": 1412, "time": "01:48:19.650 --> 01:48:21.339", "speaker": "Alexander Vasserman", "text": "so. But"}, {"source_name": "lecture2", "index": 1413, "time": "01:48:21.470 --> 01:48:23.669", "speaker": "Alexander Vasserman", "text": "but that's sticky optional"}, {"source_name": "lecture2", "index": 1414, "time": "01:48:27.570 --> 01:48:33.190", "speaker": "Alexander Vasserman", "text": "at some point next week we'll also start using by charm."}, {"source_name": "lecture2", "index": 1415, "time": "01:48:33.430 --> 01:48:36.789", "speaker": "Alexander Vasserman", "text": "so, or please download, install it"}, {"source_name": "lecture2", "index": 1416, "time": "01:48:36.910 --> 01:48:39.870", "speaker": "Alexander Vasserman", "text": "play around with it a little bit, maybe even"}, {"source_name": "lecture2", "index": 1417, "time": "01:48:41.660 --> 01:48:49.939", "speaker": "Alexander Vasserman", "text": "But that's basically it. And yes, there's also a recording available on details. So if you want to just watch it recording."}, {"source_name": "lecture2", "index": 1418, "time": "01:48:50.280 --> 01:48:52.630", "speaker": "Alexander Vasserman", "text": "you can and also slide it"}, {"source_name": "lecture2", "index": 1419, "time": "01:48:52.780 --> 01:48:53.519", "speaker": "Alexander Vasserman", "text": "in detail."}, {"source_name": "lecture2", "index": 1420, "time": "01:48:53.680 --> 01:48:58.849", "speaker": "D.J Davis", "text": "Okay, cool. And I think I just heard Rona mentioned used to work at Google."}, {"source_name": "lecture2", "index": 1421, "time": "01:48:58.870 --> 01:49:10.720", "speaker": "Alexander Vasserman", "text": "Okay, I I probably missed that from last class, but that's awesome. Yeah, I worked at the at Google for a while, and a few other interesting companies so definitely like, you know, kind of."}, {"source_name": "lecture2", "index": 1422, "time": "01:49:10.840 --> 01:49:26.480", "speaker": "Alexander Vasserman", "text": "I have a lot of interesting perspectives. I'm: Sure, i'm sure. Did you enjoy your time there or yeah, for for for a while. towards the end, I I think, like I prefer kind of"}, {"source_name": "lecture2", "index": 1423, "time": "01:49:26.740 --> 01:49:31.140", "speaker": "Alexander Vasserman", "text": "smaller companies than what it When I was leaving it."}, {"source_name": "lecture2", "index": 1424, "time": "01:49:31.200 --> 01:49:33.360", "speaker": "Alexander Vasserman", "text": "So it's kind of like a"}, {"source_name": "lecture2", "index": 1425, "time": "01:49:34.470 --> 01:49:36.569", "speaker": "Alexander Vasserman", "text": "But it was definitely fun."}, {"source_name": "lecture2", "index": 1426, "time": "01:49:38.030 --> 01:49:47.669", "speaker": "D.J Davis", "text": "That's cool. That's awesome. Okay? Well, yeah, I'll definitely have to set up a a. You know a meeting with you, because i'd love to pick your brain as well, you know"}, {"source_name": "lecture2", "index": 1427, "time": "01:49:47.720 --> 01:49:51.539", "speaker": "Alexander Vasserman", "text": "for sure. All right, well have a good weekend. Okay."}, {"source_name": "lecture2", "index": 1428, "time": "01:49:51.560 --> 01:49:53.230", "speaker": "D.J Davis", "text": "Thank you. Bye, bye."}, {"source_name": "lecture3", "index": 1, "time": "00:19:08.830 --> 00:19:14.070", "speaker": "Tanya", "text": "sorry i'm a little bit late have it some"}, {"source_name": "lecture3", "index": 2, "time": "00:19:14.360 --> 00:19:18.240", "speaker": "Tanya", "text": "technical I might need to go on a join"}, {"source_name": "lecture3", "index": 3, "time": "00:19:18.570 --> 00:19:21.150", "speaker": "Tanya", "text": "so hold on just a second."}, {"source_name": "lecture3", "index": 4, "time": "00:19:21.580 --> 00:19:22.950", "speaker": "Tanya", "text": "My conscious"}, {"source_name": "lecture3", "index": 5, "time": "00:20:40.150 --> 00:20:41.889", "speaker": "Alexander Vasserman", "text": "All right."}, {"source_name": "lecture3", "index": 6, "time": "00:20:42.420 --> 00:20:48.969", "speaker": "Alexander Vasserman", "text": "sorry once again. Just give me one more minute, and we'll get started"}, {"source_name": "lecture3", "index": 7, "time": "00:21:07.190 --> 00:21:08.530", "speaker": "Alexander Vasserman", "text": "in the meantime."}, {"source_name": "lecture3", "index": 8, "time": "00:21:09.050 --> 00:21:10.109", "speaker": "Alexander Vasserman", "text": "Oh, by it."}, {"source_name": "lecture3", "index": 9, "time": "00:21:11.800 --> 00:21:13.269", "speaker": "Alexander Vasserman", "text": "Of setting things up."}, {"source_name": "lecture3", "index": 10, "time": "00:21:13.420 --> 00:21:15.640", "speaker": "Alexander Vasserman", "text": "Think about if you have any questions."}, {"source_name": "lecture3", "index": 11, "time": "00:22:11.990 --> 00:22:15.250", "speaker": "Alexander Vasserman", "text": "all right. So any questions anyone"}, {"source_name": "lecture3", "index": 12, "time": "00:22:16.130 --> 00:22:20.169", "speaker": "Alexander Vasserman", "text": "anything that we've done last time"}, {"source_name": "lecture3", "index": 13, "time": "00:22:20.760 --> 00:22:22.240", "speaker": "Alexander Vasserman", "text": "or"}, {"source_name": "lecture3", "index": 14, "time": "00:22:22.690 --> 00:22:23.900", "speaker": "Alexander Vasserman", "text": "anything else."}, {"source_name": "lecture3", "index": 15, "time": "00:22:28.610 --> 00:22:30.960", "speaker": "Alexander Vasserman", "text": "All right. If not, then"}, {"source_name": "lecture3", "index": 16, "time": "00:22:32.730 --> 00:22:34.150", "speaker": "Alexander Vasserman", "text": "let's"}, {"source_name": "lecture3", "index": 17, "time": "00:22:34.240 --> 00:22:36.560", "speaker": "Alexander Vasserman", "text": "jump into the"}, {"source_name": "lecture3", "index": 18, "time": "00:22:37.370 --> 00:22:38.769", "speaker": "Alexander Vasserman", "text": "so today."}, {"source_name": "lecture3", "index": 19, "time": "00:22:39.890 --> 00:22:40.770", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 20, "time": "00:22:40.890 --> 00:22:41.820", "speaker": "Alexander Vasserman", "text": "real"}, {"source_name": "lecture3", "index": 21, "time": "00:22:42.020 --> 00:22:42.580", "speaker": "Alexander Vasserman", "text": "okay."}, {"source_name": "lecture3", "index": 22, "time": "00:22:43.530 --> 00:22:45.090", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture3", "index": 23, "time": "00:22:45.160 --> 00:22:50.639", "speaker": "Alexander Vasserman", "text": "so far, we've done a little bit of an introduction to information table and search engines. We"}, {"source_name": "lecture3", "index": 24, "time": "00:22:50.760 --> 00:22:53.059", "speaker": "Alexander Vasserman", "text": "you also did a bit of"}, {"source_name": "lecture3", "index": 25, "time": "00:22:53.170 --> 00:22:55.160", "speaker": "Alexander Vasserman", "text": "python data Structures Review."}, {"source_name": "lecture3", "index": 26, "time": "00:22:55.660 --> 00:22:57.260", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture3", "index": 27, "time": "00:22:57.440 --> 00:22:59.140", "speaker": "Alexander Vasserman", "text": "today we'll"}, {"source_name": "lecture3", "index": 28, "time": "00:22:59.410 --> 00:23:04.229", "speaker": "Alexander Vasserman", "text": "do a little bit more of Python review, but we'll also start"}, {"source_name": "lecture3", "index": 29, "time": "00:23:04.730 --> 00:23:07.520", "speaker": "Alexander Vasserman", "text": "getting into all"}, {"source_name": "lecture3", "index": 30, "time": "00:23:07.690 --> 00:23:16.549", "speaker": "Alexander Vasserman", "text": "search implementation, and if everything goes well, i'm planning to have a very naive search implementation done today."}, {"source_name": "lecture3", "index": 31, "time": "00:23:17.950 --> 00:23:19.580", "speaker": "Alexander Vasserman", "text": "And they'll also"}, {"source_name": "lecture3", "index": 32, "time": "00:23:19.630 --> 00:23:22.809", "speaker": "Alexander Vasserman", "text": "or do some of"}, {"source_name": "lecture3", "index": 33, "time": "00:23:23.240 --> 00:23:27.800", "speaker": "Alexander Vasserman", "text": "some unit testing, which is an important part of"}, {"source_name": "lecture3", "index": 34, "time": "00:23:27.870 --> 00:23:38.109", "speaker": "Alexander Vasserman", "text": "development process. I don't know if all of you've seen unit testing before or done any kind of testing. But as we are writing a larger"}, {"source_name": "lecture3", "index": 35, "time": "00:23:39.860 --> 00:23:45.070", "speaker": "Alexander Vasserman", "text": "larger project that's going to be critical thing to do."}, {"source_name": "lecture3", "index": 36, "time": "00:23:46.640 --> 00:23:47.640", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 37, "time": "00:23:50.100 --> 00:23:51.330", "speaker": "Alexander Vasserman", "text": "let's"}, {"source_name": "lecture3", "index": 38, "time": "00:23:52.090 --> 00:23:53.200", "speaker": "Alexander Vasserman", "text": "start."}, {"source_name": "lecture3", "index": 39, "time": "00:23:54.060 --> 00:23:56.209", "speaker": "Alexander Vasserman", "text": "Oh, again this the"}, {"source_name": "lecture3", "index": 40, "time": "00:23:56.470 --> 00:23:57.740", "speaker": "Alexander Vasserman", "text": "call up"}, {"source_name": "lecture3", "index": 41, "time": "00:23:59.990 --> 00:24:01.190", "speaker": "Alexander Vasserman", "text": "so that"}, {"source_name": "lecture3", "index": 42, "time": "00:24:01.290 --> 00:24:05.129", "speaker": "Alexander Vasserman", "text": "we can continue a little bit with the"}, {"source_name": "lecture3", "index": 43, "time": "00:24:05.150 --> 00:24:06.680", "speaker": "Alexander Vasserman", "text": "I, some of you."}, {"source_name": "lecture3", "index": 44, "time": "00:24:09.760 --> 00:24:11.920", "speaker": "Alexander Vasserman", "text": "So that's"}, {"source_name": "lecture3", "index": 45, "time": "00:24:12.290 --> 00:24:14.019", "speaker": "Alexander Vasserman", "text": "start in, you know."}, {"source_name": "lecture3", "index": 46, "time": "00:24:16.460 --> 00:24:17.690", "speaker": "Alexander Vasserman", "text": "No, the book"}, {"source_name": "lecture3", "index": 47, "time": "00:24:30.210 --> 00:24:31.800", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture3", "index": 48, "time": "00:24:41.970 --> 00:24:43.390", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture3", "index": 49, "time": "00:24:43.950 --> 00:24:45.450", "speaker": "Alexander Vasserman", "text": "let's"}, {"source_name": "lecture3", "index": 50, "time": "00:24:46.630 --> 00:24:47.800", "speaker": "Alexander Vasserman", "text": "let's start"}, {"source_name": "lecture3", "index": 51, "time": "00:24:48.410 --> 00:24:50.590", "speaker": "Alexander Vasserman", "text": "is a"}, {"source_name": "lecture3", "index": 52, "time": "00:24:51.060 --> 00:24:52.539", "speaker": "Alexander Vasserman", "text": "It will"}, {"source_name": "lecture3", "index": 53, "time": "00:24:54.220 --> 00:24:54.920", "speaker": "Alexander Vasserman", "text": "like this"}, {"source_name": "lecture3", "index": 54, "time": "00:24:55.660 --> 00:24:57.200", "speaker": "Alexander Vasserman", "text": "small put assignments"}, {"source_name": "lecture3", "index": 55, "time": "00:24:58.650 --> 00:25:00.499", "speaker": "Alexander Vasserman", "text": "zoom."}, {"source_name": "lecture3", "index": 56, "time": "00:25:08.880 --> 00:25:09.830", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 57, "time": "00:25:10.250 --> 00:25:11.660", "speaker": "Alexander Vasserman", "text": "what we want to do"}, {"source_name": "lecture3", "index": 58, "time": "00:25:11.910 --> 00:25:12.940", "speaker": "Alexander Vasserman", "text": "is"}, {"source_name": "lecture3", "index": 59, "time": "00:25:13.650 --> 00:25:17.629", "speaker": "Alexander Vasserman", "text": "write a function that, given the text"}, {"source_name": "lecture3", "index": 60, "time": "00:25:17.870 --> 00:25:19.599", "speaker": "Alexander Vasserman", "text": "outputs."}, {"source_name": "lecture3", "index": 61, "time": "00:25:19.680 --> 00:25:21.770", "speaker": "Alexander Vasserman", "text": "positions of the"}, {"source_name": "lecture3", "index": 62, "time": "00:25:23.190 --> 00:25:24.730", "speaker": "Alexander Vasserman", "text": "space characters."}, {"source_name": "lecture3", "index": 63, "time": "00:25:25.310 --> 00:25:27.879", "speaker": "Alexander Vasserman", "text": "So, for example, let's"}, {"source_name": "lecture3", "index": 64, "time": "00:25:30.340 --> 00:25:33.469", "speaker": "Alexander Vasserman", "text": "Let's imagine that we have"}, {"source_name": "lecture3", "index": 65, "time": "00:25:34.410 --> 00:25:35.340", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture3", "index": 66, "time": "00:25:35.860 --> 00:25:41.200", "speaker": "Alexander Vasserman", "text": "text the following text, which is so, you know the definition of"}, {"source_name": "lecture3", "index": 67, "time": "00:25:41.390 --> 00:25:43.250", "speaker": "Alexander Vasserman", "text": "information that you will that"}, {"source_name": "lecture3", "index": 68, "time": "00:25:43.350 --> 00:25:44.740", "speaker": "Alexander Vasserman", "text": "you've had."}, {"source_name": "lecture3", "index": 69, "time": "00:25:44.840 --> 00:25:48.010", "speaker": "Alexander Vasserman", "text": "Oh, i'm the first in the first lecture."}, {"source_name": "lecture3", "index": 70, "time": "00:25:49.920 --> 00:25:53.020", "speaker": "Alexander Vasserman", "text": "Is this phone size, good or"}, {"source_name": "lecture3", "index": 71, "time": "00:25:53.450 --> 00:25:55.909", "speaker": "Alexander Vasserman", "text": "do we need smaller larger Good."}, {"source_name": "lecture3", "index": 72, "time": "00:25:56.160 --> 00:25:56.900", "speaker": "Alexander Vasserman", "text": "All right?"}, {"source_name": "lecture3", "index": 73, "time": "00:25:57.310 --> 00:25:58.430", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 74, "time": "00:26:00.060 --> 00:26:00.990", "speaker": "Alexander Vasserman", "text": "home."}, {"source_name": "lecture3", "index": 75, "time": "00:26:06.040 --> 00:26:19.200", "speaker": "Alexander Vasserman", "text": "So yes, basically, let's let's say, we want to write that function. So basically what we want is to output the positions of this space. So inside of this steps right"}, {"source_name": "lecture3", "index": 76, "time": "00:26:19.310 --> 00:26:20.600", "speaker": "Alexander Vasserman", "text": "Sue."}, {"source_name": "lecture3", "index": 77, "time": "00:26:20.860 --> 00:26:22.600", "speaker": "Alexander Vasserman", "text": "let's"}, {"source_name": "lecture3", "index": 78, "time": "00:26:22.980 --> 00:26:24.270", "speaker": "Alexander Vasserman", "text": "Oh, just"}, {"source_name": "lecture3", "index": 79, "time": "00:26:26.180 --> 00:26:31.029", "speaker": "Alexander Vasserman", "text": "oh, remember how the right to function. So"}, {"source_name": "lecture3", "index": 80, "time": "00:26:31.070 --> 00:26:40.539", "speaker": "Alexander Vasserman", "text": "in python, we would say, def is the keyboard that starts function. And let's say, let's call it"}, {"source_name": "lecture3", "index": 81, "time": "00:26:41.260 --> 00:26:43.470", "speaker": "Alexander Vasserman", "text": "find the spaces"}, {"source_name": "lecture3", "index": 82, "time": "00:26:47.220 --> 00:26:49.750", "speaker": "Alexander Vasserman", "text": "and it is"}, {"source_name": "lecture3", "index": 83, "time": "00:26:49.770 --> 00:26:52.780", "speaker": "Alexander Vasserman", "text": "going to take"}, {"source_name": "lecture3", "index": 84, "time": "00:26:53.030 --> 00:26:55.040", "speaker": "Alexander Vasserman", "text": "a single argument"}, {"source_name": "lecture3", "index": 85, "time": "00:26:55.310 --> 00:26:56.190", "speaker": "Alexander Vasserman", "text": "next."}, {"source_name": "lecture3", "index": 86, "time": "00:26:57.230 --> 00:26:58.000", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture3", "index": 87, "time": "00:26:58.700 --> 00:27:00.110", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture3", "index": 88, "time": "00:27:00.480 --> 00:27:02.739", "speaker": "Alexander Vasserman", "text": "So what we want to"}, {"source_name": "lecture3", "index": 89, "time": "00:27:02.890 --> 00:27:05.060", "speaker": "Alexander Vasserman", "text": "do is or"}, {"source_name": "lecture3", "index": 90, "time": "00:27:05.180 --> 00:27:10.470", "speaker": "Alexander Vasserman", "text": "out good positions of the space character, right? So we'll probably"}, {"source_name": "lecture3", "index": 91, "time": "00:27:11.500 --> 00:27:14.109", "speaker": "Alexander Vasserman", "text": "What you want to output is at least"}, {"source_name": "lecture3", "index": 92, "time": "00:27:14.160 --> 00:27:16.729", "speaker": "Alexander Vasserman", "text": "of integers. That."}, {"source_name": "lecture3", "index": 93, "time": "00:27:16.800 --> 00:27:19.810", "speaker": "Alexander Vasserman", "text": "we'll include those positions."}, {"source_name": "lecture3", "index": 94, "time": "00:27:19.980 --> 00:27:20.710", "speaker": "Alexander Vasserman", "text": "Right?"}, {"source_name": "lecture3", "index": 95, "time": "00:27:20.970 --> 00:27:23.959", "speaker": "Alexander Vasserman", "text": "So let's create that list."}, {"source_name": "lecture3", "index": 96, "time": "00:27:28.390 --> 00:27:33.270", "speaker": "Alexander Vasserman", "text": "so i'm. At least hopefully familiar from the last time."}, {"source_name": "lecture3", "index": 97, "time": "00:27:36.590 --> 00:27:38.060", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture3", "index": 98, "time": "00:27:38.620 --> 00:27:41.550", "speaker": "Alexander Vasserman", "text": "What we can do is right."}, {"source_name": "lecture3", "index": 99, "time": "00:27:41.640 --> 00:27:42.450", "speaker": "Alexander Vasserman", "text": "A"}, {"source_name": "lecture3", "index": 100, "time": "00:27:42.650 --> 00:27:43.650", "speaker": "Alexander Vasserman", "text": "for it."}, {"source_name": "lecture3", "index": 101, "time": "00:27:43.840 --> 00:27:46.819", "speaker": "Alexander Vasserman", "text": "That's just one way to do this."}, {"source_name": "lecture3", "index": 102, "time": "00:27:47.900 --> 00:27:50.819", "speaker": "Alexander Vasserman", "text": "But we are going to."}, {"source_name": "lecture3", "index": 103, "time": "00:27:51.140 --> 00:27:51.890", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 104, "time": "00:27:52.520 --> 00:27:53.460", "speaker": "Alexander Vasserman", "text": "say."}, {"source_name": "lecture3", "index": 105, "time": "00:27:55.690 --> 00:27:58.099", "speaker": "Alexander Vasserman", "text": "iterate over all characters in"}, {"source_name": "lecture3", "index": 106, "time": "00:27:58.120 --> 00:27:59.020", "speaker": "Alexander Vasserman", "text": "text."}, {"source_name": "lecture3", "index": 107, "time": "00:28:01.540 --> 00:28:03.730", "speaker": "Alexander Vasserman", "text": "So here is something that's"}, {"source_name": "lecture3", "index": 108, "time": "00:28:04.080 --> 00:28:07.880", "speaker": "Alexander Vasserman", "text": "we haven't reviewed yet we've seen they are in"}, {"source_name": "lecture3", "index": 109, "time": "00:28:08.310 --> 00:28:09.520", "speaker": "Alexander Vasserman", "text": "operator"}, {"source_name": "lecture3", "index": 110, "time": "00:28:09.710 --> 00:28:12.139", "speaker": "Alexander Vasserman", "text": "used on all"}, {"source_name": "lecture3", "index": 111, "time": "00:28:12.420 --> 00:28:16.630", "speaker": "Alexander Vasserman", "text": "streams right? So both of those things are strings. Right."}, {"source_name": "lecture3", "index": 112, "time": "00:28:16.690 --> 00:28:19.640", "speaker": "Alexander Vasserman", "text": "Text and characters are a text."}, {"source_name": "lecture3", "index": 113, "time": "00:28:19.660 --> 00:28:31.090", "speaker": "Alexander Vasserman", "text": "but here what we're looking at is we're treating text as a container of characters. And so this for Loop says that we're going to iterate"}, {"source_name": "lecture3", "index": 114, "time": "00:28:31.110 --> 00:28:34.159", "speaker": "Alexander Vasserman", "text": "over each character in this stream"}, {"source_name": "lecture3", "index": 115, "time": "00:28:35.890 --> 00:28:37.190", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture3", "index": 116, "time": "00:28:39.750 --> 00:28:40.650", "speaker": "Alexander Vasserman", "text": "if"}, {"source_name": "lecture3", "index": 117, "time": "00:28:42.310 --> 00:28:43.789", "speaker": "Alexander Vasserman", "text": "or the"}, {"source_name": "lecture3", "index": 118, "time": "00:28:45.400 --> 00:28:48.590", "speaker": "Alexander Vasserman", "text": "character is space"}, {"source_name": "lecture3", "index": 119, "time": "00:28:49.520 --> 00:28:51.120", "speaker": "Alexander Vasserman", "text": "we'll want to"}, {"source_name": "lecture3", "index": 120, "time": "00:28:51.510 --> 00:28:53.269", "speaker": "Alexander Vasserman", "text": "add position."}, {"source_name": "lecture3", "index": 121, "time": "00:29:01.940 --> 00:29:02.900", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 122, "time": "00:29:02.950 --> 00:29:03.790", "speaker": "Alexander Vasserman", "text": "me, is"}, {"source_name": "lecture3", "index": 123, "time": "00:29:03.930 --> 00:29:07.270", "speaker": "Alexander Vasserman", "text": "the append function that we've seen last time"}, {"source_name": "lecture3", "index": 124, "time": "00:29:07.320 --> 00:29:10.789", "speaker": "Alexander Vasserman", "text": "good won't. You append the the position"}, {"source_name": "lecture3", "index": 125, "time": "00:29:11.910 --> 00:29:13.820", "speaker": "Alexander Vasserman", "text": "to the position. Space"}, {"source_name": "lecture3", "index": 126, "time": "00:29:15.800 --> 00:29:18.269", "speaker": "Alexander Vasserman", "text": "what is going to be the position here?"}, {"source_name": "lecture3", "index": 127, "time": "00:29:18.610 --> 00:29:20.060", "speaker": "Alexander Vasserman", "text": "well"}, {"source_name": "lecture3", "index": 128, "time": "00:29:20.910 --> 00:29:22.059", "speaker": "Alexander Vasserman", "text": "not sure yet."}, {"source_name": "lecture3", "index": 129, "time": "00:29:22.260 --> 00:29:23.110", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture3", "index": 130, "time": "00:29:24.520 --> 00:29:28.669", "speaker": "Alexander Vasserman", "text": "let me skip it, for now and then, at the end of this"}, {"source_name": "lecture3", "index": 131, "time": "00:29:28.710 --> 00:29:29.770", "speaker": "Alexander Vasserman", "text": "function"}, {"source_name": "lecture3", "index": 132, "time": "00:29:29.790 --> 00:29:31.200", "speaker": "Alexander Vasserman", "text": "I will return"}, {"source_name": "lecture3", "index": 133, "time": "00:29:31.900 --> 00:29:33.100", "speaker": "Alexander Vasserman", "text": "positions."}, {"source_name": "lecture3", "index": 134, "time": "00:29:38.940 --> 00:29:39.879", "speaker": "Alexander Vasserman", "text": "let's see."}, {"source_name": "lecture3", "index": 135, "time": "00:29:40.660 --> 00:29:43.180", "speaker": "Alexander Vasserman", "text": "Can I have a show of hands?"}, {"source_name": "lecture3", "index": 136, "time": "00:29:43.470 --> 00:29:44.770", "speaker": "Alexander Vasserman", "text": "Who"}, {"source_name": "lecture3", "index": 137, "time": "00:29:46.760 --> 00:29:59.390", "speaker": "Alexander Vasserman", "text": "finds all of this fairly familiar in a sense of how to define a function in python how to write the for a loop like this the return statement."}, {"source_name": "lecture3", "index": 138, "time": "00:29:59.540 --> 00:30:06.840", "speaker": "Alexander Vasserman", "text": "yeah, please use the defense functioning on the zoom so that they can I see it more easily."}, {"source_name": "lecture3", "index": 139, "time": "00:30:08.800 --> 00:30:10.290", "speaker": "Alexander Vasserman", "text": "also kind of"}, {"source_name": "lecture3", "index": 140, "time": "00:30:10.570 --> 00:30:14.039", "speaker": "Alexander Vasserman", "text": "if you have not in python the"}, {"source_name": "lecture3", "index": 141, "time": "00:30:14.320 --> 00:30:19.859", "speaker": "Alexander Vasserman", "text": "the way to set up blocks for blocks is done by indentation"}, {"source_name": "lecture3", "index": 142, "time": "00:30:20.250 --> 00:30:25.870", "speaker": "Alexander Vasserman", "text": "which is quite different from a lot of other languages. So what do I mean by that?"}, {"source_name": "lecture3", "index": 143, "time": "00:30:26.970 --> 00:30:29.400", "speaker": "Alexander Vasserman", "text": "here this is the body of the loop."}, {"source_name": "lecture3", "index": 144, "time": "00:30:29.510 --> 00:30:32.349", "speaker": "Alexander Vasserman", "text": "What's inside the loop? And"}, {"source_name": "lecture3", "index": 145, "time": "00:30:33.280 --> 00:30:47.810", "speaker": "Alexander Vasserman", "text": "python identifies what is inside this body by just indentation. So whatever is indented more than in this for a loop statement itself is inside the body of the loop."}, {"source_name": "lecture3", "index": 146, "time": "00:30:51.360 --> 00:30:56.290", "speaker": "Alexander Vasserman", "text": "okay, great. So we have a bunch of hands raised. Can you please?"}, {"source_name": "lecture3", "index": 147, "time": "00:30:56.310 --> 00:30:58.189", "speaker": "Alexander Vasserman", "text": "Oh, put your hands down"}, {"source_name": "lecture3", "index": 148, "time": "00:30:58.380 --> 00:31:01.340", "speaker": "Alexander Vasserman", "text": "and let me ask"}, {"source_name": "lecture3", "index": 149, "time": "00:31:02.420 --> 00:31:03.610", "speaker": "Alexander Vasserman", "text": "cool"}, {"source_name": "lecture3", "index": 150, "time": "00:31:04.560 --> 00:31:07.879", "speaker": "Alexander Vasserman", "text": "find some of this not familiar."}, {"source_name": "lecture3", "index": 151, "time": "00:31:09.490 --> 00:31:12.830", "speaker": "Alexander Vasserman", "text": "so who has any questions or"}, {"source_name": "lecture3", "index": 152, "time": "00:31:13.010 --> 00:31:14.030", "speaker": "Alexander Vasserman", "text": "doesn't."}, {"source_name": "lecture3", "index": 153, "time": "00:31:15.520 --> 00:31:19.179", "speaker": "Alexander Vasserman", "text": "Yeah, any kind of issues is is of like this."}, {"source_name": "lecture3", "index": 154, "time": "00:31:24.080 --> 00:31:25.130", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 155, "time": "00:31:26.150 --> 00:31:28.020", "speaker": "Alexander Vasserman", "text": "we had."}, {"source_name": "lecture3", "index": 156, "time": "00:31:28.290 --> 00:31:29.149", "speaker": "Alexander Vasserman", "text": "We have."}, {"source_name": "lecture3", "index": 157, "time": "00:31:29.930 --> 00:31:31.440", "speaker": "Alexander Vasserman", "text": "Okay, so"}, {"source_name": "lecture3", "index": 158, "time": "00:31:31.510 --> 00:31:32.920", "speaker": "Alexander Vasserman", "text": "explaining the loop"}, {"source_name": "lecture3", "index": 159, "time": "00:31:35.640 --> 00:31:36.500", "speaker": "Alexander Vasserman", "text": "great."}, {"source_name": "lecture3", "index": 160, "time": "00:31:36.820 --> 00:31:37.870", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 161, "time": "00:31:38.740 --> 00:31:41.900", "speaker": "Alexander Vasserman", "text": "in general, Luke has"}, {"source_name": "lecture3", "index": 162, "time": "00:31:41.930 --> 00:31:42.720", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture3", "index": 163, "time": "00:31:42.880 --> 00:31:44.120", "speaker": "Alexander Vasserman", "text": "several"}, {"source_name": "lecture3", "index": 164, "time": "00:31:44.240 --> 00:31:45.620", "speaker": "Alexander Vasserman", "text": "all parts to it."}, {"source_name": "lecture3", "index": 165, "time": "00:31:47.260 --> 00:31:49.090", "speaker": "Alexander Vasserman", "text": "there is a"}, {"source_name": "lecture3", "index": 166, "time": "00:31:49.180 --> 00:32:01.200", "speaker": "Alexander Vasserman", "text": "oh top of the loop, which has a variable that is going to be used to as a well variable that"}, {"source_name": "lecture3", "index": 167, "time": "00:32:01.730 --> 00:32:04.649", "speaker": "Alexander Vasserman", "text": "takes different values inside the loop."}, {"source_name": "lecture3", "index": 168, "time": "00:32:05.540 --> 00:32:11.489", "speaker": "Alexander Vasserman", "text": "and for each value you will be executing certainly code."}, {"source_name": "lecture3", "index": 169, "time": "00:32:11.590 --> 00:32:15.260", "speaker": "Alexander Vasserman", "text": "So the code that we're going to be executing."}, {"source_name": "lecture3", "index": 170, "time": "00:32:15.350 --> 00:32:16.999", "speaker": "Alexander Vasserman", "text": "Oh, he's"}, {"source_name": "lecture3", "index": 171, "time": "00:32:17.080 --> 00:32:21.170", "speaker": "Alexander Vasserman", "text": "going to be the we're going to call it body of the loop"}, {"source_name": "lecture3", "index": 172, "time": "00:32:21.420 --> 00:32:22.950", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture3", "index": 173, "time": "00:32:24.310 --> 00:32:28.240", "speaker": "Alexander Vasserman", "text": "or that body can include the variable"}, {"source_name": "lecture3", "index": 174, "time": "00:32:28.620 --> 00:32:31.420", "speaker": "Alexander Vasserman", "text": "that we have here. And"}, {"source_name": "lecture3", "index": 175, "time": "00:32:32.510 --> 00:32:33.240", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 176, "time": "00:32:33.340 --> 00:32:36.019", "speaker": "Alexander Vasserman", "text": "yes. So let me actually, before"}, {"source_name": "lecture3", "index": 177, "time": "00:32:36.960 --> 00:32:42.099", "speaker": "Alexander Vasserman", "text": "before we we're doing what we're doing. Let's actually right. He we"}, {"source_name": "lecture3", "index": 178, "time": "00:32:42.150 --> 00:32:46.890", "speaker": "Alexander Vasserman", "text": "simpler of look. So let's just say."}, {"source_name": "lecture3", "index": 179, "time": "00:32:46.970 --> 00:32:47.810", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 180, "time": "00:32:57.390 --> 00:32:58.260", "speaker": "Alexander Vasserman", "text": "hey!"}, {"source_name": "lecture3", "index": 181, "time": "00:32:58.300 --> 00:33:08.110", "speaker": "Alexander Vasserman", "text": "Very simple. Look like that that we can execute. And of course it's just printing numbers from 0 to 9."}, {"source_name": "lecture3", "index": 182, "time": "00:33:08.310 --> 00:33:09.310", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 183, "time": "00:33:09.330 --> 00:33:10.750", "speaker": "Alexander Vasserman", "text": "here again"}, {"source_name": "lecture3", "index": 184, "time": "00:33:10.840 --> 00:33:13.819", "speaker": "Alexander Vasserman", "text": "the look has a variable"}, {"source_name": "lecture3", "index": 185, "time": "00:33:14.090 --> 00:33:16.649", "speaker": "Alexander Vasserman", "text": "I that we'll take."}, {"source_name": "lecture3", "index": 186, "time": "00:33:16.780 --> 00:33:17.710", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 187, "time": "00:33:18.620 --> 00:33:24.879", "speaker": "Alexander Vasserman", "text": "the values that are defined by whatever happens after. In"}, {"source_name": "lecture3", "index": 188, "time": "00:33:25.160 --> 00:33:28.890", "speaker": "Alexander Vasserman", "text": "In this particular case we have range of 10"}, {"source_name": "lecture3", "index": 189, "time": "00:33:28.940 --> 00:33:32.620", "speaker": "Alexander Vasserman", "text": "which is all the numbers"}, {"source_name": "lecture3", "index": 190, "time": "00:33:32.710 --> 00:33:34.250", "speaker": "Alexander Vasserman", "text": "between 0 and 9."}, {"source_name": "lecture3", "index": 191, "time": "00:33:34.330 --> 00:33:39.160", "speaker": "Alexander Vasserman", "text": "So range is kind of a useful way to create"}, {"source_name": "lecture3", "index": 192, "time": "00:33:39.550 --> 00:33:41.170", "speaker": "Alexander Vasserman", "text": "essentially in"}, {"source_name": "lecture3", "index": 193, "time": "00:33:41.380 --> 00:33:45.249", "speaker": "Alexander Vasserman", "text": "these sort of of numbers."}, {"source_name": "lecture3", "index": 194, "time": "00:33:46.680 --> 00:33:55.619", "speaker": "Alexander Vasserman", "text": "well, in a particular range there are multiple ways. We can do it. We can either. Just specify the end position."}, {"source_name": "lecture3", "index": 195, "time": "00:33:56.020 --> 00:34:09.480", "speaker": "Alexander Vasserman", "text": "so like in this case we can specify a stark position and an in position. So, for example, maybe we can. I may start a position to"}, {"source_name": "lecture3", "index": 196, "time": "00:34:09.600 --> 00:34:10.510", "speaker": "Alexander Vasserman", "text": "things like that."}, {"source_name": "lecture3", "index": 197, "time": "00:34:10.980 --> 00:34:13.519", "speaker": "Alexander Vasserman", "text": "anyways. But"}, {"source_name": "lecture3", "index": 198, "time": "00:34:13.639 --> 00:34:17.369", "speaker": "Alexander Vasserman", "text": "kind of that's the basic structure of the for loop"}, {"source_name": "lecture3", "index": 199, "time": "00:34:17.620 --> 00:34:19.529", "speaker": "Alexander Vasserman", "text": "where we have"}, {"source_name": "lecture3", "index": 200, "time": "00:34:19.699 --> 00:34:21.870", "speaker": "Alexander Vasserman", "text": "all variable."}, {"source_name": "lecture3", "index": 201, "time": "00:34:22.080 --> 00:34:31.799", "speaker": "Alexander Vasserman", "text": "What are all the values that this variable takes over, and then the body of the loop, which is, executed once"}, {"source_name": "lecture3", "index": 202, "time": "00:34:32.060 --> 00:34:34.270", "speaker": "Alexander Vasserman", "text": "for each value in"}, {"source_name": "lecture3", "index": 203, "time": "00:34:34.300 --> 00:34:35.720", "speaker": "Alexander Vasserman", "text": "all here."}, {"source_name": "lecture3", "index": 204, "time": "00:34:37.949 --> 00:34:40.329", "speaker": "Alexander Vasserman", "text": "I don't you have a question"}, {"source_name": "lecture3", "index": 205, "time": "00:34:40.380 --> 00:34:47.970", "speaker": "Aimun Anwer", "text": "yeah. So a quick question. So I've noticed that it's like the I variable is like iterating up by one by itself."}, {"source_name": "lecture3", "index": 206, "time": "00:34:48.050 --> 00:34:56.369", "speaker": "Aimun Anwer", "text": "So if that's automatic, how would you do it like plus 2, or instead of like every 2 numbers."}, {"source_name": "lecture3", "index": 207, "time": "00:34:56.540 --> 00:34:57.580", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 208, "time": "00:34:58.890 --> 00:35:00.270", "speaker": "Alexander Vasserman", "text": "let me"}, {"source_name": "lecture3", "index": 209, "time": "00:35:01.320 --> 00:35:02.470", "speaker": "Alexander Vasserman", "text": "actually"}, {"source_name": "lecture3", "index": 210, "time": "00:35:03.350 --> 00:35:04.379", "speaker": "Alexander Vasserman", "text": "do you?"}, {"source_name": "lecture3", "index": 211, "time": "00:35:05.010 --> 00:35:06.489", "speaker": "Alexander Vasserman", "text": "A little bit"}, {"source_name": "lecture3", "index": 212, "time": "00:35:06.530 --> 00:35:08.069", "speaker": "Alexander Vasserman", "text": "more? Maybe."}, {"source_name": "lecture3", "index": 213, "time": "00:35:08.290 --> 00:35:09.589", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture3", "index": 214, "time": "00:35:09.630 --> 00:35:11.790", "speaker": "Alexander Vasserman", "text": "first of all, let me just"}, {"source_name": "lecture3", "index": 215, "time": "00:35:12.010 --> 00:35:13.850", "speaker": "Alexander Vasserman", "text": "say what this"}, {"source_name": "lecture3", "index": 216, "time": "00:35:14.040 --> 00:35:15.689", "speaker": "Alexander Vasserman", "text": "range"}, {"source_name": "lecture3", "index": 217, "time": "00:35:16.650 --> 00:35:18.090", "speaker": "Alexander Vasserman", "text": "of that is right."}, {"source_name": "lecture3", "index": 218, "time": "00:35:18.190 --> 00:35:21.979", "speaker": "Alexander Vasserman", "text": "So basically, while it's not exactly, at least it"}, {"source_name": "lecture3", "index": 219, "time": "00:35:22.020 --> 00:35:31.359", "speaker": "Alexander Vasserman", "text": "it can view as a list, right? So in terms of automatically, this is just a representation of release that you're going to iterate over"}, {"source_name": "lecture3", "index": 220, "time": "00:35:31.570 --> 00:35:32.310", "speaker": "Alexander Vasserman", "text": "right."}, {"source_name": "lecture3", "index": 221, "time": "00:35:32.650 --> 00:35:34.810", "speaker": "Alexander Vasserman", "text": "No range."}, {"source_name": "lecture3", "index": 222, "time": "00:35:35.380 --> 00:35:36.189", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 223, "time": "00:35:36.940 --> 00:35:39.289", "speaker": "Alexander Vasserman", "text": "so I could have just put this"}, {"source_name": "lecture3", "index": 224, "time": "00:35:39.350 --> 00:35:40.169", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture3", "index": 225, "time": "00:35:40.570 --> 00:35:41.450", "speaker": "Alexander Vasserman", "text": "least"}, {"source_name": "lecture3", "index": 226, "time": "00:35:42.570 --> 00:35:43.600", "speaker": "Alexander Vasserman", "text": "in there."}, {"source_name": "lecture3", "index": 227, "time": "00:35:43.830 --> 00:35:46.330", "speaker": "Alexander Vasserman", "text": "right, and it would be the same thing"}, {"source_name": "lecture3", "index": 228, "time": "00:35:46.780 --> 00:35:50.530", "speaker": "Alexander Vasserman", "text": "right? So that's kind of makes it a little bit more explicit in terms of"}, {"source_name": "lecture3", "index": 229, "time": "00:35:50.800 --> 00:35:53.139", "speaker": "Alexander Vasserman", "text": "what's going on here? Right?"}, {"source_name": "lecture3", "index": 230, "time": "00:35:54.460 --> 00:35:55.459", "speaker": "Alexander Vasserman", "text": "No?"}, {"source_name": "lecture3", "index": 231, "time": "00:35:56.630 --> 00:35:57.529", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 232, "time": "00:35:57.770 --> 00:35:59.430", "speaker": "Alexander Vasserman", "text": "the right"}, {"source_name": "lecture3", "index": 233, "time": "00:36:01.090 --> 00:36:02.009", "speaker": "Alexander Vasserman", "text": "see"}, {"source_name": "lecture3", "index": 234, "time": "00:36:03.200 --> 00:36:06.579", "speaker": "Alexander Vasserman", "text": "there is in."}, {"source_name": "lecture3", "index": 235, "time": "00:36:07.540 --> 00:36:13.739", "speaker": "Alexander Vasserman", "text": "So the argument, the argument version of the range that also has a step in it."}, {"source_name": "lecture3", "index": 236, "time": "00:36:13.880 --> 00:36:14.890", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 237, "time": "00:36:15.160 --> 00:36:16.909", "speaker": "Alexander Vasserman", "text": "if I do that"}, {"source_name": "lecture3", "index": 238, "time": "00:36:17.030 --> 00:36:20.860", "speaker": "Alexander Vasserman", "text": "it gives me just every other element"}, {"source_name": "lecture3", "index": 239, "time": "00:36:21.400 --> 00:36:23.660", "speaker": "Alexander Vasserman", "text": "between 0 and 10"}, {"source_name": "lecture3", "index": 240, "time": "00:36:24.520 --> 00:36:37.329", "speaker": "Alexander Vasserman", "text": "so you know, I could generate lists like that. But more generally, you know, the the range is kind of a shorthand for generating this list."}, {"source_name": "lecture3", "index": 241, "time": "00:36:37.370 --> 00:36:38.979", "speaker": "Alexander Vasserman", "text": "but what"}, {"source_name": "lecture3", "index": 242, "time": "00:36:39.590 --> 00:36:42.379", "speaker": "Alexander Vasserman", "text": "We' to the loop is that we have"}, {"source_name": "lecture3", "index": 243, "time": "00:36:42.520 --> 00:36:43.540", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture3", "index": 244, "time": "00:36:44.260 --> 00:36:47.059", "speaker": "Alexander Vasserman", "text": "container or some"}, {"source_name": "lecture3", "index": 245, "time": "00:36:48.390 --> 00:36:49.040", "speaker": "Alexander Vasserman", "text": "Well."}, {"source_name": "lecture3", "index": 246, "time": "00:36:49.060 --> 00:36:52.140", "speaker": "Alexander Vasserman", "text": "Yeah, they'll call it iterable, whatever is it."}, {"source_name": "lecture3", "index": 247, "time": "00:36:52.220 --> 00:37:01.000", "speaker": "Alexander Vasserman", "text": "that? Or some collection of elements essentially. And we're going to run the body of the look for each of those segments."}, {"source_name": "lecture3", "index": 248, "time": "00:37:02.030 --> 00:37:03.239", "speaker": "Alexander Vasserman", "text": "Does that make sense?"}, {"source_name": "lecture3", "index": 249, "time": "00:37:03.530 --> 00:37:05.520", "speaker": "Aimun Anwer", "text": "Yes, thank you."}, {"source_name": "lecture3", "index": 250, "time": "00:37:05.750 --> 00:37:07.450", "speaker": "Alexander Vasserman", "text": "Alex."}, {"source_name": "lecture3", "index": 251, "time": "00:37:08.120 --> 00:37:09.920", "speaker": "Alex Wojtowicz", "text": "So when you did list"}, {"source_name": "lecture3", "index": 252, "time": "00:37:09.990 --> 00:37:11.490", "speaker": "Alex Wojtowicz", "text": "and range of 10,"}, {"source_name": "lecture3", "index": 253, "time": "00:37:11.610 --> 00:37:16.979", "speaker": "Alex Wojtowicz", "text": "what it only go from 0 to 9. Is it because it's just making a size of this head."}, {"source_name": "lecture3", "index": 254, "time": "00:37:17.100 --> 00:37:21.040", "speaker": "Alex Wojtowicz", "text": "or is it actually putting in the numbers? And it just never gets?"}, {"source_name": "lecture3", "index": 255, "time": "00:37:21.330 --> 00:37:23.709", "speaker": "Alexander Vasserman", "text": "Yes, it's basically the"}, {"source_name": "lecture3", "index": 256, "time": "00:37:23.870 --> 00:37:27.429", "speaker": "Alexander Vasserman", "text": "or semantics. That's just how range is defined."}, {"source_name": "lecture3", "index": 257, "time": "00:37:27.610 --> 00:37:32.710", "speaker": "Alexander Vasserman", "text": "it's all the numbers up to this number and not including it."}, {"source_name": "lecture3", "index": 258, "time": "00:37:34.450 --> 00:37:43.240", "speaker": "Alexander Vasserman", "text": "one of the reasons for that is, let's say, if you want to iterate you know, over something 10 times."}, {"source_name": "lecture3", "index": 259, "time": "00:37:43.260 --> 00:37:46.040", "speaker": "Alexander Vasserman", "text": "you know. or you."}, {"source_name": "lecture3", "index": 260, "time": "00:37:46.260 --> 00:37:46.930", "speaker": "Alexander Vasserman", "text": "Yeah."}, {"source_name": "lecture3", "index": 261, "time": "00:37:47.830 --> 00:37:52.009", "speaker": "Alexander Vasserman", "text": "basically a range of time should have 10 integers in it."}, {"source_name": "lecture3", "index": 262, "time": "00:37:52.040 --> 00:37:58.189", "speaker": "Alexander Vasserman", "text": "Okay, so so it's it's kind of just making R. Just very commonly used inside of a loop"}, {"source_name": "lecture3", "index": 263, "time": "00:37:58.310 --> 00:38:03.420", "speaker": "Alexander Vasserman", "text": "or as well just as I use it here. And"}, {"source_name": "lecture3", "index": 264, "time": "00:38:04.130 --> 00:38:04.959", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture3", "index": 265, "time": "00:38:05.290 --> 00:38:08.020", "speaker": "Alexander Vasserman", "text": "right! And so that just makes it very convenient."}, {"source_name": "lecture3", "index": 266, "time": "00:38:08.090 --> 00:38:08.799", "speaker": "Alexander Vasserman", "text": "All"}, {"source_name": "lecture3", "index": 267, "time": "00:38:09.370 --> 00:38:12.620", "speaker": "Alexander Vasserman", "text": "you might also have. So if"}, {"source_name": "lecture3", "index": 268, "time": "00:38:12.780 --> 00:38:13.509", "speaker": "Alexander Vasserman", "text": "I"}, {"source_name": "lecture3", "index": 269, "time": "00:38:15.380 --> 00:38:16.310", "speaker": "Alexander Vasserman", "text": "say."}, {"source_name": "lecture3", "index": 270, "time": "00:38:16.660 --> 00:38:18.389", "speaker": "Alexander Vasserman", "text": "this is this out?"}, {"source_name": "lecture3", "index": 271, "time": "00:38:18.520 --> 00:38:19.330", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 272, "time": "00:38:20.970 --> 00:38:22.620", "speaker": "Alexander Vasserman", "text": "maybe"}, {"source_name": "lecture3", "index": 273, "time": "00:38:22.650 --> 00:38:24.859", "speaker": "Alexander Vasserman", "text": "sometimes you you you might have"}, {"source_name": "lecture3", "index": 274, "time": "00:38:25.250 --> 00:38:26.100", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture3", "index": 275, "time": "00:38:26.410 --> 00:38:28.359", "speaker": "Alexander Vasserman", "text": "length of the least here."}, {"source_name": "lecture3", "index": 276, "time": "00:38:28.450 --> 00:38:33.780", "speaker": "Alexander Vasserman", "text": "And then these are basically all the indices that are added"}, {"source_name": "lecture3", "index": 277, "time": "00:38:33.860 --> 00:38:35.020", "speaker": "Alexander Vasserman", "text": "for"}, {"source_name": "lecture3", "index": 278, "time": "00:38:35.230 --> 00:38:41.769", "speaker": "Alexander Vasserman", "text": "again starting from 0 up to, but not including the length of the list."}, {"source_name": "lecture3", "index": 279, "time": "00:38:41.790 --> 00:38:44.090", "speaker": "Alexander Vasserman", "text": "Right? So that's just how"}, {"source_name": "lecture3", "index": 280, "time": "00:38:46.340 --> 00:38:47.209", "speaker": "Alexander Vasserman", "text": "make sense."}, {"source_name": "lecture3", "index": 281, "time": "00:38:47.600 --> 00:38:48.299", "speaker": "Alex Wojtowicz", "text": "Yeah."}, {"source_name": "lecture3", "index": 282, "time": "00:38:52.320 --> 00:38:53.279", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture3", "index": 283, "time": "00:38:56.050 --> 00:38:57.029", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 284, "time": "00:38:59.060 --> 00:39:00.820", "speaker": "Alexander Vasserman", "text": "any other questions."}, {"source_name": "lecture3", "index": 285, "time": "00:39:06.620 --> 00:39:12.229", "speaker": "Alexander Vasserman", "text": "actually, now that we've looked at this, let me modify this slightly and say."}, {"source_name": "lecture3", "index": 286, "time": "00:39:14.590 --> 00:39:17.109", "speaker": "Alexander Vasserman", "text": "basically do what I did below"}, {"source_name": "lecture3", "index": 287, "time": "00:39:17.730 --> 00:39:19.149", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture3", "index": 288, "time": "00:39:38.980 --> 00:39:46.239", "speaker": "Alexander Vasserman", "text": "and modify this function a little bit, so that basically now I'm i'm at red over indices"}, {"source_name": "lecture3", "index": 289, "time": "00:39:46.280 --> 00:39:53.060", "speaker": "Alexander Vasserman", "text": "so now I know what you put inside of this append statement as the as the index"}, {"source_name": "lecture3", "index": 290, "time": "00:39:53.210 --> 00:39:59.750", "speaker": "Alexander Vasserman", "text": "but basically the structure is quite similar to before"}, {"source_name": "lecture3", "index": 291, "time": "00:40:01.710 --> 00:40:04.770", "speaker": "Alexander Vasserman", "text": "so can I have a show of hands again."}, {"source_name": "lecture3", "index": 292, "time": "00:40:04.910 --> 00:40:06.440", "speaker": "Alexander Vasserman", "text": "for whom this is"}, {"source_name": "lecture3", "index": 293, "time": "00:40:07.100 --> 00:40:10.899", "speaker": "Alexander Vasserman", "text": "very clear, and, like all of the syntax, is very clear."}, {"source_name": "lecture3", "index": 294, "time": "00:40:23.880 --> 00:40:24.950", "speaker": "Alexander Vasserman", "text": "All right."}, {"source_name": "lecture3", "index": 295, "time": "00:40:25.590 --> 00:40:27.299", "speaker": "Alexander Vasserman", "text": "so we have"}, {"source_name": "lecture3", "index": 296, "time": "00:40:27.820 --> 00:40:31.419", "speaker": "Alexander Vasserman", "text": "13 hands up. We've already had 13"}, {"source_name": "lecture3", "index": 297, "time": "00:40:31.600 --> 00:40:33.319", "speaker": "Alexander Vasserman", "text": "hence up"}, {"source_name": "lecture3", "index": 298, "time": "00:40:33.520 --> 00:40:36.920", "speaker": "Alexander Vasserman", "text": "and this is not everyone in the class."}, {"source_name": "lecture3", "index": 299, "time": "00:40:37.020 --> 00:40:38.450", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture3", "index": 300, "time": "00:40:38.960 --> 00:40:41.939", "speaker": "Alexander Vasserman", "text": "if you could all lower your hand"}, {"source_name": "lecture3", "index": 301, "time": "00:40:42.070 --> 00:40:43.470", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture3", "index": 302, "time": "00:40:43.800 --> 00:40:46.150", "speaker": "Alexander Vasserman", "text": "raise your hand if you're listening to me."}, {"source_name": "lecture3", "index": 303, "time": "00:40:57.210 --> 00:40:58.209", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture3", "index": 304, "time": "00:40:59.000 --> 00:41:00.450", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture3", "index": 305, "time": "00:41:00.600 --> 00:41:02.169", "speaker": "Alexander Vasserman", "text": "there were a few people"}, {"source_name": "lecture3", "index": 306, "time": "00:41:02.880 --> 00:41:10.399", "speaker": "Alexander Vasserman", "text": "I mean, we have a few people who are not listening to me, which is, I guess that's fine. but"}, {"source_name": "lecture3", "index": 307, "time": "00:41:10.960 --> 00:41:15.610", "speaker": "Alexander Vasserman", "text": "but we also have a few people who not raise their hands."}, {"source_name": "lecture3", "index": 308, "time": "00:41:15.640 --> 00:41:19.080", "speaker": "Alexander Vasserman", "text": "when I asked whether or not everything was clear."}, {"source_name": "lecture3", "index": 309, "time": "00:41:20.120 --> 00:41:22.390", "speaker": "Alexander Vasserman", "text": "so those people presumably."}, {"source_name": "lecture3", "index": 310, "time": "00:41:23.400 --> 00:41:29.630", "speaker": "Alexander Vasserman", "text": "Do you have some questions, or Don't don't understand something? So if you want of this person"}, {"source_name": "lecture3", "index": 311, "time": "00:41:29.650 --> 00:41:47.059", "speaker": "Alexander Vasserman", "text": "people, one of those people. Please. ask your question. Yeah, this point Everybody who raised the hand for before, please, all over your hand. And now I would like to see hands from people who actually have questions or"}, {"source_name": "lecture3", "index": 312, "time": "00:41:48.820 --> 00:41:51.180", "speaker": "Alexander Vasserman", "text": "didn't do not understand something here."}, {"source_name": "lecture3", "index": 313, "time": "00:41:55.330 --> 00:41:56.729", "speaker": "Alexander Vasserman", "text": "Okay, 5."}, {"source_name": "lecture3", "index": 314, "time": "00:41:56.830 --> 00:41:58.040", "speaker": "Alexander Vasserman", "text": "Do you have a question?"}, {"source_name": "lecture3", "index": 315, "time": "00:41:58.350 --> 00:41:59.609", "speaker": "Fahad Khan", "text": "Yeah. So"}, {"source_name": "lecture3", "index": 316, "time": "00:41:59.880 --> 00:42:03.480", "speaker": "Fahad Khan", "text": "when we're iterating over this list, what strings are"}, {"source_name": "lecture3", "index": 317, "time": "00:42:03.520 --> 00:42:16.330", "speaker": "Fahad Khan", "text": "for this function? Right here are we just looking at each single character? Are we iterating through each character, because I know, like, if we do, if we use like the split function we like, separate the words and the spaces. And"}, {"source_name": "lecture3", "index": 318, "time": "00:42:16.550 --> 00:42:26.289", "speaker": "Fahad Khan", "text": "personally, I would do that to find, like the the index at which the space is at. So it doesn't like this right now is like iterating through each single letter of that"}, {"source_name": "lecture3", "index": 319, "time": "00:42:26.320 --> 00:42:29.130", "speaker": "Fahad Khan", "text": "string. So I don't know if you want to do that or not."}, {"source_name": "lecture3", "index": 320, "time": "00:42:29.630 --> 00:42:33.029", "speaker": "Alexander Vasserman", "text": "very good point"}, {"source_name": "lecture3", "index": 321, "time": "00:42:33.320 --> 00:42:34.790", "speaker": "Alexander Vasserman", "text": "so split"}, {"source_name": "lecture3", "index": 322, "time": "00:42:35.360 --> 00:42:37.520", "speaker": "Alexander Vasserman", "text": "we'll give you a"}, {"source_name": "lecture3", "index": 323, "time": "00:42:37.550 --> 00:42:40.189", "speaker": "Alexander Vasserman", "text": "or least of words"}, {"source_name": "lecture3", "index": 324, "time": "00:42:40.310 --> 00:42:47.830", "speaker": "Alexander Vasserman", "text": "separated by spaces. If what we want is to find the positions"}, {"source_name": "lecture3", "index": 325, "time": "00:42:48.120 --> 00:42:51.850", "speaker": "Alexander Vasserman", "text": "then you would still have to kind of do some kind of"}, {"source_name": "lecture3", "index": 326, "time": "00:42:52.000 --> 00:43:04.150", "speaker": "Alexander Vasserman", "text": "to to figure out the positions, but you could certainly do that. There is also a standard function on on strings called find, which will actually give you the indices"}, {"source_name": "lecture3", "index": 327, "time": "00:43:05.980 --> 00:43:07.829", "speaker": "Alexander Vasserman", "text": "or one index at a time."}, {"source_name": "lecture3", "index": 328, "time": "00:43:07.860 --> 00:43:14.140", "speaker": "Alexander Vasserman", "text": "we could have used that. I just wanted to use a simple loop like that,"}, {"source_name": "lecture3", "index": 329, "time": "00:43:14.680 --> 00:43:21.149", "speaker": "Alexander Vasserman", "text": "whether or not you're using split or fine, or any of those functions underneath the"}, {"source_name": "lecture3", "index": 330, "time": "00:43:21.200 --> 00:43:33.080", "speaker": "Alexander Vasserman", "text": "there it, you know, Python executes essentially look like that, right? Basically it has to go through the full string and find those space characters, and then"}, {"source_name": "lecture3", "index": 331, "time": "00:43:33.680 --> 00:43:34.970", "speaker": "Alexander Vasserman", "text": "on. Split it."}, {"source_name": "lecture3", "index": 332, "time": "00:43:35.570 --> 00:43:39.490", "speaker": "Alexander Vasserman", "text": "If you're doing speed, create a list of"}, {"source_name": "lecture3", "index": 333, "time": "00:43:39.560 --> 00:43:42.869", "speaker": "Alexander Vasserman", "text": "streams where each thing is a"}, {"source_name": "lecture3", "index": 334, "time": "00:43:43.070 --> 00:43:43.930", "speaker": "Alexander Vasserman", "text": "work."}, {"source_name": "lecture3", "index": 335, "time": "00:43:44.180 --> 00:43:49.879", "speaker": "Alexander Vasserman", "text": "or, you know, in the case of a fine, basically return the the to the current index."}, {"source_name": "lecture3", "index": 336, "time": "00:43:49.960 --> 00:43:50.960", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture3", "index": 337, "time": "00:43:51.400 --> 00:43:52.669", "speaker": "Alexander Vasserman", "text": "basically."}, {"source_name": "lecture3", "index": 338, "time": "00:43:52.970 --> 00:43:53.629", "speaker": "Alexander Vasserman", "text": "you know."}, {"source_name": "lecture3", "index": 339, "time": "00:43:53.960 --> 00:43:58.389", "speaker": "Alexander Vasserman", "text": "there is no way around Python will execute something like this."}, {"source_name": "lecture3", "index": 340, "time": "00:43:58.940 --> 00:44:02.230", "speaker": "Alexander Vasserman", "text": "So yes, we could have used some other functions. But"}, {"source_name": "lecture3", "index": 341, "time": "00:44:04.520 --> 00:44:05.240", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture3", "index": 342, "time": "00:44:05.480 --> 00:44:08.199", "speaker": "Alexander Vasserman", "text": "this is basically, what would be happening anyway?"}, {"source_name": "lecture3", "index": 343, "time": "00:44:09.630 --> 00:44:11.250", "speaker": "Alexander Vasserman", "text": "Does it make sense for?"}, {"source_name": "lecture3", "index": 344, "time": "00:44:12.790 --> 00:44:13.660", "speaker": "Fahad Khan", "text": "Yes."}, {"source_name": "lecture3", "index": 345, "time": "00:44:14.260 --> 00:44:15.040", "speaker": "Alexander Vasserman", "text": "cool."}, {"source_name": "lecture3", "index": 346, "time": "00:44:15.390 --> 00:44:17.700", "speaker": "Alexander Vasserman", "text": "do you have any other questions?"}, {"source_name": "lecture3", "index": 347, "time": "00:44:18.950 --> 00:44:22.609", "speaker": "Alexander Vasserman", "text": "Anyone else who didn't raise their account when"}, {"source_name": "lecture3", "index": 348, "time": "00:44:24.200 --> 00:44:26.089", "speaker": "Alexander Vasserman", "text": "I asked them everything was clear."}, {"source_name": "lecture3", "index": 349, "time": "00:44:32.250 --> 00:44:33.790", "speaker": "Alexander Vasserman", "text": "So just to"}, {"source_name": "lecture3", "index": 350, "time": "00:44:35.780 --> 00:44:38.189", "speaker": "Alexander Vasserman", "text": "oh, so get to find"}, {"source_name": "lecture3", "index": 351, "time": "00:44:38.220 --> 00:44:39.279", "speaker": "Alexander Vasserman", "text": "these"}, {"source_name": "lecture3", "index": 352, "time": "00:44:46.310 --> 00:44:48.420", "speaker": "Alexander Vasserman", "text": "let me move this thing up"}, {"source_name": "lecture3", "index": 353, "time": "00:44:48.820 --> 00:44:50.230", "speaker": "Alexander Vasserman", "text": "so that"}, {"source_name": "lecture3", "index": 354, "time": "00:44:50.550 --> 00:44:52.109", "speaker": "Alexander Vasserman", "text": "we still have it."}, {"source_name": "lecture3", "index": 355, "time": "00:44:52.270 --> 00:44:53.729", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture3", "index": 356, "time": "00:45:00.460 --> 00:45:01.049", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture3", "index": 357, "time": "00:45:05.850 --> 00:45:09.810", "speaker": "Alexander Vasserman", "text": "but it's not in the way. And also"}, {"source_name": "lecture3", "index": 358, "time": "00:45:10.110 --> 00:45:11.680", "speaker": "Alexander Vasserman", "text": "this"}, {"source_name": "lecture3", "index": 359, "time": "00:45:22.250 --> 00:45:22.839", "speaker": "Alexander Vasserman", "text": "it's"}, {"source_name": "lecture3", "index": 360, "time": "00:45:23.790 --> 00:45:29.739", "speaker": "Alexander Vasserman", "text": "so we've defined this function, and now we can around this our function"}, {"source_name": "lecture3", "index": 361, "time": "00:45:33.000 --> 00:45:35.149", "speaker": "Alexander Vasserman", "text": "fine spaces on our"}, {"source_name": "lecture3", "index": 362, "time": "00:45:35.240 --> 00:45:36.220", "speaker": "Alexander Vasserman", "text": "next."}, {"source_name": "lecture3", "index": 363, "time": "00:45:36.240 --> 00:45:37.000", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture3", "index": 364, "time": "00:45:37.220 --> 00:45:40.310", "speaker": "Alexander Vasserman", "text": "so this is the output"}, {"source_name": "lecture3", "index": 365, "time": "00:45:41.580 --> 00:45:43.129", "speaker": "Alexander Vasserman", "text": "basically"}, {"source_name": "lecture3", "index": 366, "time": "00:45:43.640 --> 00:45:47.110", "speaker": "Alexander Vasserman", "text": "the the the first word was"}, {"source_name": "lecture3", "index": 367, "time": "00:45:47.380 --> 00:45:57.499", "speaker": "Alexander Vasserman", "text": "11 characters, and the next one was something like 9 because the differences then and there is also space, etc. Right? So"}, {"source_name": "lecture3", "index": 368, "time": "00:45:58.300 --> 00:46:00.269", "speaker": "Alexander Vasserman", "text": "these are our positions."}, {"source_name": "lecture3", "index": 369, "time": "00:46:03.110 --> 00:46:04.330", "speaker": "Alexander Vasserman", "text": "does this"}, {"source_name": "lecture3", "index": 370, "time": "00:46:05.280 --> 00:46:06.259", "speaker": "Alexander Vasserman", "text": "make"}, {"source_name": "lecture3", "index": 371, "time": "00:46:06.360 --> 00:46:07.390", "speaker": "Alexander Vasserman", "text": "sense?"}, {"source_name": "lecture3", "index": 372, "time": "00:46:09.270 --> 00:46:10.709", "speaker": "Alexander Vasserman", "text": "Yeah, Any questions"}, {"source_name": "lecture3", "index": 373, "time": "00:46:11.040 --> 00:46:11.810", "speaker": "Alexander Vasserman", "text": "great?"}, {"source_name": "lecture3", "index": 374, "time": "00:46:12.080 --> 00:46:13.149", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 375, "time": "00:46:14.680 --> 00:46:15.990", "speaker": "Alexander Vasserman", "text": "let me"}, {"source_name": "lecture3", "index": 376, "time": "00:46:17.380 --> 00:46:21.839", "speaker": "Alexander Vasserman", "text": "actually here, right this function a little bit."}, {"source_name": "lecture3", "index": 377, "time": "00:46:22.230 --> 00:46:23.870", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture3", "index": 378, "time": "00:46:27.000 --> 00:46:33.160", "speaker": "Alexander Vasserman", "text": "maybe introduce a little bit of a syntax that's not quite familiar to you."}, {"source_name": "lecture3", "index": 379, "time": "00:46:35.430 --> 00:46:39.069", "speaker": "Alexander Vasserman", "text": "So this was kind of the the range thing was a little bit."}, {"source_name": "lecture3", "index": 380, "time": "00:46:39.230 --> 00:46:40.069", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 381, "time": "00:46:41.530 --> 00:46:43.319", "speaker": "Alexander Vasserman", "text": "not really."}, {"source_name": "lecture3", "index": 382, "time": "00:46:43.410 --> 00:46:47.660", "speaker": "Alexander Vasserman", "text": "and if convenient, so there is actually a"}, {"source_name": "lecture3", "index": 383, "time": "00:46:47.810 --> 00:46:51.519", "speaker": "Alexander Vasserman", "text": "way to both. Iterate over indices."}, {"source_name": "lecture3", "index": 384, "time": "00:46:51.790 --> 00:46:53.769", "speaker": "Alexander Vasserman", "text": "and the"}, {"source_name": "lecture3", "index": 385, "time": "00:46:54.020 --> 00:46:55.029", "speaker": "Alexander Vasserman", "text": "container"}, {"source_name": "lecture3", "index": 386, "time": "00:46:55.340 --> 00:46:57.590", "speaker": "Alexander Vasserman", "text": "in inside of the loop."}, {"source_name": "lecture3", "index": 387, "time": "00:46:57.740 --> 00:46:58.910", "speaker": "Alexander Vasserman", "text": "and that's"}, {"source_name": "lecture3", "index": 388, "time": "00:47:00.390 --> 00:47:03.750", "speaker": "Alexander Vasserman", "text": "or a kind of a function enumerate."}, {"source_name": "lecture3", "index": 389, "time": "00:47:04.940 --> 00:47:08.589", "speaker": "Alexander Vasserman", "text": "So enumerate actually outputs, pairs"}, {"source_name": "lecture3", "index": 390, "time": "00:47:10.160 --> 00:47:11.569", "speaker": "Alexander Vasserman", "text": "all like this."}, {"source_name": "lecture3", "index": 391, "time": "00:47:11.600 --> 00:47:13.000", "speaker": "Alexander Vasserman", "text": "So we will"}, {"source_name": "lecture3", "index": 392, "time": "00:47:13.060 --> 00:47:16.270", "speaker": "Alexander Vasserman", "text": "output both the index"}, {"source_name": "lecture3", "index": 393, "time": "00:47:16.390 --> 00:47:19.270", "speaker": "Alexander Vasserman", "text": "and the character. So I could use"}, {"source_name": "lecture3", "index": 394, "time": "00:47:19.530 --> 00:47:20.479", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture3", "index": 395, "time": "00:47:20.910 --> 00:47:25.490", "speaker": "Alexander Vasserman", "text": "character here, but I still have the the index still. But here."}, {"source_name": "lecture3", "index": 396, "time": "00:47:27.100 --> 00:47:28.889", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture3", "index": 397, "time": "00:47:30.190 --> 00:47:32.520", "speaker": "Alexander Vasserman", "text": "so if I"}, {"source_name": "lecture3", "index": 398, "time": "00:47:32.580 --> 00:47:35.050", "speaker": "Alexander Vasserman", "text": "you find function like that."}, {"source_name": "lecture3", "index": 399, "time": "00:47:35.150 --> 00:47:36.109", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture3", "index": 400, "time": "00:47:36.520 --> 00:47:37.350", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture3", "index": 401, "time": "00:47:38.080 --> 00:47:38.990", "speaker": "Alexander Vasserman", "text": "run it."}, {"source_name": "lecture3", "index": 402, "time": "00:47:43.030 --> 00:47:44.009", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 403, "time": "00:47:47.590 --> 00:47:49.619", "speaker": "Alexander Vasserman", "text": "I get the same output"}, {"source_name": "lecture3", "index": 404, "time": "00:47:52.600 --> 00:47:59.169", "speaker": "Alexander Vasserman", "text": "any questions? Yes."}, {"source_name": "lecture3", "index": 405, "time": "00:47:59.260 --> 00:48:07.269", "speaker": "Amirali Djalilvand", "text": "like Theoretically, if you're working with a bigger sample of data, or would it still be the same speed with the loop that you used."}, {"source_name": "lecture3", "index": 406, "time": "00:48:10.820 --> 00:48:13.360", "speaker": "Alexander Vasserman", "text": "I am actually not 100% sure."}, {"source_name": "lecture3", "index": 407, "time": "00:48:13.520 --> 00:48:14.580", "speaker": "Alexander Vasserman", "text": "But."}, {"source_name": "lecture3", "index": 408, "time": "00:48:14.920 --> 00:48:17.700", "speaker": "Alexander Vasserman", "text": "what I would say is"}, {"source_name": "lecture3", "index": 409, "time": "00:48:18.160 --> 00:48:22.379", "speaker": "Alexander Vasserman", "text": "differences in performance will be minimal."}, {"source_name": "lecture3", "index": 410, "time": "00:48:22.490 --> 00:48:26.660", "speaker": "Alexander Vasserman", "text": "and so I would pretty much never be concerned about it"}, {"source_name": "lecture3", "index": 411, "time": "00:48:26.840 --> 00:48:29.090", "speaker": "Alexander Vasserman", "text": "other than like, you know. If you're"}, {"source_name": "lecture3", "index": 412, "time": "00:48:29.660 --> 00:48:37.570", "speaker": "Alexander Vasserman", "text": "have this loop, repeat billions of times, and you are like trying to squeeze out every little thing of performance."}, {"source_name": "lecture3", "index": 413, "time": "00:48:38.020 --> 00:48:41.899", "speaker": "Alexander Vasserman", "text": "and if you're doing that they probably wouldn't be writing stuff in python, anyway."}, {"source_name": "lecture3", "index": 414, "time": "00:48:42.890 --> 00:48:45.209", "speaker": "Alexander Vasserman", "text": "So yeah."}, {"source_name": "lecture3", "index": 415, "time": "00:48:45.780 --> 00:48:50.739", "speaker": "Alexander Vasserman", "text": "so I either either form of the loop in terms of"}, {"source_name": "lecture3", "index": 416, "time": "00:48:51.730 --> 00:48:53.919", "speaker": "Alexander Vasserman", "text": "Rhoda, do you have a question?"}, {"source_name": "lecture3", "index": 417, "time": "00:48:54.020 --> 00:48:57.340", "speaker": "Rana Hani", "text": "Yeah, sorry. Could you repeat what in the way it does again."}, {"source_name": "lecture3", "index": 418, "time": "00:48:57.650 --> 00:48:58.580", "speaker": "Alexander Vasserman", "text": "Yes."}, {"source_name": "lecture3", "index": 419, "time": "00:48:59.600 --> 00:49:00.600", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 420, "time": "00:49:02.040 --> 00:49:04.000", "speaker": "Alexander Vasserman", "text": "in Number 8"}, {"source_name": "lecture3", "index": 421, "time": "00:49:04.790 --> 00:49:06.279", "speaker": "Alexander Vasserman", "text": "basically"}, {"source_name": "lecture3", "index": 422, "time": "00:49:06.740 --> 00:49:09.510", "speaker": "Alexander Vasserman", "text": "creates essentially a list."}, {"source_name": "lecture3", "index": 423, "time": "00:49:09.670 --> 00:49:10.410", "speaker": "Alexander Vasserman", "text": "I"}, {"source_name": "lecture3", "index": 424, "time": "00:49:10.690 --> 00:49:13.329", "speaker": "Alexander Vasserman", "text": "kind of like a range where"}, {"source_name": "lecture3", "index": 425, "time": "00:49:13.420 --> 00:49:15.479", "speaker": "Alexander Vasserman", "text": "Rachel, so it's"}, {"source_name": "lecture3", "index": 426, "time": "00:49:15.620 --> 00:49:18.860", "speaker": "Alexander Vasserman", "text": "really creates a a generator which"}, {"source_name": "lecture3", "index": 427, "time": "00:49:20.340 --> 00:49:23.750", "speaker": "Alexander Vasserman", "text": "I know it's a fancy slightly pen set of concept, but"}, {"source_name": "lecture3", "index": 428, "time": "00:49:23.900 --> 00:49:28.170", "speaker": "Alexander Vasserman", "text": "anyways, so it's essentially creating a list of Paris"}, {"source_name": "lecture3", "index": 429, "time": "00:49:28.850 --> 00:49:33.009", "speaker": "Alexander Vasserman", "text": "each pair is the in index and a character"}, {"source_name": "lecture3", "index": 430, "time": "00:49:33.320 --> 00:49:35.199", "speaker": "Alexander Vasserman", "text": "right? So if I"}, {"source_name": "lecture3", "index": 431, "time": "00:49:37.040 --> 00:49:38.169", "speaker": "Alexander Vasserman", "text": "let's say."}, {"source_name": "lecture3", "index": 432, "time": "00:49:40.120 --> 00:49:41.390", "speaker": "Alexander Vasserman", "text": "say at least"}, {"source_name": "lecture3", "index": 433, "time": "00:49:49.160 --> 00:49:50.399", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture3", "index": 434, "time": "00:49:50.690 --> 00:49:51.609", "speaker": "Alexander Vasserman", "text": "for"}, {"source_name": "lecture3", "index": 435, "time": "00:49:51.640 --> 00:49:53.389", "speaker": "Alexander Vasserman", "text": "a string, ABC"}, {"source_name": "lecture3", "index": 436, "time": "00:49:55.450 --> 00:49:56.259", "speaker": "Alexander Vasserman", "text": "what"}, {"source_name": "lecture3", "index": 437, "time": "00:49:56.520 --> 00:49:59.439", "speaker": "Alexander Vasserman", "text": "it's basically doing a is creating a"}, {"source_name": "lecture3", "index": 438, "time": "00:49:59.570 --> 00:50:00.509", "speaker": "Alexander Vasserman", "text": "least"}, {"source_name": "lecture3", "index": 439, "time": "00:50:01.020 --> 00:50:02.500", "speaker": "Alexander Vasserman", "text": "of these pairs."}, {"source_name": "lecture3", "index": 440, "time": "00:50:04.880 --> 00:50:06.189", "speaker": "Rana Hani", "text": "Got it? Thank you"}, {"source_name": "lecture3", "index": 441, "time": "00:50:06.260 --> 00:50:07.020", "speaker": "Alexander Vasserman", "text": "right."}, {"source_name": "lecture3", "index": 442, "time": "00:50:07.070 --> 00:50:12.409", "speaker": "Alexander Vasserman", "text": "and it also doesn't just work on strings. So if I have"}, {"source_name": "lecture3", "index": 443, "time": "00:50:16.160 --> 00:50:16.790", "speaker": "Alexander Vasserman", "text": "well."}, {"source_name": "lecture3", "index": 444, "time": "00:50:20.390 --> 00:50:25.569", "speaker": "Alexander Vasserman", "text": "so, if you remember this is one of the short hands for creating a list."}, {"source_name": "lecture3", "index": 445, "time": "00:50:25.590 --> 00:50:27.410", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture3", "index": 446, "time": "00:50:27.590 --> 00:50:30.100", "speaker": "Alexander Vasserman", "text": "if now I do"}, {"source_name": "lecture3", "index": 447, "time": "00:50:30.330 --> 00:50:31.250", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture3", "index": 448, "time": "00:50:38.580 --> 00:50:40.020", "speaker": "Alexander Vasserman", "text": "that you"}, {"source_name": "lecture3", "index": 449, "time": "00:50:40.350 --> 00:50:44.850", "speaker": "Alexander Vasserman", "text": "very similar thing, and basically anything that can be enumerated"}, {"source_name": "lecture3", "index": 450, "time": "00:50:45.120 --> 00:50:48.600", "speaker": "Alexander Vasserman", "text": "enumerate can do so. Anything any kind of iterator."}, {"source_name": "lecture3", "index": 451, "time": "00:50:48.750 --> 00:50:50.870", "speaker": "Alexander Vasserman", "text": "I put down"}, {"source_name": "lecture3", "index": 452, "time": "00:50:51.650 --> 00:50:52.430", "speaker": "Alexander Vasserman", "text": "everybody"}, {"source_name": "lecture3", "index": 453, "time": "00:50:52.830 --> 00:50:53.840", "speaker": "Alexander Vasserman", "text": "something like"}, {"source_name": "lecture3", "index": 454, "time": "00:50:54.790 --> 00:50:59.849", "speaker": "Alexander Vasserman", "text": "range. Oh, then, which of course, there is no point in doing that. But"}, {"source_name": "lecture3", "index": 455, "time": "00:50:59.940 --> 00:51:03.150", "speaker": "Alexander Vasserman", "text": "because the index on the element is the same thing at this point."}, {"source_name": "lecture3", "index": 456, "time": "00:51:05.340 --> 00:51:06.169", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture3", "index": 457, "time": "00:51:06.380 --> 00:51:08.509", "speaker": "Alexander Vasserman", "text": "yes, so that's kind of"}, {"source_name": "lecture3", "index": 458, "time": "00:51:08.920 --> 00:51:10.319", "speaker": "Alexander Vasserman", "text": "or the"}, {"source_name": "lecture3", "index": 459, "time": "00:51:12.660 --> 00:51:15.690", "speaker": "Alexander Vasserman", "text": "The idea here is"}, {"source_name": "lecture3", "index": 460, "time": "00:51:19.460 --> 00:51:20.479", "speaker": "Alexander Vasserman", "text": "make sense."}, {"source_name": "lecture3", "index": 461, "time": "00:51:22.110 --> 00:51:23.520", "speaker": "Rana Hani", "text": "Yeah, Thank you."}, {"source_name": "lecture3", "index": 462, "time": "00:51:23.630 --> 00:51:24.259", "speaker": "Rana Hani", "text": "Yep."}, {"source_name": "lecture3", "index": 463, "time": "00:51:35.410 --> 00:51:36.379", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 464, "time": "00:51:37.790 --> 00:51:38.799", "speaker": "Alexander Vasserman", "text": "so."}, {"source_name": "lecture3", "index": 465, "time": "00:51:39.550 --> 00:51:41.780", "speaker": "Alexander Vasserman", "text": "So actually, what I mentioned is like."}, {"source_name": "lecture3", "index": 466, "time": "00:51:42.170 --> 00:51:48.129", "speaker": "Alexander Vasserman", "text": "Let me explain a little bit about this range and enumerate things. Why, I'm converting them to least"}, {"source_name": "lecture3", "index": 467, "time": "00:51:49.860 --> 00:51:52.009", "speaker": "Alexander Vasserman", "text": "Basically these are the"}, {"source_name": "lecture3", "index": 468, "time": "00:51:52.060 --> 00:51:55.489", "speaker": "Alexander Vasserman", "text": "generator. Objects are essentially like least."}, {"source_name": "lecture3", "index": 469, "time": "00:51:55.510 --> 00:51:56.470", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture3", "index": 470, "time": "00:51:56.500 --> 00:52:00.000", "speaker": "Alexander Vasserman", "text": "or it doesn't actually create a list."}, {"source_name": "lecture3", "index": 471, "time": "00:52:00.070 --> 00:52:05.579", "speaker": "Alexander Vasserman", "text": "So they're a little bit more efficient. If our list would be very alone"}, {"source_name": "lecture3", "index": 472, "time": "00:52:05.690 --> 00:52:12.760", "speaker": "Alexander Vasserman", "text": "creating an actual like, let's say, if they were doing a range of a 1 million."}, {"source_name": "lecture3", "index": 473, "time": "00:52:12.990 --> 00:52:13.839", "speaker": "Alexander Vasserman", "text": "Then."}, {"source_name": "lecture3", "index": 474, "time": "00:52:14.270 --> 00:52:20.890", "speaker": "Alexander Vasserman", "text": "we don't want to create actual list of 1 million elements just to iterate over all of those"}, {"source_name": "lecture3", "index": 475, "time": "00:52:20.960 --> 00:52:27.779", "speaker": "Alexander Vasserman", "text": "so range of a 1 million doesn't really create the least. It just allows you to iterate over all of those things"}, {"source_name": "lecture3", "index": 476, "time": "00:52:28.300 --> 00:52:30.709", "speaker": "Alexander Vasserman", "text": "the same way. Enumerate"}, {"source_name": "lecture3", "index": 477, "time": "00:52:31.180 --> 00:52:32.629", "speaker": "Alexander Vasserman", "text": "doesn't."}, {"source_name": "lecture3", "index": 478, "time": "00:52:32.780 --> 00:52:34.700", "speaker": "Alexander Vasserman", "text": "We really create this list."}, {"source_name": "lecture3", "index": 479, "time": "00:52:34.970 --> 00:52:36.209", "speaker": "Alexander Vasserman", "text": "It just"}, {"source_name": "lecture3", "index": 480, "time": "00:52:36.400 --> 00:52:38.109", "speaker": "Alexander Vasserman", "text": "outputs."}, {"source_name": "lecture3", "index": 481, "time": "00:52:38.350 --> 00:52:39.189", "speaker": "Alexander Vasserman", "text": "all"}, {"source_name": "lecture3", "index": 482, "time": "00:52:40.130 --> 00:52:43.469", "speaker": "Alexander Vasserman", "text": "a per one at a time. Essentially, but"}, {"source_name": "lecture3", "index": 483, "time": "00:52:43.490 --> 00:52:47.369", "speaker": "Alexander Vasserman", "text": "for all practical purposes it's exactly like, at least."}, {"source_name": "lecture3", "index": 484, "time": "00:52:48.790 --> 00:52:49.689", "speaker": "Alexander Vasserman", "text": "except for"}, {"source_name": "lecture3", "index": 485, "time": "00:52:49.810 --> 00:52:50.459", "speaker": "Alexander Vasserman", "text": "that ones"}, {"source_name": "lecture3", "index": 486, "time": "00:52:53.660 --> 00:52:54.439", "speaker": "Alexander Vasserman", "text": "All right."}, {"source_name": "lecture3", "index": 487, "time": "00:52:55.140 --> 00:52:56.209", "speaker": "Alexander Vasserman", "text": "That's that."}, {"source_name": "lecture3", "index": 488, "time": "00:52:56.540 --> 00:52:57.689", "speaker": "Alexander Vasserman", "text": "Make sense."}, {"source_name": "lecture3", "index": 489, "time": "00:53:00.740 --> 00:53:01.729", "speaker": "Alexander Vasserman", "text": "It's guys."}, {"source_name": "lecture3", "index": 490, "time": "00:53:15.500 --> 00:53:16.319", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture3", "index": 491, "time": "00:53:16.390 --> 00:53:17.439", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 492, "time": "00:53:18.510 --> 00:53:19.879", "speaker": "Alexander Vasserman", "text": "no. Just"}, {"source_name": "lecture3", "index": 493, "time": "00:53:21.340 --> 00:53:22.129", "speaker": "Alexander Vasserman", "text": "so."}, {"source_name": "lecture3", "index": 494, "time": "00:53:22.330 --> 00:53:25.520", "speaker": "Alexander Vasserman", "text": "Let's just add a comment here, so that we"}, {"source_name": "lecture3", "index": 495, "time": "00:53:25.600 --> 00:53:26.830", "speaker": "Alexander Vasserman", "text": "No."}, {"source_name": "lecture3", "index": 496, "time": "00:53:30.620 --> 00:53:31.609", "speaker": "Alexander Vasserman", "text": "This is"}, {"source_name": "lecture3", "index": 497, "time": "00:53:45.070 --> 00:53:46.459", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture3", "index": 498, "time": "00:53:46.650 --> 00:53:48.470", "speaker": "Alexander Vasserman", "text": "one other thing that"}, {"source_name": "lecture3", "index": 499, "time": "00:53:48.720 --> 00:53:49.810", "speaker": "Alexander Vasserman", "text": "I"}, {"source_name": "lecture3", "index": 500, "time": "00:53:50.040 --> 00:53:51.080", "speaker": "Alexander Vasserman", "text": "want it"}, {"source_name": "lecture3", "index": 501, "time": "00:53:52.990 --> 00:53:55.319", "speaker": "Alexander Vasserman", "text": "to show you is on"}, {"source_name": "lecture3", "index": 502, "time": "00:53:55.980 --> 00:53:57.390", "speaker": "Alexander Vasserman", "text": "list comprehension."}, {"source_name": "lecture3", "index": 503, "time": "00:53:58.180 --> 00:53:59.270", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 504, "time": "00:53:59.750 --> 00:54:03.610", "speaker": "Alexander Vasserman", "text": "we kind of write loops like this"}, {"source_name": "lecture3", "index": 505, "time": "00:54:03.740 --> 00:54:05.240", "speaker": "Alexander Vasserman", "text": "really, frequently"}, {"source_name": "lecture3", "index": 506, "time": "00:54:05.770 --> 00:54:06.899", "speaker": "Alexander Vasserman", "text": "in Python."}, {"source_name": "lecture3", "index": 507, "time": "00:54:06.990 --> 00:54:10.360", "speaker": "Alexander Vasserman", "text": "And so Python has kind of a shorthand"}, {"source_name": "lecture3", "index": 508, "time": "00:54:11.650 --> 00:54:15.429", "speaker": "Alexander Vasserman", "text": "even more shorthand ways of writing looks like that."}, {"source_name": "lecture3", "index": 509, "time": "00:54:16.670 --> 00:54:17.680", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 510, "time": "00:54:17.700 --> 00:54:19.080", "speaker": "Alexander Vasserman", "text": "I could say."}, {"source_name": "lecture3", "index": 511, "time": "00:54:19.660 --> 00:54:20.529", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 512, "time": "00:54:22.750 --> 00:54:25.969", "speaker": "Alexander Vasserman", "text": "I can create a list that's the output"}, {"source_name": "lecture3", "index": 513, "time": "00:54:26.110 --> 00:54:27.040", "speaker": "Alexander Vasserman", "text": "by"}, {"source_name": "lecture3", "index": 514, "time": "00:54:27.060 --> 00:54:33.339", "speaker": "Alexander Vasserman", "text": "having this this, all function essentially encoded into a single statement."}, {"source_name": "lecture3", "index": 515, "time": "00:54:34.840 --> 00:54:35.669", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 516, "time": "00:55:00.500 --> 00:55:01.209", "speaker": "Alexander Vasserman", "text": "it"}, {"source_name": "lecture3", "index": 517, "time": "00:55:07.750 --> 00:55:09.430", "speaker": "Alexander Vasserman", "text": "So this should be space."}, {"source_name": "lecture3", "index": 518, "time": "00:55:11.780 --> 00:55:14.490", "speaker": "Alexander Vasserman", "text": "So what is going on here?"}, {"source_name": "lecture3", "index": 519, "time": "00:55:18.230 --> 00:55:18.930", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 520, "time": "00:55:18.990 --> 00:55:20.100", "speaker": "Alexander Vasserman", "text": "this is cold."}, {"source_name": "lecture3", "index": 521, "time": "00:55:20.350 --> 00:55:21.129", "speaker": "Alexander Vasserman", "text": "least"}, {"source_name": "lecture3", "index": 522, "time": "00:55:21.930 --> 00:55:23.590", "speaker": "Alexander Vasserman", "text": "okay. I mean."}, {"source_name": "lecture3", "index": 523, "time": "00:55:26.980 --> 00:55:28.390", "speaker": "Alexander Vasserman", "text": "they can spell"}, {"source_name": "lecture3", "index": 524, "time": "00:55:30.820 --> 00:55:35.309", "speaker": "Alexander Vasserman", "text": "so it's kind of the same loop. Right? So the"}, {"source_name": "lecture3", "index": 525, "time": "00:55:35.730 --> 00:55:37.259", "speaker": "Alexander Vasserman", "text": "this is our"}, {"source_name": "lecture3", "index": 526, "time": "00:55:37.530 --> 00:55:38.399", "speaker": "Alexander Vasserman", "text": "oh"}, {"source_name": "lecture3", "index": 527, "time": "00:55:39.250 --> 00:55:40.100", "speaker": "Alexander Vasserman", "text": "loop."}, {"source_name": "lecture3", "index": 528, "time": "00:55:40.950 --> 00:55:45.990", "speaker": "Alexander Vasserman", "text": "the body of the kind of moved in front of the for"}, {"source_name": "lecture3", "index": 529, "time": "00:55:46.510 --> 00:55:48.670", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture3", "index": 530, "time": "00:55:52.080 --> 00:55:53.149", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 531, "time": "00:55:55.490 --> 00:55:57.989", "speaker": "Alexander Vasserman", "text": "basically one version of that"}, {"source_name": "lecture3", "index": 532, "time": "00:55:58.150 --> 00:56:00.589", "speaker": "Alexander Vasserman", "text": "look could have been"}, {"source_name": "lecture3", "index": 533, "time": "00:56:01.310 --> 00:56:02.790", "speaker": "Alexander Vasserman", "text": "something like this."}, {"source_name": "lecture3", "index": 534, "time": "00:56:02.810 --> 00:56:06.020", "speaker": "Alexander Vasserman", "text": "where this would just create"}, {"source_name": "lecture3", "index": 535, "time": "00:56:06.220 --> 00:56:07.729", "speaker": "Alexander Vasserman", "text": "all indices."}, {"source_name": "lecture3", "index": 536, "time": "00:56:08.130 --> 00:56:11.099", "speaker": "Alexander Vasserman", "text": "so basically we we are taking a"}, {"source_name": "lecture3", "index": 537, "time": "00:56:11.370 --> 00:56:21.260", "speaker": "Alexander Vasserman", "text": "any value here. you could have done not just I or any value here, and you're producing a list by iterate to doing some kind of iteration here."}, {"source_name": "lecture3", "index": 538, "time": "00:56:22.570 --> 00:56:23.560", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture3", "index": 539, "time": "00:56:24.590 --> 00:56:27.080", "speaker": "Alexander Vasserman", "text": "the final part is that"}, {"source_name": "lecture3", "index": 540, "time": "00:56:27.360 --> 00:56:37.670", "speaker": "Alexander Vasserman", "text": "you don't have to just do it. Iteration. We can iterate this some filter in place. So if we have this if statement, and then"}, {"source_name": "lecture3", "index": 541, "time": "00:56:37.950 --> 00:56:41.310", "speaker": "Alexander Vasserman", "text": "that's a filter on the elements."}, {"source_name": "lecture3", "index": 542, "time": "00:56:41.480 --> 00:56:43.140", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture3", "index": 543, "time": "00:56:43.630 --> 00:56:44.589", "speaker": "Alexander Vasserman", "text": "are"}, {"source_name": "lecture3", "index": 544, "time": "00:56:45.910 --> 00:56:49.239", "speaker": "Alexander Vasserman", "text": "that will be part of the the integration. Essentially."}, {"source_name": "lecture3", "index": 545, "time": "00:56:52.380 --> 00:56:56.759", "speaker": "Alexander Vasserman", "text": "i'm sure this is not to you to everyone. So."}, {"source_name": "lecture3", "index": 546, "time": "00:56:56.860 --> 00:56:57.649", "speaker": "Alexander Vasserman", "text": "But."}, {"source_name": "lecture3", "index": 547, "time": "00:56:58.700 --> 00:57:09.679", "speaker": "Fahad Khan", "text": "how standard is it to use list comprehension over like a for loop? Because I feel like this is more like confusing. I I see that it could save like space, since it's all in one line. But"}, {"source_name": "lecture3", "index": 548, "time": "00:57:10.050 --> 00:57:10.799", "speaker": "Fahad Khan", "text": "right"}, {"source_name": "lecture3", "index": 549, "time": "00:57:11.110 --> 00:57:15.819", "speaker": "Alexander Vasserman", "text": "it's very common. You'll see it all over the place"}, {"source_name": "lecture3", "index": 550, "time": "00:57:15.860 --> 00:57:17.310", "speaker": "Alexander Vasserman", "text": "it's."}, {"source_name": "lecture3", "index": 551, "time": "00:57:17.400 --> 00:57:23.439", "speaker": "Alexander Vasserman", "text": "yes, basically space less verbose. Reach"}, {"source_name": "lecture3", "index": 552, "time": "00:57:23.880 --> 00:57:25.649", "speaker": "Alexander Vasserman", "text": "python"}, {"source_name": "lecture3", "index": 553, "time": "00:57:27.800 --> 00:57:29.980", "speaker": "Alexander Vasserman", "text": "or is, or"}, {"source_name": "lecture3", "index": 554, "time": "00:57:30.280 --> 00:57:31.040", "speaker": "Alexander Vasserman", "text": "you know."}, {"source_name": "lecture3", "index": 555, "time": "00:57:31.400 --> 00:57:40.040", "speaker": "Alexander Vasserman", "text": "frequently about. So it's it's a very common thing. And so that's why I want you to introduce it here, and i'll be using it periodically"}, {"source_name": "lecture3", "index": 556, "time": "00:57:40.080 --> 00:57:50.890", "speaker": "Alexander Vasserman", "text": "later on. You'll be using it. I i'll try to at least initially next few times give both versions, so that you know"}, {"source_name": "lecture3", "index": 557, "time": "00:57:50.980 --> 00:57:57.929", "speaker": "Alexander Vasserman", "text": "that it makes a little bit more sense. Indeed, the first time around this is a little bit harder to read."}, {"source_name": "lecture3", "index": 558, "time": "00:57:59.470 --> 00:58:02.499", "speaker": "Alexander Vasserman", "text": "but it's a very common syntax."}, {"source_name": "lecture3", "index": 559, "time": "00:58:03.650 --> 00:58:10.810", "speaker": "Fahad Khan", "text": "Okay? And also like, what exactly does that like in the star where it, says I, for I could you explain that a little bit more"}, {"source_name": "lecture3", "index": 560, "time": "00:58:11.010 --> 00:58:12.069", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 561, "time": "00:58:12.940 --> 00:58:15.930", "speaker": "Alexander Vasserman", "text": "all right. So this is the basically"}, {"source_name": "lecture3", "index": 562, "time": "00:58:16.000 --> 00:58:18.660", "speaker": "Alexander Vasserman", "text": "this is a least of"}, {"source_name": "lecture3", "index": 563, "time": "00:58:18.890 --> 00:58:21.330", "speaker": "Alexander Vasserman", "text": "values that are done."}, {"source_name": "lecture3", "index": 564, "time": "00:58:21.360 --> 00:58:23.409", "speaker": "Alexander Vasserman", "text": "The the values are produced by"}, {"source_name": "lecture3", "index": 565, "time": "00:58:23.460 --> 00:58:27.999", "speaker": "Alexander Vasserman", "text": "evaluating the expression that comes before the 4."}, {"source_name": "lecture3", "index": 566, "time": "00:58:28.120 --> 00:58:28.959", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 567, "time": "00:58:29.910 --> 00:58:34.370", "speaker": "Alexander Vasserman", "text": "for statement! So here I could have said."}, {"source_name": "lecture3", "index": 568, "time": "00:58:34.620 --> 00:58:36.060", "speaker": "Alexander Vasserman", "text": "Oh, let's say."}, {"source_name": "lecture3", "index": 569, "time": "00:58:37.620 --> 00:58:38.390", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 570, "time": "00:58:40.620 --> 00:58:42.789", "speaker": "Alexander Vasserman", "text": "oh, sorry, not sure. But"}, {"source_name": "lecture3", "index": 571, "time": "00:58:47.660 --> 00:58:51.329", "speaker": "Alexander Vasserman", "text": "So I can have any kind of expression here."}, {"source_name": "lecture3", "index": 572, "time": "00:58:52.180 --> 00:58:57.270", "speaker": "Alexander Vasserman", "text": "So this is kind of random. But if I did this"}, {"source_name": "lecture3", "index": 573, "time": "00:58:57.350 --> 00:59:00.870", "speaker": "Alexander Vasserman", "text": "it basically would print out"}, {"source_name": "lecture3", "index": 574, "time": "00:59:01.170 --> 00:59:04.029", "speaker": "Alexander Vasserman", "text": "every first letter"}, {"source_name": "lecture3", "index": 575, "time": "00:59:04.080 --> 00:59:07.290", "speaker": "Alexander Vasserman", "text": "or first level of every board, except for the first one."}, {"source_name": "lecture3", "index": 576, "time": "00:59:07.900 --> 00:59:08.899", "speaker": "Alexander Vasserman", "text": "basically"}, {"source_name": "lecture3", "index": 577, "time": "00:59:09.000 --> 00:59:10.009", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture3", "index": 578, "time": "00:59:10.030 --> 00:59:12.299", "speaker": "Alexander Vasserman", "text": "letters that are"}, {"source_name": "lecture3", "index": 579, "time": "00:59:12.780 --> 00:59:15.149", "speaker": "Alexander Vasserman", "text": "following the space character."}, {"source_name": "lecture3", "index": 580, "time": "00:59:15.950 --> 00:59:16.629", "speaker": "Alexander Vasserman", "text": "Right?"}, {"source_name": "lecture3", "index": 581, "time": "00:59:17.370 --> 00:59:19.050", "speaker": "Alexander Vasserman", "text": "Zoom AV"}, {"source_name": "lecture3", "index": 582, "time": "00:59:19.520 --> 00:59:20.569", "speaker": "Alexander Vasserman", "text": "Luke"}, {"source_name": "lecture3", "index": 583, "time": "00:59:20.940 --> 00:59:25.439", "speaker": "Alexander Vasserman", "text": "at the original one. It's R. I. A. F. C."}, {"source_name": "lecture3", "index": 584, "time": "00:59:25.730 --> 00:59:26.660", "speaker": "Alexander Vasserman", "text": "etc."}, {"source_name": "lecture3", "index": 585, "time": "00:59:28.120 --> 00:59:32.279", "speaker": "Alexander Vasserman", "text": "But basically my main point is that I can put"}, {"source_name": "lecture3", "index": 586, "time": "00:59:32.540 --> 00:59:37.340", "speaker": "Alexander Vasserman", "text": "any kind of expression that involves the variables"}, {"source_name": "lecture3", "index": 587, "time": "00:59:37.560 --> 00:59:39.009", "speaker": "Alexander Vasserman", "text": "from inside"}, {"source_name": "lecture3", "index": 588, "time": "00:59:39.270 --> 00:59:42.799", "speaker": "Alexander Vasserman", "text": "the for loop. So the for look variables just like"}, {"source_name": "lecture3", "index": 589, "time": "00:59:42.890 --> 00:59:44.540", "speaker": "Alexander Vasserman", "text": "all this"}, {"source_name": "lecture3", "index": 590, "time": "00:59:44.740 --> 00:59:48.190", "speaker": "Alexander Vasserman", "text": "just like we could do it inside the body of the for."}, {"source_name": "lecture3", "index": 591, "time": "00:59:52.260 --> 00:59:54.309", "speaker": "Fahad Khan", "text": "So, like the first part"}, {"source_name": "lecture3", "index": 592, "time": "00:59:54.380 --> 00:59:56.789", "speaker": "Fahad Khan", "text": "basically returns what you want"}, {"source_name": "lecture3", "index": 593, "time": "00:59:57.000 --> 01:00:04.720", "speaker": "Fahad Khan", "text": "in like a list right in this situation. So like the I would be returning the indexes which are at the spaces. Right?"}, {"source_name": "lecture3", "index": 594, "time": "01:00:04.800 --> 01:00:05.589", "speaker": "Alexander Vasserman", "text": "Yes."}, {"source_name": "lecture3", "index": 595, "time": "01:00:05.650 --> 01:00:06.540", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture3", "index": 596, "time": "01:00:10.000 --> 01:00:11.830", "speaker": "Alexander Vasserman", "text": "So that's that's a good thing."}, {"source_name": "lecture3", "index": 597, "time": "01:00:12.110 --> 01:00:15.949", "speaker": "Alexander Vasserman", "text": "Yeah, it's just a little long, and that just returns"}, {"source_name": "lecture3", "index": 598, "time": "01:00:20.310 --> 01:00:21.459", "speaker": "Alexander Vasserman", "text": "anything."}, {"source_name": "lecture3", "index": 599, "time": "01:00:21.530 --> 01:00:23.359", "speaker": "Alexander Vasserman", "text": "Other questions. Yes."}, {"source_name": "lecture3", "index": 600, "time": "01:00:23.640 --> 01:00:24.419", "speaker": "Alexander Vasserman", "text": "I mean"}, {"source_name": "lecture3", "index": 601, "time": "01:00:24.500 --> 01:00:29.690", "speaker": "Aimun Anwer", "text": "so just to clarify that this just returns a list like."}, {"source_name": "lecture3", "index": 602, "time": "01:00:29.800 --> 01:00:32.970", "speaker": "Aimun Anwer", "text": "no matter what it's, it's specifically for lists."}, {"source_name": "lecture3", "index": 603, "time": "01:00:34.220 --> 01:00:37.969", "speaker": "Alexander Vasserman", "text": "Right? So that's a very good question, and"}, {"source_name": "lecture3", "index": 604, "time": "01:00:38.210 --> 01:00:39.209", "speaker": "Alexander Vasserman", "text": "it's"}, {"source_name": "lecture3", "index": 605, "time": "01:00:39.920 --> 01:00:42.849", "speaker": "Alexander Vasserman", "text": "cool at least comprehension. But I"}, {"source_name": "lecture3", "index": 606, "time": "01:00:43.400 --> 01:00:45.990", "speaker": "Alexander Vasserman", "text": "it's not just for the least"}, {"source_name": "lecture3", "index": 607, "time": "01:00:46.220 --> 01:00:47.980", "speaker": "Alexander Vasserman", "text": "it I can"}, {"source_name": "lecture3", "index": 608, "time": "01:00:48.340 --> 01:00:49.659", "speaker": "Alexander Vasserman", "text": "return a set"}, {"source_name": "lecture3", "index": 609, "time": "01:00:50.270 --> 01:00:55.200", "speaker": "Alexander Vasserman", "text": "by doing this so basically exactly the same thing. But in currently brackets"}, {"source_name": "lecture3", "index": 610, "time": "01:00:55.290 --> 01:00:56.780", "speaker": "Alexander Vasserman", "text": "you'll give me a set."}, {"source_name": "lecture3", "index": 611, "time": "01:00:57.690 --> 01:00:59.570", "speaker": "Alexander Vasserman", "text": "I can"}, {"source_name": "lecture3", "index": 612, "time": "01:01:00.390 --> 01:01:01.589", "speaker": "Alexander Vasserman", "text": "also."}, {"source_name": "lecture3", "index": 613, "time": "01:01:02.200 --> 01:01:03.120", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 614, "time": "01:01:06.390 --> 01:01:08.370", "speaker": "Alexander Vasserman", "text": "do a"}, {"source_name": "lecture3", "index": 615, "time": "01:01:08.550 --> 01:01:10.189", "speaker": "Alexander Vasserman", "text": "create a dictionary."}, {"source_name": "lecture3", "index": 616, "time": "01:01:10.490 --> 01:01:12.250", "speaker": "Alexander Vasserman", "text": "So, for example."}, {"source_name": "lecture3", "index": 617, "time": "01:01:12.390 --> 01:01:13.799", "speaker": "Alexander Vasserman", "text": "I can say."}, {"source_name": "lecture3", "index": 618, "time": "01:01:14.760 --> 01:01:15.680", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 619, "time": "01:01:16.490 --> 01:01:19.749", "speaker": "Alexander Vasserman", "text": "let's do indices of of the beginning"}, {"source_name": "lecture3", "index": 620, "time": "01:01:21.070 --> 01:01:24.259", "speaker": "Alexander Vasserman", "text": "of the boards and the corresponding"}, {"source_name": "lecture3", "index": 621, "time": "01:01:24.450 --> 01:01:26.330", "speaker": "Alexander Vasserman", "text": "Oh, letter itself."}, {"source_name": "lecture3", "index": 622, "time": "01:01:31.730 --> 01:01:32.770", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 623, "time": "01:01:33.330 --> 01:01:34.390", "speaker": "Alexander Vasserman", "text": "here."}, {"source_name": "lecture3", "index": 624, "time": "01:01:35.000 --> 01:01:37.000", "speaker": "Alexander Vasserman", "text": "in order to pay a dictionary."}, {"source_name": "lecture3", "index": 625, "time": "01:01:37.270 --> 01:01:38.330", "speaker": "Alexander Vasserman", "text": "I have"}, {"source_name": "lecture3", "index": 626, "time": "01:01:38.400 --> 01:01:40.490", "speaker": "Alexander Vasserman", "text": "the key before the"}, {"source_name": "lecture3", "index": 627, "time": "01:01:40.740 --> 01:01:41.549", "speaker": "Alexander Vasserman", "text": "Colin"}, {"source_name": "lecture3", "index": 628, "time": "01:01:41.920 --> 01:01:44.339", "speaker": "Alexander Vasserman", "text": "and the value after the call."}, {"source_name": "lecture3", "index": 629, "time": "01:01:48.350 --> 01:01:49.080", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture3", "index": 630, "time": "01:01:49.480 --> 01:01:52.290", "speaker": "Alexander Vasserman", "text": "So this is also very common"}, {"source_name": "lecture3", "index": 631, "time": "01:01:52.350 --> 01:01:54.119", "speaker": "Alexander Vasserman", "text": "ways to"}, {"source_name": "lecture3", "index": 632, "time": "01:01:54.860 --> 01:01:56.709", "speaker": "Alexander Vasserman", "text": "to create"}, {"source_name": "lecture3", "index": 633, "time": "01:01:56.800 --> 01:01:58.840", "speaker": "Alexander Vasserman", "text": "our dictionary sets."}, {"source_name": "lecture3", "index": 634, "time": "01:01:58.880 --> 01:02:00.500", "speaker": "Alexander Vasserman", "text": "at least"}, {"source_name": "lecture3", "index": 635, "time": "01:02:01.510 --> 01:02:05.769", "speaker": "Fahad Khan", "text": "technically, Wouldn't you want to put the text one first, so it makes more sense."}, {"source_name": "lecture3", "index": 636, "time": "01:02:06.260 --> 01:02:10.519", "speaker": "Alexander Vasserman", "text": "I mean, it depends what it is that you want to create right like"}, {"source_name": "lecture3", "index": 637, "time": "01:02:10.560 --> 01:02:20.870", "speaker": "Alexander Vasserman", "text": "I mean, you know, depending what you're going to be using this for, and you're not going to be using this for anything so both both ways make sense"}, {"source_name": "lecture3", "index": 638, "time": "01:02:20.910 --> 01:02:22.539", "speaker": "Alexander Vasserman", "text": "right"}, {"source_name": "lecture3", "index": 639, "time": "01:02:23.640 --> 01:02:28.369", "speaker": "Alexander Vasserman", "text": "you know in in in this particular case I don't know. Maybe."}, {"source_name": "lecture3", "index": 640, "time": "01:02:30.370 --> 01:02:31.580", "speaker": "Alexander Vasserman", "text": "well, yeah."}, {"source_name": "lecture3", "index": 641, "time": "01:02:33.920 --> 01:02:35.020", "speaker": "Alexander Vasserman", "text": "I guess"}, {"source_name": "lecture3", "index": 642, "time": "01:02:36.230 --> 01:02:37.309", "speaker": "Alexander Vasserman", "text": "you know if"}, {"source_name": "lecture3", "index": 643, "time": "01:02:38.440 --> 01:02:48.370", "speaker": "Alexander Vasserman", "text": "and if if you were putting, let's say a board then. we wanted to have the initial position of that board. that. Yes, you would just reach them around, and that"}, {"source_name": "lecture3", "index": 644, "time": "01:02:48.640 --> 01:02:49.650", "speaker": "Alexander Vasserman", "text": "makes sense. Yes."}, {"source_name": "lecture3", "index": 645, "time": "01:02:50.850 --> 01:02:51.770", "speaker": "Alexander Vasserman", "text": "addicts."}, {"source_name": "lecture3", "index": 646, "time": "01:02:52.500 --> 01:02:57.319", "speaker": "Alex Wojtowicz", "text": "So what's the difference When you started with a bracket and a curly brace as one just."}, {"source_name": "lecture3", "index": 647, "time": "01:02:57.440 --> 01:03:00.729", "speaker": "Alex Wojtowicz", "text": "I mean it will output a dictionary, and the other one means it will output a list."}, {"source_name": "lecture3", "index": 648, "time": "01:03:01.370 --> 01:03:06.190", "speaker": "Alexander Vasserman", "text": "yes. So this one is outputting list"}, {"source_name": "lecture3", "index": 649, "time": "01:03:06.360 --> 01:03:09.239", "speaker": "Alexander Vasserman", "text": "this one out with the set."}, {"source_name": "lecture3", "index": 650, "time": "01:03:11.310 --> 01:03:14.560", "speaker": "Alexander Vasserman", "text": "What about the one on line 21. So that's"}, {"source_name": "lecture3", "index": 651, "time": "01:03:14.710 --> 01:03:17.700", "speaker": "Alexander Vasserman", "text": "and this one creates a dictionary."}, {"source_name": "lecture3", "index": 652, "time": "01:03:18.410 --> 01:03:21.969", "speaker": "Alex Wojtowicz", "text": "How does it know? How does it differentiate? Only because"}, {"source_name": "lecture3", "index": 653, "time": "01:03:22.440 --> 01:03:23.749", "speaker": "Alex Wojtowicz", "text": "of the things inside?"}, {"source_name": "lecture3", "index": 654, "time": "01:03:24.060 --> 01:03:24.939", "speaker": "Alexander Vasserman", "text": "Well."}, {"source_name": "lecture3", "index": 655, "time": "01:03:26.380 --> 01:03:27.629", "speaker": "Alexander Vasserman", "text": "because"}, {"source_name": "lecture3", "index": 656, "time": "01:03:28.250 --> 01:03:30.309", "speaker": "Alexander Vasserman", "text": "Yes, basically."}, {"source_name": "lecture3", "index": 657, "time": "01:03:31.850 --> 01:03:33.769", "speaker": "Alexander Vasserman", "text": "It is looking for this"}, {"source_name": "lecture3", "index": 658, "time": "01:03:34.030 --> 01:03:35.350", "speaker": "Alexander Vasserman", "text": "call on the inside."}, {"source_name": "lecture3", "index": 659, "time": "01:03:36.260 --> 01:03:36.979", "speaker": "Alex Wojtowicz", "text": "Okay."}, {"source_name": "lecture3", "index": 660, "time": "01:03:37.360 --> 01:03:41.429", "speaker": "Alexander Vasserman", "text": "So if you have key value or"}, {"source_name": "lecture3", "index": 661, "time": "01:03:41.680 --> 01:03:43.160", "speaker": "Alexander Vasserman", "text": "preceding the"}, {"source_name": "lecture3", "index": 662, "time": "01:03:43.240 --> 01:03:44.899", "speaker": "Alexander Vasserman", "text": "for all."}, {"source_name": "lecture3", "index": 663, "time": "01:03:44.960 --> 01:03:47.229", "speaker": "Alexander Vasserman", "text": "then it's going to be a dictionary."}, {"source_name": "lecture3", "index": 664, "time": "01:03:47.310 --> 01:03:48.810", "speaker": "Alexander Vasserman", "text": "if not"}, {"source_name": "lecture3", "index": 665, "time": "01:03:48.990 --> 01:03:51.219", "speaker": "Alexander Vasserman", "text": "it's going to be"}, {"source_name": "lecture3", "index": 666, "time": "01:03:51.340 --> 01:03:52.950", "speaker": "Alexander Vasserman", "text": "a set."}, {"source_name": "lecture3", "index": 667, "time": "01:03:53.380 --> 01:03:59.410", "speaker": "Alexander Vasserman", "text": "which is kind of similar to the way we were creating the constant"}, {"source_name": "lecture3", "index": 668, "time": "01:03:59.470 --> 01:04:02.299", "speaker": "Alexander Vasserman", "text": "constants of this type, right like to"}, {"source_name": "lecture3", "index": 669, "time": "01:04:02.530 --> 01:04:08.629", "speaker": "Alexander Vasserman", "text": "this is actually a valid piece of code. So if I wanted to create this specific set."}, {"source_name": "lecture3", "index": 670, "time": "01:04:08.880 --> 01:04:12.809", "speaker": "Alexander Vasserman", "text": "this would be the code to create that are"}, {"source_name": "lecture3", "index": 671, "time": "01:04:13.010 --> 01:04:16.059", "speaker": "Alexander Vasserman", "text": "study."}, {"source_name": "lecture3", "index": 672, "time": "01:04:16.130 --> 01:04:17.439", "speaker": "Alexander Vasserman", "text": "and the"}, {"source_name": "lecture3", "index": 673, "time": "01:04:17.690 --> 01:04:19.220", "speaker": "Alexander Vasserman", "text": "this one would"}, {"source_name": "lecture3", "index": 674, "time": "01:04:19.280 --> 01:04:23.640", "speaker": "Alexander Vasserman", "text": "automatically pay the dictionary right? And so again, the difference is only that"}, {"source_name": "lecture3", "index": 675, "time": "01:04:23.680 --> 01:04:25.540", "speaker": "Alexander Vasserman", "text": "here beer."}, {"source_name": "lecture3", "index": 676, "time": "01:04:26.150 --> 01:04:27.120", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 677, "time": "01:04:27.530 --> 01:04:32.119", "speaker": "Alexander Vasserman", "text": "between the Commons we have individual values, and here, between the commerce we have"}, {"source_name": "lecture3", "index": 678, "time": "01:04:32.240 --> 01:04:34.080", "speaker": "Alexander Vasserman", "text": "a key all in."}, {"source_name": "lecture3", "index": 679, "time": "01:04:35.130 --> 01:04:40.029", "speaker": "Alex Wojtowicz", "text": "If you had a comma instead of the semicolon, Would it just make 2 different?"}, {"source_name": "lecture3", "index": 680, "time": "01:04:40.490 --> 01:04:41.390", "speaker": "Alex Wojtowicz", "text": "That's"}, {"source_name": "lecture3", "index": 681, "time": "01:04:42.630 --> 01:04:44.160", "speaker": "Alexander Vasserman", "text": "if I had it like this?"}, {"source_name": "lecture3", "index": 682, "time": "01:04:44.320 --> 01:04:45.089", "speaker": "Alex Wojtowicz", "text": "Yeah."}, {"source_name": "lecture3", "index": 683, "time": "01:04:45.720 --> 01:04:48.119", "speaker": "Alexander Vasserman", "text": "Also it doesn't like it."}, {"source_name": "lecture3", "index": 684, "time": "01:04:48.920 --> 01:04:53.829", "speaker": "Alexander Vasserman", "text": "so I I think it would make it nerve, because it can't quite parse it."}, {"source_name": "lecture3", "index": 685, "time": "01:04:54.170 --> 01:04:55.590", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture3", "index": 686, "time": "01:04:56.960 --> 01:04:59.289", "speaker": "Alexander Vasserman", "text": "you know, if I was interpreting it"}, {"source_name": "lecture3", "index": 687, "time": "01:04:59.810 --> 01:05:05.390", "speaker": "Alexander Vasserman", "text": "it, I would be interpreting it like this. So whenever you have a"}, {"source_name": "lecture3", "index": 688, "time": "01:05:05.580 --> 01:05:08.209", "speaker": "Alexander Vasserman", "text": "comma. It's implicitly a tuple."}, {"source_name": "lecture3", "index": 689, "time": "01:05:08.810 --> 01:05:12.239", "speaker": "Alexander Vasserman", "text": "or oftentimes right. So, for example."}, {"source_name": "lecture3", "index": 690, "time": "01:05:12.670 --> 01:05:13.910", "speaker": "Alexander Vasserman", "text": "here."}, {"source_name": "lecture3", "index": 691, "time": "01:05:15.050 --> 01:05:20.349", "speaker": "Alexander Vasserman", "text": "right, you also have 2 elements that are separated by comma, and it's really just the pair"}, {"source_name": "lecture3", "index": 692, "time": "01:05:20.710 --> 01:05:23.870", "speaker": "Alexander Vasserman", "text": "right? And so basically."}, {"source_name": "lecture3", "index": 693, "time": "01:05:27.290 --> 01:05:29.329", "speaker": "Alexander Vasserman", "text": "if I if I did it this way."}, {"source_name": "lecture3", "index": 694, "time": "01:05:29.670 --> 01:05:36.299", "speaker": "Alexander Vasserman", "text": "it it looks very similar. But now we kind of destroy the dictionary structure, and instead, we have a set"}, {"source_name": "lecture3", "index": 695, "time": "01:05:36.330 --> 01:05:37.670", "speaker": "Alexander Vasserman", "text": "of Paris"}, {"source_name": "lecture3", "index": 696, "time": "01:05:43.820 --> 01:05:44.660", "speaker": "Alexander Vasserman", "text": "All right."}, {"source_name": "lecture3", "index": 697, "time": "01:05:45.730 --> 01:05:46.870", "speaker": "Alexander Vasserman", "text": "Any"}, {"source_name": "lecture3", "index": 698, "time": "01:05:47.550 --> 01:05:49.769", "speaker": "Alexander Vasserman", "text": "other questions."}, {"source_name": "lecture3", "index": 699, "time": "01:05:57.350 --> 01:06:08.599", "speaker": "Aimun Anwer", "text": "Yes, sorry. Another one. so I notice that you have the if statement as well in there, Can it only handle one single, if statement or can you also put in multiple commands after that?"}, {"source_name": "lecture3", "index": 700, "time": "01:06:09.300 --> 01:06:18.210", "speaker": "Alexander Vasserman", "text": "generally, there is only one thing that have going into each kind of place. Right? So"}, {"source_name": "lecture3", "index": 701, "time": "01:06:18.240 --> 01:06:20.600", "speaker": "Alexander Vasserman", "text": "you generally wouldn't put"}, {"source_name": "lecture3", "index": 702, "time": "01:06:20.820 --> 01:06:25.669", "speaker": "Alexander Vasserman", "text": "more than just one thing before the for loop."}, {"source_name": "lecture3", "index": 703, "time": "01:06:27.250 --> 01:06:31.879", "speaker": "Alexander Vasserman", "text": "So that's just a single value. Basically, you. You want the values that"}, {"source_name": "lecture3", "index": 704, "time": "01:06:32.000 --> 01:06:33.559", "speaker": "Alexander Vasserman", "text": "and the same way"}, {"source_name": "lecture3", "index": 705, "time": "01:06:33.960 --> 01:06:35.149", "speaker": "Alexander Vasserman", "text": "here."}, {"source_name": "lecture3", "index": 706, "time": "01:06:35.210 --> 01:06:40.039", "speaker": "Alexander Vasserman", "text": "you wouldn't want a like block of code. You could certainly say something like"}, {"source_name": "lecture3", "index": 707, "time": "01:06:40.060 --> 01:06:43.520", "speaker": "Alexander Vasserman", "text": "kind of a more complex condition Here, right?"}, {"source_name": "lecture3", "index": 708, "time": "01:06:44.070 --> 01:06:45.879", "speaker": "Alexander Vasserman", "text": "Let's say all"}, {"source_name": "lecture3", "index": 709, "time": "01:06:46.040 --> 01:06:46.959", "speaker": "Alexander Vasserman", "text": "whatever."}, {"source_name": "lecture3", "index": 710, "time": "01:06:48.150 --> 01:06:49.500", "speaker": "Alexander Vasserman", "text": "Oh, oh."}, {"source_name": "lecture3", "index": 711, "time": "01:06:57.250 --> 01:07:01.130", "speaker": "Alexander Vasserman", "text": "right! So I can have a arbitrary complex condition here."}, {"source_name": "lecture3", "index": 712, "time": "01:07:01.290 --> 01:07:04.200", "speaker": "Alexander Vasserman", "text": "but it's still just single condition."}, {"source_name": "lecture3", "index": 713, "time": "01:07:05.640 --> 01:07:06.290", "speaker": "Alexander Vasserman", "text": "alright."}, {"source_name": "lecture3", "index": 714, "time": "01:07:06.630 --> 01:07:07.919", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture3", "index": 715, "time": "01:07:09.190 --> 01:07:13.430", "speaker": "Alexander Vasserman", "text": "certainly at some point in at some level of complexity"}, {"source_name": "lecture3", "index": 716, "time": "01:07:13.600 --> 01:07:21.160", "speaker": "Alexander Vasserman", "text": "the trade off between compact versus applied. It is kind of"}, {"source_name": "lecture3", "index": 717, "time": "01:07:21.400 --> 01:07:23.849", "speaker": "Alexander Vasserman", "text": "you know, going in in the"}, {"source_name": "lecture3", "index": 718, "time": "01:07:24.130 --> 01:07:28.420", "speaker": "Alexander Vasserman", "text": "like. The the trade offs are not worth it right? So, like, you know, they're writing"}, {"source_name": "lecture3", "index": 719, "time": "01:07:28.500 --> 01:07:34.400", "speaker": "Alexander Vasserman", "text": "a lot of stuff we're probably not going to be using at least comprehension just because that becomes"}, {"source_name": "lecture3", "index": 720, "time": "01:07:34.420 --> 01:07:41.159", "speaker": "Alexander Vasserman", "text": "very too confusing. But for for short pieces of code. It's it's very convenient."}, {"source_name": "lecture3", "index": 721, "time": "01:07:42.340 --> 01:07:43.520", "speaker": "Aimun Anwer", "text": "Got it? Thank you."}, {"source_name": "lecture3", "index": 722, "time": "01:07:47.720 --> 01:07:49.939", "speaker": "Alexander Vasserman", "text": "Any other questions."}, {"source_name": "lecture3", "index": 723, "time": "01:07:56.380 --> 01:07:57.200", "speaker": "Alexander Vasserman", "text": "all right."}, {"source_name": "lecture3", "index": 724, "time": "01:07:57.670 --> 01:07:58.660", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 725, "time": "01:08:06.610 --> 01:08:07.279", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture3", "index": 726, "time": "01:08:10.660 --> 01:08:12.380", "speaker": "Alexander Vasserman", "text": "so let me"}, {"source_name": "lecture3", "index": 727, "time": "01:08:13.840 --> 01:08:15.229", "speaker": "Alexander Vasserman", "text": "actually"}, {"source_name": "lecture3", "index": 728, "time": "01:08:17.450 --> 01:08:18.540", "speaker": "Alexander Vasserman", "text": "reach"}, {"source_name": "lecture3", "index": 729, "time": "01:08:22.439 --> 01:08:25.959", "speaker": "Alexander Vasserman", "text": "Well, no, let's let let's continue. So."}, {"source_name": "lecture3", "index": 730, "time": "01:08:27.359 --> 01:08:29.080", "speaker": "Alexander Vasserman", "text": "let's"}, {"source_name": "lecture3", "index": 731, "time": "01:08:29.870 --> 01:08:30.760", "speaker": "Alexander Vasserman", "text": "yeah"}, {"source_name": "lecture3", "index": 732, "time": "01:08:32.930 --> 01:08:35.749", "speaker": "Alexander Vasserman", "text": "spend a little bit of"}, {"source_name": "lecture3", "index": 733, "time": "01:08:36.240 --> 01:08:38.849", "speaker": "Alexander Vasserman", "text": "more time on"}, {"source_name": "lecture3", "index": 734, "time": "01:08:41.140 --> 01:08:43.319", "speaker": "Alexander Vasserman", "text": "typing on or types."}, {"source_name": "lecture3", "index": 735, "time": "01:08:43.740 --> 01:08:44.719", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 736, "time": "01:08:47.140 --> 01:08:49.269", "speaker": "Alexander Vasserman", "text": "if you for done"}, {"source_name": "lecture3", "index": 737, "time": "01:08:49.460 --> 01:08:51.490", "speaker": "Alexander Vasserman", "text": "language. It's other than python."}, {"source_name": "lecture3", "index": 738, "time": "01:08:51.700 --> 01:08:52.700", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 739, "time": "01:08:53.010 --> 01:08:53.779", "speaker": "Alexander Vasserman", "text": "or"}, {"source_name": "lecture3", "index": 740, "time": "01:08:54.029 --> 01:08:59.840", "speaker": "Alexander Vasserman", "text": "like C. Java, or things like that. You know that variables have types"}, {"source_name": "lecture3", "index": 741, "time": "01:09:00.430 --> 01:09:01.779", "speaker": "Alexander Vasserman", "text": "in in python"}, {"source_name": "lecture3", "index": 742, "time": "01:09:01.870 --> 01:09:04.440", "speaker": "Alexander Vasserman", "text": "variables. Don't have types"}, {"source_name": "lecture3", "index": 743, "time": "01:09:04.550 --> 01:09:06.009", "speaker": "Alexander Vasserman", "text": "values do."}, {"source_name": "lecture3", "index": 744, "time": "01:09:06.180 --> 01:09:11.199", "speaker": "Alexander Vasserman", "text": "But there are type annotations"}, {"source_name": "lecture3", "index": 745, "time": "01:09:11.359 --> 01:09:14.300", "speaker": "Alexander Vasserman", "text": "that are very useful."}, {"source_name": "lecture3", "index": 746, "time": "01:09:14.520 --> 01:09:17.350", "speaker": "Alexander Vasserman", "text": "So there is an"}, {"source_name": "lecture3", "index": 747, "time": "01:09:20.380 --> 01:09:22.610", "speaker": "Alexander Vasserman", "text": "typing all library."}, {"source_name": "lecture3", "index": 748, "time": "01:09:24.120 --> 01:09:25.370", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture3", "index": 749, "time": "01:09:27.080 --> 01:09:29.140", "speaker": "Alexander Vasserman", "text": "one of the things that"}, {"source_name": "lecture3", "index": 750, "time": "01:09:29.160 --> 01:09:32.990", "speaker": "Alexander Vasserman", "text": "he's quite through school. He's"}, {"source_name": "lecture3", "index": 751, "time": "01:09:33.060 --> 01:09:34.040", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture3", "index": 752, "time": "01:09:37.350 --> 01:09:39.500", "speaker": "Alexander Vasserman", "text": "so called name tuple."}, {"source_name": "lecture3", "index": 753, "time": "01:09:40.430 --> 01:09:44.379", "speaker": "Alexander Vasserman", "text": "So if you remember last time we looked at couples"}, {"source_name": "lecture3", "index": 754, "time": "01:09:44.510 --> 01:09:49.130", "speaker": "Alexander Vasserman", "text": "all right. It's kind of like a least, but not mutable least."}, {"source_name": "lecture3", "index": 755, "time": "01:09:49.420 --> 01:09:50.139", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture3", "index": 756, "time": "01:09:50.210 --> 01:09:51.609", "speaker": "Alexander Vasserman", "text": "oftentimes"}, {"source_name": "lecture3", "index": 757, "time": "01:09:51.760 --> 01:09:54.540", "speaker": "Alexander Vasserman", "text": "we are putting just different"}, {"source_name": "lecture3", "index": 758, "time": "01:09:54.620 --> 01:10:00.030", "speaker": "Alexander Vasserman", "text": "kind of things together to be treated as a single entity."}, {"source_name": "lecture3", "index": 759, "time": "01:10:00.610 --> 01:10:02.510", "speaker": "Alexander Vasserman", "text": "and so"}, {"source_name": "lecture3", "index": 760, "time": "01:10:02.720 --> 01:10:05.030", "speaker": "Alexander Vasserman", "text": "named Tople is"}, {"source_name": "lecture3", "index": 761, "time": "01:10:05.100 --> 01:10:08.340", "speaker": "Alexander Vasserman", "text": "just like an apple. It's represented in me"}, {"source_name": "lecture3", "index": 762, "time": "01:10:08.460 --> 01:10:09.839", "speaker": "Alexander Vasserman", "text": "in the computer"}, {"source_name": "lecture3", "index": 763, "time": "01:10:10.130 --> 01:10:12.440", "speaker": "Alexander Vasserman", "text": "like at apple. So it's a very compact"}, {"source_name": "lecture3", "index": 764, "time": "01:10:12.810 --> 01:10:15.340", "speaker": "Alexander Vasserman", "text": "in not mutable representation."}, {"source_name": "lecture3", "index": 765, "time": "01:10:15.430 --> 01:10:16.340", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture3", "index": 766, "time": "01:10:16.390 --> 01:10:17.559", "speaker": "Alexander Vasserman", "text": "you can"}, {"source_name": "lecture3", "index": 767, "time": "01:10:17.750 --> 01:10:18.769", "speaker": "Alexander Vasserman", "text": "create"}, {"source_name": "lecture3", "index": 768, "time": "01:10:19.010 --> 01:10:20.170", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture3", "index": 769, "time": "01:10:20.390 --> 01:10:23.790", "speaker": "Alexander Vasserman", "text": "data on the classes using"}, {"source_name": "lecture3", "index": 770, "time": "01:10:24.080 --> 01:10:25.520", "speaker": "Alexander Vasserman", "text": "that. So."}, {"source_name": "lecture3", "index": 771, "time": "01:10:25.990 --> 01:10:27.320", "speaker": "Alexander Vasserman", "text": "for example."}, {"source_name": "lecture3", "index": 772, "time": "01:10:29.030 --> 01:10:29.940", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 773, "time": "01:10:31.740 --> 01:10:36.279", "speaker": "Alexander Vasserman", "text": "by the way, show of hands who has"}, {"source_name": "lecture3", "index": 774, "time": "01:10:47.040 --> 01:10:51.569", "speaker": "Alexander Vasserman", "text": "or let's add, people who've seen classes and any other"}, {"source_name": "lecture3", "index": 775, "time": "01:10:51.590 --> 01:10:53.090", "speaker": "Alexander Vasserman", "text": "language as well."}, {"source_name": "lecture3", "index": 776, "time": "01:10:55.640 --> 01:10:58.240", "speaker": "Alexander Vasserman", "text": "Okay, so most people"}, {"source_name": "lecture3", "index": 777, "time": "01:10:58.430 --> 01:11:11.100", "speaker": "Alexander Vasserman", "text": "understand classes. So classes are just the way to combine different pieces of data together. And some functionality combined is that to to get that we visit."}, {"source_name": "lecture3", "index": 778, "time": "01:11:11.290 --> 01:11:15.260", "speaker": "Alexander Vasserman", "text": "So name top of is basic, and"}, {"source_name": "lecture3", "index": 779, "time": "01:11:15.750 --> 01:11:16.849", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture3", "index": 780, "time": "01:11:17.420 --> 01:11:21.740", "speaker": "Alexander Vasserman", "text": "thing that both in parentheses here is in inheritance. If you"}, {"source_name": "lecture3", "index": 781, "time": "01:11:22.640 --> 01:11:23.679", "speaker": "Alexander Vasserman", "text": "haven't"}, {"source_name": "lecture3", "index": 782, "time": "01:11:23.920 --> 01:11:33.390", "speaker": "Alexander Vasserman", "text": "I heard that term or Haven't studied Don't worry about it. so here we're just defining that span is a kind of name double."}, {"source_name": "lecture3", "index": 783, "time": "01:11:33.920 --> 01:11:38.259", "speaker": "Alexander Vasserman", "text": "And what that allows us to do is to to say things like."}, {"source_name": "lecture3", "index": 784, "time": "01:11:38.300 --> 01:11:39.160", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 785, "time": "01:11:39.260 --> 01:11:41.840", "speaker": "Alexander Vasserman", "text": "what the elements of"}, {"source_name": "lecture3", "index": 786, "time": "01:11:41.960 --> 01:11:43.880", "speaker": "Alexander Vasserman", "text": "this class are"}, {"source_name": "lecture3", "index": 787, "time": "01:11:45.230 --> 01:11:46.980", "speaker": "Alexander Vasserman", "text": "in very"}, {"source_name": "lecture3", "index": 788, "time": "01:11:47.110 --> 01:11:50.849", "speaker": "Alexander Vasserman", "text": "compact way. So, for example, I could"}, {"source_name": "lecture3", "index": 789, "time": "01:11:56.130 --> 01:11:58.179", "speaker": "Alexander Vasserman", "text": "define the name to"}, {"source_name": "lecture3", "index": 790, "time": "01:12:03.350 --> 01:12:04.439", "speaker": "Alexander Vasserman", "text": "like this"}, {"source_name": "lecture3", "index": 791, "time": "01:12:05.150 --> 01:12:06.559", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture3", "index": 792, "time": "01:12:08.370 --> 01:12:09.349", "speaker": "Alexander Vasserman", "text": "it's"}, {"source_name": "lecture3", "index": 793, "time": "01:12:09.980 --> 01:12:13.240", "speaker": "Alexander Vasserman", "text": "basically just like that creates a"}, {"source_name": "lecture3", "index": 794, "time": "01:12:13.340 --> 01:12:14.120", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 795, "time": "01:12:14.660 --> 01:12:16.290", "speaker": "Alexander Vasserman", "text": "the class is"}, {"source_name": "lecture3", "index": 796, "time": "01:12:16.590 --> 01:12:18.830", "speaker": "Alexander Vasserman", "text": "3 members"}, {"source_name": "lecture3", "index": 797, "time": "01:12:18.940 --> 01:12:22.110", "speaker": "Alexander Vasserman", "text": "text, star position, and it's by Z and position."}, {"source_name": "lecture3", "index": 798, "time": "01:12:22.240 --> 01:12:25.400", "speaker": "Alexander Vasserman", "text": "and it i'm also providing"}, {"source_name": "lecture3", "index": 799, "time": "01:12:25.420 --> 01:12:27.760", "speaker": "Alexander Vasserman", "text": "the type annotations"}, {"source_name": "lecture3", "index": 800, "time": "01:12:28.010 --> 01:12:30.309", "speaker": "Alexander Vasserman", "text": "for each of the variables."}, {"source_name": "lecture3", "index": 801, "time": "01:12:30.870 --> 01:12:31.950", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 802, "time": "01:12:33.150 --> 01:12:33.990", "speaker": "Alexander Vasserman", "text": "in"}, {"source_name": "lecture3", "index": 803, "time": "01:12:34.400 --> 01:12:35.360", "speaker": "Alexander Vasserman", "text": "Python"}, {"source_name": "lecture3", "index": 804, "time": "01:12:35.530 --> 01:12:36.920", "speaker": "Alexander Vasserman", "text": "you put the type"}, {"source_name": "lecture3", "index": 805, "time": "01:12:37.300 --> 01:12:38.780", "speaker": "Alexander Vasserman", "text": "after the variable."}, {"source_name": "lecture3", "index": 806, "time": "01:12:39.520 --> 01:12:40.760", "speaker": "Alexander Vasserman", "text": "so call them"}, {"source_name": "lecture3", "index": 807, "time": "01:12:41.110 --> 01:12:44.230", "speaker": "Alexander Vasserman", "text": "type is basically how you create type and attention."}, {"source_name": "lecture3", "index": 808, "time": "01:12:45.100 --> 01:12:49.700", "speaker": "Alexander Vasserman", "text": "So here basically the plus span contains 3 fields."}, {"source_name": "lecture3", "index": 809, "time": "01:12:49.790 --> 01:12:52.240", "speaker": "Alexander Vasserman", "text": "text, star position, and position."}, {"source_name": "lecture3", "index": 810, "time": "01:12:52.300 --> 01:12:53.820", "speaker": "Alexander Vasserman", "text": "And we just"}, {"source_name": "lecture3", "index": 811, "time": "01:12:54.150 --> 01:13:00.330", "speaker": "Alexander Vasserman", "text": "for clarity to say, okay, well text, this is 3 start position in that position."}, {"source_name": "lecture3", "index": 812, "time": "01:13:01.580 --> 01:13:03.139", "speaker": "Alexander Vasserman", "text": "Jay, do you have a question?"}, {"source_name": "lecture3", "index": 813, "time": "01:13:09.840 --> 01:13:11.050", "speaker": "Alexander Vasserman", "text": "maybe that's just"}, {"source_name": "lecture3", "index": 814, "time": "01:13:11.720 --> 01:13:12.480", "speaker": "Alexander Vasserman", "text": "well."}, {"source_name": "lecture3", "index": 815, "time": "01:13:12.530 --> 01:13:13.370", "speaker": "Alexander Vasserman", "text": "And the"}, {"source_name": "lecture3", "index": 816, "time": "01:13:13.440 --> 01:13:19.340", "speaker": "Alexander Vasserman", "text": "was raised before Does this make some sense?"}, {"source_name": "lecture3", "index": 817, "time": "01:13:22.030 --> 01:13:23.160", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 818, "time": "01:13:25.580 --> 01:13:27.799", "speaker": "Alexander Vasserman", "text": "so I can"}, {"source_name": "lecture3", "index": 819, "time": "01:13:28.140 --> 01:13:30.200", "speaker": "Alexander Vasserman", "text": "create a"}, {"source_name": "lecture3", "index": 820, "time": "01:13:33.550 --> 01:13:34.519", "speaker": "Alexander Vasserman", "text": "span"}, {"source_name": "lecture3", "index": 821, "time": "01:13:35.180 --> 01:13:36.629", "speaker": "Alexander Vasserman", "text": "all for"}, {"source_name": "lecture3", "index": 822, "time": "01:13:37.410 --> 01:13:41.649", "speaker": "Alexander Vasserman", "text": "using the same text variable that we had before. And let's say position"}, {"source_name": "lecture3", "index": 823, "time": "01:13:41.850 --> 01:13:43.540", "speaker": "Alexander Vasserman", "text": "0, and"}, {"source_name": "lecture3", "index": 824, "time": "01:13:45.890 --> 01:13:46.660", "speaker": "Alexander Vasserman", "text": "to the"}, {"source_name": "lecture3", "index": 825, "time": "01:13:46.690 --> 01:13:47.570", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture3", "index": 826, "time": "01:13:48.880 --> 01:13:50.160", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture3", "index": 827, "time": "01:13:50.690 --> 01:13:52.479", "speaker": "Alexander Vasserman", "text": "you know this is just"}, {"source_name": "lecture3", "index": 828, "time": "01:13:52.650 --> 01:13:54.110", "speaker": "Alexander Vasserman", "text": "e"}, {"source_name": "lecture3", "index": 829, "time": "01:13:54.500 --> 01:13:55.800", "speaker": "Alexander Vasserman", "text": "a couple"}, {"source_name": "lecture3", "index": 830, "time": "01:13:56.210 --> 01:13:57.490", "speaker": "Alexander Vasserman", "text": "right so."}, {"source_name": "lecture3", "index": 831, "time": "01:13:58.230 --> 01:14:00.119", "speaker": "Alexander Vasserman", "text": "or people, or"}, {"source_name": "lecture3", "index": 832, "time": "01:14:00.380 --> 01:14:01.170", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture3", "index": 833, "time": "01:14:02.380 --> 01:14:06.190", "speaker": "Alexander Vasserman", "text": "oh container for 3 elements, right where it's"}, {"source_name": "lecture3", "index": 834, "time": "01:14:06.380 --> 01:14:07.290", "speaker": "Alexander Vasserman", "text": "text"}, {"source_name": "lecture3", "index": 835, "time": "01:14:07.570 --> 01:14:10.809", "speaker": "Alexander Vasserman", "text": "equal to particular thing. Start positionable"}, {"source_name": "lecture3", "index": 836, "time": "01:14:11.510 --> 01:14:12.230", "speaker": "Alexander Vasserman", "text": "position."}, {"source_name": "lecture3", "index": 837, "time": "01:14:14.720 --> 01:14:16.179", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture3", "index": 838, "time": "01:14:17.910 --> 01:14:18.830", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 839, "time": "01:14:19.690 --> 01:14:20.530", "speaker": "Alexander Vasserman", "text": "I mean"}, {"source_name": "lecture3", "index": 840, "time": "01:14:21.300 --> 01:14:22.260", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture3", "index": 841, "time": "01:14:23.590 --> 01:14:41.240", "speaker": "Alexander Vasserman", "text": "also as a kind of more generally something that I I don't know if you've seen in functions in Python in general, but also so here we're just calling the function, which is a constructor. It it's implicitly defined for for top for name doubles."}, {"source_name": "lecture3", "index": 842, "time": "01:14:42.660 --> 01:14:43.559", "speaker": "Alexander Vasserman", "text": "at least"}, {"source_name": "lecture3", "index": 843, "time": "01:14:44.330 --> 01:14:48.220", "speaker": "Alexander Vasserman", "text": "the all the elements that are part of that top."}, {"source_name": "lecture3", "index": 844, "time": "01:14:48.580 --> 01:14:50.500", "speaker": "Alexander Vasserman", "text": "Another way to call."}, {"source_name": "lecture3", "index": 845, "time": "01:14:50.540 --> 01:14:54.190", "speaker": "Alexander Vasserman", "text": "or a constructor like that would be."}, {"source_name": "lecture3", "index": 846, "time": "01:15:06.060 --> 01:15:07.790", "speaker": "Alexander Vasserman", "text": "we explicitly."}, {"source_name": "lecture3", "index": 847, "time": "01:15:07.940 --> 01:15:09.040", "speaker": "Alexander Vasserman", "text": "You mean"}, {"source_name": "lecture3", "index": 848, "time": "01:15:13.160 --> 01:15:14.160", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture3", "index": 849, "time": "01:15:14.610 --> 01:15:15.969", "speaker": "Alexander Vasserman", "text": "all arguments."}, {"source_name": "lecture3", "index": 850, "time": "01:15:16.360 --> 01:15:18.249", "speaker": "Alexander Vasserman", "text": "So this is going to create"}, {"source_name": "lecture3", "index": 851, "time": "01:15:18.880 --> 01:15:20.739", "speaker": "Alexander Vasserman", "text": "basically kind of the same thing."}, {"source_name": "lecture3", "index": 852, "time": "01:15:20.840 --> 01:15:22.150", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture3", "index": 853, "time": "01:15:22.400 --> 01:15:25.779", "speaker": "Alexander Vasserman", "text": "what's nice about this type of syntax."}, {"source_name": "lecture3", "index": 854, "time": "01:15:26.110 --> 01:15:26.990", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 855, "time": "01:15:28.140 --> 01:15:30.010", "speaker": "Alexander Vasserman", "text": "you know where"}, {"source_name": "lecture3", "index": 856, "time": "01:15:30.370 --> 01:15:32.860", "speaker": "Alexander Vasserman", "text": "the needs of the arguments are optional. But"}, {"source_name": "lecture3", "index": 857, "time": "01:15:33.890 --> 01:15:47.509", "speaker": "Alexander Vasserman", "text": "it's makes it clear. Basically when I when I see something like this. I know what are the different arguments actually are. So the meaning of this 0 and 11"}, {"source_name": "lecture3", "index": 858, "time": "01:15:47.640 --> 01:15:49.830", "speaker": "Alexander Vasserman", "text": "is much more obvious."}, {"source_name": "lecture3", "index": 859, "time": "01:15:49.920 --> 01:15:50.769", "speaker": "Alexander Vasserman", "text": "Then."}, {"source_name": "lecture3", "index": 860, "time": "01:15:50.840 --> 01:15:54.480", "speaker": "Alexander Vasserman", "text": "You know, it was in, you know, in"}, {"source_name": "lecture3", "index": 861, "time": "01:15:54.970 --> 01:15:57.299", "speaker": "Alexander Vasserman", "text": "this form"}, {"source_name": "lecture3", "index": 862, "time": "01:15:57.570 --> 01:15:59.230", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture3", "index": 863, "time": "01:15:59.850 --> 01:16:00.919", "speaker": "Alexander Vasserman", "text": "you know, just"}, {"source_name": "lecture3", "index": 864, "time": "01:16:01.020 --> 01:16:06.170", "speaker": "Alexander Vasserman", "text": "relied on the position of argument function"}, {"source_name": "lecture3", "index": 865, "time": "01:16:10.340 --> 01:16:11.730", "speaker": "Alexander Vasserman", "text": "in particular."}, {"source_name": "lecture3", "index": 866, "time": "01:16:12.640 --> 01:16:13.420", "speaker": "Alexander Vasserman", "text": "I"}, {"source_name": "lecture3", "index": 867, "time": "01:16:14.220 --> 01:16:17.790", "speaker": "Alexander Vasserman", "text": "maybe in in this case or doesn't"}, {"source_name": "lecture3", "index": 868, "time": "01:16:18.060 --> 01:16:20.550", "speaker": "Alexander Vasserman", "text": "make too much sense. But"}, {"source_name": "lecture3", "index": 869, "time": "01:16:20.820 --> 01:16:24.280", "speaker": "Alexander Vasserman", "text": "if I don't remember the order of arguments"}, {"source_name": "lecture3", "index": 870, "time": "01:16:24.560 --> 01:16:27.109", "speaker": "Alexander Vasserman", "text": "and let's say I"}, {"source_name": "lecture3", "index": 871, "time": "01:16:30.600 --> 01:16:31.930", "speaker": "Alexander Vasserman", "text": "put it this way."}, {"source_name": "lecture3", "index": 872, "time": "01:16:33.880 --> 01:16:39.470", "speaker": "Alexander Vasserman", "text": "that's okay. It's exactly the same object, or in case of a function, it would"}, {"source_name": "lecture3", "index": 873, "time": "01:16:39.490 --> 01:16:42.289", "speaker": "Alexander Vasserman", "text": "cool the function exactly the same way"}, {"source_name": "lecture3", "index": 874, "time": "01:16:42.720 --> 01:16:44.940", "speaker": "Alexander Vasserman", "text": "so that's another"}, {"source_name": "lecture3", "index": 875, "time": "01:16:44.980 --> 01:16:47.129", "speaker": "Alexander Vasserman", "text": "thing that's very convenient."}, {"source_name": "lecture3", "index": 876, "time": "01:16:48.460 --> 01:16:49.250", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 877, "time": "01:16:49.480 --> 01:16:52.200", "speaker": "Alexander Vasserman", "text": "actually explicitly stating the arguments."}, {"source_name": "lecture3", "index": 878, "time": "01:16:57.020 --> 01:16:57.920", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture3", "index": 879, "time": "01:16:58.530 --> 01:16:59.740", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 880, "time": "01:16:59.840 --> 01:17:01.109", "speaker": "Alexander Vasserman", "text": "So here"}, {"source_name": "lecture3", "index": 881, "time": "01:17:01.140 --> 01:17:02.450", "speaker": "Alexander Vasserman", "text": "the Paul"}, {"source_name": "lecture3", "index": 882, "time": "01:17:02.720 --> 01:17:03.950", "speaker": "Alexander Vasserman", "text": "introduced."}, {"source_name": "lecture3", "index": 883, "time": "01:17:04.510 --> 01:17:05.410", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 884, "time": "01:17:05.840 --> 01:17:06.940", "speaker": "Alexander Vasserman", "text": "several"}, {"source_name": "lecture3", "index": 885, "time": "01:17:07.700 --> 01:17:10.530", "speaker": "Alexander Vasserman", "text": "ways to introduce the time."}, {"source_name": "lecture3", "index": 886, "time": "01:17:10.900 --> 01:17:17.780", "speaker": "Alexander Vasserman", "text": "certainly, any time you defining a class. It's a pipe, right? So so span is a type"}, {"source_name": "lecture3", "index": 887, "time": "01:17:17.820 --> 01:17:18.679", "speaker": "Alexander Vasserman", "text": "here."}, {"source_name": "lecture3", "index": 888, "time": "01:17:18.720 --> 01:17:19.540", "speaker": "Alexander Vasserman", "text": "right"}, {"source_name": "lecture3", "index": 889, "time": "01:17:20.330 --> 01:17:23.230", "speaker": "Alexander Vasserman", "text": "named Tuple is also a"}, {"source_name": "lecture3", "index": 890, "time": "01:17:23.580 --> 01:17:28.520", "speaker": "Alexander Vasserman", "text": "type that's all. Mostly used to just create other types like this."}, {"source_name": "lecture3", "index": 891, "time": "01:17:28.970 --> 01:17:31.729", "speaker": "Alexander Vasserman", "text": "but also maybe so. Some are"}, {"source_name": "lecture3", "index": 892, "time": "01:17:31.760 --> 01:17:35.360", "speaker": "Alexander Vasserman", "text": "annotations, the type of annotations inside of the"}, {"source_name": "lecture3", "index": 893, "time": "01:17:39.050 --> 01:17:41.019", "speaker": "Alexander Vasserman", "text": "So that's all"}, {"source_name": "lecture3", "index": 894, "time": "01:17:43.240 --> 01:17:44.779", "speaker": "Alexander Vasserman", "text": "he. Oh."}, {"source_name": "lecture3", "index": 895, "time": "01:17:46.570 --> 01:17:49.990", "speaker": "Alexander Vasserman", "text": "in the introductions to type allocations for you."}, {"source_name": "lecture3", "index": 896, "time": "01:17:52.890 --> 01:17:55.070", "speaker": "Alexander Vasserman", "text": "While most of the time."}, {"source_name": "lecture3", "index": 897, "time": "01:17:55.800 --> 01:17:56.719", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 898, "time": "01:17:57.140 --> 01:17:58.130", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture3", "index": 899, "time": "01:17:58.640 --> 01:18:00.160", "speaker": "Alexander Vasserman", "text": "named topples"}, {"source_name": "lecture3", "index": 900, "time": "01:18:00.470 --> 01:18:03.160", "speaker": "Alexander Vasserman", "text": "are just very simple"}, {"source_name": "lecture3", "index": 901, "time": "01:18:03.230 --> 01:18:07.460", "speaker": "Alexander Vasserman", "text": "types, but sometimes it makes sense to"}, {"source_name": "lecture3", "index": 902, "time": "01:18:07.770 --> 01:18:09.650", "speaker": "Alexander Vasserman", "text": "also include methods"}, {"source_name": "lecture3", "index": 903, "time": "01:18:09.790 --> 01:18:13.199", "speaker": "Alexander Vasserman", "text": "so he can define and methods inside of the class."}, {"source_name": "lecture3", "index": 904, "time": "01:18:13.220 --> 01:18:15.090", "speaker": "Alexander Vasserman", "text": "So, for example, get"}, {"source_name": "lecture3", "index": 905, "time": "01:18:18.350 --> 01:18:19.540", "speaker": "Alexander Vasserman", "text": "upstream."}, {"source_name": "lecture3", "index": 906, "time": "01:18:20.730 --> 01:18:23.069", "speaker": "Alexander Vasserman", "text": "and just"}, {"source_name": "lecture3", "index": 907, "time": "01:18:23.120 --> 01:18:30.389", "speaker": "Alexander Vasserman", "text": "a reminder when the defining methods inside of a class in Python. There is this argument, self."}, {"source_name": "lecture3", "index": 908, "time": "01:18:30.640 --> 01:18:33.050", "speaker": "Alexander Vasserman", "text": "which is how we can refer"}, {"source_name": "lecture3", "index": 909, "time": "01:18:33.140 --> 01:18:35.990", "speaker": "Alexander Vasserman", "text": "to any members of this"}, {"source_name": "lecture3", "index": 910, "time": "01:18:36.150 --> 01:18:37.819", "speaker": "Alexander Vasserman", "text": "in some of the class."}, {"source_name": "lecture3", "index": 911, "time": "01:18:38.230 --> 01:18:39.330", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 912, "time": "01:18:39.460 --> 01:18:40.460", "speaker": "Alexander Vasserman", "text": "I can"}, {"source_name": "lecture3", "index": 913, "time": "01:18:40.740 --> 01:18:41.799", "speaker": "Alexander Vasserman", "text": "you turn"}, {"source_name": "lecture3", "index": 914, "time": "01:18:50.200 --> 01:18:52.990", "speaker": "Alexander Vasserman", "text": "So actually, before I do that, let me"}, {"source_name": "lecture3", "index": 915, "time": "01:18:53.250 --> 01:18:54.070", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 916, "time": "01:18:54.170 --> 01:18:55.189", "speaker": "Alexander Vasserman", "text": "saying that."}, {"source_name": "lecture3", "index": 917, "time": "01:18:59.660 --> 01:19:03.089", "speaker": "Alexander Vasserman", "text": "basically the idea of the span"}, {"source_name": "lecture3", "index": 918, "time": "01:19:04.520 --> 01:19:05.580", "speaker": "Alexander Vasserman", "text": "he's"}, {"source_name": "lecture3", "index": 919, "time": "01:19:05.700 --> 01:19:08.789", "speaker": "Alexander Vasserman", "text": "basically representation of a upstream"}, {"source_name": "lecture3", "index": 920, "time": "01:19:08.840 --> 01:19:14.240", "speaker": "Alexander Vasserman", "text": "using the positions right? So we are. We are just saying, there is this"}, {"source_name": "lecture3", "index": 921, "time": "01:19:14.280 --> 01:19:16.449", "speaker": "Alexander Vasserman", "text": "share the text stream."}, {"source_name": "lecture3", "index": 922, "time": "01:19:17.200 --> 01:19:19.039", "speaker": "Alexander Vasserman", "text": "and they want to"}, {"source_name": "lecture3", "index": 923, "time": "01:19:19.280 --> 01:19:29.490", "speaker": "Alexander Vasserman", "text": "indicate positions. And as so as you want to say, what is the start position of this subseting and position of substrate inside text?"}, {"source_name": "lecture3", "index": 924, "time": "01:19:29.670 --> 01:19:32.230", "speaker": "Alexander Vasserman", "text": "Right? So that's kind of the"}, {"source_name": "lecture3", "index": 925, "time": "01:19:32.250 --> 01:19:35.119", "speaker": "Alexander Vasserman", "text": "idea for even creating this class."}, {"source_name": "lecture3", "index": 926, "time": "01:19:35.600 --> 01:19:39.740", "speaker": "Alexander Vasserman", "text": "and we can have a little helper function that says"}, {"source_name": "lecture3", "index": 927, "time": "01:19:57.270 --> 01:19:58.240", "speaker": "Alexander Vasserman", "text": "so."}, {"source_name": "lecture3", "index": 928, "time": "01:20:00.490 --> 01:20:01.450", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 929, "time": "01:20:01.900 --> 01:20:03.200", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture3", "index": 930, "time": "01:20:07.800 --> 01:20:12.830", "speaker": "Alexander Vasserman", "text": "if I define a or the the span like this, and then"}, {"source_name": "lecture3", "index": 931, "time": "01:20:13.390 --> 01:20:14.349", "speaker": "Alexander Vasserman", "text": "have"}, {"source_name": "lecture3", "index": 932, "time": "01:20:15.420 --> 01:20:16.610", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture3", "index": 933, "time": "01:20:19.800 --> 01:20:21.110", "speaker": "Alexander Vasserman", "text": "this"}, {"source_name": "lecture3", "index": 934, "time": "01:20:26.500 --> 01:20:28.510", "speaker": "Alexander Vasserman", "text": "let's say, paid the spent"}, {"source_name": "lecture3", "index": 935, "time": "01:20:32.140 --> 01:20:33.080", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture3", "index": 936, "time": "01:20:33.210 --> 01:20:34.090", "speaker": "Alexander Vasserman", "text": "it's"}, {"source_name": "lecture3", "index": 937, "time": "01:20:34.540 --> 01:20:35.519", "speaker": "Alexander Vasserman", "text": "still"}, {"source_name": "lecture3", "index": 938, "time": "01:20:36.150 --> 01:20:39.790", "speaker": "Alexander Vasserman", "text": "the same as before. Obviously. But now I can."}, {"source_name": "lecture3", "index": 939, "time": "01:20:40.450 --> 01:20:41.780", "speaker": "Alexander Vasserman", "text": "Oh, let's see."}, {"source_name": "lecture3", "index": 940, "time": "01:20:42.490 --> 01:20:43.869", "speaker": "Alexander Vasserman", "text": "Get upstream."}, {"source_name": "lecture3", "index": 941, "time": "01:20:44.770 --> 01:20:46.340", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture3", "index": 942, "time": "01:20:46.620 --> 01:20:50.089", "speaker": "Alexander Vasserman", "text": "that gives me the"}, {"source_name": "lecture3", "index": 943, "time": "01:20:53.920 --> 01:20:56.410", "speaker": "Alexander Vasserman", "text": "any questions"}, {"source_name": "lecture3", "index": 944, "time": "01:20:56.450 --> 01:20:57.809", "speaker": "Alexander Vasserman", "text": "above this."}, {"source_name": "lecture3", "index": 945, "time": "01:21:01.720 --> 01:21:03.639", "speaker": "Alexander Vasserman", "text": "So we are kind of."}, {"source_name": "lecture3", "index": 946, "time": "01:21:03.930 --> 01:21:05.070", "speaker": "Alexander Vasserman", "text": "if you"}, {"source_name": "lecture3", "index": 947, "time": "01:21:06.340 --> 01:21:07.480", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture3", "index": 948, "time": "01:21:08.100 --> 01:21:08.950", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 949, "time": "01:21:09.080 --> 01:21:13.659", "speaker": "Alexander Vasserman", "text": "a little bit about classes and defining functions inside of classes."}, {"source_name": "lecture3", "index": 950, "time": "01:21:16.490 --> 01:21:21.370", "speaker": "Alexander Vasserman", "text": "but also just kind of continue introducing this kind of a"}, {"source_name": "lecture3", "index": 951, "time": "01:21:21.650 --> 01:21:22.760", "speaker": "Alexander Vasserman", "text": "oh span"}, {"source_name": "lecture3", "index": 952, "time": "01:21:23.150 --> 01:21:23.960", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 953, "time": "01:21:24.170 --> 01:21:25.099", "speaker": "Alexander Vasserman", "text": "idea"}, {"source_name": "lecture3", "index": 954, "time": "01:21:30.390 --> 01:21:31.580", "speaker": "Alexander Vasserman", "text": "any questions."}, {"source_name": "lecture3", "index": 955, "time": "01:21:42.110 --> 01:21:43.260", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 956, "time": "01:21:49.120 --> 01:21:50.219", "speaker": "Alexander Vasserman", "text": "let's"}, {"source_name": "lecture3", "index": 957, "time": "01:21:56.400 --> 01:21:59.619", "speaker": "Alexander Vasserman", "text": "So maybe let's try"}, {"source_name": "lecture3", "index": 958, "time": "01:21:59.880 --> 01:22:01.210", "speaker": "Alexander Vasserman", "text": "to get you"}, {"source_name": "lecture3", "index": 959, "time": "01:22:01.400 --> 01:22:03.470", "speaker": "Alexander Vasserman", "text": "to or write some code"}, {"source_name": "lecture3", "index": 960, "time": "01:22:04.360 --> 01:22:07.040", "speaker": "Alexander Vasserman", "text": "and so"}, {"source_name": "lecture3", "index": 961, "time": "01:22:11.150 --> 01:22:12.739", "speaker": "Alexander Vasserman", "text": "What I want you"}, {"source_name": "lecture3", "index": 962, "time": "01:22:13.550 --> 01:22:15.090", "speaker": "Alexander Vasserman", "text": "do is"}, {"source_name": "lecture3", "index": 963, "time": "01:22:16.210 --> 01:22:18.100", "speaker": "Alexander Vasserman", "text": "right. The function that's"}, {"source_name": "lecture3", "index": 964, "time": "01:22:18.300 --> 01:22:22.980", "speaker": "Alexander Vasserman", "text": "given text stream outputs, a list of spans"}, {"source_name": "lecture3", "index": 965, "time": "01:22:23.200 --> 01:22:23.980", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture3", "index": 966, "time": "01:22:27.210 --> 01:22:29.259", "speaker": "Alexander Vasserman", "text": "actually well, maybe"}, {"source_name": "lecture3", "index": 967, "time": "01:22:32.570 --> 01:22:37.380", "speaker": "Alexander Vasserman", "text": "yeah, actually, let me let me write this one, and i'll i'll give you next."}, {"source_name": "lecture3", "index": 968, "time": "01:22:37.740 --> 01:22:40.180", "speaker": "Alexander Vasserman", "text": "so how would we do this?"}, {"source_name": "lecture3", "index": 969, "time": "01:22:40.520 --> 01:22:41.340", "speaker": "Alexander Vasserman", "text": "Right?"}, {"source_name": "lecture3", "index": 970, "time": "01:22:42.460 --> 01:22:43.839", "speaker": "Alexander Vasserman", "text": "So let's say."}, {"source_name": "lecture3", "index": 971, "time": "01:22:44.200 --> 01:22:46.590", "speaker": "Alexander Vasserman", "text": "define this function"}, {"source_name": "lecture3", "index": 972, "time": "01:22:47.960 --> 01:22:48.740", "speaker": "Alexander Vasserman", "text": "yet."}, {"source_name": "lecture3", "index": 973, "time": "01:22:49.280 --> 01:22:50.090", "speaker": "Alexander Vasserman", "text": "Lord."}, {"source_name": "lecture3", "index": 974, "time": "01:22:51.140 --> 01:22:52.260", "speaker": "Alexander Vasserman", "text": "so it's."}, {"source_name": "lecture3", "index": 975, "time": "01:22:52.500 --> 01:22:53.519", "speaker": "Alexander Vasserman", "text": "It's"}, {"source_name": "lecture3", "index": 976, "time": "01:22:55.970 --> 01:22:59.710", "speaker": "Alexander Vasserman", "text": "gives me starts with the text."}, {"source_name": "lecture3", "index": 977, "time": "01:23:00.000 --> 01:23:02.969", "speaker": "Alexander Vasserman", "text": "or you know the input is the checks."}, {"source_name": "lecture3", "index": 978, "time": "01:23:04.120 --> 01:23:05.200", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture3", "index": 979, "time": "01:23:05.620 --> 01:23:08.069", "speaker": "Alexander Vasserman", "text": "we are going to have. A"}, {"source_name": "lecture3", "index": 980, "time": "01:23:08.280 --> 01:23:09.080", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 981, "time": "01:23:09.520 --> 01:23:13.150", "speaker": "Alexander Vasserman", "text": "and now put this again right? So"}, {"source_name": "lecture3", "index": 982, "time": "01:23:13.650 --> 01:23:14.530", "speaker": "Alexander Vasserman", "text": "that's"}, {"source_name": "lecture3", "index": 983, "time": "01:23:14.680 --> 01:23:17.469", "speaker": "Alexander Vasserman", "text": "say it's it's in a to list."}, {"source_name": "lecture3", "index": 984, "time": "01:23:19.710 --> 01:23:20.670", "speaker": "Alexander Vasserman", "text": "we all"}, {"source_name": "lecture3", "index": 985, "time": "01:23:20.990 --> 01:23:21.910", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 986, "time": "01:23:22.790 --> 01:23:23.620", "speaker": "Alexander Vasserman", "text": "have"}, {"source_name": "lecture3", "index": 987, "time": "01:23:24.210 --> 01:23:25.240", "speaker": "Alexander Vasserman", "text": "let's see."}, {"source_name": "lecture3", "index": 988, "time": "01:23:27.450 --> 01:23:29.000", "speaker": "Alexander Vasserman", "text": "Start position."}, {"source_name": "lecture3", "index": 989, "time": "01:23:30.590 --> 01:23:31.900", "speaker": "Alexander Vasserman", "text": "Well, 0,"}, {"source_name": "lecture3", "index": 990, "time": "01:23:34.170 --> 01:23:34.910", "speaker": "Alexander Vasserman", "text": "and then"}, {"source_name": "lecture3", "index": 991, "time": "01:23:39.540 --> 01:23:45.320", "speaker": "Alexander Vasserman", "text": "and then we're going to have a similar look like before to"}, {"source_name": "lecture3", "index": 992, "time": "01:24:05.480 --> 01:24:06.360", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture3", "index": 993, "time": "01:24:07.080 --> 01:24:08.380", "speaker": "Alexander Vasserman", "text": "and the"}, {"source_name": "lecture3", "index": 994, "time": "01:24:16.770 --> 01:24:17.800", "speaker": "Alexander Vasserman", "text": "since"}, {"source_name": "lecture3", "index": 995, "time": "01:24:21.770 --> 01:24:23.349", "speaker": "Alexander Vasserman", "text": "we want to."}, {"source_name": "lecture3", "index": 996, "time": "01:24:30.310 --> 01:24:35.270", "speaker": "Alexander Vasserman", "text": "so we want to create an at this right? So"}, {"source_name": "lecture3", "index": 997, "time": "01:24:35.360 --> 01:24:37.210", "speaker": "Alexander Vasserman", "text": "here we will say."}, {"source_name": "lecture3", "index": 998, "time": "01:24:37.300 --> 01:24:39.400", "speaker": "Alexander Vasserman", "text": "spans"}, {"source_name": "lecture3", "index": 999, "time": "01:24:40.080 --> 01:24:41.099", "speaker": "Alexander Vasserman", "text": "a pen."}, {"source_name": "lecture3", "index": 1000, "time": "01:24:41.350 --> 01:24:45.480", "speaker": "Alexander Vasserman", "text": "but instead of index, like we you had before now, here"}, {"source_name": "lecture3", "index": 1001, "time": "01:24:45.560 --> 01:24:48.070", "speaker": "Alexander Vasserman", "text": "going to be."}, {"source_name": "lecture3", "index": 1002, "time": "01:24:48.230 --> 01:24:49.110", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 1003, "time": "01:24:49.650 --> 01:24:50.429", "speaker": "Alexander Vasserman", "text": "a"}, {"source_name": "lecture3", "index": 1004, "time": "01:24:50.790 --> 01:24:52.529", "speaker": "Alexander Vasserman", "text": "span is the"}, {"source_name": "lecture3", "index": 1005, "time": "01:24:54.610 --> 01:24:56.120", "speaker": "Alexander Vasserman", "text": "start position"}, {"source_name": "lecture3", "index": 1006, "time": "01:24:59.490 --> 01:25:01.099", "speaker": "Alexander Vasserman", "text": "that position."}, {"source_name": "lecture3", "index": 1007, "time": "01:25:01.390 --> 01:25:02.450", "speaker": "Alexander Vasserman", "text": "and and"}, {"source_name": "lecture3", "index": 1008, "time": "01:25:03.240 --> 01:25:05.940", "speaker": "Alexander Vasserman", "text": "our position is equal to"}, {"source_name": "lecture3", "index": 1009, "time": "01:25:06.020 --> 01:25:06.849", "speaker": "Alexander Vasserman", "text": "Hi."}, {"source_name": "lecture3", "index": 1010, "time": "01:25:07.760 --> 01:25:10.589", "speaker": "Alexander Vasserman", "text": "And then we also want to say that"}, {"source_name": "lecture3", "index": 1011, "time": "01:25:10.990 --> 01:25:11.900", "speaker": "Alexander Vasserman", "text": "start"}, {"source_name": "lecture3", "index": 1012, "time": "01:25:12.640 --> 01:25:13.730", "speaker": "Alexander Vasserman", "text": "position."}, {"source_name": "lecture3", "index": 1013, "time": "01:25:14.150 --> 01:25:16.039", "speaker": "Alexander Vasserman", "text": "It's the"}, {"source_name": "lecture3", "index": 1014, "time": "01:25:16.650 --> 01:25:18.219", "speaker": "Alexander Vasserman", "text": "plus one"}, {"source_name": "lecture3", "index": 1015, "time": "01:25:21.980 --> 01:25:23.410", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture3", "index": 1016, "time": "01:25:25.270 --> 01:25:26.349", "speaker": "Alexander Vasserman", "text": "no"}, {"source_name": "lecture3", "index": 1017, "time": "01:25:26.990 --> 01:25:28.889", "speaker": "Alexander Vasserman", "text": "also, if"}, {"source_name": "lecture3", "index": 1018, "time": "01:25:37.130 --> 01:25:38.010", "speaker": "Alexander Vasserman", "text": "yes."}, {"source_name": "lecture3", "index": 1019, "time": "01:26:02.670 --> 01:26:03.630", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 1020, "time": "01:26:04.250 --> 01:26:06.300", "speaker": "Alexander Vasserman", "text": "basically for the last word"}, {"source_name": "lecture3", "index": 1021, "time": "01:26:06.500 --> 01:26:07.690", "speaker": "Alexander Vasserman", "text": "in the"}, {"source_name": "lecture3", "index": 1022, "time": "01:26:08.900 --> 01:26:11.580", "speaker": "Alexander Vasserman", "text": "in our text, we will not have this"}, {"source_name": "lecture3", "index": 1023, "time": "01:26:11.670 --> 01:26:14.579", "speaker": "Alexander Vasserman", "text": "potentially not have the space, and then"}, {"source_name": "lecture3", "index": 1024, "time": "01:26:14.610 --> 01:26:16.469", "speaker": "Alexander Vasserman", "text": "so we're just"}, {"source_name": "lecture3", "index": 1025, "time": "01:26:16.600 --> 01:26:18.600", "speaker": "Alexander Vasserman", "text": "are going to add it"}, {"source_name": "lecture3", "index": 1026, "time": "01:26:18.740 --> 01:26:20.340", "speaker": "Alexander Vasserman", "text": "like this"}, {"source_name": "lecture3", "index": 1027, "time": "01:26:20.660 --> 01:26:22.969", "speaker": "Alexander Vasserman", "text": "this additional, and then"}, {"source_name": "lecture3", "index": 1028, "time": "01:26:23.260 --> 01:26:24.400", "speaker": "Alexander Vasserman", "text": "you turn"}, {"source_name": "lecture3", "index": 1029, "time": "01:26:25.690 --> 01:26:26.760", "speaker": "Alexander Vasserman", "text": "spends"}, {"source_name": "lecture3", "index": 1030, "time": "01:26:29.630 --> 01:26:30.389", "speaker": "Alexander Vasserman", "text": "alright."}, {"source_name": "lecture3", "index": 1031, "time": "01:26:33.630 --> 01:26:36.570", "speaker": "Alexander Vasserman", "text": "so you, you would call it"}, {"source_name": "lecture3", "index": 1032, "time": "01:26:37.280 --> 01:26:39.050", "speaker": "Alexander Vasserman", "text": "John."}, {"source_name": "lecture3", "index": 1033, "time": "01:26:39.210 --> 01:26:40.090", "speaker": "Alexander Vasserman", "text": "Same"}, {"source_name": "lecture3", "index": 1034, "time": "01:26:41.200 --> 01:26:41.940", "speaker": "Alexander Vasserman", "text": "Yeah."}, {"source_name": "lecture3", "index": 1035, "time": "01:26:43.310 --> 01:26:44.760", "speaker": "Alexander Vasserman", "text": "for expense"}, {"source_name": "lecture3", "index": 1036, "time": "01:26:45.910 --> 01:26:46.800", "speaker": "Alexander Vasserman", "text": "text."}, {"source_name": "lecture3", "index": 1037, "time": "01:26:47.360 --> 01:26:48.130", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture3", "index": 1038, "time": "01:26:48.990 --> 01:26:49.880", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture3", "index": 1039, "time": "01:26:51.000 --> 01:26:52.710", "speaker": "Alexander Vasserman", "text": "here we'll have"}, {"source_name": "lecture3", "index": 1040, "time": "01:26:52.810 --> 01:26:55.500", "speaker": "Alexander Vasserman", "text": "the spans for each"}, {"source_name": "lecture3", "index": 1041, "time": "01:26:55.670 --> 01:26:56.530", "speaker": "Alexander Vasserman", "text": "or"}, {"source_name": "lecture3", "index": 1042, "time": "01:27:01.550 --> 01:27:02.639", "speaker": "Alexander Vasserman", "text": "So."}, {"source_name": "lecture3", "index": 1043, "time": "01:27:07.610 --> 01:27:09.910", "speaker": "Alexander Vasserman", "text": "Does this make sense?"}, {"source_name": "lecture3", "index": 1044, "time": "01:27:11.380 --> 01:27:12.960", "speaker": "Alexander Vasserman", "text": "Any questions"}, {"source_name": "lecture3", "index": 1045, "time": "01:27:13.140 --> 01:27:15.239", "speaker": "Alexander Vasserman", "text": "about this function."}, {"source_name": "lecture3", "index": 1046, "time": "01:27:22.560 --> 01:27:24.019", "speaker": "Alexander Vasserman", "text": "well."}, {"source_name": "lecture3", "index": 1047, "time": "01:27:24.560 --> 01:27:29.109", "speaker": "Rafal \"Ralph\" Jasielec", "text": "are you right? Are you writing that within the within the class or outside of the class?"}, {"source_name": "lecture3", "index": 1048, "time": "01:27:29.260 --> 01:27:31.610", "speaker": "Alexander Vasserman", "text": "this is outside the class."}, {"source_name": "lecture3", "index": 1049, "time": "01:27:34.320 --> 01:27:36.030", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 1050, "time": "01:27:36.200 --> 01:27:39.929", "speaker": "Alexander Vasserman", "text": "in general name titles"}, {"source_name": "lecture3", "index": 1051, "time": "01:27:40.020 --> 01:27:43.919", "speaker": "Alexander Vasserman", "text": "you want to keep them minimal. The idea is that it's"}, {"source_name": "lecture3", "index": 1052, "time": "01:27:44.030 --> 01:27:48.300", "speaker": "Alexander Vasserman", "text": "essentially take the only classes. you know a"}, {"source_name": "lecture3", "index": 1053, "time": "01:27:48.340 --> 01:27:49.519", "speaker": "Alexander Vasserman", "text": "small"}, {"source_name": "lecture3", "index": 1054, "time": "01:27:49.570 --> 01:27:55.470", "speaker": "Alexander Vasserman", "text": "thing like what it what I did kind of small utility function like this is fine."}, {"source_name": "lecture3", "index": 1055, "time": "01:27:55.510 --> 01:27:58.979", "speaker": "Alexander Vasserman", "text": "but in general we want to keep it fairly simple."}, {"source_name": "lecture3", "index": 1056, "time": "01:28:00.720 --> 01:28:03.399", "speaker": "Alexander Vasserman", "text": "also in this kind of notebook format."}, {"source_name": "lecture3", "index": 1057, "time": "01:28:03.520 --> 01:28:09.649", "speaker": "Alexander Vasserman", "text": "basically the I have to finish writing the entire class inside of a single"}, {"source_name": "lecture3", "index": 1058, "time": "01:28:10.070 --> 01:28:10.880", "speaker": "Alexander Vasserman", "text": "yeah"}, {"source_name": "lecture3", "index": 1059, "time": "01:28:11.240 --> 01:28:12.619", "speaker": "Alexander Vasserman", "text": "code block."}, {"source_name": "lecture3", "index": 1060, "time": "01:28:12.700 --> 01:28:13.790", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 1061, "time": "01:28:13.900 --> 01:28:16.100", "speaker": "Alexander Vasserman", "text": "basically the new code block."}, {"source_name": "lecture3", "index": 1062, "time": "01:28:16.290 --> 01:28:17.410", "speaker": "Alexander Vasserman", "text": "I would"}, {"source_name": "lecture3", "index": 1063, "time": "01:28:18.400 --> 01:28:20.839", "speaker": "Alexander Vasserman", "text": "I I I can add"}, {"source_name": "lecture3", "index": 1064, "time": "01:28:20.950 --> 01:28:25.299", "speaker": "Alexander Vasserman", "text": "more pieces through the class that, though already been defined"}, {"source_name": "lecture3", "index": 1065, "time": "01:28:25.670 --> 01:28:26.779", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture3", "index": 1066, "time": "01:28:27.180 --> 01:28:29.610", "speaker": "Alexander Vasserman", "text": "which is not"}, {"source_name": "lecture3", "index": 1067, "time": "01:28:32.320 --> 01:28:34.300", "speaker": "Alexander Vasserman", "text": "any other questions."}, {"source_name": "lecture3", "index": 1068, "time": "01:28:42.070 --> 01:28:43.120", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 1069, "time": "01:28:46.290 --> 01:28:50.140", "speaker": "Alexander Vasserman", "text": "yeah. So this is pretty good place to"}, {"source_name": "lecture3", "index": 1070, "time": "01:28:50.900 --> 01:28:51.740", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 1071, "time": "01:28:52.590 --> 01:28:54.519", "speaker": "Alexander Vasserman", "text": "to stop for now."}, {"source_name": "lecture3", "index": 1072, "time": "01:28:57.940 --> 01:28:59.620", "speaker": "Alexander Vasserman", "text": "basically kind of"}, {"source_name": "lecture3", "index": 1073, "time": "01:29:00.220 --> 01:29:01.380", "speaker": "Alexander Vasserman", "text": "we"}, {"source_name": "lecture3", "index": 1074, "time": "01:29:01.990 --> 01:29:09.060", "speaker": "Alexander Vasserman", "text": "started doing a little bit of text processing and text processing will be a major part of this course"}, {"source_name": "lecture3", "index": 1075, "time": "01:29:09.120 --> 01:29:14.309", "speaker": "Alexander Vasserman", "text": "and but as we're kind of doing this initial"}, {"source_name": "lecture3", "index": 1076, "time": "01:29:15.730 --> 01:29:27.039", "speaker": "Alexander Vasserman", "text": "text processing. I'm. Trying to introduce, like some new concepts, or or or review the concepts from the python, so that when we get"}, {"source_name": "lecture3", "index": 1077, "time": "01:29:27.250 --> 01:29:29.920", "speaker": "Alexander Vasserman", "text": "start getting to more interesting things."}, {"source_name": "lecture3", "index": 1078, "time": "01:29:29.990 --> 01:29:32.439", "speaker": "Alexander Vasserman", "text": "We don't have to spend as much time"}, {"source_name": "lecture3", "index": 1079, "time": "01:29:32.480 --> 01:29:34.210", "speaker": "Alexander Vasserman", "text": "on python"}, {"source_name": "lecture3", "index": 1080, "time": "01:29:34.460 --> 01:29:36.559", "speaker": "Alexander Vasserman", "text": "and kind of fall"}, {"source_name": "lecture3", "index": 1081, "time": "01:29:38.090 --> 01:29:39.550", "speaker": "Alexander Vasserman", "text": "get more."}, {"source_name": "lecture3", "index": 1082, "time": "01:29:39.680 --> 01:29:42.009", "speaker": "Alexander Vasserman", "text": "spend more time on understanding"}, {"source_name": "lecture3", "index": 1083, "time": "01:29:42.290 --> 01:29:48.640", "speaker": "Alexander Vasserman", "text": "concepts and understanding the code, maybe this like a little more of of background."}, {"source_name": "lecture3", "index": 1084, "time": "01:29:53.930 --> 01:29:55.190", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 1085, "time": "01:29:58.150 --> 01:29:59.650", "speaker": "Alexander Vasserman", "text": "if"}, {"source_name": "lecture3", "index": 1086, "time": "01:30:00.930 --> 01:30:04.820", "speaker": "Alexander Vasserman", "text": "you don't have any questions on this."}, {"source_name": "lecture3", "index": 1087, "time": "01:30:06.480 --> 01:30:07.490", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture3", "index": 1088, "time": "01:30:09.250 --> 01:30:10.190", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture3", "index": 1089, "time": "01:30:10.450 --> 01:30:13.390", "speaker": "Alexander Vasserman", "text": "last thing that I want to do"}, {"source_name": "lecture3", "index": 1090, "time": "01:30:13.690 --> 01:30:16.530", "speaker": "Alexander Vasserman", "text": "is to give you some homework."}, {"source_name": "lecture3", "index": 1091, "time": "01:31:22.010 --> 01:31:22.969", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 1092, "time": "01:31:23.240 --> 01:31:27.260", "speaker": "Alexander Vasserman", "text": "for now it's just put it in a"}, {"source_name": "lecture3", "index": 1093, "time": "01:31:29.940 --> 01:31:31.150", "speaker": "Alexander Vasserman", "text": "in G 12"}, {"source_name": "lecture3", "index": 1094, "time": "01:31:31.700 --> 01:31:33.170", "speaker": "Alexander Vasserman", "text": "but I"}, {"source_name": "lecture3", "index": 1095, "time": "01:31:33.370 --> 01:31:36.190", "speaker": "Alexander Vasserman", "text": "wanted to kind of go through"}, {"source_name": "lecture3", "index": 1096, "time": "01:31:36.320 --> 01:31:37.660", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture3", "index": 1097, "time": "01:31:38.110 --> 01:31:42.230", "speaker": "Alexander Vasserman", "text": "for more with the assignment. Is you right now? So that."}, {"source_name": "lecture3", "index": 1098, "time": "01:31:44.840 --> 01:31:48.069", "speaker": "Alexander Vasserman", "text": "do you Have You have a chance to ask"}, {"source_name": "lecture3", "index": 1099, "time": "01:31:49.130 --> 01:31:50.200", "speaker": "Alexander Vasserman", "text": "questions."}, {"source_name": "lecture3", "index": 1100, "time": "01:31:52.090 --> 01:31:53.090", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 1101, "time": "01:31:53.850 --> 01:31:58.480", "speaker": "Alexander Vasserman", "text": "the homework is going to be a combination"}, {"source_name": "lecture3", "index": 1102, "time": "01:31:58.620 --> 01:31:59.469", "speaker": "Alexander Vasserman", "text": "of"}, {"source_name": "lecture3", "index": 1103, "time": "01:31:59.940 --> 01:32:00.920", "speaker": "Alexander Vasserman", "text": "or"}, {"source_name": "lecture3", "index": 1104, "time": "01:32:02.180 --> 01:32:09.109", "speaker": "Alexander Vasserman", "text": "coding, and some more just written answers. So you might need to."}, {"source_name": "lecture3", "index": 1105, "time": "01:32:09.320 --> 01:32:13.229", "speaker": "Alexander Vasserman", "text": "Yeah, either submit 2 files or just, you know. Right"}, {"source_name": "lecture3", "index": 1106, "time": "01:32:14.390 --> 01:32:17.440", "speaker": "Alexander Vasserman", "text": "the the answers directly"}, {"source_name": "lecture3", "index": 1107, "time": "01:32:17.640 --> 01:32:19.480", "speaker": "Alexander Vasserman", "text": "but hopefully."}, {"source_name": "lecture3", "index": 1108, "time": "01:32:19.650 --> 01:32:23.170", "speaker": "Alexander Vasserman", "text": "that's you know how to do all of that. Well."}, {"source_name": "lecture3", "index": 1109, "time": "01:32:24.920 --> 01:32:26.260", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture3", "index": 1110, "time": "01:32:26.450 --> 01:32:32.269", "speaker": "Alexander Vasserman", "text": "the the first question that's not going to be created. but I want to kind of see"}, {"source_name": "lecture3", "index": 1111, "time": "01:32:32.320 --> 01:32:33.100", "speaker": "Alexander Vasserman", "text": "all right."}, {"source_name": "lecture3", "index": 1112, "time": "01:32:33.130 --> 01:32:33.790", "speaker": "Alexander Vasserman", "text": "like"}, {"source_name": "lecture3", "index": 1113, "time": "01:32:33.820 --> 01:32:41.409", "speaker": "Alexander Vasserman", "text": "in a get a little bit of introduction from you. basically your major. What the the"}, {"source_name": "lecture3", "index": 1114, "time": "01:32:41.430 --> 01:32:44.269", "speaker": "Alexander Vasserman", "text": "you're You're You're so of Mars or some of your"}, {"source_name": "lecture3", "index": 1115, "time": "01:32:44.330 --> 01:32:46.809", "speaker": "Alexander Vasserman", "text": "junior seniors."}, {"source_name": "lecture3", "index": 1116, "time": "01:32:47.830 --> 01:32:49.119", "speaker": "Alexander Vasserman", "text": "Of what's"}, {"source_name": "lecture3", "index": 1117, "time": "01:32:49.770 --> 01:32:53.819", "speaker": "Alexander Vasserman", "text": "your recording experience? Just give me like a sentence, or to kind of"}, {"source_name": "lecture3", "index": 1118, "time": "01:32:53.870 --> 01:32:55.500", "speaker": "Alexander Vasserman", "text": "in terms of"}, {"source_name": "lecture3", "index": 1119, "time": "01:32:55.600 --> 01:32:58.829", "speaker": "Alexander Vasserman", "text": "what the amount of quoting you've done before."}, {"source_name": "lecture3", "index": 1120, "time": "01:32:58.920 --> 01:33:01.799", "speaker": "Alexander Vasserman", "text": "And also what are you calling to get out of this class?"}, {"source_name": "lecture3", "index": 1121, "time": "01:33:02.270 --> 01:33:02.980", "speaker": "Alexander Vasserman", "text": "just"}, {"source_name": "lecture3", "index": 1122, "time": "01:33:03.070 --> 01:33:04.240", "speaker": "Alexander Vasserman", "text": "very quick"}, {"source_name": "lecture3", "index": 1123, "time": "01:33:04.310 --> 01:33:05.160", "speaker": "Alexander Vasserman", "text": "thing?"}, {"source_name": "lecture3", "index": 1124, "time": "01:33:06.660 --> 01:33:07.730", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 1125, "time": "01:33:09.350 --> 01:33:10.240", "speaker": "Alexander Vasserman", "text": "then."}, {"source_name": "lecture3", "index": 1126, "time": "01:33:10.630 --> 01:33:12.490", "speaker": "Alexander Vasserman", "text": "question one."}, {"source_name": "lecture3", "index": 1127, "time": "01:33:13.710 --> 01:33:15.910", "speaker": "Alexander Vasserman", "text": "Yeah. Any questions about question 0."}, {"source_name": "lecture3", "index": 1128, "time": "01:33:16.170 --> 01:33:18.189", "speaker": "Alexander Vasserman", "text": "Hopefully, that's fairly straightforward."}, {"source_name": "lecture3", "index": 1129, "time": "01:33:20.940 --> 01:33:23.700", "speaker": "Alexander Vasserman", "text": "question. One is"}, {"source_name": "lecture3", "index": 1130, "time": "01:33:24.090 --> 01:33:27.640", "speaker": "Alexander Vasserman", "text": "asking you about the differences between"}, {"source_name": "lecture3", "index": 1131, "time": "01:33:27.750 --> 01:33:37.850", "speaker": "Alexander Vasserman", "text": "records in the database versus documents and inside of a search engine and also like a date basis, like doing lookups in the"}, {"source_name": "lecture3", "index": 1132, "time": "01:33:37.980 --> 01:33:39.440", "speaker": "Alexander Vasserman", "text": "database"}, {"source_name": "lecture3", "index": 1133, "time": "01:33:39.620 --> 01:33:42.739", "speaker": "Alexander Vasserman", "text": "versus searching for a document"}, {"source_name": "lecture3", "index": 1134, "time": "01:33:42.820 --> 01:33:47.340", "speaker": "Alexander Vasserman", "text": "in search engine. So so that's something. If you talk about the"}, {"source_name": "lecture3", "index": 1135, "time": "01:33:47.520 --> 01:33:50.390", "speaker": "Alexander Vasserman", "text": "in the very first lecture."}, {"source_name": "lecture3", "index": 1136, "time": "01:33:53.020 --> 01:33:56.620", "speaker": "Alexander Vasserman", "text": "and the second part of this question"}, {"source_name": "lecture3", "index": 1137, "time": "01:33:56.660 --> 01:33:58.260", "speaker": "Alexander Vasserman", "text": "he's on"}, {"source_name": "lecture3", "index": 1138, "time": "01:34:00.020 --> 01:34:01.570", "speaker": "Alexander Vasserman", "text": "Oh, about"}, {"source_name": "lecture3", "index": 1139, "time": "01:34:02.440 --> 01:34:03.330", "speaker": "Alexander Vasserman", "text": "or"}, {"source_name": "lecture3", "index": 1140, "time": "01:34:03.520 --> 01:34:07.829", "speaker": "Alexander Vasserman", "text": "topical reference or relevance versus user relevance."}, {"source_name": "lecture3", "index": 1141, "time": "01:34:07.910 --> 01:34:10.380", "speaker": "Alexander Vasserman", "text": "So just kind of"}, {"source_name": "lecture3", "index": 1142, "time": "01:34:10.610 --> 01:34:18.529", "speaker": "Alexander Vasserman", "text": "I want to you to remember some of those concepts basically we"}, {"source_name": "lecture3", "index": 1143, "time": "01:34:21.690 --> 01:34:22.550", "speaker": "Alexander Vasserman", "text": "in"}, {"source_name": "lecture3", "index": 1144, "time": "01:34:22.730 --> 01:34:25.739", "speaker": "Alexander Vasserman", "text": "search engines, right? We talked about"}, {"source_name": "lecture3", "index": 1145, "time": "01:34:28.020 --> 01:34:28.900", "speaker": "Alexander Vasserman", "text": "kind of"}, {"source_name": "lecture3", "index": 1146, "time": "01:34:30.170 --> 01:34:38.660", "speaker": "Alexander Vasserman", "text": "that. One of the key issues is, how to we define relevance, and that, or relevance has essentially 2 components."}, {"source_name": "lecture3", "index": 1147, "time": "01:34:38.720 --> 01:34:40.780", "speaker": "Alexander Vasserman", "text": "one is based on 3"}, {"source_name": "lecture3", "index": 1148, "time": "01:34:41.060 --> 01:34:45.029", "speaker": "Alexander Vasserman", "text": "and one is not based on the greeting."}, {"source_name": "lecture3", "index": 1149, "time": "01:34:45.420 --> 01:34:55.300", "speaker": "Alexander Vasserman", "text": "so we'll talk more about this stuff a little bit more on next time on Thursday. but"}, {"source_name": "lecture3", "index": 1150, "time": "01:34:55.320 --> 01:34:57.839", "speaker": "Alexander Vasserman", "text": "we certainly discussed"}, {"source_name": "lecture3", "index": 1151, "time": "01:34:57.880 --> 01:34:59.380", "speaker": "Alexander Vasserman", "text": "this"}, {"source_name": "lecture3", "index": 1152, "time": "01:34:59.480 --> 01:35:01.600", "speaker": "Alexander Vasserman", "text": "as well in May."}, {"source_name": "lecture3", "index": 1153, "time": "01:35:01.780 --> 01:35:03.799", "speaker": "Alexander Vasserman", "text": "Oh, very first lecture."}, {"source_name": "lecture3", "index": 1154, "time": "01:35:05.080 --> 01:35:05.830", "speaker": "Alexander Vasserman", "text": "Hello!"}, {"source_name": "lecture3", "index": 1155, "time": "01:35:06.710 --> 01:35:09.050", "speaker": "Alexander Vasserman", "text": "Any questions about"}, {"source_name": "lecture3", "index": 1156, "time": "01:35:09.230 --> 01:35:10.429", "speaker": "Alexander Vasserman", "text": "question One"}, {"source_name": "lecture3", "index": 1157, "time": "01:35:14.180 --> 01:35:15.160", "speaker": "Alexander Vasserman", "text": "all right"}, {"source_name": "lecture3", "index": 1158, "time": "01:35:15.180 --> 01:35:17.219", "speaker": "Alexander Vasserman", "text": "of 3 fairly straightforward."}, {"source_name": "lecture3", "index": 1159, "time": "01:35:20.360 --> 01:35:23.410", "speaker": "Alexander Vasserman", "text": "then, question 2 is or a"}, {"source_name": "lecture3", "index": 1160, "time": "01:35:23.690 --> 01:35:25.670", "speaker": "Alexander Vasserman", "text": "a bunch of small functions."}, {"source_name": "lecture3", "index": 1161, "time": "01:35:25.730 --> 01:35:26.639", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 1162, "time": "01:35:27.000 --> 01:35:29.140", "speaker": "Alexander Vasserman", "text": "just get you to"}, {"source_name": "lecture3", "index": 1163, "time": "01:35:29.350 --> 01:35:32.760", "speaker": "Alexander Vasserman", "text": "you. Practice some of the"}, {"source_name": "lecture3", "index": 1164, "time": "01:35:32.780 --> 01:35:36.439", "speaker": "Alexander Vasserman", "text": "things that we did last week"}, {"source_name": "lecture3", "index": 1165, "time": "01:35:36.520 --> 01:35:39.290", "speaker": "Alexander Vasserman", "text": "as well as starting to"}, {"source_name": "lecture3", "index": 1166, "time": "01:35:39.320 --> 01:35:45.109", "speaker": "Alexander Vasserman", "text": "do today, mostly still on on last week."}, {"source_name": "lecture3", "index": 1167, "time": "01:35:45.930 --> 01:35:49.009", "speaker": "Alexander Vasserman", "text": "so it as you to write the function"}, {"source_name": "lecture3", "index": 1168, "time": "01:35:49.030 --> 01:35:53.750", "speaker": "Alexander Vasserman", "text": "that takes some arguments and returns"}, {"source_name": "lecture3", "index": 1169, "time": "01:35:54.110 --> 01:35:54.889", "speaker": "Alexander Vasserman", "text": "all"}, {"source_name": "lecture3", "index": 1170, "time": "01:35:55.340 --> 01:35:56.300", "speaker": "Alexander Vasserman", "text": "a"}, {"source_name": "lecture3", "index": 1171, "time": "01:35:58.150 --> 01:35:59.580", "speaker": "Alexander Vasserman", "text": "most of this state."}, {"source_name": "lecture3", "index": 1172, "time": "01:35:59.760 --> 01:36:03.099", "speaker": "Alexander Vasserman", "text": "a collection or 2, and return another collection"}, {"source_name": "lecture3", "index": 1173, "time": "01:36:03.180 --> 01:36:08.040", "speaker": "Alexander Vasserman", "text": "so kind of some practice on"}, {"source_name": "lecture3", "index": 1174, "time": "01:36:08.380 --> 01:36:11.540", "speaker": "Alexander Vasserman", "text": "all that. So, for example, we we start with like."}, {"source_name": "lecture3", "index": 1175, "time": "01:36:11.650 --> 01:36:17.529", "speaker": "Alexander Vasserman", "text": "at least the function. That right? I'm sorry to function that takes 2 sets of strings"}, {"source_name": "lecture3", "index": 1176, "time": "01:36:17.550 --> 01:36:25.590", "speaker": "Alexander Vasserman", "text": "and returns a new set containing all the events in the first set that they're not in the second set."}, {"source_name": "lecture3", "index": 1177, "time": "01:36:25.850 --> 01:36:27.170", "speaker": "Alexander Vasserman", "text": "Alright, so"}, {"source_name": "lecture3", "index": 1178, "time": "01:36:27.240 --> 01:36:29.760", "speaker": "Alexander Vasserman", "text": "you need to write a function. These 2 arguments"}, {"source_name": "lecture3", "index": 1179, "time": "01:36:30.920 --> 01:36:34.579", "speaker": "Alexander Vasserman", "text": "both of these arguments will be set, and a function that"}, {"source_name": "lecture3", "index": 1180, "time": "01:36:34.670 --> 01:36:37.119", "speaker": "Alexander Vasserman", "text": "returns a new set"}, {"source_name": "lecture3", "index": 1181, "time": "01:36:37.190 --> 01:36:37.870", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture3", "index": 1182, "time": "01:36:38.010 --> 01:36:38.730", "speaker": "Alexander Vasserman", "text": "it's"}, {"source_name": "lecture3", "index": 1183, "time": "01:36:39.120 --> 01:36:40.630", "speaker": "Alexander Vasserman", "text": "these elements"}, {"source_name": "lecture3", "index": 1184, "time": "01:36:42.410 --> 01:36:47.100", "speaker": "Alexander Vasserman", "text": "b is similar. But, we were defining the the return"}, {"source_name": "lecture3", "index": 1185, "time": "01:36:48.640 --> 01:36:50.459", "speaker": "Alexander Vasserman", "text": "set slightly differently."}, {"source_name": "lecture3", "index": 1186, "time": "01:36:53.720 --> 01:36:55.030", "speaker": "Alexander Vasserman", "text": "and the"}, {"source_name": "lecture3", "index": 1187, "time": "01:36:57.670 --> 01:36:58.590", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture3", "index": 1188, "time": "01:36:58.830 --> 01:37:00.700", "speaker": "Alexander Vasserman", "text": "as well as"}, {"source_name": "lecture3", "index": 1189, "time": "01:37:02.170 --> 01:37:03.030", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 1190, "time": "01:37:03.240 --> 01:37:04.440", "speaker": "Alexander Vasserman", "text": "see."}, {"source_name": "lecture3", "index": 1191, "time": "01:37:08.020 --> 01:37:10.190", "speaker": "Alexander Vasserman", "text": "see, instead of"}, {"source_name": "lecture3", "index": 1192, "time": "01:37:10.460 --> 01:37:12.200", "speaker": "Alexander Vasserman", "text": "returning"}, {"source_name": "lecture3", "index": 1193, "time": "01:37:13.810 --> 01:37:14.769", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture3", "index": 1194, "time": "01:37:15.360 --> 01:37:16.230", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 1195, "time": "01:37:16.620 --> 01:37:19.880", "speaker": "Alexander Vasserman", "text": "it said, it will return true or false"}, {"source_name": "lecture3", "index": 1196, "time": "01:37:20.660 --> 01:37:21.570", "speaker": "Alexander Vasserman", "text": "all"}, {"source_name": "lecture3", "index": 1197, "time": "01:37:23.510 --> 01:37:25.040", "speaker": "Alexander Vasserman", "text": "or"}, {"source_name": "lecture3", "index": 1198, "time": "01:37:29.260 --> 01:37:31.260", "speaker": "Alexander Vasserman", "text": "for D."}, {"source_name": "lecture3", "index": 1199, "time": "01:37:31.440 --> 01:37:33.809", "speaker": "Alexander Vasserman", "text": "The start with the list on the set."}, {"source_name": "lecture3", "index": 1200, "time": "01:37:34.020 --> 01:37:36.590", "speaker": "Alexander Vasserman", "text": "and return in a new list"}, {"source_name": "lecture3", "index": 1201, "time": "01:37:36.780 --> 01:37:37.610", "speaker": "Alexander Vasserman", "text": "these"}, {"source_name": "lecture3", "index": 1202, "time": "01:37:37.960 --> 01:37:38.750", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture3", "index": 1203, "time": "01:37:38.860 --> 01:37:44.199", "speaker": "Alexander Vasserman", "text": "all elements from the initial list that are also in the set."}, {"source_name": "lecture3", "index": 1204, "time": "01:37:44.720 --> 01:37:45.990", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 1205, "time": "01:37:46.330 --> 01:37:48.040", "speaker": "Alexander Vasserman", "text": "right. So the dysfunction"}, {"source_name": "lecture3", "index": 1206, "time": "01:37:48.100 --> 01:37:49.170", "speaker": "Alexander Vasserman", "text": "takes"}, {"source_name": "lecture3", "index": 1207, "time": "01:37:49.220 --> 01:37:52.700", "speaker": "Alexander Vasserman", "text": "2 arguments right again a"}, {"source_name": "lecture3", "index": 1208, "time": "01:37:53.970 --> 01:37:54.889", "speaker": "Alexander Vasserman", "text": "at least."}, {"source_name": "lecture3", "index": 1209, "time": "01:37:55.050 --> 01:37:56.639", "speaker": "Alexander Vasserman", "text": "and a set"}, {"source_name": "lecture3", "index": 1210, "time": "01:37:58.140 --> 01:37:59.469", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture3", "index": 1211, "time": "01:38:00.080 --> 01:38:01.950", "speaker": "Alexander Vasserman", "text": "insurance at least."}, {"source_name": "lecture3", "index": 1212, "time": "01:38:04.750 --> 01:38:12.810", "speaker": "Alexander Vasserman", "text": "and we basically want this new list to have elements in the same order as before."}, {"source_name": "lecture3", "index": 1213, "time": "01:38:12.920 --> 01:38:17.639", "speaker": "Alexander Vasserman", "text": "but only restricted to those that are found in the site."}, {"source_name": "lecture3", "index": 1214, "time": "01:38:30.850 --> 01:38:32.290", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture3", "index": 1215, "time": "01:38:32.920 --> 01:38:34.080", "speaker": "Alexander Vasserman", "text": "finally"}, {"source_name": "lecture3", "index": 1216, "time": "01:38:34.290 --> 01:38:37.769", "speaker": "Alexander Vasserman", "text": "right a function that counts the number of valves in the given stream."}, {"source_name": "lecture3", "index": 1217, "time": "01:38:39.630 --> 01:38:42.130", "speaker": "Alexander Vasserman", "text": "So basically here"}, {"source_name": "lecture3", "index": 1218, "time": "01:38:42.200 --> 01:38:48.439", "speaker": "Alexander Vasserman", "text": "you'll be given this thing. And you you want to return an integer. That's the count number of calls."}, {"source_name": "lecture3", "index": 1219, "time": "01:38:51.350 --> 01:38:52.420", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture3", "index": 1220, "time": "01:39:00.210 --> 01:39:01.230", "speaker": "Alexander Vasserman", "text": "actually."}, {"source_name": "lecture3", "index": 1221, "time": "01:39:02.180 --> 01:39:03.320", "speaker": "Alexander Vasserman", "text": "okay, yeah."}, {"source_name": "lecture3", "index": 1222, "time": "01:39:04.040 --> 01:39:05.829", "speaker": "Alexander Vasserman", "text": "Any questions about this?"}, {"source_name": "lecture3", "index": 1223, "time": "01:39:12.360 --> 01:39:13.469", "speaker": "Alexander Vasserman", "text": "Yes."}, {"source_name": "lecture3", "index": 1224, "time": "01:39:13.990 --> 01:39:23.989", "speaker": "Aimun Anwer", "text": "Oh, yeah. So just making sure. So do you just want us to like write the code at like within the document itself. Or should we like first write it on like an actual coding?"}, {"source_name": "lecture3", "index": 1225, "time": "01:39:24.370 --> 01:39:25.420", "speaker": "Aimun Anwer", "text": "And it like."}, {"source_name": "lecture3", "index": 1226, "time": "01:39:25.700 --> 01:39:29.829", "speaker": "Alexander Vasserman", "text": "Yeah, you can use a notebook, or you can."}, {"source_name": "lecture3", "index": 1227, "time": "01:39:29.980 --> 01:39:38.260", "speaker": "Alexander Vasserman", "text": "I use anything. I'm actually as I'm. I'm reading about the the homework to you. I'm a little bit realizing that"}, {"source_name": "lecture3", "index": 1228, "time": "01:39:38.400 --> 01:39:46.469", "speaker": "Alexander Vasserman", "text": "some of the stuff that I wanted to cover. I haven't yet. So in particular. I wanted to to show you how to use"}, {"source_name": "lecture3", "index": 1229, "time": "01:39:49.240 --> 01:39:50.450", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture3", "index": 1230, "time": "01:39:54.500 --> 01:39:55.769", "speaker": "Alexander Vasserman", "text": "Oh, I"}, {"source_name": "lecture3", "index": 1231, "time": "01:39:56.080 --> 01:40:00.869", "speaker": "Alexander Vasserman", "text": "sorry I wanted to show you how to use a python."}, {"source_name": "lecture3", "index": 1232, "time": "01:40:01.100 --> 01:40:10.590", "speaker": "Alexander Vasserman", "text": "and so you know. you would want to. Maybe alright, this quote inside of py churn, or but you know, any kind of fighter would be fine."}, {"source_name": "lecture3", "index": 1233, "time": "01:40:10.650 --> 01:40:13.529", "speaker": "Alexander Vasserman", "text": "so the the assignment will be due."}, {"source_name": "lecture3", "index": 1234, "time": "01:40:13.600 --> 01:40:15.389", "speaker": "Alexander Vasserman", "text": "I guess."}, {"source_name": "lecture3", "index": 1235, "time": "01:40:15.630 --> 01:40:18.390", "speaker": "Alexander Vasserman", "text": "next Thursday of next week."}, {"source_name": "lecture3", "index": 1236, "time": "01:40:18.520 --> 01:40:23.269", "speaker": "Alexander Vasserman", "text": "because, as i'm reading further, there are a few other things that"}, {"source_name": "lecture3", "index": 1237, "time": "01:40:23.380 --> 01:40:25.090", "speaker": "Alexander Vasserman", "text": "we haven't"}, {"source_name": "lecture3", "index": 1238, "time": "01:40:25.200 --> 01:40:27.070", "speaker": "Alexander Vasserman", "text": "gotten to"}, {"source_name": "lecture3", "index": 1239, "time": "01:40:27.570 --> 01:40:29.389", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture3", "index": 1240, "time": "01:40:29.420 --> 01:40:31.990", "speaker": "Alexander Vasserman", "text": "so maybe actually like in terms of the"}, {"source_name": "lecture3", "index": 1241, "time": "01:40:32.150 --> 01:40:34.450", "speaker": "Alexander Vasserman", "text": "what i'm going to"}, {"source_name": "lecture3", "index": 1242, "time": "01:40:34.530 --> 01:40:38.639", "speaker": "Alexander Vasserman", "text": "show you like I i'll start with this"}, {"source_name": "lecture3", "index": 1243, "time": "01:40:38.670 --> 01:40:42.829", "speaker": "Alexander Vasserman", "text": "3 things, and i'll add"}, {"source_name": "lecture3", "index": 1244, "time": "01:40:43.090 --> 01:40:44.740", "speaker": "Alexander Vasserman", "text": "more"}, {"source_name": "lecture3", "index": 1245, "time": "01:40:46.050 --> 01:40:51.649", "speaker": "Alexander Vasserman", "text": "to this assignment after or for the Thursday lesson."}, {"source_name": "lecture3", "index": 1246, "time": "01:40:51.710 --> 01:40:53.819", "speaker": "Alexander Vasserman", "text": "and then you'll have a full week"}, {"source_name": "lecture3", "index": 1247, "time": "01:40:54.000 --> 01:40:56.129", "speaker": "Alexander Vasserman", "text": "to to do this assignment."}, {"source_name": "lecture3", "index": 1248, "time": "01:41:00.740 --> 01:41:01.599", "speaker": "Alexander Vasserman", "text": "5,"}, {"source_name": "lecture3", "index": 1249, "time": "01:41:02.130 --> 01:41:06.929", "speaker": "Fahad Khan", "text": "So will this be on D, because i'm there right now."}, {"source_name": "lecture3", "index": 1250, "time": "01:41:07.590 --> 01:41:13.109", "speaker": "Fahad Khan", "text": "and and so will you like. Make like a a submission like entry thing where we can."}, {"source_name": "lecture3", "index": 1251, "time": "01:41:13.150 --> 01:41:24.379", "speaker": "Fahad Khan", "text": "Can we like turn in like a a python file, cause that's not usually how we used to do it."}, {"source_name": "lecture3", "index": 1252, "time": "01:41:25.630 --> 01:41:30.040", "speaker": "Alexander Vasserman", "text": "you can submit a python file with the code and"}, {"source_name": "lecture3", "index": 1253, "time": "01:41:30.440 --> 01:41:33.900", "speaker": "Alexander Vasserman", "text": "a text file with dancers, or or just"}, {"source_name": "lecture3", "index": 1254, "time": "01:41:33.930 --> 01:41:36.689", "speaker": "Alexander Vasserman", "text": "to be tensor directly. I mean"}, {"source_name": "lecture3", "index": 1255, "time": "01:41:36.910 --> 01:41:39.509", "speaker": "Alexander Vasserman", "text": "in your submission"}, {"source_name": "lecture3", "index": 1256, "time": "01:41:42.070 --> 01:41:42.990", "speaker": "Alexander Vasserman", "text": "make sense."}, {"source_name": "lecture3", "index": 1257, "time": "01:41:46.680 --> 01:41:48.570", "speaker": "Alexander Vasserman", "text": "all right"}, {"source_name": "lecture3", "index": 1258, "time": "01:41:48.630 --> 01:41:51.210", "speaker": "Alexander Vasserman", "text": "let's stop"}, {"source_name": "lecture3", "index": 1259, "time": "01:41:51.390 --> 01:41:52.599", "speaker": "Alexander Vasserman", "text": "there."}, {"source_name": "lecture3", "index": 1260, "time": "01:41:52.670 --> 01:41:54.360", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture3", "index": 1261, "time": "01:41:55.100 --> 01:41:57.900", "speaker": "Alexander Vasserman", "text": "I'll put that into it."}, {"source_name": "lecture3", "index": 1262, "time": "01:41:58.120 --> 01:42:00.100", "speaker": "Alexander Vasserman", "text": "shortly after the class."}, {"source_name": "lecture3", "index": 1263, "time": "01:42:00.260 --> 01:42:04.120", "speaker": "Alexander Vasserman", "text": "and we'll continue"}, {"source_name": "lecture3", "index": 1264, "time": "01:42:04.180 --> 01:42:09.670", "speaker": "Alexander Vasserman", "text": "and start getting into more search related things"}, {"source_name": "lecture3", "index": 1265, "time": "01:42:09.700 --> 01:42:11.960", "speaker": "Alexander Vasserman", "text": "on Thursday."}, {"source_name": "lecture3", "index": 1266, "time": "01:42:12.640 --> 01:42:14.130", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture3", "index": 1267, "time": "01:42:14.870 --> 01:42:15.500", "speaker": "Alexander Vasserman", "text": "yeah."}, {"source_name": "lecture3", "index": 1268, "time": "01:42:15.750 --> 01:42:18.990", "speaker": "Alexander Vasserman", "text": "you know, Get the rest of the call."}, {"source_name": "lecture3", "index": 1269, "time": "01:42:22.900 --> 01:42:24.090", "speaker": "Alexander Vasserman", "text": "Any"}, {"source_name": "lecture3", "index": 1270, "time": "01:42:24.620 --> 01:42:25.650", "speaker": "Alexander Vasserman", "text": "questions?"}, {"source_name": "lecture3", "index": 1271, "time": "01:42:28.940 --> 01:42:30.109", "speaker": "Sulaeman Ahmed", "text": "Yeah, I have a question."}, {"source_name": "lecture3", "index": 1272, "time": "01:42:30.330 --> 01:42:31.059", "speaker": "Alexander Vasserman", "text": "Yup."}, {"source_name": "lecture3", "index": 1273, "time": "01:42:31.110 --> 01:42:34.219", "speaker": "Sulaeman Ahmed", "text": "do you post a recorded lectures on El or no"}, {"source_name": "lecture3", "index": 1274, "time": "01:42:34.410 --> 01:42:37.099", "speaker": "Alexander Vasserman", "text": "I do so"}, {"source_name": "lecture3", "index": 1275, "time": "01:42:38.740 --> 01:42:40.860", "speaker": "Alexander Vasserman", "text": "and I"}, {"source_name": "lecture3", "index": 1276, "time": "01:42:42.120 --> 01:42:53.029", "speaker": "Alexander Vasserman", "text": "I usually also try to put announcements on G 12 when I when the recordings are ready. Sometimes it takes me a day or 2"}, {"source_name": "lecture3", "index": 1277, "time": "01:42:53.100 --> 01:43:01.369", "speaker": "Alexander Vasserman", "text": "to to put it on there. but the first 2 lectures are on the 2 L"}, {"source_name": "lecture3", "index": 1278, "time": "01:43:01.500 --> 01:43:05.870", "speaker": "Alexander Vasserman", "text": "including the recording slides."}, {"source_name": "lecture3", "index": 1279, "time": "01:43:05.930 --> 01:43:15.400", "speaker": "Alexander Vasserman", "text": "And also the code that I've written during the class. So I've shared the notebooks with them, writing this as well."}, {"source_name": "lecture3", "index": 1280, "time": "01:43:15.460 --> 01:43:17.280", "speaker": "Sulaeman Ahmed", "text": "Yeah, I just saw that my right"}, {"source_name": "lecture3", "index": 1281, "time": "01:43:17.400 --> 01:43:18.910", "speaker": "Alexander Vasserman", "text": "no worries. Yeah."}, {"source_name": "lecture3", "index": 1282, "time": "01:43:21.070 --> 01:43:22.500", "speaker": "Alexander Vasserman", "text": "Any other questions."}, {"source_name": "lecture3", "index": 1283, "time": "01:43:26.060 --> 01:43:26.969", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture3", "index": 1284, "time": "01:43:27.260 --> 01:43:28.860", "speaker": "Alexander Vasserman", "text": "well, if not."}, {"source_name": "lecture3", "index": 1285, "time": "01:43:29.060 --> 01:43:30.130", "speaker": "Alexander Vasserman", "text": "then."}, {"source_name": "lecture4", "index": 1, "time": "00:15:18.920 --> 00:15:19.890", "speaker": null, "text": "All right."}, {"source_name": "lecture4", "index": 2, "time": "00:15:20.230 --> 00:15:22.040", "speaker": "Alexander Vasserman", "text": "Good afternoon. Everyone"}, {"source_name": "lecture4", "index": 3, "time": "00:15:24.160 --> 00:15:25.740", "speaker": "Alexander Vasserman", "text": "welcome to"}, {"source_name": "lecture4", "index": 4, "time": "00:15:26.040 --> 00:15:28.449", "speaker": "Alexander Vasserman", "text": "less than 4 of our class."}, {"source_name": "lecture4", "index": 5, "time": "00:15:29.300 --> 00:15:31.949", "speaker": "Alexander Vasserman", "text": "I hope you're all having a good day."}, {"source_name": "lecture4", "index": 6, "time": "00:15:36.380 --> 00:15:37.470", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture4", "index": 7, "time": "00:15:40.620 --> 00:15:41.700", "speaker": "Alexander Vasserman", "text": "Last time"}, {"source_name": "lecture4", "index": 8, "time": "00:15:41.930 --> 00:15:48.990", "speaker": "Alexander Vasserman", "text": "we did a lot a little bit more of python review and practice, and also looked at"}, {"source_name": "lecture4", "index": 9, "time": "00:15:49.590 --> 00:15:53.189", "speaker": "Alexander Vasserman", "text": "name to polls before that"}, {"source_name": "lecture4", "index": 10, "time": "00:15:53.660 --> 00:16:00.549", "speaker": "Alexander Vasserman", "text": "the I'll also talk to a a lot about information that you and in general search engines"}, {"source_name": "lecture4", "index": 11, "time": "00:16:01.900 --> 00:16:03.660", "speaker": "Alexander Vasserman", "text": "to"}, {"source_name": "lecture4", "index": 12, "time": "00:16:03.810 --> 00:16:08.820", "speaker": "Alexander Vasserman", "text": "Yeah. So also maybe start a little bit on a text processing of"}, {"source_name": "lecture4", "index": 13, "time": "00:16:09.330 --> 00:16:11.430", "speaker": "Alexander Vasserman", "text": "while discussing main couples."}, {"source_name": "lecture4", "index": 14, "time": "00:16:12.660 --> 00:16:15.580", "speaker": "Alexander Vasserman", "text": "anyway. So today we are"}, {"source_name": "lecture4", "index": 15, "time": "00:16:15.690 --> 00:16:18.969", "speaker": "Alexander Vasserman", "text": "continue and start working on"}, {"source_name": "lecture4", "index": 16, "time": "00:16:19.140 --> 00:16:31.699", "speaker": "Alexander Vasserman", "text": "May, if search implementations and start talking a little bit more details about search and kind of how we all might want to implement it"}, {"source_name": "lecture4", "index": 17, "time": "00:16:32.860 --> 00:16:34.380", "speaker": "Alexander Vasserman", "text": "field"}, {"source_name": "lecture4", "index": 18, "time": "00:16:35.100 --> 00:16:37.510", "speaker": "Alexander Vasserman", "text": "should be able to get to"}, {"source_name": "lecture4", "index": 19, "time": "00:16:37.770 --> 00:16:44.939", "speaker": "Alexander Vasserman", "text": "unit testing. And i'll cover how we do that, and also"}, {"source_name": "lecture4", "index": 20, "time": "00:16:45.580 --> 00:16:53.569", "speaker": "Alexander Vasserman", "text": "walk through the rest of homework, one which is going to be due end of day of next Thursday."}, {"source_name": "lecture4", "index": 21, "time": "00:16:54.850 --> 00:17:01.170", "speaker": "Alexander Vasserman", "text": "I also should ask if anyone has any questions"}, {"source_name": "lecture4", "index": 22, "time": "00:17:01.440 --> 00:17:09.660", "speaker": "Alexander Vasserman", "text": "from the last lectures next to you lectures or anything else that you want to ask before we start."}, {"source_name": "lecture4", "index": 23, "time": "00:17:18.089 --> 00:17:19.040", "speaker": "Alexander Vasserman", "text": "All right."}, {"source_name": "lecture4", "index": 24, "time": "00:17:19.270 --> 00:17:21.780", "speaker": "Alexander Vasserman", "text": "So there's no questions."}, {"source_name": "lecture4", "index": 25, "time": "00:17:22.000 --> 00:17:23.300", "speaker": "Alexander Vasserman", "text": "Then."}, {"source_name": "lecture4", "index": 26, "time": "00:17:23.940 --> 00:17:25.339", "speaker": "Alexander Vasserman", "text": "let's get into it."}, {"source_name": "lecture4", "index": 27, "time": "00:17:26.170 --> 00:17:27.790", "speaker": "Alexander Vasserman", "text": "So you kind of"}, {"source_name": "lecture4", "index": 28, "time": "00:17:28.400 --> 00:17:30.920", "speaker": "Alexander Vasserman", "text": "talked a bit about"}, {"source_name": "lecture4", "index": 29, "time": "00:17:31.010 --> 00:17:32.920", "speaker": "Alexander Vasserman", "text": "what search looks like."}, {"source_name": "lecture4", "index": 30, "time": "00:17:32.950 --> 00:17:42.400", "speaker": "Alexander Vasserman", "text": "and we talked a little bit about you know what it is, and like, you know, kind of different examples. But basically the"}, {"source_name": "lecture4", "index": 31, "time": "00:17:42.740 --> 00:17:44.890", "speaker": "Alexander Vasserman", "text": "what we what we want to implement"}, {"source_name": "lecture4", "index": 32, "time": "00:17:44.980 --> 00:17:46.150", "speaker": "Alexander Vasserman", "text": "is"}, {"source_name": "lecture4", "index": 33, "time": "00:17:46.200 --> 00:17:47.110", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture4", "index": 34, "time": "00:17:47.400 --> 00:17:48.990", "speaker": "Alexander Vasserman", "text": "a function"}, {"source_name": "lecture4", "index": 35, "time": "00:17:49.060 --> 00:17:49.930", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture4", "index": 36, "time": "00:17:50.000 --> 00:17:54.379", "speaker": "Alexander Vasserman", "text": "takes 2 inputs right, a collection of documents"}, {"source_name": "lecture4", "index": 37, "time": "00:17:54.770 --> 00:17:57.100", "speaker": "Alexander Vasserman", "text": "and a text query."}, {"source_name": "lecture4", "index": 38, "time": "00:17:57.350 --> 00:17:59.329", "speaker": "Alexander Vasserman", "text": "and then we"}, {"source_name": "lecture4", "index": 39, "time": "00:17:59.510 --> 00:18:00.420", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture4", "index": 40, "time": "00:18:00.570 --> 00:18:01.650", "speaker": "Alexander Vasserman", "text": "return"}, {"source_name": "lecture4", "index": 41, "time": "00:18:02.100 --> 00:18:03.850", "speaker": "Alexander Vasserman", "text": "a set of results"}, {"source_name": "lecture4", "index": 42, "time": "00:18:03.890 --> 00:18:07.949", "speaker": "Alexander Vasserman", "text": "which are the documents from the document collections"}, {"source_name": "lecture4", "index": 43, "time": "00:18:08.080 --> 00:18:10.990", "speaker": "Alexander Vasserman", "text": "that match the query."}, {"source_name": "lecture4", "index": 44, "time": "00:18:11.730 --> 00:18:12.560", "speaker": "Alexander Vasserman", "text": "Right?"}, {"source_name": "lecture4", "index": 45, "time": "00:18:12.720 --> 00:18:13.880", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture4", "index": 46, "time": "00:18:16.820 --> 00:18:25.059", "speaker": "Alexander Vasserman", "text": "yeah. So basically. Fairly, it should be fairly simple, right? so, for example, if we have equity information, retrieval"}, {"source_name": "lecture4", "index": 47, "time": "00:18:25.400 --> 00:18:26.840", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture4", "index": 48, "time": "00:18:27.380 --> 00:18:37.849", "speaker": "Alexander Vasserman", "text": "we have all a few documents in our collection, like, you know, information that the evil is a recovery of specific information from sort of data"}, {"source_name": "lecture4", "index": 49, "time": "00:18:37.970 --> 00:18:40.160", "speaker": "Alexander Vasserman", "text": "it's our throw right."}, {"source_name": "lecture4", "index": 50, "time": "00:18:40.370 --> 00:18:42.269", "speaker": "Alexander Vasserman", "text": "when the user"}, {"source_name": "lecture4", "index": 51, "time": "00:18:43.150 --> 00:18:53.020", "speaker": "Alexander Vasserman", "text": "types in information that they will be want to return the documents from our document collection, which are relevant for the creating"}, {"source_name": "lecture4", "index": 52, "time": "00:18:53.420 --> 00:18:54.290", "speaker": "Alexander Vasserman", "text": "right?"}, {"source_name": "lecture4", "index": 53, "time": "00:18:54.790 --> 00:19:00.019", "speaker": "Alexander Vasserman", "text": "of course, in most cases we'll have a lot more documents than 4."}, {"source_name": "lecture4", "index": 54, "time": "00:19:01.560 --> 00:19:03.090", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture4", "index": 55, "time": "00:19:03.120 --> 00:19:05.260", "speaker": "Alexander Vasserman", "text": "the idea is"}, {"source_name": "lecture4", "index": 56, "time": "00:19:05.500 --> 00:19:06.860", "speaker": "Alexander Vasserman", "text": "basically that"}, {"source_name": "lecture4", "index": 57, "time": "00:19:09.200 --> 00:19:10.360", "speaker": "Alexander Vasserman", "text": "any"}, {"source_name": "lecture4", "index": 58, "time": "00:19:10.930 --> 00:19:12.420", "speaker": "Alexander Vasserman", "text": "questions about that."}, {"source_name": "lecture4", "index": 59, "time": "00:19:17.890 --> 00:19:18.790", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture4", "index": 60, "time": "00:19:18.820 --> 00:19:20.250", "speaker": "Alexander Vasserman", "text": "all right, Ralph."}, {"source_name": "lecture4", "index": 61, "time": "00:19:22.060 --> 00:19:24.530", "speaker": "Rafal \"Ralph\" Jasielec", "text": "So in this example would be."}, {"source_name": "lecture4", "index": 62, "time": "00:19:24.550 --> 00:19:26.480", "speaker": "Rafal \"Ralph\" Jasielec", "text": "look for exact"}, {"source_name": "lecture4", "index": 63, "time": "00:19:26.870 --> 00:19:29.429", "speaker": "Rafal \"Ralph\" Jasielec", "text": "names of the documents, or"}, {"source_name": "lecture4", "index": 64, "time": "00:19:29.720 --> 00:19:35.010", "speaker": "Rafal \"Ralph\" Jasielec", "text": "W. Several key words, 1, 2, or 3, or how many that best match what we're looking for."}, {"source_name": "lecture4", "index": 65, "time": "00:19:35.340 --> 00:19:38.539", "speaker": "Alexander Vasserman", "text": "that's a very good question. And"}, {"source_name": "lecture4", "index": 66, "time": "00:19:38.600 --> 00:19:48.870", "speaker": "Alexander Vasserman", "text": "basically how exactly we define the matching function or relevance is basically what you're asking about. And"}, {"source_name": "lecture4", "index": 67, "time": "00:19:48.950 --> 00:19:55.810", "speaker": "Alexander Vasserman", "text": "you know, we we can define it in many different ways, and we'll get start getting into it today. but"}, {"source_name": "lecture4", "index": 68, "time": "00:19:55.840 --> 00:19:57.140", "speaker": "Alexander Vasserman", "text": "basically"}, {"source_name": "lecture4", "index": 69, "time": "00:19:58.170 --> 00:20:10.689", "speaker": "Alexander Vasserman", "text": "or how the this function is going to loop. The search function is going to look is up to us to define. And the you know, different search engines might define it slightly differently. Right?"}, {"source_name": "lecture4", "index": 70, "time": "00:20:11.370 --> 00:20:12.420", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture4", "index": 71, "time": "00:20:12.850 --> 00:20:13.650", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture4", "index": 72, "time": "00:20:16.220 --> 00:20:17.410", "speaker": "Alexander Vasserman", "text": "in general."}, {"source_name": "lecture4", "index": 73, "time": "00:20:17.750 --> 00:20:33.999", "speaker": "Alexander Vasserman", "text": "we might have a sense for what is relevant and what is not right, so like you have given these kind of very short documents. Where do we have the, you know, Just one sentence in each document, which again, is not going to be the case most of the time."}, {"source_name": "lecture4", "index": 74, "time": "00:20:34.010 --> 00:20:40.750", "speaker": "Alexander Vasserman", "text": "we still can say which ones are probably relevant, and which ones are not right. So in particular"}, {"source_name": "lecture4", "index": 75, "time": "00:20:40.830 --> 00:20:45.849", "speaker": "Alexander Vasserman", "text": "information retrieval is recovery of specific information from store data."}, {"source_name": "lecture4", "index": 76, "time": "00:20:45.900 --> 00:20:54.390", "speaker": "Alexander Vasserman", "text": "Right? That seems very wrong, right? That's like a shortened definition. Just so that it fits on the slide. But there are a very relevant"}, {"source_name": "lecture4", "index": 77, "time": "00:20:55.740 --> 00:21:00.560", "speaker": "Alexander Vasserman", "text": "Ir is how we abbreviate information table."}, {"source_name": "lecture4", "index": 78, "time": "00:21:01.030 --> 00:21:05.049", "speaker": "Alexander Vasserman", "text": "So if we had a very good search engine, we'd want"}, {"source_name": "lecture4", "index": 79, "time": "00:21:05.170 --> 00:21:09.440", "speaker": "Alexander Vasserman", "text": "the second example, to also be retrieved"}, {"source_name": "lecture4", "index": 80, "time": "00:21:09.540 --> 00:21:11.860", "speaker": "Alexander Vasserman", "text": "right, and be part of the results."}, {"source_name": "lecture4", "index": 81, "time": "00:21:11.990 --> 00:21:17.199", "speaker": "Alexander Vasserman", "text": "so we would want to all have a search engine that"}, {"source_name": "lecture4", "index": 82, "time": "00:21:17.240 --> 00:21:18.820", "speaker": "Alexander Vasserman", "text": "all understands"}, {"source_name": "lecture4", "index": 83, "time": "00:21:18.880 --> 00:21:22.640", "speaker": "Alexander Vasserman", "text": "that Irs can stand for information in real"}, {"source_name": "lecture4", "index": 84, "time": "00:21:26.220 --> 00:21:30.010", "speaker": "Alexander Vasserman", "text": "you know. Again, if we have a very smart system"}, {"source_name": "lecture4", "index": 85, "time": "00:21:30.140 --> 00:21:34.379", "speaker": "Alexander Vasserman", "text": "we might want to have"}, {"source_name": "lecture4", "index": 86, "time": "00:21:34.520 --> 00:21:35.430", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 87, "time": "00:21:36.260 --> 00:21:37.720", "speaker": "Alexander Vasserman", "text": "have it match"}, {"source_name": "lecture4", "index": 88, "time": "00:21:38.000 --> 00:21:42.500", "speaker": "Alexander Vasserman", "text": "the individual words potentially in different places in the document."}, {"source_name": "lecture4", "index": 89, "time": "00:21:42.780 --> 00:21:48.670", "speaker": "Alexander Vasserman", "text": "but also understand that sometimes because of that, the meeting changes."}, {"source_name": "lecture4", "index": 90, "time": "00:21:48.750 --> 00:21:50.919", "speaker": "Alexander Vasserman", "text": "So in the third example."}, {"source_name": "lecture4", "index": 91, "time": "00:21:51.050 --> 00:21:53.130", "speaker": "Alexander Vasserman", "text": "you're not."}, {"source_name": "lecture4", "index": 92, "time": "00:21:53.190 --> 00:21:57.600", "speaker": "Alexander Vasserman", "text": "The the document has both words, information and retrieval."}, {"source_name": "lecture4", "index": 93, "time": "00:21:57.740 --> 00:21:59.050", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture4", "index": 94, "time": "00:22:00.220 --> 00:22:04.929", "speaker": "Alexander Vasserman", "text": "it's not talking about information evil. It's you know"}, {"source_name": "lecture4", "index": 95, "time": "00:22:04.990 --> 00:22:06.170", "speaker": "Alexander Vasserman", "text": "some notes"}, {"source_name": "lecture4", "index": 96, "time": "00:22:06.310 --> 00:22:07.520", "speaker": "Alexander Vasserman", "text": "about, like"}, {"source_name": "lecture4", "index": 97, "time": "00:22:07.930 --> 00:22:09.210", "speaker": "Alexander Vasserman", "text": "whatever"}, {"source_name": "lecture4", "index": 98, "time": "00:22:09.230 --> 00:22:10.360", "speaker": "Alexander Vasserman", "text": "information"}, {"source_name": "lecture4", "index": 99, "time": "00:22:11.010 --> 00:22:23.090", "speaker": "Alexander Vasserman", "text": "and it just to happen to have some of the same boards that they're looking for, but they completely different meaning and contacts."}, {"source_name": "lecture4", "index": 100, "time": "00:22:23.230 --> 00:22:32.970", "speaker": "Alexander Vasserman", "text": "And that's kind of part of the difficulty of a text based search or search in general, like we talked about the fact that"}, {"source_name": "lecture4", "index": 101, "time": "00:22:33.050 --> 00:22:47.249", "speaker": "Alexander Vasserman", "text": "it's in precise and language. Isn't precise and any kind of function that we define is not going to be very precise in terms of what exactly it is going to return."}, {"source_name": "lecture4", "index": 102, "time": "00:22:47.680 --> 00:22:52.480", "speaker": "Alexander Vasserman", "text": "so this is kind of like an example of where"}, {"source_name": "lecture4", "index": 103, "time": "00:22:52.640 --> 00:22:55.710", "speaker": "Alexander Vasserman", "text": "a search engine might go"}, {"source_name": "lecture4", "index": 104, "time": "00:22:56.280 --> 00:22:57.629", "speaker": "Alexander Vasserman", "text": "off for a little bit."}, {"source_name": "lecture4", "index": 105, "time": "00:22:58.430 --> 00:23:00.420", "speaker": "Alexander Vasserman", "text": "and for the last example"}, {"source_name": "lecture4", "index": 106, "time": "00:23:01.760 --> 00:23:05.669", "speaker": "Alexander Vasserman", "text": "you know it doesn't mention anything like information retainable"}, {"source_name": "lecture4", "index": 107, "time": "00:23:06.070 --> 00:23:08.070", "speaker": "Alexander Vasserman", "text": "but it does talk about"}, {"source_name": "lecture4", "index": 108, "time": "00:23:08.220 --> 00:23:11.429", "speaker": "Alexander Vasserman", "text": "Oh, web, search engine and"}, {"source_name": "lecture4", "index": 109, "time": "00:23:12.110 --> 00:23:15.040", "speaker": "Alexander Vasserman", "text": "quality improvement. And"}, {"source_name": "lecture4", "index": 110, "time": "00:23:15.290 --> 00:23:21.750", "speaker": "Alexander Vasserman", "text": "that's very relevant for information, people. That's really what information that you will in some sense is all about."}, {"source_name": "lecture4", "index": 111, "time": "00:23:21.990 --> 00:23:23.879", "speaker": "Alexander Vasserman", "text": "So a very smart"}, {"source_name": "lecture4", "index": 112, "time": "00:23:24.130 --> 00:23:25.070", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 113, "time": "00:23:25.480 --> 00:23:26.640", "speaker": "Alexander Vasserman", "text": "search system"}, {"source_name": "lecture4", "index": 114, "time": "00:23:26.660 --> 00:23:27.490", "speaker": "Alexander Vasserman", "text": "would"}, {"source_name": "lecture4", "index": 115, "time": "00:23:27.550 --> 00:23:29.539", "speaker": "Alexander Vasserman", "text": "come up with that example as well."}, {"source_name": "lecture4", "index": 116, "time": "00:23:30.090 --> 00:23:33.890", "speaker": "Alexander Vasserman", "text": "Right so, initially, we are not going to get"}, {"source_name": "lecture4", "index": 117, "time": "00:23:33.980 --> 00:23:38.259", "speaker": "Alexander Vasserman", "text": "very complicated. And so"}, {"source_name": "lecture4", "index": 118, "time": "00:23:38.440 --> 00:23:48.499", "speaker": "Alexander Vasserman", "text": "our initial implementations, and maybe even the latest did. The last implementation that they end up with at the end of the class might not get all of these examples correctly. But"}, {"source_name": "lecture4", "index": 119, "time": "00:23:48.540 --> 00:23:58.570", "speaker": "Alexander Vasserman", "text": "this kind of just these examples give you a little bit of a sense of difficulty of the problem, but also kind of different ways that you might want to define."}, {"source_name": "lecture4", "index": 120, "time": "00:23:58.680 --> 00:23:59.570", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 121, "time": "00:23:59.590 --> 00:24:01.080", "speaker": "Alexander Vasserman", "text": "what match."}, {"source_name": "lecture4", "index": 122, "time": "00:24:02.330 --> 00:24:05.860", "speaker": "Alexander Vasserman", "text": "but on on what relevant document might mean"}, {"source_name": "lecture4", "index": 123, "time": "00:24:07.900 --> 00:24:09.130", "speaker": "Alexander Vasserman", "text": "any"}, {"source_name": "lecture4", "index": 124, "time": "00:24:09.540 --> 00:24:10.900", "speaker": "Alexander Vasserman", "text": "other questions here."}, {"source_name": "lecture4", "index": 125, "time": "00:24:12.690 --> 00:24:13.940", "speaker": "Alexander Vasserman", "text": "Yeah, i'm a Really."}, {"source_name": "lecture4", "index": 126, "time": "00:24:14.170 --> 00:24:20.380", "speaker": "Amirali DJalilvand", "text": "when you talk about user behavioral data. How exactly would you use that data? Would it be like"}, {"source_name": "lecture4", "index": 127, "time": "00:24:20.460 --> 00:24:26.320", "speaker": "Amirali DJalilvand", "text": "gathering large amounts of information and then using it to change the search results?"}, {"source_name": "lecture4", "index": 128, "time": "00:24:26.360 --> 00:24:32.309", "speaker": "Alexander Vasserman", "text": "Right? So I mean, this is just an example document, obviously. But"}, {"source_name": "lecture4", "index": 129, "time": "00:24:33.080 --> 00:24:53.420", "speaker": "Alexander Vasserman", "text": "the way behavioral data is used, as you know, the most straightforward way is. So when you do research, and you click on a a particular result. That's information that most search engine would use to say, oh, this a result must be relevant because somebody did this query and clicked"}, {"source_name": "lecture4", "index": 130, "time": "00:24:53.480 --> 00:24:55.690", "speaker": "Alexander Vasserman", "text": "on the particular document"}, {"source_name": "lecture4", "index": 131, "time": "00:24:55.720 --> 00:25:02.079", "speaker": "Alexander Vasserman", "text": "so kind of using some of the smarts of the user to improve the system."}, {"source_name": "lecture4", "index": 132, "time": "00:25:02.170 --> 00:25:16.339", "speaker": "Alexander Vasserman", "text": "So that's kind of one example of behavioral data. there might be a lot more. So whether it's behavior or particular user or behavior of all users of the search engine. that's kind of what this would refer to."}, {"source_name": "lecture4", "index": 133, "time": "00:25:18.550 --> 00:25:19.340", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture4", "index": 134, "time": "00:25:20.600 --> 00:25:28.129", "speaker": "Fahad Khan", "text": "so are like cookies on, like a website considered like things that capture behavioral data and stuff."}, {"source_name": "lecture4", "index": 135, "time": "00:25:28.610 --> 00:25:46.489", "speaker": "Alexander Vasserman", "text": "Oftentimes that's what cookies are used for. sometimes cookies are used for other things like helping. You know, you log in, etc., so that, like, you know, there is a little bit of that. It's less annoying potentially to use a website. but"}, {"source_name": "lecture4", "index": 136, "time": "00:25:46.500 --> 00:25:49.020", "speaker": "Alexander Vasserman", "text": "oftentimes cookies are used for that as well"}, {"source_name": "lecture4", "index": 137, "time": "00:25:49.140 --> 00:25:53.690", "speaker": "Alexander Vasserman", "text": "to kind of coordinate information and tie information"}, {"source_name": "lecture4", "index": 138, "time": "00:25:53.880 --> 00:25:59.729", "speaker": "Alexander Vasserman", "text": "potentially across different sessions. And so you you. You go to him"}, {"source_name": "lecture4", "index": 139, "time": "00:26:00.210 --> 00:26:02.370", "speaker": "Alexander Vasserman", "text": "particular page on"}, {"source_name": "lecture4", "index": 140, "time": "00:26:02.480 --> 00:26:07.400", "speaker": "Alexander Vasserman", "text": "one day, and then you go to another page on"}, {"source_name": "lecture4", "index": 141, "time": "00:26:07.520 --> 00:26:10.180", "speaker": "Alexander Vasserman", "text": "later, at the late of time"}, {"source_name": "lecture4", "index": 142, "time": "00:26:10.230 --> 00:26:14.500", "speaker": "Alexander Vasserman", "text": "cookies might help connect those visits and things like that."}, {"source_name": "lecture4", "index": 143, "time": "00:26:19.300 --> 00:26:31.999", "speaker": "Alexander Vasserman", "text": "Any other questions so specifically to kind of how we are defining search. Jp: I. That it's just a function that takes 2 arguments and returns essentially an argument like very, at least."}, {"source_name": "lecture4", "index": 144, "time": "00:26:32.970 --> 00:26:34.970", "speaker": "Alexander Vasserman", "text": "So let's actually"}, {"source_name": "lecture4", "index": 145, "time": "00:26:35.520 --> 00:26:36.390", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture4", "index": 146, "time": "00:26:38.010 --> 00:26:40.970", "speaker": "Alexander Vasserman", "text": "try to start writing code."}, {"source_name": "lecture4", "index": 147, "time": "00:26:41.430 --> 00:26:42.860", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture4", "index": 148, "time": "00:26:43.950 --> 00:26:45.850", "speaker": "Alexander Vasserman", "text": "hopefully, all of you have"}, {"source_name": "lecture4", "index": 149, "time": "00:26:45.940 --> 00:26:47.420", "speaker": "Alexander Vasserman", "text": "download it"}, {"source_name": "lecture4", "index": 150, "time": "00:26:47.580 --> 00:26:48.950", "speaker": "Alexander Vasserman", "text": "by churn!"}, {"source_name": "lecture4", "index": 151, "time": "00:26:49.110 --> 00:26:56.059", "speaker": "Alexander Vasserman", "text": "So you don't have to use py charm, but it might be exist for you to use by charm. So if you open up"}, {"source_name": "lecture4", "index": 152, "time": "00:26:56.140 --> 00:26:57.610", "speaker": "Alexander Vasserman", "text": "by charm"}, {"source_name": "lecture4", "index": 153, "time": "00:26:58.730 --> 00:27:00.249", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture4", "index": 154, "time": "00:27:01.280 --> 00:27:04.569", "speaker": "Alexander Vasserman", "text": "you can go into file and"}, {"source_name": "lecture4", "index": 155, "time": "00:27:05.360 --> 00:27:06.879", "speaker": "Alexander Vasserman", "text": "say new project."}, {"source_name": "lecture4", "index": 156, "time": "00:27:07.420 --> 00:27:08.970", "speaker": "Alexander Vasserman", "text": "it'll"}, {"source_name": "lecture4", "index": 157, "time": "00:27:09.280 --> 00:27:12.179", "speaker": "Alexander Vasserman", "text": "ask you for the location of the project."}, {"source_name": "lecture4", "index": 158, "time": "00:27:12.220 --> 00:27:13.580", "speaker": "Alexander Vasserman", "text": "you can"}, {"source_name": "lecture4", "index": 159, "time": "00:27:13.760 --> 00:27:16.610", "speaker": "Alexander Vasserman", "text": "what any location you want"}, {"source_name": "lecture4", "index": 160, "time": "00:27:16.670 --> 00:27:19.189", "speaker": "Alexander Vasserman", "text": "if you open it up."}, {"source_name": "lecture4", "index": 161, "time": "00:27:19.210 --> 00:27:22.010", "speaker": "Alexander Vasserman", "text": "there is also a question about"}, {"source_name": "lecture4", "index": 162, "time": "00:27:22.080 --> 00:27:24.489", "speaker": "Alexander Vasserman", "text": "where the Python interpreter is."}, {"source_name": "lecture4", "index": 163, "time": "00:27:24.620 --> 00:27:35.089", "speaker": "Alexander Vasserman", "text": "you should have already a a python interpreter, installed as part of by charm so previously considered. Good interpreter should be fine."}, {"source_name": "lecture4", "index": 164, "time": "00:27:36.510 --> 00:27:37.780", "speaker": "Alexander Vasserman", "text": "so hopefully"}, {"source_name": "lecture4", "index": 165, "time": "00:27:38.000 --> 00:27:38.840", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture4", "index": 166, "time": "00:27:38.980 --> 00:27:42.209", "speaker": "Alexander Vasserman", "text": "works for you. Okay."}, {"source_name": "lecture4", "index": 167, "time": "00:27:45.940 --> 00:27:51.969", "speaker": "Alexander Vasserman", "text": "I already have a project. So i'm not going to create a new one, but that basically"}, {"source_name": "lecture4", "index": 168, "time": "00:27:52.150 --> 00:27:54.529", "speaker": "Alexander Vasserman", "text": "should create a folder"}, {"source_name": "lecture4", "index": 169, "time": "00:27:54.600 --> 00:28:01.169", "speaker": "Alexander Vasserman", "text": "on the left hand side of the project. with the name of the project that you paid it."}, {"source_name": "lecture4", "index": 170, "time": "00:28:01.210 --> 00:28:02.040", "speaker": "Alexander Vasserman", "text": "Fog."}, {"source_name": "lecture4", "index": 171, "time": "00:28:02.240 --> 00:28:05.950", "speaker": "Fahad Khan", "text": "Are we officially starting building the search engine right now."}, {"source_name": "lecture4", "index": 172, "time": "00:28:06.670 --> 00:28:11.020", "speaker": "Fahad Khan", "text": "the first day of it. Or yeah, basically. Okay."}, {"source_name": "lecture4", "index": 173, "time": "00:28:11.960 --> 00:28:19.830", "speaker": "Alexander Vasserman", "text": "Basically, I I guess your question is whether or not that's going to be the project that we are going to be contributing throughout."}, {"source_name": "lecture4", "index": 174, "time": "00:28:21.020 --> 00:28:30.179", "speaker": "Alexander Vasserman", "text": "it's a first implementation, so it's we can keep it in the same project, or there might be a"}, {"source_name": "lecture4", "index": 175, "time": "00:28:30.640 --> 00:28:34.359", "speaker": "Alexander Vasserman", "text": "a place where we might switch projects. But"}, {"source_name": "lecture4", "index": 176, "time": "00:28:34.490 --> 00:28:35.860", "speaker": "Alexander Vasserman", "text": "I think"}, {"source_name": "lecture4", "index": 177, "time": "00:28:36.250 --> 00:28:39.300", "speaker": "Alexander Vasserman", "text": "most likely will be just continuing in the same project."}, {"source_name": "lecture4", "index": 178, "time": "00:28:39.620 --> 00:28:41.410", "speaker": "Alexander Vasserman", "text": "Okay, thank you."}, {"source_name": "lecture4", "index": 179, "time": "00:28:44.790 --> 00:28:49.529", "speaker": "Rafal \"Ralph\" Jasielec", "text": "for python and for interpreter. Are you talking about like idle, or"}, {"source_name": "lecture4", "index": 180, "time": "00:28:50.770 --> 00:28:53.929", "speaker": "Rafal \"Ralph\" Jasielec", "text": "because I've never used anything besides idle?"}, {"source_name": "lecture4", "index": 181, "time": "00:28:54.180 --> 00:29:03.930", "speaker": "Alexander Vasserman", "text": "Yes, so python interpreter. we we will use basically that. So if you you go"}, {"source_name": "lecture4", "index": 182, "time": "00:29:04.060 --> 00:29:05.210", "speaker": "Alexander Vasserman", "text": "here"}, {"source_name": "lecture4", "index": 183, "time": "00:29:05.280 --> 00:29:13.670", "speaker": "Alexander Vasserman", "text": "at the bottom, there is python console, and that should look kind of exactly like the idle that you're probably used to."}, {"source_name": "lecture4", "index": 184, "time": "00:29:13.720 --> 00:29:31.780", "speaker": "Alexander Vasserman", "text": "but when I say, python interpreter is basically a program that interprets the Python code. However, you've entered it. So basically you might have multiple versions of that executable. And so you know again, if I go to"}, {"source_name": "lecture4", "index": 185, "time": "00:29:31.940 --> 00:29:34.150", "speaker": "Alexander Vasserman", "text": "create new project"}, {"source_name": "lecture4", "index": 186, "time": "00:29:35.490 --> 00:29:45.789", "speaker": "Alexander Vasserman", "text": "under Python interpreter, it points to a particular version of Python. Right? So it's in my case it's python 3.9,"}, {"source_name": "lecture4", "index": 187, "time": "00:29:47.120 --> 00:29:57.589", "speaker": "Alexander Vasserman", "text": "you know. Maybe if you've downloaded it a little later it might be a later version. Actually, so I think it's up to 3, 11 now."}, {"source_name": "lecture4", "index": 188, "time": "00:29:57.620 --> 00:29:59.530", "speaker": "Alexander Vasserman", "text": "but basically"}, {"source_name": "lecture4", "index": 189, "time": "00:29:59.670 --> 00:30:04.000", "speaker": "Alexander Vasserman", "text": "the interpreter is the program that"}, {"source_name": "lecture4", "index": 190, "time": "00:30:04.050 --> 00:30:05.719", "speaker": "Alexander Vasserman", "text": "will be used"}, {"source_name": "lecture4", "index": 191, "time": "00:30:05.770 --> 00:30:09.210", "speaker": "Alexander Vasserman", "text": "to interpret the code to the computer, right?"}, {"source_name": "lecture4", "index": 192, "time": "00:30:09.370 --> 00:30:14.910", "speaker": "Alexander Vasserman", "text": "And you know, sometimes you might want to actually have"}, {"source_name": "lecture4", "index": 193, "time": "00:30:15.230 --> 00:30:17.499", "speaker": "Alexander Vasserman", "text": "all multiple different setups."}, {"source_name": "lecture4", "index": 194, "time": "00:30:17.520 --> 00:30:19.289", "speaker": "Alexander Vasserman", "text": "That's what"}, {"source_name": "lecture4", "index": 195, "time": "00:30:19.640 --> 00:30:27.139", "speaker": "Alexander Vasserman", "text": "in the new environment option is for so like specifically virtual environment is used to."}, {"source_name": "lecture4", "index": 196, "time": "00:30:28.240 --> 00:30:29.180", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 197, "time": "00:30:29.210 --> 00:30:47.109", "speaker": "Alexander Vasserman", "text": "create multiple environments. So you might have different packages, etc. But that's not particularly important for us. I think it's mostly going to be used just the standard libraries so that's not going to be an issue. But anyway, so they they, when I'm gonna say interpreter, that just"}, {"source_name": "lecture4", "index": 198, "time": "00:30:47.130 --> 00:30:59.109", "speaker": "Alexander Vasserman", "text": "the a particular program that you've installed that is going to be interpreting the Python code, whether it's entered into a file, or or into or"}, {"source_name": "lecture4", "index": 199, "time": "00:30:59.350 --> 00:31:01.870", "speaker": "Alexander Vasserman", "text": "the python, or"}, {"source_name": "lecture4", "index": 200, "time": "00:31:02.310 --> 00:31:05.909", "speaker": "Alexander Vasserman", "text": "you know, the prompt"}, {"source_name": "lecture4", "index": 201, "time": "00:31:07.080 --> 00:31:07.950", "speaker": "Alexander Vasserman", "text": "makes sense."}, {"source_name": "lecture4", "index": 202, "time": "00:31:10.860 --> 00:31:14.200", "speaker": "Alexander Vasserman", "text": "do you still have a question, or that's"}, {"source_name": "lecture4", "index": 203, "time": "00:31:14.450 --> 00:31:16.179", "speaker": "Fahad Khan", "text": "Oh, no. Sorry. Yeah."}, {"source_name": "lecture4", "index": 204, "time": "00:31:16.220 --> 00:31:17.540", "speaker": "Alexander Vasserman", "text": "Alex."}, {"source_name": "lecture4", "index": 205, "time": "00:31:18.380 --> 00:31:22.500", "speaker": "Alex Wojtowicz", "text": "So the interpreter kind of like a runtime environment reads and runs the code"}, {"source_name": "lecture4", "index": 206, "time": "00:31:22.560 --> 00:31:25.040", "speaker": "Alexander Vasserman", "text": "Exactly. That's that's exactly right."}, {"source_name": "lecture4", "index": 207, "time": "00:31:28.710 --> 00:31:30.250", "speaker": "Alexander Vasserman", "text": "Okay. So"}, {"source_name": "lecture4", "index": 208, "time": "00:31:31.030 --> 00:31:39.979", "speaker": "Alexander Vasserman", "text": "did everybody have a chance to open up for a pie charm and create a a project?"}, {"source_name": "lecture4", "index": 209, "time": "00:31:43.280 --> 00:31:46.530", "speaker": "Alexander Vasserman", "text": "I want to make sure that you guys can"}, {"source_name": "lecture4", "index": 210, "time": "00:31:46.610 --> 00:31:47.940", "speaker": "Alexander Vasserman", "text": "follow along"}, {"source_name": "lecture4", "index": 211, "time": "00:31:48.330 --> 00:31:49.950", "speaker": "Alexander Vasserman", "text": "a little bit."}, {"source_name": "lecture4", "index": 212, "time": "00:31:50.150 --> 00:31:51.520", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture4", "index": 213, "time": "00:31:52.690 --> 00:31:53.600", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture4", "index": 214, "time": "00:31:54.730 --> 00:31:55.810", "speaker": "Alexander Vasserman", "text": "so far."}, {"source_name": "lecture4", "index": 215, "time": "00:31:55.970 --> 00:31:59.249", "speaker": "Alexander Vasserman", "text": "what we are saying is that we are going to define"}, {"source_name": "lecture4", "index": 216, "time": "00:32:00.000 --> 00:32:02.390", "speaker": "Alexander Vasserman", "text": "search as just the function"}, {"source_name": "lecture4", "index": 217, "time": "00:32:02.440 --> 00:32:04.050", "speaker": "Alexander Vasserman", "text": "right? That"}, {"source_name": "lecture4", "index": 218, "time": "00:32:04.250 --> 00:32:06.400", "speaker": "Alexander Vasserman", "text": "takes 2 arguments."}, {"source_name": "lecture4", "index": 219, "time": "00:32:07.230 --> 00:32:08.770", "speaker": "Alexander Vasserman", "text": "greedy and"}, {"source_name": "lecture4", "index": 220, "time": "00:32:11.930 --> 00:32:14.420", "speaker": "Alexander Vasserman", "text": "documents. Right? So that's"}, {"source_name": "lecture4", "index": 221, "time": "00:32:14.770 --> 00:32:18.369", "speaker": "Alexander Vasserman", "text": "something that you've seen before how to define a function"}, {"source_name": "lecture4", "index": 222, "time": "00:32:19.920 --> 00:32:21.050", "speaker": "Alexander Vasserman", "text": "For now"}, {"source_name": "lecture4", "index": 223, "time": "00:32:21.300 --> 00:32:26.000", "speaker": "Alexander Vasserman", "text": "we don't know exactly how it's going to be implemented. so here."}, {"source_name": "lecture4", "index": 224, "time": "00:32:26.420 --> 00:32:30.779", "speaker": "Alexander Vasserman", "text": "just going to keep on limitation as pass, which is, basically, do nothing"}, {"source_name": "lecture4", "index": 225, "time": "00:32:32.790 --> 00:32:34.559", "speaker": "Alexander Vasserman", "text": "brother, do you have a question?"}, {"source_name": "lecture4", "index": 226, "time": "00:32:34.610 --> 00:32:38.250", "speaker": "Alexander Vasserman", "text": "Yeah, Could you zoom in a little, if that's possible?"}, {"source_name": "lecture4", "index": 227, "time": "00:32:40.220 --> 00:32:41.340", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture4", "index": 228, "time": "00:32:43.200 --> 00:32:44.120", "speaker": "Alexander Vasserman", "text": "let's see."}, {"source_name": "lecture4", "index": 229, "time": "00:32:48.980 --> 00:33:03.460", "speaker": "Fahad Khan", "text": "Oh, I have a question, too. so when I created the matching dot pi file under my project file the the folder. It says, Invalid python interpreter selected for the project. I don't know"}, {"source_name": "lecture4", "index": 230, "time": "00:33:03.710 --> 00:33:04.979", "speaker": "Alexander Vasserman", "text": "what that"}, {"source_name": "lecture4", "index": 231, "time": "00:33:09.880 --> 00:33:13.580", "speaker": "Alexander Vasserman", "text": "Interesting. Yeah, I'm: not sure."}, {"source_name": "lecture4", "index": 232, "time": "00:33:15.230 --> 00:33:17.020", "speaker": "Alexander Vasserman", "text": "yeah. Maybe you can."}, {"source_name": "lecture4", "index": 233, "time": "00:33:17.180 --> 00:33:21.840", "speaker": "Alexander Vasserman", "text": "we can talk about it together later."}, {"source_name": "lecture4", "index": 234, "time": "00:33:22.360 --> 00:33:24.190", "speaker": "Alexander Vasserman", "text": "so yeah, I"}, {"source_name": "lecture4", "index": 235, "time": "00:33:24.740 --> 00:33:26.699", "speaker": "Alexander Vasserman", "text": "not sure. What that might be sorry."}, {"source_name": "lecture4", "index": 236, "time": "00:33:26.730 --> 00:33:27.390", "speaker": "Fahad Khan", "text": "All right."}, {"source_name": "lecture4", "index": 237, "time": "00:33:31.540 --> 00:33:33.370", "speaker": "Alexander Vasserman", "text": "Okay. So"}, {"source_name": "lecture4", "index": 238, "time": "00:33:33.850 --> 00:33:37.909", "speaker": "Alexander Vasserman", "text": "this is kind of the the function that we're going to."}, {"source_name": "lecture4", "index": 239, "time": "00:33:38.180 --> 00:33:46.269", "speaker": "Alexander Vasserman", "text": "Oh, right? Essentially throughout the class. It's going to get a little bit more complicated than that. but"}, {"source_name": "lecture4", "index": 240, "time": "00:33:46.300 --> 00:33:48.990", "speaker": "Alexander Vasserman", "text": "you know this kind of doesn't."}, {"source_name": "lecture4", "index": 241, "time": "00:33:50.000 --> 00:33:50.830", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 242, "time": "00:33:52.060 --> 00:34:02.360", "speaker": "Alexander Vasserman", "text": "doesn't give us that much information. So if you want to specify a little bit more information about what the arguments are, what the output is"}, {"source_name": "lecture4", "index": 243, "time": "00:34:03.020 --> 00:34:07.759", "speaker": "Alexander Vasserman", "text": "What we want is maybe a type on the patients. And so"}, {"source_name": "lecture4", "index": 244, "time": "00:34:10.179 --> 00:34:14.299", "speaker": "Alexander Vasserman", "text": "last time we looked a little bit at this typing library."}, {"source_name": "lecture4", "index": 245, "time": "00:34:14.440 --> 00:34:25.959", "speaker": "Alexander Vasserman", "text": "and kind of the the type annotation, some context of name tuples. But what we have seen is that you can put this colon and then type"}, {"source_name": "lecture4", "index": 246, "time": "00:34:26.050 --> 00:34:28.040", "speaker": "Alexander Vasserman", "text": "after a variable name."}, {"source_name": "lecture4", "index": 247, "time": "00:34:28.090 --> 00:34:29.430", "speaker": "Alexander Vasserman", "text": "to indicate"}, {"source_name": "lecture4", "index": 248, "time": "00:34:29.460 --> 00:34:31.710", "speaker": "Alexander Vasserman", "text": "what the type of that variable is"}, {"source_name": "lecture4", "index": 249, "time": "00:34:32.120 --> 00:34:33.169", "speaker": "Alexander Vasserman", "text": "so."}, {"source_name": "lecture4", "index": 250, "time": "00:34:33.449 --> 00:34:46.149", "speaker": "Alexander Vasserman", "text": "It's also very useful. The dame tables is one place where it's very useful to put those annotations function signatures, or basically they finish the first line, and the function"}, {"source_name": "lecture4", "index": 251, "time": "00:34:46.230 --> 00:34:52.769", "speaker": "Alexander Vasserman", "text": "which is what i'm gonna call function signature is the other place where it's extremely useful"}, {"source_name": "lecture4", "index": 252, "time": "00:34:52.820 --> 00:34:55.560", "speaker": "Alexander Vasserman", "text": "to put those type of notations."}, {"source_name": "lecture4", "index": 253, "time": "00:34:56.340 --> 00:34:57.559", "speaker": "Alexander Vasserman", "text": "And there"}, {"source_name": "lecture4", "index": 254, "time": "00:34:57.710 --> 00:35:07.549", "speaker": "Alexander Vasserman", "text": "typing library actually defines some of those annotations in addition to kind of default standard types. So in particular,"}, {"source_name": "lecture4", "index": 255, "time": "00:35:08.100 --> 00:35:10.539", "speaker": "Alexander Vasserman", "text": "it, there is a list that"}, {"source_name": "lecture4", "index": 256, "time": "00:35:10.850 --> 00:35:14.089", "speaker": "Alexander Vasserman", "text": "where you can specify also what"}, {"source_name": "lecture4", "index": 257, "time": "00:35:14.240 --> 00:35:18.500", "speaker": "Alexander Vasserman", "text": "or are the expected elements inside of a list."}, {"source_name": "lecture4", "index": 258, "time": "00:35:19.030 --> 00:35:22.430", "speaker": "Alexander Vasserman", "text": "So here this annotation"}, {"source_name": "lecture4", "index": 259, "time": "00:35:22.820 --> 00:35:26.430", "speaker": "Alexander Vasserman", "text": "says that documents in this particular case"}, {"source_name": "lecture4", "index": 260, "time": "00:35:26.480 --> 00:35:30.379", "speaker": "Alexander Vasserman", "text": "is just a list of things"}, {"source_name": "lecture4", "index": 261, "time": "00:35:31.350 --> 00:35:32.049", "speaker": "Alexander Vasserman", "text": "right"}, {"source_name": "lecture4", "index": 262, "time": "00:35:32.530 --> 00:35:36.960", "speaker": "Alexander Vasserman", "text": "previously. We saw that lists can really have"}, {"source_name": "lecture4", "index": 263, "time": "00:35:37.360 --> 00:35:38.229", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 264, "time": "00:35:38.470 --> 00:35:46.810", "speaker": "Alexander Vasserman", "text": "things in them of different types, and even in the same single list. You can have elements of different types generally. That's not a good practice."}, {"source_name": "lecture4", "index": 265, "time": "00:35:46.830 --> 00:35:48.219", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture4", "index": 266, "time": "00:35:48.720 --> 00:35:51.589", "speaker": "Alexander Vasserman", "text": "just makes things very confusing. And"}, {"source_name": "lecture4", "index": 267, "time": "00:35:51.740 --> 00:35:58.839", "speaker": "Alexander Vasserman", "text": "also when you're writing a function, you might want to say, okay? Well, this is what I expect"}, {"source_name": "lecture4", "index": 268, "time": "00:35:59.300 --> 00:36:05.730", "speaker": "Alexander Vasserman", "text": "the function to take, so that users of this functions kind of have that idea."}, {"source_name": "lecture4", "index": 269, "time": "00:36:11.140 --> 00:36:12.229", "speaker": "Alexander Vasserman", "text": "no."}, {"source_name": "lecture4", "index": 270, "time": "00:36:13.250 --> 00:36:16.789", "speaker": "Alexander Vasserman", "text": "Also we can specify the return type."}, {"source_name": "lecture4", "index": 271, "time": "00:36:17.000 --> 00:36:23.160", "speaker": "Alexander Vasserman", "text": "So the return type of function is specified using this kind of arrow. So just"}, {"source_name": "lecture4", "index": 272, "time": "00:36:23.240 --> 00:36:25.309", "speaker": "Alexander Vasserman", "text": "dash and greater sign"}, {"source_name": "lecture4", "index": 273, "time": "00:36:25.560 --> 00:36:26.939", "speaker": "Alexander Vasserman", "text": "type of error."}, {"source_name": "lecture4", "index": 274, "time": "00:36:27.070 --> 00:36:29.520", "speaker": "Alexander Vasserman", "text": "And here we can"}, {"source_name": "lecture4", "index": 275, "time": "00:36:29.570 --> 00:36:31.160", "speaker": "Alexander Vasserman", "text": "also"}, {"source_name": "lecture4", "index": 276, "time": "00:36:31.480 --> 00:36:32.410", "speaker": "Alexander Vasserman", "text": "see"}, {"source_name": "lecture4", "index": 277, "time": "00:36:32.550 --> 00:36:39.420", "speaker": "Alexander Vasserman", "text": "what they all type will be. And let's say again, you just have a list of strings as our results."}, {"source_name": "lecture4", "index": 278, "time": "00:36:45.450 --> 00:36:47.529", "speaker": "Alexander Vasserman", "text": "Does it make sense to everyone?"}, {"source_name": "lecture4", "index": 279, "time": "00:36:47.880 --> 00:36:52.090", "speaker": "Alexander Vasserman", "text": "Also it Everyone is familiar with the"}, {"source_name": "lecture4", "index": 280, "time": "00:36:52.180 --> 00:37:04.079", "speaker": "Alexander Vasserman", "text": "import mechanism and saying that, like you know, typing, that is just a way to to say that in the library typing there is an object least, and that's what i'm referring to. here."}, {"source_name": "lecture4", "index": 281, "time": "00:37:06.180 --> 00:37:07.500", "speaker": "Alexander Vasserman", "text": "Is that all"}, {"source_name": "lecture4", "index": 282, "time": "00:37:07.680 --> 00:37:09.360", "speaker": "Alexander Vasserman", "text": "clear any questions here."}, {"source_name": "lecture4", "index": 283, "time": "00:37:10.050 --> 00:37:14.239", "speaker": "Alexander Vasserman", "text": "This is probably something that you have not seen in Python before."}, {"source_name": "lecture4", "index": 284, "time": "00:37:16.800 --> 00:37:25.580", "speaker": "Alexander Vasserman", "text": "There is a little bit of a caveat if you've done other languages than Python before, most likely."}, {"source_name": "lecture4", "index": 285, "time": "00:37:25.610 --> 00:37:32.360", "speaker": "Alexander Vasserman", "text": "or you've seen strongly typed languages where you have to, define"}, {"source_name": "lecture4", "index": 286, "time": "00:37:33.050 --> 00:37:37.469", "speaker": "Alexander Vasserman", "text": "any type for a particular variable, or you know. In in some cases"}, {"source_name": "lecture4", "index": 287, "time": "00:37:38.060 --> 00:37:48.919", "speaker": "Alexander Vasserman", "text": "the type is derived, but a variable have. All this has a specific type. Python is not one of those languages, and so these"}, {"source_name": "lecture4", "index": 288, "time": "00:37:48.950 --> 00:37:49.959", "speaker": "Alexander Vasserman", "text": "types."}, {"source_name": "lecture4", "index": 289, "time": "00:37:50.240 --> 00:37:52.179", "speaker": "Alexander Vasserman", "text": "They are just kind of"}, {"source_name": "lecture4", "index": 290, "time": "00:37:52.580 --> 00:37:55.939", "speaker": "Alexander Vasserman", "text": "annotations to help other programmers."}, {"source_name": "lecture4", "index": 291, "time": "00:37:56.270 --> 00:37:58.290", "speaker": "Alexander Vasserman", "text": "at the runtime"}, {"source_name": "lecture4", "index": 292, "time": "00:37:58.550 --> 00:38:01.220", "speaker": "Alexander Vasserman", "text": "python doesn't actually care about them."}, {"source_name": "lecture4", "index": 293, "time": "00:38:01.330 --> 00:38:09.010", "speaker": "Alexander Vasserman", "text": "So it's just because you put them here the interpreter will not enforce it."}, {"source_name": "lecture4", "index": 294, "time": "00:38:09.180 --> 00:38:11.220", "speaker": "Alexander Vasserman", "text": "but the"}, {"source_name": "lecture4", "index": 295, "time": "00:38:11.660 --> 00:38:22.800", "speaker": "Alexander Vasserman", "text": "our editor will actually help for some hints. And so, if you in the editor call this function with the wrong types of arguments."}, {"source_name": "lecture4", "index": 296, "time": "00:38:22.830 --> 00:38:32.819", "speaker": "Alexander Vasserman", "text": "It's going to highlight that call. And point you to the fact that well, the arguments you're supplying. Don't look like what the function expect. So it's it's very convenient"}, {"source_name": "lecture4", "index": 297, "time": "00:38:34.440 --> 00:38:35.790", "speaker": "Alexander Vasserman", "text": "Alex."}, {"source_name": "lecture4", "index": 298, "time": "00:38:36.440 --> 00:38:38.129", "speaker": "Alex Wojtowicz", "text": "So if I have like a"}, {"source_name": "lecture4", "index": 299, "time": "00:38:38.180 --> 00:38:41.120", "speaker": "Alex Wojtowicz", "text": "variable of type and integer."}, {"source_name": "lecture4", "index": 300, "time": "00:38:41.190 --> 00:38:46.450", "speaker": "Alex Wojtowicz", "text": "and I try and write into it a string. You will python automatically. Try and"}, {"source_name": "lecture4", "index": 301, "time": "00:38:46.670 --> 00:38:50.100", "speaker": "Alex Wojtowicz", "text": "change that into a string type, or will it just crash?"}, {"source_name": "lecture4", "index": 302, "time": "00:38:50.420 --> 00:39:00.810", "speaker": "Alexander Vasserman", "text": "No, python will, you know, happily assign a string to that variable. And now the type of thing that's inside of that variable is the same."}, {"source_name": "lecture4", "index": 303, "time": "00:39:00.990 --> 00:39:12.829", "speaker": "Alexander Vasserman", "text": "so Python just generally does not have types for variables. It only values have types. Right? So you know, a particular object"}, {"source_name": "lecture4", "index": 304, "time": "00:39:13.090 --> 00:39:22.640", "speaker": "Alexander Vasserman", "text": "is a stream, or an int, or a class, or of a particular type, or something else. but variables do not have types."}, {"source_name": "lecture4", "index": 305, "time": "00:39:23.330 --> 00:39:24.040", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture4", "index": 306, "time": "00:39:24.420 --> 00:39:28.390", "speaker": "Alexander Vasserman", "text": "right? but the concept of a"}, {"source_name": "lecture4", "index": 307, "time": "00:39:28.410 --> 00:39:30.719", "speaker": "Alexander Vasserman", "text": "type is very convenient."}, {"source_name": "lecture4", "index": 308, "time": "00:39:30.750 --> 00:39:31.680", "speaker": "Alexander Vasserman", "text": "It's"}, {"source_name": "lecture4", "index": 309, "time": "00:39:31.990 --> 00:39:40.859", "speaker": "Alexander Vasserman", "text": "exist in a lot of other languages so, or there is a library and syntax or type annotations"}, {"source_name": "lecture4", "index": 310, "time": "00:39:40.930 --> 00:39:48.189", "speaker": "Alexander Vasserman", "text": "and I find it extremely useful. and especially when you're writing larger pieces of code."}, {"source_name": "lecture4", "index": 311, "time": "00:39:48.480 --> 00:39:56.049", "speaker": "Alexander Vasserman", "text": "that helps out a lot so as much as possible. I try to add those to my code."}, {"source_name": "lecture4", "index": 312, "time": "00:39:56.370 --> 00:40:00.360", "speaker": "Alex Wojtowicz", "text": "So it's purely just like a cosmetic thing. Just so. People know what they're doing"}, {"source_name": "lecture4", "index": 313, "time": "00:40:00.690 --> 00:40:02.799", "speaker": "Alexander Vasserman", "text": "exactly. Yes, it's"}, {"source_name": "lecture4", "index": 314, "time": "00:40:02.910 --> 00:40:10.899", "speaker": "Alexander Vasserman", "text": "for people and for the editor. So editors sometimes can you can. but it's not for Python. Itself."}, {"source_name": "lecture4", "index": 315, "time": "00:40:11.040 --> 00:40:12.089", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture4", "index": 316, "time": "00:40:12.200 --> 00:40:12.859", "speaker": "Alexander Vasserman", "text": "Yeah."}, {"source_name": "lecture4", "index": 317, "time": "00:40:17.540 --> 00:40:18.479", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture4", "index": 318, "time": "00:40:19.320 --> 00:40:22.199", "speaker": "Alexander Vasserman", "text": "yeah. So basically this is kind of"}, {"source_name": "lecture4", "index": 319, "time": "00:40:22.300 --> 00:40:26.000", "speaker": "Alexander Vasserman", "text": "some function that. we can."}, {"source_name": "lecture4", "index": 320, "time": "00:40:27.100 --> 00:40:28.029", "speaker": "Alexander Vasserman", "text": "Cool"}, {"source_name": "lecture4", "index": 321, "time": "00:40:28.190 --> 00:40:31.809", "speaker": "Alexander Vasserman", "text": "from our interpreter or from another place."}, {"source_name": "lecture4", "index": 322, "time": "00:40:32.080 --> 00:40:38.669", "speaker": "Alexander Vasserman", "text": "so we can start with the using interpreter. but I guess first, Brian, do you have a question."}, {"source_name": "lecture4", "index": 323, "time": "00:40:40.360 --> 00:40:45.059", "speaker": "Brian McClendon", "text": "so is there no way at all to prevent the"}, {"source_name": "lecture4", "index": 324, "time": "00:40:45.490 --> 00:40:50.069", "speaker": "Brian McClendon", "text": "your function from returning a type that you don't want without manually making sure it doesn't."}, {"source_name": "lecture4", "index": 325, "time": "00:40:50.890 --> 00:40:56.269", "speaker": "Alexander Vasserman", "text": "Yes, there is no no way to to say anything about types in Python you can"}, {"source_name": "lecture4", "index": 326, "time": "00:40:56.510 --> 00:40:58.899", "speaker": "Alexander Vasserman", "text": "there is,"}, {"source_name": "lecture4", "index": 327, "time": "00:40:58.960 --> 00:41:10.669", "speaker": "Alexander Vasserman", "text": "in operator the call type. You can find out the type of a value, so you can say type, and then prices some some expression, and Python will"}, {"source_name": "lecture4", "index": 328, "time": "00:41:10.820 --> 00:41:18.600", "speaker": "Alexander Vasserman", "text": "tell you an expression of what what type it is, or there are other functions like instance of which"}, {"source_name": "lecture4", "index": 329, "time": "00:41:18.840 --> 00:41:21.080", "speaker": "Alexander Vasserman", "text": "helps you identify."}, {"source_name": "lecture4", "index": 330, "time": "00:41:21.440 --> 00:41:25.200", "speaker": "Alexander Vasserman", "text": "whether or not a particular at the runtime, or"}, {"source_name": "lecture4", "index": 331, "time": "00:41:25.430 --> 00:41:26.250", "speaker": "Alexander Vasserman", "text": "what."}, {"source_name": "lecture4", "index": 332, "time": "00:41:26.400 --> 00:41:35.120", "speaker": "Alexander Vasserman", "text": "whether or not a particular expression evaluates to a type that you expect. And so sometimes you'll see code where."}, {"source_name": "lecture4", "index": 333, "time": "00:41:35.150 --> 00:41:36.029", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture4", "index": 334, "time": "00:41:36.420 --> 00:41:37.339", "speaker": "Alexander Vasserman", "text": "there!"}, {"source_name": "lecture4", "index": 335, "time": "00:41:37.520 --> 00:41:41.119", "speaker": "Alexander Vasserman", "text": "And if statement on if this"}, {"source_name": "lecture4", "index": 336, "time": "00:41:41.210 --> 00:41:49.170", "speaker": "Alexander Vasserman", "text": "variable is of this type or value that this variable refers to to more precisely is of this particular type."}, {"source_name": "lecture4", "index": 337, "time": "00:41:49.450 --> 00:41:51.730", "speaker": "Alexander Vasserman", "text": "Do x, Y. And Z."}, {"source_name": "lecture4", "index": 338, "time": "00:41:51.850 --> 00:41:54.220", "speaker": "Alexander Vasserman", "text": "Otherwise do something else."}, {"source_name": "lecture4", "index": 339, "time": "00:41:54.560 --> 00:41:56.740", "speaker": "Alexander Vasserman", "text": "so that's something that's"}, {"source_name": "lecture4", "index": 340, "time": "00:41:56.960 --> 00:41:57.859", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 341, "time": "00:41:58.350 --> 00:42:00.550", "speaker": "Alexander Vasserman", "text": "you have to do in python, if"}, {"source_name": "lecture4", "index": 342, "time": "00:42:00.720 --> 00:42:01.720", "speaker": "Alexander Vasserman", "text": "you"}, {"source_name": "lecture4", "index": 343, "time": "00:42:02.740 --> 00:42:04.580", "speaker": "Alexander Vasserman", "text": "Oh, don't trust"}, {"source_name": "lecture4", "index": 344, "time": "00:42:04.830 --> 00:42:10.100", "speaker": "Alexander Vasserman", "text": "the user. Or want to protect the user for of your function from doing something wrong."}, {"source_name": "lecture4", "index": 345, "time": "00:42:10.510 --> 00:42:13.770", "speaker": "Alexander Vasserman", "text": "it's definitely something to keep in mind."}, {"source_name": "lecture4", "index": 346, "time": "00:42:13.800 --> 00:42:26.849", "speaker": "Alexander Vasserman", "text": "because as we start using these things, sometimes you'll forget the type, and maybe you use a a variable of different type, and you'll"}, {"source_name": "lecture4", "index": 347, "time": "00:42:26.980 --> 00:42:32.479", "speaker": "Alexander Vasserman", "text": "sometimes python will not complain and execute things. and"}, {"source_name": "lecture4", "index": 348, "time": "00:42:32.750 --> 00:42:42.039", "speaker": "Alexander Vasserman", "text": "you'll get an output. But dial cook might not make sense, because the type of the thing that you've supply is actually not what you expected. So, for example."}, {"source_name": "lecture4", "index": 349, "time": "00:42:42.850 --> 00:42:43.839", "speaker": "Alexander Vasserman", "text": "here."}, {"source_name": "lecture4", "index": 350, "time": "00:42:44.120 --> 00:42:46.839", "speaker": "Alexander Vasserman", "text": "or you know it. Documents?"}, {"source_name": "lecture4", "index": 351, "time": "00:42:47.130 --> 00:42:52.819", "speaker": "Alexander Vasserman", "text": "Oh, one mistake would be. Instead of multiple documents, you supply just single documents, single string."}, {"source_name": "lecture4", "index": 352, "time": "00:42:53.200 --> 00:42:59.150", "speaker": "Alexander Vasserman", "text": "And you know, if all we're doing is things like iterating over the documents or other things like that."}, {"source_name": "lecture4", "index": 353, "time": "00:42:59.220 --> 00:43:12.009", "speaker": "Alexander Vasserman", "text": "Python will happily do that, because a single stream is also something you can iterate over and search inside, etc. So sometimes you know, Python will do things that you do not expect to do"}, {"source_name": "lecture4", "index": 354, "time": "00:43:12.650 --> 00:43:17.699", "speaker": "Alexander Vasserman", "text": "types Don't match, so it's it's kind of a trade off Python kind of optimizes for"}, {"source_name": "lecture4", "index": 355, "time": "00:43:17.920 --> 00:43:26.540", "speaker": "Alexander Vasserman", "text": "faster writing and more more flexibility. But it's also means that that flexibility can curt you"}, {"source_name": "lecture4", "index": 356, "time": "00:43:30.000 --> 00:43:31.940", "speaker": "Alexander Vasserman", "text": "any other questions."}, {"source_name": "lecture4", "index": 357, "time": "00:43:35.160 --> 00:43:36.680", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture4", "index": 358, "time": "00:43:37.830 --> 00:43:39.979", "speaker": "Alexander Vasserman", "text": "the way we are going to"}, {"source_name": "lecture4", "index": 359, "time": "00:43:40.570 --> 00:43:46.239", "speaker": "Alexander Vasserman", "text": "run something like this from the interpreter would be also to just"}, {"source_name": "lecture4", "index": 360, "time": "00:43:46.360 --> 00:43:47.430", "speaker": "Alexander Vasserman", "text": "import"}, {"source_name": "lecture4", "index": 361, "time": "00:43:47.490 --> 00:43:51.380", "speaker": "Alexander Vasserman", "text": "the file. So here we will say, import matching."}, {"source_name": "lecture4", "index": 362, "time": "00:43:52.320 --> 00:43:53.720", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture4", "index": 363, "time": "00:43:54.210 --> 00:43:55.759", "speaker": "Alexander Vasserman", "text": "then we can say."}, {"source_name": "lecture4", "index": 364, "time": "00:43:55.860 --> 00:43:56.810", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 365, "time": "00:43:57.950 --> 00:44:00.189", "speaker": "Alexander Vasserman", "text": "matching dot"}, {"source_name": "lecture4", "index": 366, "time": "00:44:02.240 --> 00:44:03.259", "speaker": "Alexander Vasserman", "text": "search."}, {"source_name": "lecture4", "index": 367, "time": "00:44:03.900 --> 00:44:06.529", "speaker": "Alexander Vasserman", "text": "and let's say, have"}, {"source_name": "lecture4", "index": 368, "time": "00:44:06.700 --> 00:44:07.640", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 369, "time": "00:44:10.400 --> 00:44:11.470", "speaker": "Alexander Vasserman", "text": "i'll just"}, {"source_name": "lecture4", "index": 370, "time": "00:44:11.560 --> 00:44:17.400", "speaker": "Alexander Vasserman", "text": "abbreviate, and so the info is my query then, and"}, {"source_name": "lecture4", "index": 371, "time": "00:44:18.280 --> 00:44:20.360", "speaker": "Alexander Vasserman", "text": "list of documents."}, {"source_name": "lecture4", "index": 372, "time": "00:44:20.630 --> 00:44:21.569", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 373, "time": "00:44:25.160 --> 00:44:27.840", "speaker": "Alexander Vasserman", "text": "maybe it is something like that."}, {"source_name": "lecture4", "index": 374, "time": "00:44:37.820 --> 00:44:39.229", "speaker": "Alexander Vasserman", "text": "as"}, {"source_name": "lecture4", "index": 375, "time": "00:44:39.710 --> 00:44:48.439", "speaker": "Alexander Vasserman", "text": "I've mentioned before. Oftentimes it's nice to actually, when you have multiple arguments to function."}, {"source_name": "lecture4", "index": 376, "time": "00:44:49.360 --> 00:44:56.489", "speaker": "Alexander Vasserman", "text": "he is to name that those arguments explicitly inside the call, so to say, this is my query."}, {"source_name": "lecture4", "index": 377, "time": "00:44:56.520 --> 00:44:57.830", "speaker": "Alexander Vasserman", "text": "and this is"}, {"source_name": "lecture4", "index": 378, "time": "00:44:57.860 --> 00:45:00.240", "speaker": "Alexander Vasserman", "text": "documents"}, {"source_name": "lecture4", "index": 379, "time": "00:45:00.380 --> 00:45:09.849", "speaker": "Alexander Vasserman", "text": "that makes it much easier to understand what's going on here when you just look at this function call, and so we can run it. Of course. Nothing that."}, {"source_name": "lecture4", "index": 380, "time": "00:45:10.790 --> 00:45:13.809", "speaker": "Alexander Vasserman", "text": "of course, I also need to type correctly."}, {"source_name": "lecture4", "index": 381, "time": "00:45:16.200 --> 00:45:16.790", "speaker": "Alexander Vasserman", "text": "Yeah."}, {"source_name": "lecture4", "index": 382, "time": "00:45:23.870 --> 00:45:24.589", "speaker": "Alexander Vasserman", "text": "right?"}, {"source_name": "lecture4", "index": 383, "time": "00:45:25.010 --> 00:45:25.850", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture4", "index": 384, "time": "00:45:25.970 --> 00:45:31.169", "speaker": "Alexander Vasserman", "text": "of course, this function doesn't do anything right now. but"}, {"source_name": "lecture4", "index": 385, "time": "00:45:31.430 --> 00:45:38.149", "speaker": "Alexander Vasserman", "text": "but at the very least python interpreter, now that I've given it names of the arguments check that"}, {"source_name": "lecture4", "index": 386, "time": "00:45:38.240 --> 00:45:41.430", "speaker": "Alexander Vasserman", "text": "I have the right that you may, or like least the existing arguments"}, {"source_name": "lecture4", "index": 387, "time": "00:45:42.610 --> 00:45:43.830", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture4", "index": 388, "time": "00:45:44.390 --> 00:45:45.419", "speaker": "Alexander Vasserman", "text": "Bill being"}, {"source_name": "lecture4", "index": 389, "time": "00:45:45.870 --> 00:45:47.069", "speaker": "Alexander Vasserman", "text": "implementing"}, {"source_name": "lecture4", "index": 390, "time": "00:45:47.400 --> 00:45:49.289", "speaker": "Alexander Vasserman", "text": "this function."}, {"source_name": "lecture4", "index": 391, "time": "00:45:49.910 --> 00:45:52.350", "speaker": "Alexander Vasserman", "text": "Another thing that"}, {"source_name": "lecture4", "index": 392, "time": "00:45:52.580 --> 00:45:54.100", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture4", "index": 393, "time": "00:45:54.300 --> 00:45:55.429", "speaker": "Alexander Vasserman", "text": "talked about"}, {"source_name": "lecture4", "index": 394, "time": "00:45:56.300 --> 00:45:58.779", "speaker": "Alexander Vasserman", "text": "is to define."}, {"source_name": "lecture4", "index": 395, "time": "00:45:59.040 --> 00:46:01.099", "speaker": "Alexander Vasserman", "text": "What does it mean"}, {"source_name": "lecture4", "index": 396, "time": "00:46:01.160 --> 00:46:03.849", "speaker": "Alexander Vasserman", "text": "that a document the is"}, {"source_name": "lecture4", "index": 397, "time": "00:46:03.980 --> 00:46:05.029", "speaker": "Alexander Vasserman", "text": "relevant?"}, {"source_name": "lecture4", "index": 398, "time": "00:46:05.480 --> 00:46:06.520", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture4", "index": 399, "time": "00:46:06.680 --> 00:46:12.850", "speaker": "Alexander Vasserman", "text": "let's say we'll have a match function that has a query. That's a string"}, {"source_name": "lecture4", "index": 400, "time": "00:46:13.160 --> 00:46:14.740", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture4", "index": 401, "time": "00:46:15.230 --> 00:46:16.770", "speaker": "Alexander Vasserman", "text": "a single document."}, {"source_name": "lecture4", "index": 402, "time": "00:46:17.980 --> 00:46:20.289", "speaker": "Alexander Vasserman", "text": "that's also 3,"}, {"source_name": "lecture4", "index": 403, "time": "00:46:20.390 --> 00:46:22.080", "speaker": "Alexander Vasserman", "text": "and we'll want you"}, {"source_name": "lecture4", "index": 404, "time": "00:46:22.200 --> 00:46:25.689", "speaker": "Alexander Vasserman", "text": "return a to say"}, {"source_name": "lecture4", "index": 405, "time": "00:46:25.770 --> 00:46:28.290", "speaker": "Alexander Vasserman", "text": "whether or not"}, {"source_name": "lecture4", "index": 406, "time": "00:46:30.100 --> 00:46:31.479", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture4", "index": 407, "time": "00:46:32.050 --> 00:46:34.419", "speaker": "Alexander Vasserman", "text": "document matches the greedy"}, {"source_name": "lecture4", "index": 408, "time": "00:46:36.090 --> 00:46:41.109", "speaker": "Alexander Vasserman", "text": "right? So that's kind of going back to our whole question."}, {"source_name": "lecture4", "index": 409, "time": "00:46:41.140 --> 00:46:43.720", "speaker": "Alexander Vasserman", "text": "well, how do we know?"}, {"source_name": "lecture4", "index": 410, "time": "00:46:43.760 --> 00:46:51.459", "speaker": "Alexander Vasserman", "text": "Oh, what do we want to look for? Is it like different terms? It's that right? Well, so that's a function that we might want to define."}, {"source_name": "lecture4", "index": 411, "time": "00:46:54.470 --> 00:46:56.250", "speaker": "Alexander Vasserman", "text": "make sense to everyone."}, {"source_name": "lecture4", "index": 412, "time": "00:46:58.640 --> 00:47:00.799", "speaker": "Alexander Vasserman", "text": "So that's what we're going to be doing today."}, {"source_name": "lecture4", "index": 413, "time": "00:47:03.690 --> 00:47:05.200", "speaker": "Alexander Vasserman", "text": "Any questions"}, {"source_name": "lecture4", "index": 414, "time": "00:47:06.580 --> 00:47:09.279", "speaker": "Fahad Khan", "text": "Could you just repeat the last part, what you just said."}, {"source_name": "lecture4", "index": 415, "time": "00:47:10.310 --> 00:47:11.490", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture4", "index": 416, "time": "00:47:11.810 --> 00:47:19.519", "speaker": "Alexander Vasserman", "text": "basically one of the things that we'll want to work on today is defining what means for a document to be relevant to"}, {"source_name": "lecture4", "index": 417, "time": "00:47:19.620 --> 00:47:29.419", "speaker": "Alexander Vasserman", "text": "for a particular query, or, in other words, to define whether or not a particular document matches a particular query."}, {"source_name": "lecture4", "index": 418, "time": "00:47:30.000 --> 00:47:36.509", "speaker": "Alexander Vasserman", "text": "So today they'll define. I will start looking at different definitions of this match function"}, {"source_name": "lecture4", "index": 419, "time": "00:47:36.590 --> 00:47:39.770", "speaker": "Alexander Vasserman", "text": "that has this type of signature."}, {"source_name": "lecture4", "index": 420, "time": "00:47:39.960 --> 00:47:40.799", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 421, "time": "00:47:40.820 --> 00:47:45.019", "speaker": "Alexander Vasserman", "text": "that will determine whether or not the particular document"}, {"source_name": "lecture4", "index": 422, "time": "00:47:47.660 --> 00:47:48.830", "speaker": "Alexander Vasserman", "text": "matches."}, {"source_name": "lecture4", "index": 423, "time": "00:47:49.390 --> 00:47:50.319", "speaker": "Alexander Vasserman", "text": "the query."}, {"source_name": "lecture4", "index": 424, "time": "00:47:51.480 --> 00:47:54.210", "speaker": "Alexander Vasserman", "text": "or is relevant for for for the given query"}, {"source_name": "lecture4", "index": 425, "time": "00:47:56.200 --> 00:47:57.099", "speaker": "Alexander Vasserman", "text": "make sense."}, {"source_name": "lecture4", "index": 426, "time": "00:47:58.690 --> 00:47:59.540", "speaker": "Fahad Khan", "text": "Yes."}, {"source_name": "lecture4", "index": 427, "time": "00:47:59.870 --> 00:48:01.290", "speaker": "Alexander Vasserman", "text": "okay. So"}, {"source_name": "lecture4", "index": 428, "time": "00:48:01.800 --> 00:48:03.359", "speaker": "Alexander Vasserman", "text": "just to kind of"}, {"source_name": "lecture4", "index": 429, "time": "00:48:03.650 --> 00:48:08.019", "speaker": "Alexander Vasserman", "text": "Oh, yeah, that's that's why that I meant to go over"}, {"source_name": "lecture4", "index": 430, "time": "00:48:08.040 --> 00:48:14.559", "speaker": "Alexander Vasserman", "text": "beforehand. But yes, so basically when we are defining a search we need to"}, {"source_name": "lecture4", "index": 431, "time": "00:48:14.920 --> 00:48:16.640", "speaker": "Alexander Vasserman", "text": "figure out"}, {"source_name": "lecture4", "index": 432, "time": "00:48:17.620 --> 00:48:23.529", "speaker": "Alexander Vasserman", "text": "bunch of questions. but some of the questions are, you know, how do we define what what it means"}, {"source_name": "lecture4", "index": 433, "time": "00:48:23.700 --> 00:48:28.659", "speaker": "Alexander Vasserman", "text": "to be relevant for a document. So this is just what we talked about with marriage."}, {"source_name": "lecture4", "index": 434, "time": "00:48:28.920 --> 00:48:44.239", "speaker": "Alexander Vasserman", "text": "how do we represent document collection right now? We said, okay, that's just list of strings. Of course, that we just passed into the function. Of course, that's not going to scale, so we'll need to change that eventually. how do we represent the return documents."}, {"source_name": "lecture4", "index": 435, "time": "00:48:44.640 --> 00:49:01.150", "speaker": "Alexander Vasserman", "text": "right now. Obviously, that's just, or also going to be list of things, and we didn't even specify what kind of strings that is. I mean the documents if you looked at before, here are short enough so in the example that we can just return that stream."}, {"source_name": "lecture4", "index": 436, "time": "00:49:01.180 --> 00:49:16.960", "speaker": "Alexander Vasserman", "text": "you know, for lower longer documents. Now that becomes a question. What do you include in the into that saying that you return? you know, later on we might return instead of anything about the document. Just the idea of the document. And then"}, {"source_name": "lecture4", "index": 437, "time": "00:49:16.970 --> 00:49:23.250", "speaker": "Alexander Vasserman", "text": "I have a separate system. That may be changes things to some"}, {"source_name": "lecture4", "index": 438, "time": "00:49:23.370 --> 00:49:28.169", "speaker": "Alexander Vasserman", "text": "text representation, etc. But that's something that like kind of comes out"}, {"source_name": "lecture4", "index": 439, "time": "00:49:28.270 --> 00:49:29.149", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture4", "index": 440, "time": "00:49:29.800 --> 00:49:30.959", "speaker": "Alexander Vasserman", "text": "very"}, {"source_name": "lecture4", "index": 441, "time": "00:49:31.040 --> 00:49:42.630", "speaker": "Alexander Vasserman", "text": "directly from even looking at the function definition that we just looked at, and also the ordering of results is kind of a very"}, {"source_name": "lecture4", "index": 442, "time": "00:49:43.410 --> 00:49:51.250", "speaker": "Alexander Vasserman", "text": "important question that we haven't really talked about and will not talk about today."}, {"source_name": "lecture4", "index": 443, "time": "00:49:51.280 --> 00:49:52.560", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture4", "index": 444, "time": "00:49:53.010 --> 00:49:55.809", "speaker": "Alexander Vasserman", "text": "that was one of the"}, {"source_name": "lecture4", "index": 445, "time": "00:49:55.860 --> 00:49:58.459", "speaker": "Alexander Vasserman", "text": "big differences they said"}, {"source_name": "lecture4", "index": 446, "time": "00:49:58.500 --> 00:50:11.590", "speaker": "Alexander Vasserman", "text": "was between the search engine and something that they did like a database system that the results should be ordered by relevance. So relevance is not just the Buddha and functions of the the"}, {"source_name": "lecture4", "index": 447, "time": "00:50:12.240 --> 00:50:17.819", "speaker": "Alexander Vasserman", "text": "are defining it today, but it should be something that allows us to say that"}, {"source_name": "lecture4", "index": 448, "time": "00:50:17.980 --> 00:50:23.080", "speaker": "Alexander Vasserman", "text": "a particular document is more relevant than another document for this given query."}, {"source_name": "lecture4", "index": 449, "time": "00:50:23.620 --> 00:50:27.800", "speaker": "Alexander Vasserman", "text": "so these are some of the questions that we'll be solving."}, {"source_name": "lecture4", "index": 450, "time": "00:50:29.020 --> 00:50:30.559", "speaker": "Alexander Vasserman", "text": "And so now let's"}, {"source_name": "lecture4", "index": 451, "time": "00:50:31.050 --> 00:50:35.440", "speaker": "Alexander Vasserman", "text": "started talking about this matching functions. So what?"}, {"source_name": "lecture4", "index": 452, "time": "00:50:35.600 --> 00:50:44.339", "speaker": "Alexander Vasserman", "text": "Or are some of the marching functions that we might want to do so we could do say, direct street matching. What do I mean by that?"}, {"source_name": "lecture4", "index": 453, "time": "00:50:44.400 --> 00:50:46.169", "speaker": "Alexander Vasserman", "text": "well, let's"}, {"source_name": "lecture4", "index": 454, "time": "00:50:46.960 --> 00:50:48.720", "speaker": "Alexander Vasserman", "text": "just say that."}, {"source_name": "lecture4", "index": 455, "time": "00:50:49.220 --> 00:50:50.149", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 456, "time": "00:50:50.570 --> 00:50:51.529", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture4", "index": 457, "time": "00:50:52.310 --> 00:50:53.729", "speaker": "Alexander Vasserman", "text": "here you turn."}, {"source_name": "lecture4", "index": 458, "time": "00:50:59.280 --> 00:51:02.970", "speaker": "Alexander Vasserman", "text": "just return that right? So basically they'll say"}, {"source_name": "lecture4", "index": 459, "time": "00:51:03.100 --> 00:51:06.699", "speaker": "Alexander Vasserman", "text": "if the query string is inside of the document stream"}, {"source_name": "lecture4", "index": 460, "time": "00:51:08.790 --> 00:51:09.949", "speaker": "Alexander Vasserman", "text": "that's a match."}, {"source_name": "lecture4", "index": 461, "time": "00:51:10.410 --> 00:51:12.649", "speaker": "Alexander Vasserman", "text": "right? And"}, {"source_name": "lecture4", "index": 462, "time": "00:51:15.270 --> 00:51:16.470", "speaker": "Alexander Vasserman", "text": "yeah, and"}, {"source_name": "lecture4", "index": 463, "time": "00:51:16.520 --> 00:51:17.540", "speaker": "Alexander Vasserman", "text": "it's it"}, {"source_name": "lecture4", "index": 464, "time": "00:51:17.960 --> 00:51:19.860", "speaker": "Alexander Vasserman", "text": "a reasonable definition."}, {"source_name": "lecture4", "index": 465, "time": "00:51:20.210 --> 00:51:23.049", "speaker": "Alexander Vasserman", "text": "so we might want to"}, {"source_name": "lecture4", "index": 466, "time": "00:51:23.090 --> 00:51:25.099", "speaker": "Alexander Vasserman", "text": "play around with it in the"}, {"source_name": "lecture4", "index": 467, "time": "00:51:25.290 --> 00:51:26.720", "speaker": "Alexander Vasserman", "text": "or interpreter."}, {"source_name": "lecture4", "index": 468, "time": "00:51:26.860 --> 00:51:27.709", "speaker": "Alexander Vasserman", "text": "Right?"}, {"source_name": "lecture4", "index": 469, "time": "00:51:27.880 --> 00:51:28.919", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture4", "index": 470, "time": "00:51:29.260 --> 00:51:32.049", "speaker": "Alexander Vasserman", "text": "one tricky thing with the"}, {"source_name": "lecture4", "index": 471, "time": "00:51:32.070 --> 00:51:34.190", "speaker": "Alexander Vasserman", "text": "mixing the interpreter"}, {"source_name": "lecture4", "index": 472, "time": "00:51:34.330 --> 00:51:36.359", "speaker": "Alexander Vasserman", "text": "with the editor"}, {"source_name": "lecture4", "index": 473, "time": "00:51:36.410 --> 00:51:38.589", "speaker": "Alexander Vasserman", "text": "The way i'm doing it here"}, {"source_name": "lecture4", "index": 474, "time": "00:51:38.850 --> 00:51:40.450", "speaker": "Alexander Vasserman", "text": "is that"}, {"source_name": "lecture4", "index": 475, "time": "00:51:40.680 --> 00:51:42.729", "speaker": "Alexander Vasserman", "text": "I have modified"}, {"source_name": "lecture4", "index": 476, "time": "00:51:42.890 --> 00:51:47.189", "speaker": "Alexander Vasserman", "text": "the file, matching the py after I imported it."}, {"source_name": "lecture4", "index": 477, "time": "00:51:47.360 --> 00:51:49.540", "speaker": "Alexander Vasserman", "text": "And so if I"}, {"source_name": "lecture4", "index": 478, "time": "00:51:49.620 --> 00:51:50.609", "speaker": "Alexander Vasserman", "text": "see"}, {"source_name": "lecture4", "index": 479, "time": "00:51:51.300 --> 00:51:53.709", "speaker": "Alexander Vasserman", "text": "matching dot"}, {"source_name": "lecture4", "index": 480, "time": "00:51:54.000 --> 00:51:55.120", "speaker": "Alexander Vasserman", "text": "match."}, {"source_name": "lecture4", "index": 481, "time": "00:51:56.700 --> 00:51:59.880", "speaker": "Alexander Vasserman", "text": "well, anything really. But let me"}, {"source_name": "lecture4", "index": 482, "time": "00:52:00.240 --> 00:52:02.790", "speaker": "Alexander Vasserman", "text": "give give it some strings"}, {"source_name": "lecture4", "index": 483, "time": "00:52:03.150 --> 00:52:03.919", "speaker": "Alexander Vasserman", "text": "oops"}, {"source_name": "lecture4", "index": 484, "time": "00:52:07.480 --> 00:52:12.660", "speaker": "Alexander Vasserman", "text": "what it's going to say is, Well, there is no match function in that file."}, {"source_name": "lecture4", "index": 485, "time": "00:52:13.100 --> 00:52:16.040", "speaker": "Alexander Vasserman", "text": "even if I say import"}, {"source_name": "lecture4", "index": 486, "time": "00:52:16.730 --> 00:52:18.799", "speaker": "Alexander Vasserman", "text": "matching again."}, {"source_name": "lecture4", "index": 487, "time": "00:52:19.740 --> 00:52:21.519", "speaker": "Alexander Vasserman", "text": "That's not going to help me."}, {"source_name": "lecture4", "index": 488, "time": "00:52:22.260 --> 00:52:24.240", "speaker": "Alexander Vasserman", "text": "unfortunately."}, {"source_name": "lecture4", "index": 489, "time": "00:52:24.370 --> 00:52:27.420", "speaker": "Alexander Vasserman", "text": "python interpreter actually cashes"}, {"source_name": "lecture4", "index": 490, "time": "00:52:27.780 --> 00:52:29.680", "speaker": "Alexander Vasserman", "text": "or remembers"}, {"source_name": "lecture4", "index": 491, "time": "00:52:29.790 --> 00:52:32.629", "speaker": "Alexander Vasserman", "text": "what we've imported before, and if you try"}, {"source_name": "lecture4", "index": 492, "time": "00:52:32.760 --> 00:52:37.300", "speaker": "Alexander Vasserman", "text": "to import it again, it just says, oh, I've imported it before, so i'm not going to do anything"}, {"source_name": "lecture4", "index": 493, "time": "00:52:38.120 --> 00:52:39.089", "speaker": "Alexander Vasserman", "text": "to"}, {"source_name": "lecture4", "index": 494, "time": "00:52:39.130 --> 00:52:40.709", "speaker": "Alexander Vasserman", "text": "what we need to do"}, {"source_name": "lecture4", "index": 495, "time": "00:52:40.790 --> 00:52:43.019", "speaker": "Alexander Vasserman", "text": "is actually"}, {"source_name": "lecture4", "index": 496, "time": "00:52:48.180 --> 00:52:52.850", "speaker": "Alexander Vasserman", "text": "have this import leave, which is the library that actually"}, {"source_name": "lecture4", "index": 497, "time": "00:52:52.930 --> 00:52:55.799", "speaker": "Alexander Vasserman", "text": "implement the import mechanism in python."}, {"source_name": "lecture4", "index": 498, "time": "00:52:56.060 --> 00:52:57.359", "speaker": "Alexander Vasserman", "text": "and say."}, {"source_name": "lecture4", "index": 499, "time": "00:53:01.370 --> 00:53:09.509", "speaker": "Alexander Vasserman", "text": "call a real odd method with the module. As the argument. So in our case the module is"}, {"source_name": "lecture4", "index": 500, "time": "00:53:09.700 --> 00:53:11.029", "speaker": "Alexander Vasserman", "text": "matching"}, {"source_name": "lecture4", "index": 501, "time": "00:53:12.150 --> 00:53:13.799", "speaker": "Alexander Vasserman", "text": "to explicitly"}, {"source_name": "lecture4", "index": 502, "time": "00:53:14.170 --> 00:53:16.340", "speaker": "Alexander Vasserman", "text": "ask Python to reload that."}, {"source_name": "lecture4", "index": 503, "time": "00:53:16.470 --> 00:53:18.119", "speaker": "Alexander Vasserman", "text": "And if"}, {"source_name": "lecture4", "index": 504, "time": "00:53:18.270 --> 00:53:20.910", "speaker": "Alexander Vasserman", "text": "after I've done that now"}, {"source_name": "lecture4", "index": 505, "time": "00:53:21.040 --> 00:53:22.250", "speaker": "Alexander Vasserman", "text": "python"}, {"source_name": "lecture4", "index": 506, "time": "00:53:22.830 --> 00:53:23.660", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture4", "index": 507, "time": "00:53:23.850 --> 00:53:26.069", "speaker": "Alexander Vasserman", "text": "actually here at the file."}, {"source_name": "lecture4", "index": 508, "time": "00:53:26.330 --> 00:53:27.469", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture4", "index": 509, "time": "00:53:27.700 --> 00:53:31.809", "speaker": "Alexander Vasserman", "text": "we can call match function. And"}, {"source_name": "lecture4", "index": 510, "time": "00:53:32.830 --> 00:53:34.109", "speaker": "Alexander Vasserman", "text": "oh, yeah."}, {"source_name": "lecture4", "index": 511, "time": "00:53:34.360 --> 00:53:38.579", "speaker": "Alexander Vasserman", "text": "try it out in the interpreter or in the yeah."}, {"source_name": "lecture4", "index": 512, "time": "00:53:41.410 --> 00:53:47.170", "speaker": "Alexander Vasserman", "text": "Any questions here? This is kind of a Gotcha that like Oftentimes I certainly"}, {"source_name": "lecture4", "index": 513, "time": "00:53:47.190 --> 00:54:03.730", "speaker": "Alexander Vasserman", "text": "right into this, where i'm like. I don't understand what's going on, what what's happening. Why, my code is working not working the way I expected it to be. And then I remember all because, you know, I did some modifications and did not reload it."}, {"source_name": "lecture4", "index": 514, "time": "00:54:04.120 --> 00:54:09.019", "speaker": "Alexander Vasserman", "text": "so that's just something to be aware of. And"}, {"source_name": "lecture4", "index": 515, "time": "00:54:09.450 --> 00:54:10.259", "speaker": "Alexander Vasserman", "text": "you know"}, {"source_name": "lecture4", "index": 516, "time": "00:54:11.260 --> 00:54:15.770", "speaker": "Alexander Vasserman", "text": "kind of going forward. Just remember that this is a little trick"}, {"source_name": "lecture4", "index": 517, "time": "00:54:15.960 --> 00:54:16.830", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture4", "index": 518, "time": "00:54:17.100 --> 00:54:27.810", "speaker": "Alexander Vasserman", "text": "you'll need to do because we are going to kind of write some code in the editor and the modify the files"}, {"source_name": "lecture4", "index": 519, "time": "00:54:28.850 --> 00:54:31.900", "speaker": "Alexander Vasserman", "text": "and at the same time work in the interpreter."}, {"source_name": "lecture4", "index": 520, "time": "00:54:32.120 --> 00:54:33.310", "speaker": "Alexander Vasserman", "text": "Oh, here."}, {"source_name": "lecture4", "index": 521, "time": "00:54:36.360 --> 00:54:47.130", "speaker": "Alexander Vasserman", "text": "By the way, i'm i'm using the word interpreter a little bit differently now than what I said before, when I say in the interpreter that I do mean the this."}, {"source_name": "lecture4", "index": 522, "time": "00:54:47.150 --> 00:54:52.430", "speaker": "Alexander Vasserman", "text": "the interactive python. so"}, {"source_name": "lecture4", "index": 523, "time": "00:54:52.730 --> 00:54:56.629", "speaker": "Alexander Vasserman", "text": "yeah, when they say working in the interpreter that that's what I mean in the"}, {"source_name": "lecture4", "index": 524, "time": "00:54:56.830 --> 00:54:58.100", "speaker": "Alexander Vasserman", "text": "iphone. Console"}, {"source_name": "lecture4", "index": 525, "time": "00:55:01.760 --> 00:55:02.700", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture4", "index": 526, "time": "00:55:03.080 --> 00:55:04.620", "speaker": "Alexander Vasserman", "text": "going back to"}, {"source_name": "lecture4", "index": 527, "time": "00:55:04.680 --> 00:55:06.629", "speaker": "Alexander Vasserman", "text": "let's say what what this"}, {"source_name": "lecture4", "index": 528, "time": "00:55:06.680 --> 00:55:08.649", "speaker": "Alexander Vasserman", "text": "matching function looks like."}, {"source_name": "lecture4", "index": 529, "time": "00:55:08.720 --> 00:55:10.249", "speaker": "Alexander Vasserman", "text": "So let's say."}, {"source_name": "lecture4", "index": 530, "time": "00:55:15.070 --> 00:55:16.929", "speaker": "Alexander Vasserman", "text": "let's call it on something"}, {"source_name": "lecture4", "index": 531, "time": "00:55:17.220 --> 00:55:18.029", "speaker": "Alexander Vasserman", "text": "like"}, {"source_name": "lecture4", "index": 532, "time": "00:55:27.210 --> 00:55:32.620", "speaker": "Alexander Vasserman", "text": "you know. So that's obviously going to be true. And then"}, {"source_name": "lecture4", "index": 533, "time": "00:55:33.960 --> 00:55:35.189", "speaker": "Alexander Vasserman", "text": "maybe"}, {"source_name": "lecture4", "index": 534, "time": "00:55:36.040 --> 00:55:37.250", "speaker": "Alexander Vasserman", "text": "yeah, Lauren"}, {"source_name": "lecture4", "index": 535, "time": "00:55:37.690 --> 00:55:38.750", "speaker": "Alexander Vasserman", "text": "Red"}, {"source_name": "lecture4", "index": 536, "time": "00:55:39.450 --> 00:55:43.180", "speaker": "Alexander Vasserman", "text": "it's also through and"}, {"source_name": "lecture4", "index": 537, "time": "00:55:44.980 --> 00:55:50.229", "speaker": "Alexander Vasserman", "text": "yellow and blue is obviously falls. So that seems to be working. Okay."}, {"source_name": "lecture4", "index": 538, "time": "00:55:52.540 --> 00:55:54.120", "speaker": "Alexander Vasserman", "text": "except, of course."}, {"source_name": "lecture4", "index": 539, "time": "00:55:54.270 --> 00:55:56.140", "speaker": "Alexander Vasserman", "text": "you know, I can say something."}, {"source_name": "lecture4", "index": 540, "time": "00:56:02.530 --> 00:56:06.190", "speaker": "Alexander Vasserman", "text": "and it says true. So"}, {"source_name": "lecture4", "index": 541, "time": "00:56:07.650 --> 00:56:12.829", "speaker": "Alexander Vasserman", "text": "Project color is not really about Red. It just so happens that predict, because"}, {"source_name": "lecture4", "index": 542, "time": "00:56:12.930 --> 00:56:20.160", "speaker": "Alexander Vasserman", "text": "red inside of it, just the letters match, which is probably not what we want the search engine to do"}, {"source_name": "lecture4", "index": 543, "time": "00:56:20.830 --> 00:56:23.629", "speaker": "Alexander Vasserman", "text": "so. That's kind of Why."}, {"source_name": "lecture4", "index": 544, "time": "00:56:24.020 --> 00:56:26.159", "speaker": "Alexander Vasserman", "text": "good? Not going to be"}, {"source_name": "lecture4", "index": 545, "time": "00:56:26.200 --> 00:56:30.299", "speaker": "Alexander Vasserman", "text": "using this machine function, but it's a"}, {"source_name": "lecture4", "index": 546, "time": "00:56:30.430 --> 00:56:31.950", "speaker": "Alexander Vasserman", "text": "good kind of"}, {"source_name": "lecture4", "index": 547, "time": "00:56:32.240 --> 00:56:33.180", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture4", "index": 548, "time": "00:56:33.470 --> 00:56:42.319", "speaker": "Alexander Vasserman", "text": "first draft to kind of keep in, keep in mind. And sometimes it's useful to to have it around or"}, {"source_name": "lecture4", "index": 549, "time": "00:56:42.450 --> 00:56:51.820", "speaker": "Alexander Vasserman", "text": "think about it. So basically, we're going to refer to this kind of matching as just direct dignity matching"}, {"source_name": "lecture4", "index": 550, "time": "00:56:52.120 --> 00:56:54.880", "speaker": "Alexander Vasserman", "text": "a few times all later on, and kind of just."}, {"source_name": "lecture4", "index": 551, "time": "00:56:54.970 --> 00:56:57.220", "speaker": "Alexander Vasserman", "text": "I realize that"}, {"source_name": "lecture4", "index": 552, "time": "00:56:58.050 --> 00:57:00.709", "speaker": "Alexander Vasserman", "text": "this is what we're talking about."}, {"source_name": "lecture4", "index": 553, "time": "00:57:01.750 --> 00:57:04.759", "speaker": "Alexander Vasserman", "text": "also, of course."}, {"source_name": "lecture4", "index": 554, "time": "00:57:07.890 --> 00:57:08.740", "speaker": "Alexander Vasserman", "text": "you know."}, {"source_name": "lecture4", "index": 555, "time": "00:57:08.980 --> 00:57:10.660", "speaker": "Alexander Vasserman", "text": "It's"}, {"source_name": "lecture4", "index": 556, "time": "00:57:12.730 --> 00:57:17.440", "speaker": "Alexander Vasserman", "text": "fragile in multiple ways, right? If I add an extra space, it's"}, {"source_name": "lecture4", "index": 557, "time": "00:57:17.520 --> 00:57:32.789", "speaker": "Alexander Vasserman", "text": "even that already messed up. And so now things don't match like that and etc., I could fix that by basically what you'll call normalizing the strings, so as the first thing in my function"}, {"source_name": "lecture4", "index": 558, "time": "00:57:32.880 --> 00:57:40.929", "speaker": "Alexander Vasserman", "text": "do some fun modifications where, for example, I could replace any occurrences of multiple spaces by single space."}, {"source_name": "lecture4", "index": 559, "time": "00:57:41.190 --> 00:57:44.209", "speaker": "Alexander Vasserman", "text": "so that would fix this particular problem."}, {"source_name": "lecture4", "index": 560, "time": "00:57:44.450 --> 00:57:48.290", "speaker": "Alexander Vasserman", "text": "there are some things that we might look at."}, {"source_name": "lecture4", "index": 561, "time": "00:57:48.440 --> 00:57:49.350", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 562, "time": "00:57:49.720 --> 00:57:53.200", "speaker": "Alexander Vasserman", "text": "later as well. That fix"}, {"source_name": "lecture4", "index": 563, "time": "00:57:53.720 --> 00:58:01.429", "speaker": "Alexander Vasserman", "text": "Did this problem with predict or partial word matches as well or so. We'll"}, {"source_name": "lecture4", "index": 564, "time": "00:58:01.470 --> 00:58:05.810", "speaker": "Alexander Vasserman", "text": "look at some improvements on this kind of"}, {"source_name": "lecture4", "index": 565, "time": "00:58:05.940 --> 00:58:08.180", "speaker": "Alexander Vasserman", "text": "direct string matching"}, {"source_name": "lecture4", "index": 566, "time": "00:58:08.380 --> 00:58:09.259", "speaker": "Alexander Vasserman", "text": "on."}, {"source_name": "lecture4", "index": 567, "time": "00:58:09.750 --> 00:58:12.829", "speaker": "Alexander Vasserman", "text": "But oh, yes, this is not something that here"}, {"source_name": "lecture4", "index": 568, "time": "00:58:12.890 --> 00:58:13.750", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 569, "time": "00:58:14.740 --> 00:58:16.129", "speaker": "Alexander Vasserman", "text": "going to"}, {"source_name": "lecture4", "index": 570, "time": "00:58:16.400 --> 00:58:19.129", "speaker": "Alexander Vasserman", "text": "all really work is too much."}, {"source_name": "lecture4", "index": 571, "time": "00:58:19.500 --> 00:58:21.930", "speaker": "Alexander Vasserman", "text": "So mostly because it's"}, {"source_name": "lecture4", "index": 572, "time": "00:58:21.980 --> 00:58:24.930", "speaker": "Alexander Vasserman", "text": "fragile basically in a way that"}, {"source_name": "lecture4", "index": 573, "time": "00:58:25.070 --> 00:58:25.660", "speaker": "Alexander Vasserman", "text": "yeah."}, {"source_name": "lecture4", "index": 574, "time": "00:58:26.090 --> 00:58:26.950", "speaker": "Alexander Vasserman", "text": "it's correct."}, {"source_name": "lecture4", "index": 575, "time": "00:58:27.350 --> 00:58:29.849", "speaker": "Alexander Vasserman", "text": "So what is the alternative?"}, {"source_name": "lecture4", "index": 576, "time": "00:58:30.140 --> 00:58:33.320", "speaker": "Alexander Vasserman", "text": "It's the bullying, matching logic"}, {"source_name": "lecture4", "index": 577, "time": "00:58:33.340 --> 00:58:36.380", "speaker": "Alexander Vasserman", "text": "that basically looks at the"}, {"source_name": "lecture4", "index": 578, "time": "00:58:36.630 --> 00:58:38.250", "speaker": "Alexander Vasserman", "text": "really in terms of"}, {"source_name": "lecture4", "index": 579, "time": "00:58:38.280 --> 00:58:39.189", "speaker": "Alexander Vasserman", "text": "terms."}, {"source_name": "lecture4", "index": 580, "time": "00:58:39.210 --> 00:58:41.539", "speaker": "Alexander Vasserman", "text": "So I will refer to term"}, {"source_name": "lecture4", "index": 581, "time": "00:58:41.660 --> 00:58:51.210", "speaker": "Alexander Vasserman", "text": "most time most of the time it just in other words, for board like. So basically, if I have multiple words in my query"}, {"source_name": "lecture4", "index": 582, "time": "00:58:51.220 --> 00:59:05.889", "speaker": "Alexander Vasserman", "text": "like I did here in red and blue. so there are 3 terms in the query, and in this particular case, of course, 3 terms in the document as well the same 3 terms."}, {"source_name": "lecture4", "index": 583, "time": "00:59:05.910 --> 00:59:07.660", "speaker": "Alexander Vasserman", "text": "right. But I mean"}, {"source_name": "lecture4", "index": 584, "time": "00:59:07.750 --> 00:59:11.329", "speaker": "Alexander Vasserman", "text": "the previous case. If I have red, there is one"}, {"source_name": "lecture4", "index": 585, "time": "00:59:11.370 --> 00:59:13.869", "speaker": "Alexander Vasserman", "text": "term there, and dot"}, {"source_name": "lecture4", "index": 586, "time": "00:59:14.480 --> 00:59:25.820", "speaker": "Alexander Vasserman", "text": "2 terms for pretty good calendar. Well, so why do we use term instead of board? sometimes it's going to be a"}, {"source_name": "lecture4", "index": 587, "time": "00:59:26.540 --> 00:59:43.249", "speaker": "Alexander Vasserman", "text": "we. We. We're going to use other things, not just words for matching boards against documents. So it might be a multiple word, expression, or even sub words, or something a little different. So term is kind of a little bit more general the way we are going to be using it."}, {"source_name": "lecture4", "index": 588, "time": "00:59:43.840 --> 00:59:47.689", "speaker": "Alexander Vasserman", "text": "but for now you can think term or"}, {"source_name": "lecture4", "index": 589, "time": "00:59:47.750 --> 00:59:48.789", "speaker": "Alexander Vasserman", "text": "the same thing."}, {"source_name": "lecture4", "index": 590, "time": "00:59:49.410 --> 00:59:52.929", "speaker": "Alexander Vasserman", "text": "And so what is the bullying, matching."}, {"source_name": "lecture4", "index": 591, "time": "00:59:53.040 --> 00:59:57.469", "speaker": "Alexander Vasserman", "text": "boarding? Matching is just going to say that all the query terms are contained"}, {"source_name": "lecture4", "index": 592, "time": "00:59:57.530 --> 00:59:58.879", "speaker": "Alexander Vasserman", "text": "inside the"}, {"source_name": "lecture4", "index": 593, "time": "00:59:59.270 --> 01:00:00.450", "speaker": "Alexander Vasserman", "text": "document"}, {"source_name": "lecture4", "index": 594, "time": "01:00:01.100 --> 01:00:02.089", "speaker": "Alexander Vasserman", "text": "there."}, {"source_name": "lecture4", "index": 595, "time": "01:00:02.600 --> 01:00:22.350", "speaker": "Alexander Vasserman", "text": "Order of terms in the document doesn't matter whether or not they term the terms are next, which appear next to each other, or in completely different parts of the document. Doesn't matter doesn't matter how often each term appears to document, and in particular there is no routine defined, so"}, {"source_name": "lecture4", "index": 596, "time": "01:00:22.360 --> 01:00:23.770", "speaker": "Alexander Vasserman", "text": "ranking or"}, {"source_name": "lecture4", "index": 597, "time": "01:00:23.810 --> 01:00:25.419", "speaker": "Alexander Vasserman", "text": "ordering it's."}, {"source_name": "lecture4", "index": 598, "time": "01:00:25.470 --> 01:00:31.309", "speaker": "Alexander Vasserman", "text": "how we're going to refer to. Well, the ordering of results"}, {"source_name": "lecture4", "index": 599, "time": "01:00:31.400 --> 01:00:32.729", "speaker": "Alexander Vasserman", "text": "is"}, {"source_name": "lecture4", "index": 600, "time": "01:00:32.760 --> 01:00:34.979", "speaker": "Alexander Vasserman", "text": "be referred to as ranking."}, {"source_name": "lecture4", "index": 601, "time": "01:00:35.040 --> 01:00:40.729", "speaker": "Alexander Vasserman", "text": "or, in other words, our ranking function is saying how relevant"}, {"source_name": "lecture4", "index": 602, "time": "01:00:40.750 --> 01:00:44.599", "speaker": "Alexander Vasserman", "text": "our image in documents is is to a particular query."}, {"source_name": "lecture4", "index": 603, "time": "01:00:45.020 --> 01:00:52.389", "speaker": "Alexander Vasserman", "text": "All right. So right now we're just defining matching in the sense what is the full set of results in some sense?"}, {"source_name": "lecture4", "index": 604, "time": "01:00:52.520 --> 01:01:01.350", "speaker": "Alexander Vasserman", "text": "and we'll talk about ranking a little later. But so the this bullying matching concept does not"}, {"source_name": "lecture4", "index": 605, "time": "01:01:01.370 --> 01:01:02.259", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture4", "index": 606, "time": "01:01:04.320 --> 01:01:05.430", "speaker": "Alexander Vasserman", "text": "does not"}, {"source_name": "lecture4", "index": 607, "time": "01:01:06.530 --> 01:01:11.009", "speaker": "Alexander Vasserman", "text": "specify ranking what is more relevant and what is less relevant."}, {"source_name": "lecture4", "index": 608, "time": "01:01:12.810 --> 01:01:16.530", "speaker": "Alexander Vasserman", "text": "okay. But basically what we want is to"}, {"source_name": "lecture4", "index": 609, "time": "01:01:16.760 --> 01:01:18.830", "speaker": "Alexander Vasserman", "text": "Oh, right, the function that's"}, {"source_name": "lecture4", "index": 610, "time": "01:01:19.020 --> 01:01:21.680", "speaker": "Alexander Vasserman", "text": "given equity and a document"}, {"source_name": "lecture4", "index": 611, "time": "01:01:21.830 --> 01:01:24.780", "speaker": "Alexander Vasserman", "text": "splits both into individual terms"}, {"source_name": "lecture4", "index": 612, "time": "01:01:24.860 --> 01:01:26.790", "speaker": "Alexander Vasserman", "text": "or into individual words."}, {"source_name": "lecture4", "index": 613, "time": "01:01:26.890 --> 01:01:27.859", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture4", "index": 614, "time": "01:01:27.900 --> 01:01:32.419", "speaker": "Alexander Vasserman", "text": "then returns true. If all the greater terms"}, {"source_name": "lecture4", "index": 615, "time": "01:01:32.540 --> 01:01:34.470", "speaker": "Alexander Vasserman", "text": "are contained."}, {"source_name": "lecture4", "index": 616, "time": "01:01:34.700 --> 01:01:36.450", "speaker": "Alexander Vasserman", "text": "in the document"}, {"source_name": "lecture4", "index": 617, "time": "01:01:36.490 --> 01:01:38.130", "speaker": "Alexander Vasserman", "text": "and false. Otherwise"}, {"source_name": "lecture4", "index": 618, "time": "01:01:39.920 --> 01:01:41.040", "speaker": "Alexander Vasserman", "text": "make sense."}, {"source_name": "lecture4", "index": 619, "time": "01:01:51.320 --> 01:01:51.990", "speaker": "Alexander Vasserman", "text": "okay."}, {"source_name": "lecture4", "index": 620, "time": "01:01:54.890 --> 01:01:55.700", "speaker": "Alexander Vasserman", "text": "Well."}, {"source_name": "lecture4", "index": 621, "time": "01:01:56.730 --> 01:01:58.069", "speaker": "Alexander Vasserman", "text": "how about."}, {"source_name": "lecture4", "index": 622, "time": "01:01:58.990 --> 01:01:59.770", "speaker": "Alexander Vasserman", "text": "hey?"}, {"source_name": "lecture4", "index": 623, "time": "01:02:00.090 --> 01:02:01.629", "speaker": "Alexander Vasserman", "text": "Our show of hands?"}, {"source_name": "lecture4", "index": 624, "time": "01:02:01.680 --> 01:02:04.850", "speaker": "Alexander Vasserman", "text": "How many of you think that you can implement"}, {"source_name": "lecture4", "index": 625, "time": "01:02:04.920 --> 01:02:10.560", "speaker": "Alexander Vasserman", "text": "a function like that. So given 2 strings a query string document, string"}, {"source_name": "lecture4", "index": 626, "time": "01:02:10.720 --> 01:02:17.329", "speaker": "Alexander Vasserman", "text": "split each one into words for now we'll just split on the space."}, {"source_name": "lecture4", "index": 627, "time": "01:02:17.420 --> 01:02:18.399", "speaker": "Alexander Vasserman", "text": "and then"}, {"source_name": "lecture4", "index": 628, "time": "01:02:19.280 --> 01:02:25.790", "speaker": "Alexander Vasserman", "text": "figure out whether or not all the terms in the query, or all the words from the query are contained"}, {"source_name": "lecture4", "index": 629, "time": "01:02:26.340 --> 01:02:28.979", "speaker": "Alexander Vasserman", "text": "in a particular in any given document."}, {"source_name": "lecture4", "index": 630, "time": "01:02:33.520 --> 01:02:34.419", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture4", "index": 631, "time": "01:02:35.330 --> 01:02:39.700", "speaker": "Alexander Vasserman", "text": "we have a few people who still"}, {"source_name": "lecture4", "index": 632, "time": "01:02:39.720 --> 01:02:41.419", "speaker": "Alexander Vasserman", "text": "confident."}, {"source_name": "lecture4", "index": 633, "time": "01:02:46.690 --> 01:02:49.030", "speaker": "Alexander Vasserman", "text": "okay, I think"}, {"source_name": "lecture4", "index": 634, "time": "01:02:49.920 --> 01:02:53.349", "speaker": "Alexander Vasserman", "text": "maybe not as many as I would like."}, {"source_name": "lecture4", "index": 635, "time": "01:02:53.970 --> 01:02:58.069", "speaker": "Alexander Vasserman", "text": "So let me actually write it for you."}, {"source_name": "lecture4", "index": 636, "time": "01:02:58.860 --> 01:03:00.450", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture4", "index": 637, "time": "01:03:05.350 --> 01:03:07.220", "speaker": "Alexander Vasserman", "text": "So that's"}, {"source_name": "lecture4", "index": 638, "time": "01:03:07.910 --> 01:03:09.120", "speaker": "Alexander Vasserman", "text": "define."}, {"source_name": "lecture4", "index": 639, "time": "01:03:17.670 --> 01:03:18.520", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 640, "time": "01:03:19.020 --> 01:03:20.829", "speaker": "Alexander Vasserman", "text": "another match function."}, {"source_name": "lecture4", "index": 641, "time": "01:03:21.310 --> 01:03:23.649", "speaker": "Alexander Vasserman", "text": "If you might want to rename"}, {"source_name": "lecture4", "index": 642, "time": "01:03:23.990 --> 01:03:28.460", "speaker": "Alexander Vasserman", "text": "the the first one into something like, Well, let me just"}, {"source_name": "lecture4", "index": 643, "time": "01:03:30.410 --> 01:03:33.400", "speaker": "Alexander Vasserman", "text": "call it and name it to string match."}, {"source_name": "lecture4", "index": 644, "time": "01:03:33.530 --> 01:03:39.170", "speaker": "Alexander Vasserman", "text": "Right? So what did we say we want to do is to say,"}, {"source_name": "lecture4", "index": 645, "time": "01:03:40.490 --> 01:03:41.859", "speaker": "Alexander Vasserman", "text": "greedy terms"}, {"source_name": "lecture4", "index": 646, "time": "01:03:42.350 --> 01:03:43.350", "speaker": "Alexander Vasserman", "text": "he is."}, {"source_name": "lecture4", "index": 647, "time": "01:03:44.370 --> 01:03:45.500", "speaker": "Alexander Vasserman", "text": "That's just"}, {"source_name": "lecture4", "index": 648, "time": "01:03:47.060 --> 01:03:48.100", "speaker": "Alexander Vasserman", "text": "split"}, {"source_name": "lecture4", "index": 649, "time": "01:03:48.580 --> 01:03:50.220", "speaker": "Alexander Vasserman", "text": "on white spaces"}, {"source_name": "lecture4", "index": 650, "time": "01:03:50.380 --> 01:03:54.319", "speaker": "Alexander Vasserman", "text": "which is the default for for split function on strings."}, {"source_name": "lecture4", "index": 651, "time": "01:03:54.750 --> 01:03:59.320", "speaker": "Alexander Vasserman", "text": "so that's going to be a list of strings here."}, {"source_name": "lecture4", "index": 652, "time": "01:03:59.680 --> 01:04:04.670", "speaker": "Alexander Vasserman", "text": "and do the same for documents. So"}, {"source_name": "lecture4", "index": 653, "time": "01:04:18.830 --> 01:04:19.919", "speaker": "Alexander Vasserman", "text": "no"}, {"source_name": "lecture4", "index": 654, "time": "01:04:21.600 --> 01:04:22.209", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture4", "index": 655, "time": "01:04:25.170 --> 01:04:26.299", "speaker": "Alexander Vasserman", "text": "let's see"}, {"source_name": "lecture4", "index": 656, "time": "01:04:26.690 --> 01:04:28.790", "speaker": "Alexander Vasserman", "text": "the output value. Will"}, {"source_name": "lecture4", "index": 657, "time": "01:04:32.890 --> 01:04:39.899", "speaker": "Alexander Vasserman", "text": "Well, actually, maybe it don't need that. So that's basically what we can do. Is"}, {"source_name": "lecture4", "index": 658, "time": "01:04:40.100 --> 01:04:43.839", "speaker": "Alexander Vasserman", "text": "iterate over the equity terms soon."}, {"source_name": "lecture4", "index": 659, "time": "01:04:49.660 --> 01:04:51.090", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture4", "index": 660, "time": "01:04:51.950 --> 01:04:52.950", "speaker": "Alexander Vasserman", "text": "say."}, {"source_name": "lecture4", "index": 661, "time": "01:04:55.060 --> 01:04:55.799", "speaker": "Alexander Vasserman", "text": "if"}, {"source_name": "lecture4", "index": 662, "time": "01:04:56.420 --> 01:04:57.430", "speaker": "Alexander Vasserman", "text": "term."}, {"source_name": "lecture4", "index": 663, "time": "01:05:07.340 --> 01:05:10.370", "speaker": "Alexander Vasserman", "text": "So, i'm doing a little bit of an inversion here"}, {"source_name": "lecture4", "index": 664, "time": "01:05:10.410 --> 01:05:13.499", "speaker": "Alexander Vasserman", "text": "in a sense, instead of saying that"}, {"source_name": "lecture4", "index": 665, "time": "01:05:13.620 --> 01:05:24.739", "speaker": "Alexander Vasserman", "text": "in turn. True, if everything, all all the term matches, it's a little easier to say. Well, if one of the terms does not match, or one of the terms is not contained in the document."}, {"source_name": "lecture4", "index": 666, "time": "01:05:25.140 --> 01:05:26.930", "speaker": "Alexander Vasserman", "text": "then it's going to be false."}, {"source_name": "lecture4", "index": 667, "time": "01:05:27.130 --> 01:05:28.250", "speaker": "Alexander Vasserman", "text": "and if"}, {"source_name": "lecture4", "index": 668, "time": "01:05:28.440 --> 01:05:32.330", "speaker": "Alexander Vasserman", "text": "we go past that condition on every iteration of the loop."}, {"source_name": "lecture4", "index": 669, "time": "01:05:32.390 --> 01:05:34.460", "speaker": "Alexander Vasserman", "text": "that means that all the terms"}, {"source_name": "lecture4", "index": 670, "time": "01:05:34.700 --> 01:05:36.429", "speaker": "Alexander Vasserman", "text": "are in the document."}, {"source_name": "lecture4", "index": 671, "time": "01:05:36.540 --> 01:05:38.600", "speaker": "Alexander Vasserman", "text": "and therefore we can return"}, {"source_name": "lecture4", "index": 672, "time": "01:05:38.870 --> 01:05:39.709", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture4", "index": 673, "time": "01:05:39.940 --> 01:05:40.589", "speaker": "Alexander Vasserman", "text": "through"}, {"source_name": "lecture4", "index": 674, "time": "01:05:44.310 --> 01:05:45.200", "speaker": "Alexander Vasserman", "text": "Alex."}, {"source_name": "lecture4", "index": 675, "time": "01:05:47.830 --> 01:05:53.059", "speaker": "Alex Wojtowicz", "text": "So for the term search, and then just doing the return false with it"}, {"source_name": "lecture4", "index": 676, "time": "01:05:53.290 --> 01:05:55.620", "speaker": "Alex Wojtowicz", "text": "it doesn't find just one part of it"}, {"source_name": "lecture4", "index": 677, "time": "01:05:55.880 --> 01:06:02.460", "speaker": "Alex Wojtowicz", "text": "term, and the entire document does it jump out of that entire function, or does it just jump out of that loop and keep looping through?"}, {"source_name": "lecture4", "index": 678, "time": "01:06:03.050 --> 01:06:11.570", "speaker": "Alexander Vasserman", "text": "Yeah, so it jumps out of the entire function. So basically, yeah, once you python encounter, he's a return statement."}, {"source_name": "lecture4", "index": 679, "time": "01:06:11.750 --> 01:06:16.149", "speaker": "Alexander Vasserman", "text": "it abandon the function completely and just returns that result."}, {"source_name": "lecture4", "index": 680, "time": "01:06:16.290 --> 01:06:17.550", "speaker": "Alexander Vasserman", "text": "So so"}, {"source_name": "lecture4", "index": 681, "time": "01:06:18.010 --> 01:06:20.510", "speaker": "Alex Wojtowicz", "text": "if you want to search a term in a document."}, {"source_name": "lecture4", "index": 682, "time": "01:06:21.000 --> 01:06:25.450", "speaker": "Alex Wojtowicz", "text": "wouldn't you have to search the entire document first, because like"}, {"source_name": "lecture4", "index": 683, "time": "01:06:25.600 --> 01:06:28.690", "speaker": "Alex Wojtowicz", "text": "wouldn't this, just jump you out the first time. I didn't find it?"}, {"source_name": "lecture4", "index": 684, "time": "01:06:29.010 --> 01:06:30.009", "speaker": "Alexander Vasserman", "text": "Exactly."}, {"source_name": "lecture4", "index": 685, "time": "01:06:30.150 --> 01:06:31.459", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture4", "index": 686, "time": "01:06:32.250 --> 01:06:35.970", "speaker": "Alexander Vasserman", "text": "so okay, so basically, just there is a reminder"}, {"source_name": "lecture4", "index": 687, "time": "01:06:37.630 --> 01:06:38.740", "speaker": "Alexander Vasserman", "text": "this is"}, {"source_name": "lecture4", "index": 688, "time": "01:06:39.720 --> 01:06:41.100", "speaker": "Alexander Vasserman", "text": "list of strings."}, {"source_name": "lecture4", "index": 689, "time": "01:06:41.540 --> 01:06:43.089", "speaker": "Alexander Vasserman", "text": "right?"}, {"source_name": "lecture4", "index": 690, "time": "01:06:43.300 --> 01:06:44.529", "speaker": "Alexander Vasserman", "text": "So."}, {"source_name": "lecture4", "index": 691, "time": "01:06:45.510 --> 01:06:48.399", "speaker": "Alexander Vasserman", "text": "when we say in here"}, {"source_name": "lecture4", "index": 692, "time": "01:06:48.820 --> 01:06:49.669", "speaker": "Alexander Vasserman", "text": "is"}, {"source_name": "lecture4", "index": 693, "time": "01:06:49.730 --> 01:06:55.759", "speaker": "Alexander Vasserman", "text": "different meaning than in here. So here in was for strings."}, {"source_name": "lecture4", "index": 694, "time": "01:06:56.260 --> 01:06:59.689", "speaker": "Alexander Vasserman", "text": "Here the in operator is list"}, {"source_name": "lecture4", "index": 695, "time": "01:06:59.760 --> 01:07:01.319", "speaker": "Alexander Vasserman", "text": "in operator, which"}, {"source_name": "lecture4", "index": 696, "time": "01:07:02.330 --> 01:07:04.569", "speaker": "Alexander Vasserman", "text": "asks whether or not term"}, {"source_name": "lecture4", "index": 697, "time": "01:07:04.770 --> 01:07:07.200", "speaker": "Alexander Vasserman", "text": "is an element of the list"}, {"source_name": "lecture4", "index": 698, "time": "01:07:07.680 --> 01:07:10.319", "speaker": "Alexander Vasserman", "text": "right? So it does exact matching"}, {"source_name": "lecture4", "index": 699, "time": "01:07:10.360 --> 01:07:14.339", "speaker": "Alexander Vasserman", "text": "on terms or on boards, so does it. It's a."}, {"source_name": "lecture4", "index": 700, "time": "01:07:14.460 --> 01:07:15.990", "speaker": "Alexander Vasserman", "text": "Is this term"}, {"source_name": "lecture4", "index": 701, "time": "01:07:16.120 --> 01:07:19.150", "speaker": "Alexander Vasserman", "text": "an element of this entirely"}, {"source_name": "lecture4", "index": 702, "time": "01:07:19.520 --> 01:07:29.970", "speaker": "Alexander Vasserman", "text": "so inside the sip statement. The way this, if statement is implemented, it basically does have to go through the entire list, and compare each"}, {"source_name": "lecture4", "index": 703, "time": "01:07:30.020 --> 01:07:31.939", "speaker": "Alexander Vasserman", "text": "term in that list"}, {"source_name": "lecture4", "index": 704, "time": "01:07:32.070 --> 01:07:33.100", "speaker": "Alexander Vasserman", "text": "against"}, {"source_name": "lecture4", "index": 705, "time": "01:07:33.870 --> 01:07:34.729", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture4", "index": 706, "time": "01:07:35.580 --> 01:07:37.410", "speaker": "Alexander Vasserman", "text": "the query term that we have here."}, {"source_name": "lecture4", "index": 707, "time": "01:07:39.560 --> 01:07:41.209", "speaker": "Alex Wojtowicz", "text": "So then, just check to see him."}, {"source_name": "lecture4", "index": 708, "time": "01:07:41.440 --> 01:07:44.840", "speaker": "Alex Wojtowicz", "text": "Each term is like in the entire document list."}, {"source_name": "lecture4", "index": 709, "time": "01:07:44.890 --> 01:07:46.430", "speaker": "Alexander Vasserman", "text": "That's exactly right."}, {"source_name": "lecture4", "index": 710, "time": "01:07:46.520 --> 01:07:47.240", "speaker": "Alex Wojtowicz", "text": "Okay."}, {"source_name": "lecture4", "index": 711, "time": "01:07:48.770 --> 01:07:50.129", "speaker": "Alexander Vasserman", "text": "that's exactly right."}, {"source_name": "lecture4", "index": 712, "time": "01:07:53.960 --> 01:07:56.109", "speaker": "Alexander Vasserman", "text": "Does that make sense to everyone else?"}, {"source_name": "lecture4", "index": 713, "time": "01:07:58.080 --> 01:08:01.029", "speaker": "Alexander Vasserman", "text": "So here we are not doing string of"}, {"source_name": "lecture4", "index": 714, "time": "01:08:02.000 --> 01:08:04.000", "speaker": "Alexander Vasserman", "text": "matching. We are just doing"}, {"source_name": "lecture4", "index": 715, "time": "01:08:04.390 --> 01:08:11.340", "speaker": "Alexander Vasserman", "text": "exact comparison on strings. So are they. This the same equal things or not?"}, {"source_name": "lecture4", "index": 716, "time": "01:08:11.400 --> 01:08:13.439", "speaker": "Alexander Vasserman", "text": "Are they the same board or not?"}, {"source_name": "lecture4", "index": 717, "time": "01:08:13.580 --> 01:08:15.660", "speaker": "Alexander Vasserman", "text": "so they"}, {"source_name": "lecture4", "index": 718, "time": "01:08:16.020 --> 01:08:17.849", "speaker": "Alexander Vasserman", "text": "pretty stick comparison."}, {"source_name": "lecture4", "index": 719, "time": "01:08:21.390 --> 01:08:22.920", "speaker": "Alexander Vasserman", "text": "also just kind of"}, {"source_name": "lecture4", "index": 720, "time": "01:08:23.200 --> 01:08:25.659", "speaker": "Alexander Vasserman", "text": "one common mistake that I've seen"}, {"source_name": "lecture4", "index": 721, "time": "01:08:26.720 --> 01:08:30.870", "speaker": "Alexander Vasserman", "text": "would be it wrong invitation of this return statement."}, {"source_name": "lecture4", "index": 722, "time": "01:08:31.170 --> 01:08:48.820", "speaker": "Alexander Vasserman", "text": "so you know now, the the notification that I just changed is very small, and and sometimes that can be typo. But the meeting became all of a sudden completely different. And be careful of those mistakes. So now they return. True statement is inside the loop."}, {"source_name": "lecture4", "index": 723, "time": "01:08:48.870 --> 01:09:01.499", "speaker": "Alexander Vasserman", "text": "So we are going to judge in this case the return value of the loop, based only on the first term. So if the first term is in the document"}, {"source_name": "lecture4", "index": 724, "time": "01:09:01.600 --> 01:09:08.000", "speaker": "Alexander Vasserman", "text": "then we'll return through whether or not they anything about second or third term, because the loop will"}, {"source_name": "lecture4", "index": 725, "time": "01:09:08.149 --> 01:09:12.639", "speaker": "Alexander Vasserman", "text": "only go through the first iteration, and then they'll return either way."}, {"source_name": "lecture4", "index": 726, "time": "01:09:12.890 --> 01:09:15.460", "speaker": "Alexander Vasserman", "text": "So watch out for your invitation."}, {"source_name": "lecture4", "index": 727, "time": "01:09:17.189 --> 01:09:19.599", "speaker": "Alexander Vasserman", "text": "fad. Did you have a question?"}, {"source_name": "lecture4", "index": 728, "time": "01:09:19.740 --> 01:09:23.850", "speaker": "Fahad Khan", "text": "Yeah. So I understand why we're doing the split"}, {"source_name": "lecture4", "index": 729, "time": "01:09:23.970 --> 01:09:30.990", "speaker": "Fahad Khan", "text": "It's the split method on the query terms, but why exactly would we have to do it on the document terms?"}, {"source_name": "lecture4", "index": 730, "time": "01:09:34.399 --> 01:09:36.739", "speaker": "Alexander Vasserman", "text": "So yes, you could"}, {"source_name": "lecture4", "index": 731, "time": "01:09:36.779 --> 01:09:40.850", "speaker": "Alexander Vasserman", "text": "search the document directly as a stream"}, {"source_name": "lecture4", "index": 732, "time": "01:09:41.240 --> 01:09:42.160", "speaker": "Alexander Vasserman", "text": "right"}, {"source_name": "lecture4", "index": 733, "time": "01:09:42.410 --> 01:09:45.510", "speaker": "Alexander Vasserman", "text": "so we could."}, {"source_name": "lecture4", "index": 734, "time": "01:09:45.540 --> 01:09:50.169", "speaker": "Alexander Vasserman", "text": "instead of document terms, use document itself here."}, {"source_name": "lecture4", "index": 735, "time": "01:09:51.060 --> 01:09:51.979", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture4", "index": 736, "time": "01:09:52.410 --> 01:09:53.500", "speaker": "Alexander Vasserman", "text": "then"}, {"source_name": "lecture4", "index": 737, "time": "01:09:55.280 --> 01:09:56.260", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture4", "index": 738, "time": "01:09:56.650 --> 01:09:57.510", "speaker": "Alexander Vasserman", "text": "did"}, {"source_name": "lecture4", "index": 739, "time": "01:09:58.170 --> 01:09:59.360", "speaker": "Alexander Vasserman", "text": "Disco!"}, {"source_name": "lecture4", "index": 740, "time": "01:09:59.610 --> 01:10:12.930", "speaker": "Alexander Vasserman", "text": "we'll still return through right, so you could say, Well, we we split it into terms in particular case that I've highlighted here when they're matching rad against predict color."}, {"source_name": "lecture4", "index": 741, "time": "01:10:13.120 --> 01:10:14.410", "speaker": "Alexander Vasserman", "text": "well"}, {"source_name": "lecture4", "index": 742, "time": "01:10:14.450 --> 01:10:16.920", "speaker": "Alexander Vasserman", "text": "really only has one term red."}, {"source_name": "lecture4", "index": 743, "time": "01:10:17.010 --> 01:10:23.539", "speaker": "Alexander Vasserman", "text": "and the search in the entire document, while Red isn't that document so great"}, {"source_name": "lecture4", "index": 744, "time": "01:10:24.680 --> 01:10:25.969", "speaker": "Alexander Vasserman", "text": "the it is true."}, {"source_name": "lecture4", "index": 745, "time": "01:10:26.110 --> 01:10:28.230", "speaker": "Alexander Vasserman", "text": "whereas now, in the"}, {"source_name": "lecture4", "index": 746, "time": "01:10:28.620 --> 01:10:30.450", "speaker": "Alexander Vasserman", "text": "term based implementation"}, {"source_name": "lecture4", "index": 747, "time": "01:10:33.050 --> 01:10:34.750", "speaker": "Alexander Vasserman", "text": "you split"}, {"source_name": "lecture4", "index": 748, "time": "01:10:35.300 --> 01:10:40.050", "speaker": "Alexander Vasserman", "text": "the document in future terms predict and color."}, {"source_name": "lecture4", "index": 749, "time": "01:10:40.990 --> 01:10:41.910", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture4", "index": 750, "time": "01:10:42.730 --> 01:10:50.520", "speaker": "Alexander Vasserman", "text": "the term in document terms will ask whether or not Red is one of the terms in the list."}, {"source_name": "lecture4", "index": 751, "time": "01:10:50.840 --> 01:10:52.570", "speaker": "Alexander Vasserman", "text": "Right? So"}, {"source_name": "lecture4", "index": 752, "time": "01:10:54.460 --> 01:10:57.499", "speaker": "Alexander Vasserman", "text": "basically here the"}, {"source_name": "lecture4", "index": 753, "time": "01:10:59.240 --> 01:11:01.450", "speaker": "Alexander Vasserman", "text": "greedy terms will be"}, {"source_name": "lecture4", "index": 754, "time": "01:11:01.580 --> 01:11:02.610", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 755, "time": "01:11:04.910 --> 01:11:05.750", "speaker": "Alexander Vasserman", "text": "bread"}, {"source_name": "lecture4", "index": 756, "time": "01:11:06.810 --> 01:11:09.099", "speaker": "Alexander Vasserman", "text": "right? And"}, {"source_name": "lecture4", "index": 757, "time": "01:11:09.240 --> 01:11:10.320", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture4", "index": 758, "time": "01:11:13.300 --> 01:11:14.580", "speaker": "Alexander Vasserman", "text": "document"}, {"source_name": "lecture4", "index": 759, "time": "01:11:15.270 --> 01:11:16.280", "speaker": "Alexander Vasserman", "text": "terms."}, {"source_name": "lecture4", "index": 760, "time": "01:11:16.840 --> 01:11:18.280", "speaker": "Alexander Vasserman", "text": "you'll be"}, {"source_name": "lecture4", "index": 761, "time": "01:11:20.170 --> 01:11:21.160", "speaker": "Alexander Vasserman", "text": "gosh, it"}, {"source_name": "lecture4", "index": 762, "time": "01:11:30.460 --> 01:11:31.969", "speaker": "Alexander Vasserman", "text": "predict on color."}, {"source_name": "lecture4", "index": 763, "time": "01:11:32.380 --> 01:11:33.590", "speaker": "Alexander Vasserman", "text": "And so"}, {"source_name": "lecture4", "index": 764, "time": "01:11:34.130 --> 01:11:37.329", "speaker": "Alexander Vasserman", "text": "when i'm shaking whether or not Rad."}, {"source_name": "lecture4", "index": 765, "time": "01:11:38.420 --> 01:11:41.490", "speaker": "Alexander Vasserman", "text": "the the query term is inside this list."}, {"source_name": "lecture4", "index": 766, "time": "01:11:43.000 --> 01:11:44.799", "speaker": "Alexander Vasserman", "text": "Python will say, No, it's not"}, {"source_name": "lecture4", "index": 767, "time": "01:11:45.560 --> 01:11:49.520", "speaker": "Alexander Vasserman", "text": "right so term not in document term. We'll"}, {"source_name": "lecture4", "index": 768, "time": "01:11:49.720 --> 01:11:50.599", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture4", "index": 769, "time": "01:11:51.690 --> 01:11:54.519", "speaker": "Alexander Vasserman", "text": "be true, and therefore we will return false."}, {"source_name": "lecture4", "index": 770, "time": "01:11:57.010 --> 01:11:59.330", "speaker": "Alexander Vasserman", "text": "so just"}, {"source_name": "lecture4", "index": 771, "time": "01:11:59.480 --> 01:12:02.920", "speaker": "Alexander Vasserman", "text": "to convince you of that, let's actually try it out"}, {"source_name": "lecture4", "index": 772, "time": "01:12:04.870 --> 01:12:05.800", "speaker": "Alexander Vasserman", "text": "that's"}, {"source_name": "lecture4", "index": 773, "time": "01:12:06.730 --> 01:12:08.299", "speaker": "Alexander Vasserman", "text": "the import."}, {"source_name": "lecture4", "index": 774, "time": "01:12:08.810 --> 01:12:09.830", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture4", "index": 775, "time": "01:12:11.740 --> 01:12:13.099", "speaker": "Alexander Vasserman", "text": "you'll say."}, {"source_name": "lecture4", "index": 776, "time": "01:12:24.280 --> 01:12:26.769", "speaker": "Alexander Vasserman", "text": "so here we have."}, {"source_name": "lecture4", "index": 777, "time": "01:12:26.810 --> 01:12:27.670", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 778, "time": "01:12:27.780 --> 01:12:28.950", "speaker": "Alexander Vasserman", "text": "it's false!"}, {"source_name": "lecture4", "index": 779, "time": "01:12:29.130 --> 01:12:31.370", "speaker": "Alexander Vasserman", "text": "But if we"}, {"source_name": "lecture4", "index": 780, "time": "01:12:31.960 --> 01:12:34.039", "speaker": "Alexander Vasserman", "text": "search just in the document"}, {"source_name": "lecture4", "index": 781, "time": "01:12:34.310 --> 01:12:36.530", "speaker": "Alexander Vasserman", "text": "so without the"}, {"source_name": "lecture4", "index": 782, "time": "01:12:36.780 --> 01:12:38.019", "speaker": "Alexander Vasserman", "text": "the split"}, {"source_name": "lecture4", "index": 783, "time": "01:12:47.880 --> 01:12:50.390", "speaker": "Alexander Vasserman", "text": "So again reloading it."}, {"source_name": "lecture4", "index": 784, "time": "01:12:50.490 --> 01:12:51.309", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture4", "index": 785, "time": "01:12:53.960 --> 01:12:56.089", "speaker": "Alexander Vasserman", "text": "running the same."}, {"source_name": "lecture4", "index": 786, "time": "01:12:58.030 --> 01:12:58.910", "speaker": "Alexander Vasserman", "text": "sorry."}, {"source_name": "lecture4", "index": 787, "time": "01:13:00.090 --> 01:13:01.670", "speaker": "Alexander Vasserman", "text": "Let me just"}, {"source_name": "lecture4", "index": 788, "time": "01:13:02.830 --> 01:13:05.550", "speaker": "Alexander Vasserman", "text": "running exactly the same function"}, {"source_name": "lecture4", "index": 789, "time": "01:13:07.900 --> 01:13:09.190", "speaker": "Alexander Vasserman", "text": "would return. True."}, {"source_name": "lecture4", "index": 790, "time": "01:13:09.620 --> 01:13:10.690", "speaker": "Alexander Vasserman", "text": "Alright, so"}, {"source_name": "lecture4", "index": 791, "time": "01:13:10.720 --> 01:13:13.269", "speaker": "Alexander Vasserman", "text": "just searching inside the document, there's not enough."}, {"source_name": "lecture4", "index": 792, "time": "01:13:19.200 --> 01:13:21.329", "speaker": "Rafal \"Ralph\" Jasielec", "text": "I have a question real quick. Yes."}, {"source_name": "lecture4", "index": 793, "time": "01:13:21.540 --> 01:13:25.500", "speaker": "Rafal \"Ralph\" Jasielec", "text": "is it? Because, just like in string underscore match."}, {"source_name": "lecture4", "index": 794, "time": "01:13:25.680 --> 01:13:27.300", "speaker": "Rafal \"Ralph\" Jasielec", "text": "it just looks for."}, {"source_name": "lecture4", "index": 795, "time": "01:13:30.820 --> 01:13:33.069", "speaker": "Rafal \"Ralph\" Jasielec", "text": "it just looks for that portion of the string."}, {"source_name": "lecture4", "index": 796, "time": "01:13:33.760 --> 01:13:36.210", "speaker": "Alexander Vasserman", "text": "That's exactly right. So if"}, {"source_name": "lecture4", "index": 797, "time": "01:13:37.050 --> 01:13:44.759", "speaker": "Alexander Vasserman", "text": "the so, the document is just a string. So when we're saying in document or not in document"}, {"source_name": "lecture4", "index": 798, "time": "01:13:44.850 --> 01:13:51.699", "speaker": "Alexander Vasserman", "text": "you're just saying is one string substring of another thing right? It just searches anywhere in the state."}, {"source_name": "lecture4", "index": 799, "time": "01:13:53.710 --> 01:13:56.170", "speaker": "Alexander Vasserman", "text": "whereas if this is the least."}, {"source_name": "lecture4", "index": 800, "time": "01:13:57.330 --> 01:14:02.580", "speaker": "Alexander Vasserman", "text": "Then we're searching for the element of the list, and we're we're saying"}, {"source_name": "lecture4", "index": 801, "time": "01:14:03.060 --> 01:14:06.210", "speaker": "Alexander Vasserman", "text": "it has to be one of those terms"}, {"source_name": "lecture4", "index": 802, "time": "01:14:07.770 --> 01:14:09.219", "speaker": "Alexander Vasserman", "text": "has to match. Exactly."}, {"source_name": "lecture4", "index": 803, "time": "01:14:10.610 --> 01:14:11.800", "speaker": "Alexander Vasserman", "text": "That's kind of"}, {"source_name": "lecture4", "index": 804, "time": "01:14:12.180 --> 01:14:21.960", "speaker": "Alexander Vasserman", "text": "Why, types can be a little bit like not having times as a little confusing and cutting. The same operator defined on different types meaning slightly different things"}, {"source_name": "lecture4", "index": 805, "time": "01:14:22.070 --> 01:14:25.849", "speaker": "Alexander Vasserman", "text": "can be confusing right? But that's how python does it"}, {"source_name": "lecture4", "index": 806, "time": "01:14:26.960 --> 01:14:28.859", "speaker": "Alexander Vasserman", "text": "so in operator."}, {"source_name": "lecture4", "index": 807, "time": "01:14:28.910 --> 01:14:29.879", "speaker": "Alexander Vasserman", "text": "Oh, if"}, {"source_name": "lecture4", "index": 808, "time": "01:14:29.900 --> 01:14:31.610", "speaker": "Alexander Vasserman", "text": "slightly different for"}, {"source_name": "lecture4", "index": 809, "time": "01:14:31.740 --> 01:14:36.950", "speaker": "Alexander Vasserman", "text": "things than it is for our lists and other collections, and that's something that we"}, {"source_name": "lecture4", "index": 810, "time": "01:14:37.980 --> 01:14:46.960", "speaker": "Alexander Vasserman", "text": "reviewed a bit. And in the second lecture. But it's definitely confusing things. So I totally understand. why there are questions about it."}, {"source_name": "lecture4", "index": 811, "time": "01:14:47.250 --> 01:14:48.370", "speaker": "Alexander Vasserman", "text": "rhino."}, {"source_name": "lecture4", "index": 812, "time": "01:14:48.890 --> 01:14:57.899", "speaker": "Rana Hani", "text": "Yeah. So if you have a string like, is it case sensitive? So if you type in red and all lowercase and red and all uppercase. Would it return? True or false?"}, {"source_name": "lecture4", "index": 813, "time": "01:14:58.200 --> 01:15:08.149", "speaker": "Alexander Vasserman", "text": "That's a very good question, and yes, in this case sensitive. It's both the stream matching and the"}, {"source_name": "lecture4", "index": 814, "time": "01:15:08.410 --> 01:15:13.239", "speaker": "Alexander Vasserman", "text": "the matching this in the list. It's all case sensitive."}, {"source_name": "lecture4", "index": 815, "time": "01:15:13.510 --> 01:15:14.590", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture4", "index": 816, "time": "01:15:14.760 --> 01:15:18.389", "speaker": "Alexander Vasserman", "text": "we will definitely need to do"}, {"source_name": "lecture4", "index": 817, "time": "01:15:18.460 --> 01:15:25.059", "speaker": "Alexander Vasserman", "text": "some kind of neuralization in particular. what we are going to do is just lowercase everything"}, {"source_name": "lecture4", "index": 818, "time": "01:15:25.480 --> 01:15:28.249", "speaker": "Alexander Vasserman", "text": "right? So we could"}, {"source_name": "lecture4", "index": 819, "time": "01:15:28.300 --> 01:15:30.709", "speaker": "Alexander Vasserman", "text": "do it right here, and maybe"}, {"source_name": "lecture4", "index": 820, "time": "01:15:30.860 --> 01:15:33.020", "speaker": "Alexander Vasserman", "text": "okay, let's just do it."}, {"source_name": "lecture4", "index": 821, "time": "01:15:45.480 --> 01:15:48.430", "speaker": "Alexander Vasserman", "text": "But that was very valid concern."}, {"source_name": "lecture4", "index": 822, "time": "01:15:48.660 --> 01:15:51.059", "speaker": "Alexander Vasserman", "text": "And here, now we fixed it."}, {"source_name": "lecture4", "index": 823, "time": "01:15:51.580 --> 01:15:53.900", "speaker": "Alexander Vasserman", "text": "So now it's case insensitive."}, {"source_name": "lecture4", "index": 824, "time": "01:15:58.490 --> 01:16:00.630", "speaker": "Alexander Vasserman", "text": "there will be other things that"}, {"source_name": "lecture4", "index": 825, "time": "01:16:02.450 --> 01:16:04.169", "speaker": "Alexander Vasserman", "text": "you're not quite capturing."}, {"source_name": "lecture4", "index": 826, "time": "01:16:04.640 --> 01:16:05.760", "speaker": "Alexander Vasserman", "text": "So."}, {"source_name": "lecture4", "index": 827, "time": "01:16:05.990 --> 01:16:07.299", "speaker": "Alexander Vasserman", "text": "for example."}, {"source_name": "lecture4", "index": 828, "time": "01:16:09.140 --> 01:16:10.480", "speaker": "Alexander Vasserman", "text": "if I"}, {"source_name": "lecture4", "index": 829, "time": "01:16:12.790 --> 01:16:14.390", "speaker": "Alexander Vasserman", "text": "have it as a sentence"}, {"source_name": "lecture4", "index": 830, "time": "01:16:15.020 --> 01:16:15.809", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture4", "index": 831, "time": "01:16:16.090 --> 01:16:17.250", "speaker": "Alexander Vasserman", "text": "search for"}, {"source_name": "lecture4", "index": 832, "time": "01:16:17.620 --> 01:16:18.530", "speaker": "Alexander Vasserman", "text": "color."}, {"source_name": "lecture4", "index": 833, "time": "01:16:21.040 --> 01:16:23.119", "speaker": "Alexander Vasserman", "text": "yes, I didn't reload"}, {"source_name": "lecture4", "index": 834, "time": "01:16:23.270 --> 01:16:24.190", "speaker": "Alexander Vasserman", "text": "30"}, {"source_name": "lecture4", "index": 835, "time": "01:16:27.220 --> 01:16:28.160", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture4", "index": 836, "time": "01:16:28.320 --> 01:16:30.280", "speaker": "Alexander Vasserman", "text": "this definition says Falls."}, {"source_name": "lecture4", "index": 837, "time": "01:16:30.430 --> 01:16:32.889", "speaker": "Alexander Vasserman", "text": "because we are only speaking on spaces"}, {"source_name": "lecture4", "index": 838, "time": "01:16:33.440 --> 01:16:35.339", "speaker": "Alexander Vasserman", "text": "to the second term"}, {"source_name": "lecture4", "index": 839, "time": "01:16:35.650 --> 01:16:37.340", "speaker": "Alexander Vasserman", "text": "in this case"}, {"source_name": "lecture4", "index": 840, "time": "01:16:37.580 --> 01:16:40.100", "speaker": "Alexander Vasserman", "text": "in the document is color period."}, {"source_name": "lecture4", "index": 841, "time": "01:16:41.230 --> 01:16:43.610", "speaker": "Alexander Vasserman", "text": "and that's obviously not what we want to do."}, {"source_name": "lecture4", "index": 842, "time": "01:16:44.400 --> 01:16:46.290", "speaker": "Alexander Vasserman", "text": "So we'll we'll get"}, {"source_name": "lecture4", "index": 843, "time": "01:16:46.540 --> 01:16:48.910", "speaker": "Alexander Vasserman", "text": "more into that, or"}, {"source_name": "lecture4", "index": 844, "time": "01:16:49.020 --> 01:16:51.379", "speaker": "Alexander Vasserman", "text": "at the another class"}, {"source_name": "lecture4", "index": 845, "time": "01:16:51.670 --> 01:16:52.719", "speaker": "Alexander Vasserman", "text": "really soon."}, {"source_name": "lecture4", "index": 846, "time": "01:16:53.350 --> 01:17:01.009", "speaker": "Alexander Vasserman", "text": "but for now we'll assume that it's all clean and like there are no bad"}, {"source_name": "lecture4", "index": 847, "time": "01:17:01.080 --> 01:17:03.130", "speaker": "Alexander Vasserman", "text": "cases like that."}, {"source_name": "lecture4", "index": 848, "time": "01:17:09.760 --> 01:17:10.480", "speaker": "Alexander Vasserman", "text": "well."}, {"source_name": "lecture4", "index": 849, "time": "01:17:11.780 --> 01:17:18.330", "speaker": "Rafal \"Ralph\" Jasielec", "text": "can you explain again why you added a typing list to the document terms, but not to the query terms"}, {"source_name": "lecture4", "index": 850, "time": "01:17:18.440 --> 01:17:22.249", "speaker": "Alexander Vasserman", "text": "that's optional. This is really"}, {"source_name": "lecture4", "index": 851, "time": "01:17:22.600 --> 01:17:25.010", "speaker": "Alexander Vasserman", "text": "because it it was important."}, {"source_name": "lecture4", "index": 852, "time": "01:17:25.320 --> 01:17:28.150", "speaker": "Alexander Vasserman", "text": "all right, because document terms"}, {"source_name": "lecture4", "index": 853, "time": "01:17:30.480 --> 01:17:45.780", "speaker": "Alexander Vasserman", "text": "like depending on the type of the document terms. I wanted to emphasize that this in operator operates on least scared rather than on things. So that's why I with that on a patient, Remember, this is just for usability."}, {"source_name": "lecture4", "index": 854, "time": "01:17:46.560 --> 01:17:50.380", "speaker": "Alexander Vasserman", "text": "And inside of the function argument"}, {"source_name": "lecture4", "index": 855, "time": "01:17:50.460 --> 01:17:51.340", "speaker": "Alexander Vasserman", "text": "here"}, {"source_name": "lecture4", "index": 856, "time": "01:17:51.440 --> 01:17:56.499", "speaker": "Alexander Vasserman", "text": "I will pretty much always want to put types of type annotations."}, {"source_name": "lecture4", "index": 857, "time": "01:17:57.120 --> 01:18:07.590", "speaker": "Alexander Vasserman", "text": "But in inside the function, like when I'm defining new variables, I usually will not. because you can see from the assignment"}, {"source_name": "lecture4", "index": 858, "time": "01:18:07.610 --> 01:18:12.960", "speaker": "Alexander Vasserman", "text": "what the all variable type should be like, you know. If you remember what split does"}, {"source_name": "lecture4", "index": 859, "time": "01:18:13.360 --> 01:18:15.129", "speaker": "Alexander Vasserman", "text": "you, You'll know that"}, {"source_name": "lecture4", "index": 860, "time": "01:18:15.720 --> 01:18:20.610", "speaker": "Alexander Vasserman", "text": "the result. Type is a list of things so generally we will not"}, {"source_name": "lecture4", "index": 861, "time": "01:18:20.690 --> 01:18:23.360", "speaker": "Alexander Vasserman", "text": "output type annotations in this cases."}, {"source_name": "lecture4", "index": 862, "time": "01:18:25.980 --> 01:18:27.059", "speaker": "Alexander Vasserman", "text": "Edward."}, {"source_name": "lecture4", "index": 863, "time": "01:18:30.980 --> 01:18:33.290", "speaker": "Edward Daugela", "text": "Yeah, I was gonna ask about"}, {"source_name": "lecture4", "index": 864, "time": "01:18:33.360 --> 01:18:34.829", "speaker": "Edward Daugela", "text": "on a similar topic"}, {"source_name": "lecture4", "index": 865, "time": "01:18:35.170 --> 01:18:45.220", "speaker": "Edward Daugela", "text": "for the like. The on query, there's string like the typeless. Are these things only visible in code? Or is it visible like in a console like the doc strings of a function"}, {"source_name": "lecture4", "index": 866, "time": "01:18:46.690 --> 01:18:48.570", "speaker": "Edward Daugela", "text": "like this."}, {"source_name": "lecture4", "index": 867, "time": "01:18:48.860 --> 01:18:52.959", "speaker": "Alexander Vasserman", "text": "I'm actually not sure whether or not like, you know, if you or"}, {"source_name": "lecture4", "index": 868, "time": "01:18:53.080 --> 01:19:02.489", "speaker": "Alexander Vasserman", "text": "I mean I I think for Doc String, we'll have to. actually explicitly define a dog stream which you know in our"}, {"source_name": "lecture4", "index": 869, "time": "01:19:02.570 --> 01:19:17.129", "speaker": "Alexander Vasserman", "text": "in the editor is kind of convenient. If I type in the Papal quotes, you know, inside. It just gives me the this template, and yes, we should have the docstream. but it might be just I i'm not sure exactly."}, {"source_name": "lecture4", "index": 870, "time": "01:19:17.810 --> 01:19:20.209", "speaker": "Edward Daugela", "text": "And are these just for like a"}, {"source_name": "lecture4", "index": 871, "time": "01:19:20.230 --> 01:19:25.349", "speaker": "Edward Daugela", "text": "clarification from the cold? Or does it doesn't really affect anything right? It's just for like the readability?"}, {"source_name": "lecture4", "index": 872, "time": "01:19:25.470 --> 01:19:33.230", "speaker": "Alexander Vasserman", "text": "Yes, it's just the fact readability of the code, and you know, allows editor to to help you out a little bit."}, {"source_name": "lecture4", "index": 873, "time": "01:19:33.350 --> 01:19:34.059", "speaker": "Edward Daugela", "text": "Okay?"}, {"source_name": "lecture4", "index": 874, "time": "01:19:35.710 --> 01:19:36.620", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 875, "time": "01:19:37.020 --> 01:19:38.109", "speaker": "Alexander Vasserman", "text": "yeah. So"}, {"source_name": "lecture4", "index": 876, "time": "01:19:38.240 --> 01:19:44.539", "speaker": "Alexander Vasserman", "text": "I I would write the the it. Certainly the documentation string as well, and i'll probably do it after the class"}, {"source_name": "lecture4", "index": 877, "time": "01:19:44.640 --> 01:19:49.219", "speaker": "Alexander Vasserman", "text": "so like when I share this with you, i'll"}, {"source_name": "lecture4", "index": 878, "time": "01:19:49.780 --> 01:19:52.060", "speaker": "Alexander Vasserman", "text": "but now let's"}, {"source_name": "lecture4", "index": 879, "time": "01:19:52.190 --> 01:19:55.019", "speaker": "Alexander Vasserman", "text": "finish up our search."}, {"source_name": "lecture4", "index": 880, "time": "01:19:55.340 --> 01:19:56.650", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture4", "index": 881, "time": "01:19:56.740 --> 01:19:57.610", "speaker": "Alexander Vasserman", "text": "well."}, {"source_name": "lecture4", "index": 882, "time": "01:19:57.950 --> 01:20:09.460", "speaker": "Alexander Vasserman", "text": "all we need to do is really go through the documents one by one, and see if the document could reach documents match the query. So"}, {"source_name": "lecture4", "index": 883, "time": "01:20:11.470 --> 01:20:12.519", "speaker": "Alexander Vasserman", "text": "we can"}, {"source_name": "lecture4", "index": 884, "time": "01:20:13.060 --> 01:20:13.990", "speaker": "Alexander Vasserman", "text": "say"}, {"source_name": "lecture4", "index": 885, "time": "01:20:14.900 --> 01:20:17.929", "speaker": "Alexander Vasserman", "text": "if you remember, at least comprehension."}, {"source_name": "lecture4", "index": 886, "time": "01:20:42.730 --> 01:20:43.650", "speaker": "Alexander Vasserman", "text": "we could"}, {"source_name": "lecture4", "index": 887, "time": "01:20:47.850 --> 01:20:50.050", "speaker": "Alexander Vasserman", "text": "we could write something like this."}, {"source_name": "lecture4", "index": 888, "time": "01:20:50.950 --> 01:20:52.329", "speaker": "Alexander Vasserman", "text": "But let me"}, {"source_name": "lecture4", "index": 889, "time": "01:20:52.950 --> 01:20:57.030", "speaker": "Alexander Vasserman", "text": "comment that out for for now, and write it out."}, {"source_name": "lecture4", "index": 890, "time": "01:20:57.060 --> 01:21:01.059", "speaker": "Alexander Vasserman", "text": "So they let's start with an empty output list."}, {"source_name": "lecture4", "index": 891, "time": "01:21:01.420 --> 01:21:03.889", "speaker": "Alexander Vasserman", "text": "And do you for a loop?"}, {"source_name": "lecture4", "index": 892, "time": "01:21:10.650 --> 01:21:12.939", "speaker": "Alexander Vasserman", "text": "so if"}, {"source_name": "lecture4", "index": 893, "time": "01:21:13.670 --> 01:21:14.480", "speaker": "Alexander Vasserman", "text": "our"}, {"source_name": "lecture4", "index": 894, "time": "01:21:14.980 --> 01:21:15.820", "speaker": "Alexander Vasserman", "text": "oh"}, {"source_name": "lecture4", "index": 895, "time": "01:21:15.890 --> 01:21:19.230", "speaker": "Alexander Vasserman", "text": "bullying term match function says that"}, {"source_name": "lecture4", "index": 896, "time": "01:21:20.570 --> 01:21:22.090", "speaker": "Alexander Vasserman", "text": "is the query"}, {"source_name": "lecture4", "index": 897, "time": "01:21:22.590 --> 01:21:24.280", "speaker": "Alexander Vasserman", "text": "equal to"}, {"source_name": "lecture4", "index": 898, "time": "01:21:24.440 --> 01:21:25.320", "speaker": "Alexander Vasserman", "text": "really"}, {"source_name": "lecture4", "index": 899, "time": "01:21:25.760 --> 01:21:27.040", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture4", "index": 900, "time": "01:21:28.510 --> 01:21:31.320", "speaker": "Alexander Vasserman", "text": "document is equal to dark."}, {"source_name": "lecture4", "index": 901, "time": "01:21:32.150 --> 01:21:33.750", "speaker": "Alexander Vasserman", "text": "If it says"}, {"source_name": "lecture4", "index": 902, "time": "01:21:33.910 --> 01:21:37.670", "speaker": "Alexander Vasserman", "text": "that you know the document matches, we'll just"}, {"source_name": "lecture4", "index": 903, "time": "01:21:37.990 --> 01:21:38.900", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture4", "index": 904, "time": "01:21:39.430 --> 01:21:40.579", "speaker": "Alexander Vasserman", "text": "I band it"}, {"source_name": "lecture4", "index": 905, "time": "01:21:40.720 --> 01:21:41.940", "speaker": "Alexander Vasserman", "text": "to the output."}, {"source_name": "lecture4", "index": 906, "time": "01:21:44.110 --> 01:21:45.540", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture4", "index": 907, "time": "01:21:45.820 --> 01:21:49.200", "speaker": "Alexander Vasserman", "text": "then we can just return out. So"}, {"source_name": "lecture4", "index": 908, "time": "01:21:53.740 --> 01:21:54.650", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture4", "index": 909, "time": "01:21:56.130 --> 01:21:58.149", "speaker": "Alexander Vasserman", "text": "this is very naive"}, {"source_name": "lecture4", "index": 910, "time": "01:21:58.550 --> 01:22:00.279", "speaker": "Alexander Vasserman", "text": "definition of a search."}, {"source_name": "lecture4", "index": 911, "time": "01:22:00.430 --> 01:22:03.019", "speaker": "Alexander Vasserman", "text": "it's not going to be very efficient."}, {"source_name": "lecture4", "index": 912, "time": "01:22:03.110 --> 01:22:04.270", "speaker": "Alexander Vasserman", "text": "all of that."}, {"source_name": "lecture4", "index": 913, "time": "01:22:04.660 --> 01:22:05.559", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture4", "index": 914, "time": "01:22:05.820 --> 01:22:09.440", "speaker": "Alexander Vasserman", "text": "this is our first implementation of a"}, {"source_name": "lecture4", "index": 915, "time": "01:22:10.640 --> 01:22:12.490", "speaker": "Alexander Vasserman", "text": "our first search implementation."}, {"source_name": "lecture4", "index": 916, "time": "01:22:12.650 --> 01:22:13.989", "speaker": "Alexander Vasserman", "text": "What is the"}, {"source_name": "lecture4", "index": 917, "time": "01:22:14.260 --> 01:22:16.220", "speaker": "Alexander Vasserman", "text": "bullying matching logic?"}, {"source_name": "lecture4", "index": 918, "time": "01:22:19.370 --> 01:22:20.150", "speaker": "Alexander Vasserman", "text": "Right?"}, {"source_name": "lecture4", "index": 919, "time": "01:22:20.380 --> 01:22:25.550", "speaker": "Alexander Vasserman", "text": "So basically for each document we are applying that matching logic."}, {"source_name": "lecture4", "index": 920, "time": "01:22:25.730 --> 01:22:28.350", "speaker": "Alexander Vasserman", "text": "and if you wanted to"}, {"source_name": "lecture4", "index": 921, "time": "01:22:28.740 --> 01:22:34.710", "speaker": "Alexander Vasserman", "text": "have a different matching logic, all we would have to do is just change. Which function recording."}, {"source_name": "lecture4", "index": 922, "time": "01:22:34.840 --> 01:22:41.959", "speaker": "Alexander Vasserman", "text": "So that's kind of the convenience of defining some functions that, like you know, you kind of encapsulate"}, {"source_name": "lecture4", "index": 923, "time": "01:22:42.050 --> 01:22:45.690", "speaker": "Alexander Vasserman", "text": "the logic of what match means"}, {"source_name": "lecture4", "index": 924, "time": "01:22:45.910 --> 01:22:48.390", "speaker": "Alexander Vasserman", "text": "inside the that function. And then"}, {"source_name": "lecture4", "index": 925, "time": "01:22:48.590 --> 01:22:49.870", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture4", "index": 926, "time": "01:22:49.930 --> 01:22:51.540", "speaker": "Alexander Vasserman", "text": "code for search"}, {"source_name": "lecture4", "index": 927, "time": "01:22:51.880 --> 01:22:53.309", "speaker": "Alexander Vasserman", "text": "looks very simple."}, {"source_name": "lecture4", "index": 928, "time": "01:22:55.290 --> 01:22:56.110", "speaker": "Alexander Vasserman", "text": "12."}, {"source_name": "lecture4", "index": 929, "time": "01:22:57.720 --> 01:22:59.200", "speaker": "Rafal \"Ralph\" Jasielec", "text": "So the"}, {"source_name": "lecture4", "index": 930, "time": "01:22:59.560 --> 01:23:07.730", "speaker": "Rafal \"Ralph\" Jasielec", "text": "Boolean term match is that what happens underneath the hood that the end user doesn't see? And the search is"}, {"source_name": "lecture4", "index": 931, "time": "01:23:09.320 --> 01:23:10.660", "speaker": "Rafal \"Ralph\" Jasielec", "text": "the"}, {"source_name": "lecture4", "index": 932, "time": "01:23:11.620 --> 01:23:17.250", "speaker": "Rafal \"Ralph\" Jasielec", "text": "the external. What the user does see, or I I don't know which would actually does the"}, {"source_name": "lecture4", "index": 933, "time": "01:23:17.550 --> 01:23:21.429", "speaker": "Alexander Vasserman", "text": "does the search? Yes, church is the one that does the search."}, {"source_name": "lecture4", "index": 934, "time": "01:23:21.830 --> 01:23:29.350", "speaker": "Alexander Vasserman", "text": "Okay, great. So yes, the the match function we played around this to get some intuition. but"}, {"source_name": "lecture4", "index": 935, "time": "01:23:29.410 --> 01:23:33.859", "speaker": "Alexander Vasserman", "text": "basically what we what we really care about is"}, {"source_name": "lecture4", "index": 936, "time": "01:23:34.130 --> 01:23:37.329", "speaker": "Alexander Vasserman", "text": "the search. And"}, {"source_name": "lecture4", "index": 937, "time": "01:23:38.040 --> 01:23:39.160", "speaker": "Alexander Vasserman", "text": "you'll have."}, {"source_name": "lecture4", "index": 938, "time": "01:23:39.360 --> 01:23:40.690", "speaker": "Alexander Vasserman", "text": "maybe"}, {"source_name": "lecture4", "index": 939, "time": "01:23:42.220 --> 01:23:43.440", "speaker": "Alexander Vasserman", "text": "let's see."}, {"source_name": "lecture4", "index": 940, "time": "01:23:43.470 --> 01:23:47.499", "speaker": "Alexander Vasserman", "text": "Search for red, and the documents are."}, {"source_name": "lecture4", "index": 941, "time": "01:23:47.530 --> 01:23:48.920", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture4", "index": 942, "time": "01:23:50.460 --> 01:23:52.890", "speaker": "Alexander Vasserman", "text": "yellow, and"}, {"source_name": "lecture4", "index": 943, "time": "01:23:58.460 --> 01:24:01.400", "speaker": "Alexander Vasserman", "text": "blue and yellow, and then"}, {"source_name": "lecture4", "index": 944, "time": "01:24:07.750 --> 01:24:09.010", "speaker": "Alexander Vasserman", "text": "predict color"}, {"source_name": "lecture4", "index": 945, "time": "01:24:09.150 --> 01:24:13.169", "speaker": "Alexander Vasserman", "text": "right? So that's kind of the the examples"}, {"source_name": "lecture4", "index": 946, "time": "01:24:13.220 --> 01:24:15.309", "speaker": "Alexander Vasserman", "text": "that we done."}, {"source_name": "lecture4", "index": 947, "time": "01:24:15.360 --> 01:24:16.769", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture4", "index": 948, "time": "01:24:18.610 --> 01:24:27.150", "speaker": "Alexander Vasserman", "text": "out of those 3, the returns only one, which is rather rather than yellow, which is exactly what i'd expect."}, {"source_name": "lecture4", "index": 949, "time": "01:24:27.900 --> 01:24:28.469", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture4", "index": 950, "time": "01:24:28.630 --> 01:24:29.460", "speaker": "Alexander Vasserman", "text": "Todd."}, {"source_name": "lecture4", "index": 951, "time": "01:24:30.730 --> 01:24:34.900", "speaker": "Fahad Khan", "text": "So like you said, this is like like the basic search one like this is like our"}, {"source_name": "lecture4", "index": 952, "time": "01:24:35.070 --> 01:24:45.449", "speaker": "Fahad Khan", "text": "first implementation of it. I could. Would it be like, Are we gonna use like a a class search for like another implementation of a search thing"}, {"source_name": "lecture4", "index": 953, "time": "01:24:45.480 --> 01:24:48.219", "speaker": "Fahad Khan", "text": "like a class instead of like just functions."}, {"source_name": "lecture4", "index": 954, "time": "01:24:48.550 --> 01:24:53.040", "speaker": "Alexander Vasserman", "text": "we can we? We certainly it's to some degree. I can"}, {"source_name": "lecture4", "index": 955, "time": "01:24:53.150 --> 01:25:12.649", "speaker": "Alexander Vasserman", "text": "a ask the class to what degree it's. it's something that people want to do. If I were implementing it, I would certainly define multiple classes for multiple implementations, and have essentially an interface or like inheritance structure between the classes."}, {"source_name": "lecture4", "index": 956, "time": "01:25:12.730 --> 01:25:18.769", "speaker": "Alexander Vasserman", "text": "last time I told this class a lot of people were confused by classes and inheritance."}, {"source_name": "lecture4", "index": 957, "time": "01:25:18.810 --> 01:25:24.039", "speaker": "Alexander Vasserman", "text": "So i'm not 100% sure if I will introduce"}, {"source_name": "lecture4", "index": 958, "time": "01:25:24.250 --> 01:25:26.889", "speaker": "Alexander Vasserman", "text": "the inheritance."}, {"source_name": "lecture4", "index": 959, "time": "01:25:27.140 --> 01:25:29.110", "speaker": "Alexander Vasserman", "text": "but yes."}, {"source_name": "lecture4", "index": 960, "time": "01:25:29.260 --> 01:25:41.870", "speaker": "Alexander Vasserman", "text": "basically if I were to write it in a real environment, I will probably have a class, or rather than function. I would also have a class for the matcher, so that."}, {"source_name": "lecture4", "index": 961, "time": "01:25:42.100 --> 01:25:44.359", "speaker": "Alexander Vasserman", "text": "you know, basically instead of"}, {"source_name": "lecture4", "index": 962, "time": "01:25:44.480 --> 01:25:45.559", "speaker": "Alexander Vasserman", "text": "changing"}, {"source_name": "lecture4", "index": 963, "time": "01:25:45.790 --> 01:25:51.849", "speaker": "Alexander Vasserman", "text": "which function is used here, it just an attribute"}, {"source_name": "lecture4", "index": 964, "time": "01:25:51.870 --> 01:26:10.590", "speaker": "Alexander Vasserman", "text": "that I can switch out. And then the implementation of the search is the same implementation, independently of whether or not it's string, match or bull inter match, or any other match matching function. you'll get a little bit more into various pieces of research, and at that point it's"}, {"source_name": "lecture4", "index": 965, "time": "01:26:10.600 --> 01:26:13.039", "speaker": "Alexander Vasserman", "text": "going to be kind of more"}, {"source_name": "lecture4", "index": 966, "time": "01:26:13.140 --> 01:26:28.780", "speaker": "Alexander Vasserman", "text": "relevant. How exactly we're going to split it up, and how we're going to organize the search, or did the whole project in sense and classes and stuff for now I just want to kind of get something out quickly, like, you know, so that we have"}, {"source_name": "lecture4", "index": 967, "time": "01:26:29.260 --> 01:26:30.969", "speaker": "Alexander Vasserman", "text": "it working"}, {"source_name": "lecture4", "index": 968, "time": "01:26:31.080 --> 01:26:32.779", "speaker": "Alexander Vasserman", "text": "implementation of"}, {"source_name": "lecture4", "index": 969, "time": "01:26:32.850 --> 01:26:36.740", "speaker": "Alexander Vasserman", "text": "search right the way that we all."}, {"source_name": "lecture4", "index": 970, "time": "01:26:36.900 --> 01:26:40.319", "speaker": "Alexander Vasserman", "text": "and then we can just iterate on how we're doing it."}, {"source_name": "lecture4", "index": 971, "time": "01:26:47.240 --> 01:26:48.210", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture4", "index": 972, "time": "01:26:50.390 --> 01:26:56.720", "speaker": "Alexander Vasserman", "text": "one other thing that I really wanted to get to today is unit testing."}, {"source_name": "lecture4", "index": 973, "time": "01:26:57.360 --> 01:26:58.849", "speaker": "Alexander Vasserman", "text": "So the"}, {"source_name": "lecture4", "index": 974, "time": "01:26:59.040 --> 01:27:03.610", "speaker": "Alexander Vasserman", "text": "a whole bunch of functions we played around in the"}, {"source_name": "lecture4", "index": 975, "time": "01:27:05.130 --> 01:27:08.709", "speaker": "Alexander Vasserman", "text": "the the console with with them. but"}, {"source_name": "lecture4", "index": 976, "time": "01:27:08.970 --> 01:27:14.110", "speaker": "Alexander Vasserman", "text": "oh, yeah. So we have relatively okay understanding of how they work."}, {"source_name": "lecture4", "index": 977, "time": "01:27:14.230 --> 01:27:15.190", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture4", "index": 978, "time": "01:27:15.380 --> 01:27:24.209", "speaker": "Alexander Vasserman", "text": "the console output is not saved anywhere. And what we want is something that's a little better preserved. So"}, {"source_name": "lecture4", "index": 979, "time": "01:27:24.570 --> 01:27:26.070", "speaker": "Alexander Vasserman", "text": "if you right click"}, {"source_name": "lecture4", "index": 980, "time": "01:27:26.200 --> 01:27:28.609", "speaker": "Alexander Vasserman", "text": "inside of your"}, {"source_name": "lecture4", "index": 981, "time": "01:27:29.010 --> 01:27:30.200", "speaker": "Alexander Vasserman", "text": "file."}, {"source_name": "lecture4", "index": 982, "time": "01:27:30.750 --> 01:27:33.580", "speaker": "Alexander Vasserman", "text": "and you'll go to generate"}, {"source_name": "lecture4", "index": 983, "time": "01:27:34.960 --> 01:27:38.630", "speaker": "Alexander Vasserman", "text": "one of the options is generate test"}, {"source_name": "lecture4", "index": 984, "time": "01:27:39.930 --> 01:27:42.130", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture4", "index": 985, "time": "01:27:43.540 --> 01:27:44.480", "speaker": "Alexander Vasserman", "text": "8"}, {"source_name": "lecture4", "index": 986, "time": "01:27:44.620 --> 01:27:45.889", "speaker": "Alexander Vasserman", "text": "tells you."}, {"source_name": "lecture4", "index": 987, "time": "01:27:46.890 --> 01:27:47.880", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 988, "time": "01:27:48.080 --> 01:27:51.219", "speaker": "Alexander Vasserman", "text": "each functions. Let's select all the functions"}, {"source_name": "lecture4", "index": 989, "time": "01:27:51.330 --> 01:27:53.189", "speaker": "Alexander Vasserman", "text": "and click. Okay, and"}, {"source_name": "lecture4", "index": 990, "time": "01:27:53.420 --> 01:27:54.300", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture4", "index": 991, "time": "01:27:54.340 --> 01:27:56.830", "speaker": "Alexander Vasserman", "text": "you, generates a"}, {"source_name": "lecture4", "index": 992, "time": "01:27:57.090 --> 01:27:58.389", "speaker": "Alexander Vasserman", "text": "unit task"}, {"source_name": "lecture4", "index": 993, "time": "01:28:00.160 --> 01:28:05.409", "speaker": "Alexander Vasserman", "text": "which is the code whose only purpose is to test"}, {"source_name": "lecture4", "index": 994, "time": "01:28:05.570 --> 01:28:07.740", "speaker": "Alexander Vasserman", "text": "the functions that you already had."}, {"source_name": "lecture4", "index": 995, "time": "01:28:08.170 --> 01:28:11.369", "speaker": "Alexander Vasserman", "text": "So we will be using unit test library"}, {"source_name": "lecture4", "index": 996, "time": "01:28:11.720 --> 01:28:13.280", "speaker": "Alexander Vasserman", "text": "for our testing."}, {"source_name": "lecture4", "index": 997, "time": "01:28:13.430 --> 01:28:24.520", "speaker": "Alexander Vasserman", "text": "we'll try to test a lot of things in general. in you know, when you write projects, you want to test everything that you write, any function that you write, you want to test it."}, {"source_name": "lecture4", "index": 998, "time": "01:28:24.900 --> 01:28:26.030", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture4", "index": 999, "time": "01:28:26.280 --> 01:28:30.440", "speaker": "Alexander Vasserman", "text": "in particular, like things like the examples that we"}, {"source_name": "lecture4", "index": 1000, "time": "01:28:31.840 --> 01:28:32.990", "speaker": "Alexander Vasserman", "text": "have here."}, {"source_name": "lecture4", "index": 1001, "time": "01:28:33.070 --> 01:28:36.889", "speaker": "Alexander Vasserman", "text": "we want to essentially put them into a test."}, {"source_name": "lecture4", "index": 1002, "time": "01:28:36.980 --> 01:28:38.019", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture4", "index": 1003, "time": "01:28:38.220 --> 01:28:39.190", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture4", "index": 1004, "time": "01:28:45.750 --> 01:28:51.129", "speaker": "Alexander Vasserman", "text": "we can import everything from from matching. And then,"}, {"source_name": "lecture4", "index": 1005, "time": "01:28:52.110 --> 01:28:53.000", "speaker": "Alexander Vasserman", "text": "if you"}, {"source_name": "lecture4", "index": 1006, "time": "01:28:53.400 --> 01:28:54.300", "speaker": "Alexander Vasserman", "text": "all"}, {"source_name": "lecture4", "index": 1007, "time": "01:28:55.350 --> 01:28:56.219", "speaker": "Alexander Vasserman", "text": "call"}, {"source_name": "lecture4", "index": 1008, "time": "01:28:57.850 --> 01:28:58.740", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 1009, "time": "01:28:58.760 --> 01:29:00.949", "speaker": "Alexander Vasserman", "text": "to test our search function"}, {"source_name": "lecture4", "index": 1010, "time": "01:29:05.280 --> 01:29:06.400", "speaker": "Alexander Vasserman", "text": "oh, actually"}, {"source_name": "lecture4", "index": 1011, "time": "01:29:07.710 --> 01:29:11.140", "speaker": "Alexander Vasserman", "text": "you'll call something like this"}, {"source_name": "lecture4", "index": 1012, "time": "01:29:11.760 --> 01:29:21.490", "speaker": "Alexander Vasserman", "text": "right? So because I import start from matching, I don't have to specify matching here so this is a call which you know not"}, {"source_name": "lecture4", "index": 1013, "time": "01:29:22.570 --> 01:29:23.900", "speaker": "Alexander Vasserman", "text": "very useful."}, {"source_name": "lecture4", "index": 1014, "time": "01:29:24.070 --> 01:29:26.689", "speaker": "Alexander Vasserman", "text": "What is useful is"}, {"source_name": "lecture4", "index": 1015, "time": "01:29:28.270 --> 01:29:41.460", "speaker": "Alexander Vasserman", "text": "what this test case provides. So fail is the example that it gives you. But more useful things are something like, assert equals."}, {"source_name": "lecture4", "index": 1016, "time": "01:29:42.400 --> 01:29:44.639", "speaker": "Alexander Vasserman", "text": "so it"}, {"source_name": "lecture4", "index": 1017, "time": "01:29:44.920 --> 01:29:47.449", "speaker": "Alexander Vasserman", "text": "we can say, okay, what?"}, {"source_name": "lecture4", "index": 1018, "time": "01:29:47.800 --> 01:29:48.650", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 1019, "time": "01:29:48.700 --> 01:29:50.509", "speaker": "Alexander Vasserman", "text": "are we expecting"}, {"source_name": "lecture4", "index": 1020, "time": "01:29:50.800 --> 01:29:55.760", "speaker": "Alexander Vasserman", "text": "the result of this function to be, and it's"}, {"source_name": "lecture4", "index": 1021, "time": "01:29:55.800 --> 01:29:58.830", "speaker": "Alexander Vasserman", "text": "a single document"}, {"source_name": "lecture4", "index": 1022, "time": "01:29:58.980 --> 01:29:59.910", "speaker": "Alexander Vasserman", "text": "Brad"}, {"source_name": "lecture4", "index": 1023, "time": "01:30:00.950 --> 01:30:02.760", "speaker": "Alexander Vasserman", "text": "and Yellow."}, {"source_name": "lecture4", "index": 1024, "time": "01:30:03.380 --> 01:30:04.790", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture4", "index": 1025, "time": "01:30:05.280 --> 01:30:09.210", "speaker": "Alexander Vasserman", "text": "so this I start equal is functional of"}, {"source_name": "lecture4", "index": 1026, "time": "01:30:09.480 --> 01:30:11.010", "speaker": "Alexander Vasserman", "text": "2 arguments"}, {"source_name": "lecture4", "index": 1027, "time": "01:30:11.620 --> 01:30:13.150", "speaker": "Alexander Vasserman", "text": "one"}, {"source_name": "lecture4", "index": 1028, "time": "01:30:14.130 --> 01:30:15.510", "speaker": "Alexander Vasserman", "text": "is"}, {"source_name": "lecture4", "index": 1029, "time": "01:30:15.880 --> 01:30:16.830", "speaker": "Alexander Vasserman", "text": "on"}, {"source_name": "lecture4", "index": 1030, "time": "01:30:17.790 --> 01:30:19.750", "speaker": "Alexander Vasserman", "text": "the expected outcome."}, {"source_name": "lecture4", "index": 1031, "time": "01:30:20.040 --> 01:30:28.179", "speaker": "Alexander Vasserman", "text": "And then one is essentially actual outcome. So in the second argument we put the"}, {"source_name": "lecture4", "index": 1032, "time": "01:30:28.980 --> 01:30:30.900", "speaker": "Alexander Vasserman", "text": "whatever function you're testing."}, {"source_name": "lecture4", "index": 1033, "time": "01:30:31.280 --> 01:30:32.750", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture4", "index": 1034, "time": "01:30:33.680 --> 01:30:36.309", "speaker": "Alexander Vasserman", "text": "basically this task is going to compare"}, {"source_name": "lecture4", "index": 1035, "time": "01:30:36.520 --> 01:30:39.389", "speaker": "Alexander Vasserman", "text": "things for us, and then"}, {"source_name": "lecture4", "index": 1036, "time": "01:30:39.580 --> 01:30:40.889", "speaker": "Alexander Vasserman", "text": "let's"}, {"source_name": "lecture4", "index": 1037, "time": "01:30:41.460 --> 01:30:42.940", "speaker": "Alexander Vasserman", "text": "for now"}, {"source_name": "lecture4", "index": 1038, "time": "01:30:44.020 --> 01:30:45.600", "speaker": "Alexander Vasserman", "text": "this out"}, {"source_name": "lecture4", "index": 1039, "time": "01:30:45.670 --> 01:30:47.169", "speaker": "Alexander Vasserman", "text": "you can"}, {"source_name": "lecture4", "index": 1040, "time": "01:30:47.900 --> 01:30:49.730", "speaker": "Alexander Vasserman", "text": "just say."}, {"source_name": "lecture4", "index": 1041, "time": "01:30:51.580 --> 01:30:53.080", "speaker": "Alexander Vasserman", "text": "run tests."}, {"source_name": "lecture4", "index": 1042, "time": "01:30:53.640 --> 01:30:55.440", "speaker": "Alexander Vasserman", "text": "and you'll get."}, {"source_name": "lecture4", "index": 1043, "time": "01:30:55.550 --> 01:30:56.429", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 1044, "time": "01:30:57.560 --> 01:31:01.839", "speaker": "Alexander Vasserman", "text": "another window here. That's that's outcome of the tests."}, {"source_name": "lecture4", "index": 1045, "time": "01:31:02.030 --> 01:31:08.050", "speaker": "Alexander Vasserman", "text": "and in this particular case itself run one task, then it's okay. So the test passed."}, {"source_name": "lecture4", "index": 1046, "time": "01:31:08.150 --> 01:31:10.679", "speaker": "Alexander Vasserman", "text": "we might have all"}, {"source_name": "lecture4", "index": 1047, "time": "01:31:10.770 --> 01:31:16.069", "speaker": "Alexander Vasserman", "text": "had multiple assertions here. I just do kind of"}, {"source_name": "lecture4", "index": 1048, "time": "01:31:16.210 --> 01:31:17.160", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 1049, "time": "01:31:19.230 --> 01:31:20.580", "speaker": "Alexander Vasserman", "text": "give you"}, {"source_name": "lecture4", "index": 1050, "time": "01:31:20.830 --> 01:31:22.519", "speaker": "Alexander Vasserman", "text": "an example if"}, {"source_name": "lecture4", "index": 1051, "time": "01:31:22.630 --> 01:31:24.020", "speaker": "Alexander Vasserman", "text": "you what I was"}, {"source_name": "lecture4", "index": 1052, "time": "01:31:24.150 --> 01:31:25.320", "speaker": "Alexander Vasserman", "text": "by searching"}, {"source_name": "lecture4", "index": 1053, "time": "01:31:25.660 --> 01:31:27.370", "speaker": "Alexander Vasserman", "text": "different thing here."}, {"source_name": "lecture4", "index": 1054, "time": "01:31:27.710 --> 01:31:28.750", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 1055, "time": "01:31:29.800 --> 01:31:30.750", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture4", "index": 1056, "time": "01:31:30.880 --> 01:31:33.609", "speaker": "Alexander Vasserman", "text": "I also can run this this run icons."}, {"source_name": "lecture4", "index": 1057, "time": "01:31:33.880 --> 01:31:34.730", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 1058, "time": "01:31:35.790 --> 01:31:37.019", "speaker": "Alexander Vasserman", "text": "do you run it?"}, {"source_name": "lecture4", "index": 1059, "time": "01:31:37.200 --> 01:31:41.340", "speaker": "Alexander Vasserman", "text": "It would say, okay, test fail, because"}, {"source_name": "lecture4", "index": 1060, "time": "01:31:41.700 --> 01:31:45.260", "speaker": "Alexander Vasserman", "text": "what we got is not,"}, {"source_name": "lecture4", "index": 1061, "time": "01:31:46.130 --> 01:31:56.620", "speaker": "Alexander Vasserman", "text": "equal to what was expected. So expect it was this and actual was this: You can see the difference. You can go to the live particular line where that"}, {"source_name": "lecture4", "index": 1062, "time": "01:31:56.730 --> 01:32:00.329", "speaker": "Alexander Vasserman", "text": "test this, etc. So it basically helps you."}, {"source_name": "lecture4", "index": 1063, "time": "01:32:00.350 --> 01:32:01.870", "speaker": "Alexander Vasserman", "text": "I understand what?"}, {"source_name": "lecture4", "index": 1064, "time": "01:32:02.290 --> 01:32:03.550", "speaker": "Alexander Vasserman", "text": "Why, like"}, {"source_name": "lecture4", "index": 1065, "time": "01:32:03.880 --> 01:32:12.309", "speaker": "Alexander Vasserman", "text": "when your function doesn't do what you expect it to do, which is normally would be the case for failure, not because you specified something wrong."}, {"source_name": "lecture4", "index": 1066, "time": "01:32:13.530 --> 01:32:16.729", "speaker": "Alexander Vasserman", "text": "it's makes debugging very easy."}, {"source_name": "lecture4", "index": 1067, "time": "01:32:18.290 --> 01:32:18.969", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture4", "index": 1068, "time": "01:32:19.700 --> 01:32:20.820", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture4", "index": 1069, "time": "01:32:21.200 --> 01:32:22.200", "speaker": "Alexander Vasserman", "text": "this is"}, {"source_name": "lecture4", "index": 1070, "time": "01:32:22.460 --> 01:32:24.040", "speaker": "Alexander Vasserman", "text": "actually"}, {"source_name": "lecture4", "index": 1071, "time": "01:32:24.080 --> 01:32:28.809", "speaker": "Alexander Vasserman", "text": "some of the things that I wanted to highlight. So why do we test?"}, {"source_name": "lecture4", "index": 1072, "time": "01:32:28.890 --> 01:32:29.670", "speaker": "Alexander Vasserman", "text": "Well."}, {"source_name": "lecture4", "index": 1073, "time": "01:32:29.760 --> 01:32:38.899", "speaker": "Alexander Vasserman", "text": "one is to make sure that the code works. We we're going to have multiple tasks. We we're going to test all kinds of use cases, and we'll be sure that there"}, {"source_name": "lecture4", "index": 1074, "time": "01:32:38.960 --> 01:32:41.830", "speaker": "Alexander Vasserman", "text": "code actually works the way we expect it to work."}, {"source_name": "lecture4", "index": 1075, "time": "01:32:42.270 --> 01:32:43.170", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 1076, "time": "01:32:43.480 --> 01:32:49.449", "speaker": "Alexander Vasserman", "text": "we want to make sure that code keeps working even after we we made some modifications."}, {"source_name": "lecture4", "index": 1077, "time": "01:32:49.550 --> 01:32:51.420", "speaker": "Alexander Vasserman", "text": "So sometimes you would"}, {"source_name": "lecture4", "index": 1078, "time": "01:32:51.440 --> 01:32:57.110", "speaker": "Alexander Vasserman", "text": "go in and change something, or like, you know you want to."}, {"source_name": "lecture4", "index": 1079, "time": "01:32:57.590 --> 01:33:00.020", "speaker": "Alexander Vasserman", "text": "Let's say you want to make"}, {"source_name": "lecture4", "index": 1080, "time": "01:33:00.400 --> 01:33:02.909", "speaker": "Alexander Vasserman", "text": "quote more efficient. So you changed something."}, {"source_name": "lecture4", "index": 1081, "time": "01:33:02.940 --> 01:33:05.209", "speaker": "Alexander Vasserman", "text": "and then you run test to make sure that"}, {"source_name": "lecture4", "index": 1082, "time": "01:33:05.890 --> 01:33:08.969", "speaker": "Alexander Vasserman", "text": "after those modifications it's still all"}, {"source_name": "lecture4", "index": 1083, "time": "01:33:09.010 --> 01:33:10.719", "speaker": "Alexander Vasserman", "text": "Oh, okay, right"}, {"source_name": "lecture4", "index": 1084, "time": "01:33:11.830 --> 01:33:12.840", "speaker": "Alexander Vasserman", "text": "through."}, {"source_name": "lecture4", "index": 1085, "time": "01:33:13.430 --> 01:33:14.370", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 1086, "time": "01:33:15.020 --> 01:33:16.309", "speaker": "Alexander Vasserman", "text": "basically"}, {"source_name": "lecture4", "index": 1087, "time": "01:33:17.160 --> 01:33:24.129", "speaker": "Alexander Vasserman", "text": "tests are essentially the definition of expected function behavior. We can have a description"}, {"source_name": "lecture4", "index": 1088, "time": "01:33:24.200 --> 01:33:26.050", "speaker": "Alexander Vasserman", "text": "of the function, and we should."}, {"source_name": "lecture4", "index": 1089, "time": "01:33:26.120 --> 01:33:33.340", "speaker": "Alexander Vasserman", "text": "But you know any kind of description as much as you want to. define it, and more. It's not going to be precise"}, {"source_name": "lecture4", "index": 1090, "time": "01:33:33.780 --> 01:33:34.870", "speaker": "Alexander Vasserman", "text": "if he"}, {"source_name": "lecture4", "index": 1091, "time": "01:33:35.130 --> 01:33:38.529", "speaker": "Alexander Vasserman", "text": "get all the different tasks that we want"}, {"source_name": "lecture4", "index": 1092, "time": "01:33:38.630 --> 01:33:39.559", "speaker": "Alexander Vasserman", "text": "deal"}, {"source_name": "lecture4", "index": 1093, "time": "01:33:40.240 --> 01:33:46.789", "speaker": "Alexander Vasserman", "text": "basically have that definition of what the behavior of the function is supposed to be."}, {"source_name": "lecture4", "index": 1094, "time": "01:33:47.070 --> 01:33:49.749", "speaker": "Alexander Vasserman", "text": "and that's the value of writing tasks."}, {"source_name": "lecture4", "index": 1095, "time": "01:33:50.000 --> 01:33:53.950", "speaker": "Alexander Vasserman", "text": "and also when you change something"}, {"source_name": "lecture4", "index": 1096, "time": "01:33:54.150 --> 01:33:59.369", "speaker": "Alexander Vasserman", "text": "and you are changing behavior, you will need to change the tests."}, {"source_name": "lecture4", "index": 1097, "time": "01:33:59.540 --> 01:34:06.170", "speaker": "Alexander Vasserman", "text": "and so kind of if it makes very explicit when you make changes, whether or not you intended"}, {"source_name": "lecture4", "index": 1098, "time": "01:34:06.200 --> 01:34:07.219", "speaker": "Alexander Vasserman", "text": "to make"}, {"source_name": "lecture4", "index": 1099, "time": "01:34:07.490 --> 01:34:10.689", "speaker": "Alexander Vasserman", "text": "behavior changes for the function and what they are."}, {"source_name": "lecture4", "index": 1100, "time": "01:34:11.300 --> 01:34:14.520", "speaker": "Alexander Vasserman", "text": "Okay, so that's kind of the idea of testing."}, {"source_name": "lecture4", "index": 1101, "time": "01:34:18.690 --> 01:34:23.480", "speaker": "Fahad Khan", "text": "Can you show another time how to access that or to make like a test file."}, {"source_name": "lecture4", "index": 1102, "time": "01:34:23.740 --> 01:34:29.160", "speaker": "Alexander Vasserman", "text": "Yes, so in matching you go right. Click."}, {"source_name": "lecture4", "index": 1103, "time": "01:34:29.760 --> 01:34:31.650", "speaker": "Alexander Vasserman", "text": "You go in to generate"}, {"source_name": "lecture4", "index": 1104, "time": "01:34:31.920 --> 01:34:33.430", "speaker": "Alexander Vasserman", "text": "and then select test."}, {"source_name": "lecture4", "index": 1105, "time": "01:34:35.050 --> 01:34:40.849", "speaker": "Alexander Vasserman", "text": "Of course you can also just create that file and just type in everything."}, {"source_name": "lecture4", "index": 1106, "time": "01:34:40.930 --> 01:34:43.499", "speaker": "Alexander Vasserman", "text": "So you know, this is just the"}, {"source_name": "lecture4", "index": 1107, "time": "01:34:43.520 --> 01:34:45.090", "speaker": "Alexander Vasserman", "text": "shorthand"}, {"source_name": "lecture4", "index": 1108, "time": "01:34:50.270 --> 01:34:51.170", "speaker": "Alexander Vasserman", "text": "right?"}, {"source_name": "lecture4", "index": 1109, "time": "01:34:51.190 --> 01:34:52.750", "speaker": "Alexander Vasserman", "text": "So we"}, {"source_name": "lecture4", "index": 1110, "time": "01:34:55.210 --> 01:34:55.950", "speaker": "Alexander Vasserman", "text": "yeah"}, {"source_name": "lecture4", "index": 1111, "time": "01:34:56.150 --> 01:35:06.850", "speaker": "Alexander Vasserman", "text": "so it generates a little bit of of code for you, but it's not necessary. Just the nice thing, you know. You could just type that in it's not that much stuff."}, {"source_name": "lecture4", "index": 1112, "time": "01:35:09.250 --> 01:35:10.350", "speaker": "Alexander Vasserman", "text": "Did you get that?"}, {"source_name": "lecture4", "index": 1113, "time": "01:35:11.070 --> 01:35:12.789", "speaker": "Alexander Vasserman", "text": "Yeah, Thank you. Yep."}, {"source_name": "lecture4", "index": 1114, "time": "01:35:13.270 --> 01:35:14.820", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture4", "index": 1115, "time": "01:35:15.020 --> 01:35:15.920", "speaker": "Alexander Vasserman", "text": "let's"}, {"source_name": "lecture4", "index": 1116, "time": "01:35:16.120 --> 01:35:21.270", "speaker": "Alexander Vasserman", "text": "maybe right. Couple of more tests. let's do."}, {"source_name": "lecture4", "index": 1117, "time": "01:35:21.380 --> 01:35:22.330", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 1118, "time": "01:35:23.560 --> 01:35:29.390", "speaker": "Alexander Vasserman", "text": "string match, and maybe we'll have multiple test cases. Here, let's say."}, {"source_name": "lecture4", "index": 1119, "time": "01:35:29.420 --> 01:35:30.370", "speaker": "Alexander Vasserman", "text": "are."}, {"source_name": "lecture4", "index": 1120, "time": "01:35:33.270 --> 01:35:35.940", "speaker": "Alexander Vasserman", "text": "let's get you have a case"}, {"source_name": "lecture4", "index": 1121, "time": "01:35:36.020 --> 01:35:37.440", "speaker": "Alexander Vasserman", "text": "where"}, {"source_name": "lecture4", "index": 1122, "time": "01:35:37.740 --> 01:35:38.530", "speaker": "Alexander Vasserman", "text": "it"}, {"source_name": "lecture4", "index": 1123, "time": "01:35:38.770 --> 01:35:40.970", "speaker": "Alexander Vasserman", "text": "does match, so we will"}, {"source_name": "lecture4", "index": 1124, "time": "01:35:41.110 --> 01:35:42.030", "speaker": "Alexander Vasserman", "text": "on."}, {"source_name": "lecture4", "index": 1125, "time": "01:35:44.890 --> 01:35:46.469", "speaker": "Alexander Vasserman", "text": "You can use"}, {"source_name": "lecture4", "index": 1126, "time": "01:35:50.040 --> 01:35:52.379", "speaker": "Alexander Vasserman", "text": "a cert equal."}, {"source_name": "lecture4", "index": 1127, "time": "01:35:54.050 --> 01:35:56.849", "speaker": "Alexander Vasserman", "text": "but so that's"}, {"source_name": "lecture4", "index": 1128, "time": "01:35:58.300 --> 01:35:59.309", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture4", "index": 1129, "time": "01:35:59.790 --> 01:36:04.699", "speaker": "Alexander Vasserman", "text": "have first what we are the example. So let's say we have"}, {"source_name": "lecture4", "index": 1130, "time": "01:36:04.730 --> 01:36:06.950", "speaker": "Alexander Vasserman", "text": "brad, and though"}, {"source_name": "lecture4", "index": 1131, "time": "01:36:07.080 --> 01:36:11.460", "speaker": "Alexander Vasserman", "text": "the as the query in the document is read and"}, {"source_name": "lecture4", "index": 1132, "time": "01:36:12.180 --> 01:36:18.079", "speaker": "Alexander Vasserman", "text": "yellow, and then the expected output is"}, {"source_name": "lecture4", "index": 1133, "time": "01:36:18.220 --> 01:36:19.160", "speaker": "Alexander Vasserman", "text": "true."}, {"source_name": "lecture4", "index": 1134, "time": "01:36:25.140 --> 01:36:27.500", "speaker": "Alexander Vasserman", "text": "then we might want to."}, {"source_name": "lecture4", "index": 1135, "time": "01:36:27.960 --> 01:36:28.800", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 1136, "time": "01:36:29.280 --> 01:36:30.219", "speaker": "Alexander Vasserman", "text": "add"}, {"source_name": "lecture4", "index": 1137, "time": "01:36:30.610 --> 01:36:32.400", "speaker": "Alexander Vasserman", "text": "another test case."}, {"source_name": "lecture4", "index": 1138, "time": "01:36:41.820 --> 01:36:43.809", "speaker": "Alexander Vasserman", "text": "Let's see Don't match"}, {"source_name": "lecture4", "index": 1139, "time": "01:36:43.890 --> 01:36:46.069", "speaker": "Alexander Vasserman", "text": "and let's say."}, {"source_name": "lecture4", "index": 1140, "time": "01:36:54.300 --> 01:37:03.950", "speaker": "Alexander Vasserman", "text": "So actually, the truth value test. There is a specific function for it. So you can say, I assert, false instead of 2 argument"}, {"source_name": "lecture4", "index": 1141, "time": "01:37:04.020 --> 01:37:12.009", "speaker": "Alexander Vasserman", "text": "way of testing it. You can just say that. so let me actually change that here also to assert"}, {"source_name": "lecture4", "index": 1142, "time": "01:37:13.070 --> 01:37:20.989", "speaker": "Alexander Vasserman", "text": "true. So here we are, saying that the expected return value of that function is through on here. It's false."}, {"source_name": "lecture4", "index": 1143, "time": "01:37:21.460 --> 01:37:23.639", "speaker": "Alexander Vasserman", "text": "and me Video."}, {"source_name": "lecture4", "index": 1144, "time": "01:37:23.960 --> 01:37:26.540", "speaker": "Alexander Vasserman", "text": "that's another one"}, {"source_name": "lecture4", "index": 1145, "time": "01:37:26.740 --> 01:37:27.639", "speaker": "Alexander Vasserman", "text": "just"}, {"source_name": "lecture4", "index": 1146, "time": "01:37:31.700 --> 01:37:32.830", "speaker": "Alexander Vasserman", "text": "let's see."}, {"source_name": "lecture4", "index": 1147, "time": "01:37:35.940 --> 01:37:38.019", "speaker": "Alexander Vasserman", "text": "and you'll"}, {"source_name": "lecture4", "index": 1148, "time": "01:37:39.200 --> 01:37:40.090", "speaker": "Alexander Vasserman", "text": "have"}, {"source_name": "lecture4", "index": 1149, "time": "01:37:45.760 --> 01:37:46.450", "speaker": "Alexander Vasserman", "text": "It's"}, {"source_name": "lecture4", "index": 1150, "time": "01:37:46.770 --> 01:37:50.759", "speaker": "Alexander Vasserman", "text": "So we want to indicate kind of all the"}, {"source_name": "lecture4", "index": 1151, "time": "01:37:50.780 --> 01:37:51.880", "speaker": "Alexander Vasserman", "text": "different"}, {"source_name": "lecture4", "index": 1152, "time": "01:37:55.700 --> 01:38:08.769", "speaker": "Alexander Vasserman", "text": "use cases of the behavior. So that kind of describing to a potential user how this function works, so that we be able to say, okay, Well, you know, this is kind of how this matching function works."}, {"source_name": "lecture4", "index": 1153, "time": "01:38:11.370 --> 01:38:20.130", "speaker": "Alexander Vasserman", "text": "etc., right. And so, because we we've written all of that, it's really quick. We can run all of those tasks at the same time."}, {"source_name": "lecture4", "index": 1154, "time": "01:38:22.080 --> 01:38:25.680", "speaker": "Alexander Vasserman", "text": "Oh, yeah, because we still have this fail. But."}, {"source_name": "lecture4", "index": 1155, "time": "01:38:25.780 --> 01:38:27.540", "speaker": "Alexander Vasserman", "text": "basically it"}, {"source_name": "lecture4", "index": 1156, "time": "01:38:27.770 --> 01:38:32.220", "speaker": "Alexander Vasserman", "text": "ran all of those test cases. So it's very convenient way to"}, {"source_name": "lecture4", "index": 1157, "time": "01:38:32.710 --> 01:38:39.899", "speaker": "Alexander Vasserman", "text": "check for your modifications or etc. And make sure that everything still works right. So."}, {"source_name": "lecture4", "index": 1158, "time": "01:38:40.760 --> 01:38:45.610", "speaker": "Alexander Vasserman", "text": "finishing this up is going to be part of your homework. I'll"}, {"source_name": "lecture4", "index": 1159, "time": "01:38:48.160 --> 01:38:52.639", "speaker": "Alexander Vasserman", "text": "i'll provide the the code that we've written today."}, {"source_name": "lecture4", "index": 1160, "time": "01:38:52.710 --> 01:39:00.139", "speaker": "Alexander Vasserman", "text": "but part of the homework is going to be to video shop these tests"}, {"source_name": "lecture4", "index": 1161, "time": "01:39:00.580 --> 01:39:03.419", "speaker": "Alexander Vasserman", "text": "so any questions"}, {"source_name": "lecture4", "index": 1162, "time": "01:39:04.230 --> 01:39:06.590", "speaker": "Alexander Vasserman", "text": "you'll need to understand how to write tests."}, {"source_name": "lecture4", "index": 1163, "time": "01:39:12.180 --> 01:39:18.579", "speaker": "Alexander Vasserman", "text": "or at least how to add tasks to an existing file, so you'll be just adding"}, {"source_name": "lecture4", "index": 1164, "time": "01:39:18.610 --> 01:39:20.800", "speaker": "Alexander Vasserman", "text": "to this file. And"}, {"source_name": "lecture4", "index": 1165, "time": "01:39:20.870 --> 01:39:22.809", "speaker": "Alexander Vasserman", "text": "you can add to the same class."}, {"source_name": "lecture4", "index": 1166, "time": "01:39:23.800 --> 01:39:28.010", "speaker": "Fahad Khan", "text": "for the homework, is it? What tests are we adding? To what function?"}, {"source_name": "lecture4", "index": 1167, "time": "01:39:28.300 --> 01:39:30.970", "speaker": "Alexander Vasserman", "text": "So you you'll"}, {"source_name": "lecture4", "index": 1168, "time": "01:39:31.070 --> 01:39:32.289", "speaker": "Alexander Vasserman", "text": "Okay, so"}, {"source_name": "lecture4", "index": 1169, "time": "01:39:34.240 --> 01:39:35.500", "speaker": "Alexander Vasserman", "text": "let me"}, {"source_name": "lecture4", "index": 1170, "time": "01:39:36.250 --> 01:39:37.370", "speaker": "Alexander Vasserman", "text": "actually"}, {"source_name": "lecture4", "index": 1171, "time": "01:39:37.710 --> 01:39:41.280", "speaker": "Alexander Vasserman", "text": "spend 2\u00c2\u00a0min going through the homework"}, {"source_name": "lecture4", "index": 1172, "time": "01:39:43.240 --> 01:39:48.749", "speaker": "Alexander Vasserman", "text": "what I wanted to do you to do is actually all the functions that we have."}, {"source_name": "lecture4", "index": 1173, "time": "01:39:58.020 --> 01:40:06.150", "speaker": "Alexander Vasserman", "text": "I want you to think about actually what are reasonable test cases."}, {"source_name": "lecture4", "index": 1174, "time": "01:40:07.700 --> 01:40:11.839", "speaker": "Alexander Vasserman", "text": "Like what are all the behaviors that you want to encode."}, {"source_name": "lecture4", "index": 1175, "time": "01:40:11.920 --> 01:40:15.929", "speaker": "Alexander Vasserman", "text": "So this is part of the practice that I want you to do."}, {"source_name": "lecture4", "index": 1176, "time": "01:40:16.280 --> 01:40:24.160", "speaker": "Alexander Vasserman", "text": "but, there will be some like some of the things that I I expect are given in in the homework."}, {"source_name": "lecture4", "index": 1177, "time": "01:40:24.240 --> 01:40:26.229", "speaker": "Alexander Vasserman", "text": "So I think we went through"}, {"source_name": "lecture4", "index": 1178, "time": "01:40:26.280 --> 01:40:27.130", "speaker": "Alexander Vasserman", "text": "first"}, {"source_name": "lecture4", "index": 1179, "time": "01:40:27.590 --> 01:40:29.600", "speaker": "Alexander Vasserman", "text": "to"}, {"source_name": "lecture4", "index": 1180, "time": "01:40:31.040 --> 01:40:34.589", "speaker": "Alexander Vasserman", "text": "before, first of all questions and assignment"}, {"source_name": "lecture4", "index": 1181, "time": "01:40:36.500 --> 01:40:39.919", "speaker": "Alexander Vasserman", "text": "third question is to write a function that given"}, {"source_name": "lecture4", "index": 1182, "time": "01:40:40.180 --> 01:40:41.460", "speaker": "Alexander Vasserman", "text": "a"}, {"source_name": "lecture4", "index": 1183, "time": "01:40:42.070 --> 01:40:42.910", "speaker": "Alexander Vasserman", "text": "next"}, {"source_name": "lecture4", "index": 1184, "time": "01:40:42.950 --> 01:40:49.369", "speaker": "Alexander Vasserman", "text": "as a string outputs a dicked mapping words to corresponding spans."}, {"source_name": "lecture4", "index": 1185, "time": "01:40:49.770 --> 01:40:57.300", "speaker": "Alexander Vasserman", "text": "So this is a little bit on our building on what we done last time"}, {"source_name": "lecture4", "index": 1186, "time": "01:40:57.610 --> 01:40:58.710", "speaker": "Alexander Vasserman", "text": "to"}, {"source_name": "lecture4", "index": 1187, "time": "01:40:59.450 --> 01:41:03.559", "speaker": "Alexander Vasserman", "text": "again, like, you know, if we were to talk about signatures"}, {"source_name": "lecture4", "index": 1188, "time": "01:41:03.700 --> 01:41:07.630", "speaker": "Alexander Vasserman", "text": "here we all have a"}, {"source_name": "lecture4", "index": 1189, "time": "01:41:07.980 --> 01:41:08.910", "speaker": "Alexander Vasserman", "text": "oh"}, {"source_name": "lecture4", "index": 1190, "time": "01:41:08.930 --> 01:41:13.140", "speaker": "Alexander Vasserman", "text": "function with one argument of types is stream."}, {"source_name": "lecture4", "index": 1191, "time": "01:41:13.650 --> 01:41:15.660", "speaker": "Alexander Vasserman", "text": "and if it's the output type"}, {"source_name": "lecture4", "index": 1192, "time": "01:41:15.720 --> 01:41:17.450", "speaker": "Alexander Vasserman", "text": "of addict."}, {"source_name": "lecture4", "index": 1193, "time": "01:41:18.530 --> 01:41:22.170", "speaker": "Alexander Vasserman", "text": "these keys being strings, individual words"}, {"source_name": "lecture4", "index": 1194, "time": "01:41:22.750 --> 01:41:25.230", "speaker": "Alexander Vasserman", "text": "and values are"}, {"source_name": "lecture4", "index": 1195, "time": "01:41:25.600 --> 01:41:27.259", "speaker": "Alexander Vasserman", "text": "list of strings."}, {"source_name": "lecture4", "index": 1196, "time": "01:41:27.920 --> 01:41:29.179", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture4", "index": 1197, "time": "01:41:29.730 --> 01:41:31.469", "speaker": "Alexander Vasserman", "text": "basically for each"}, {"source_name": "lecture4", "index": 1198, "time": "01:41:31.560 --> 01:41:35.760", "speaker": "Alexander Vasserman", "text": "word, each word can occur for multiple times in the stream"}, {"source_name": "lecture4", "index": 1199, "time": "01:41:36.220 --> 01:41:37.240", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture4", "index": 1200, "time": "01:41:37.480 --> 01:41:38.460", "speaker": "Alexander Vasserman", "text": "might"}, {"source_name": "lecture4", "index": 1201, "time": "01:41:38.500 --> 01:41:39.440", "speaker": "Alexander Vasserman", "text": "have."}, {"source_name": "lecture4", "index": 1202, "time": "01:41:39.640 --> 01:41:40.620", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture4", "index": 1203, "time": "01:41:40.900 --> 01:41:45.020", "speaker": "Alexander Vasserman", "text": "you will want to add multiple things to the"}, {"source_name": "lecture4", "index": 1204, "time": "01:41:46.590 --> 01:41:49.029", "speaker": "Alexander Vasserman", "text": "to the value in the dict."}, {"source_name": "lecture4", "index": 1205, "time": "01:41:50.620 --> 01:41:52.880", "speaker": "Alexander Vasserman", "text": "Does that make sense?"}, {"source_name": "lecture4", "index": 1206, "time": "01:41:53.610 --> 01:41:54.800", "speaker": "Alexander Vasserman", "text": "So? Yes."}, {"source_name": "lecture4", "index": 1207, "time": "01:41:55.160 --> 01:41:58.090", "speaker": "Alexander Vasserman", "text": "all right, Bunch of questions. Great Alex."}, {"source_name": "lecture4", "index": 1208, "time": "01:41:59.110 --> 01:42:01.549", "speaker": "Alex Wojtowicz", "text": "Can you explain a little bit more about"}, {"source_name": "lecture4", "index": 1209, "time": "01:42:01.870 --> 01:42:05.580", "speaker": "Alex Wojtowicz", "text": "what a span is, and how we're adding that to the dictionary."}, {"source_name": "lecture4", "index": 1210, "time": "01:42:06.280 --> 01:42:07.600", "speaker": "Alexander Vasserman", "text": "what is Pen?"}, {"source_name": "lecture4", "index": 1211, "time": "01:42:08.340 --> 01:42:09.990", "speaker": "Alexander Vasserman", "text": "Very good question."}, {"source_name": "lecture4", "index": 1212, "time": "01:42:12.900 --> 01:42:15.070", "speaker": "Alexander Vasserman", "text": "remember this from the last time."}, {"source_name": "lecture4", "index": 1213, "time": "01:42:16.160 --> 01:42:17.879", "speaker": "Alexander Vasserman", "text": "This is the span"}, {"source_name": "lecture4", "index": 1214, "time": "01:42:18.680 --> 01:42:20.809", "speaker": "Alexander Vasserman", "text": "and we"}, {"source_name": "lecture4", "index": 1215, "time": "01:42:22.640 --> 01:42:23.590", "speaker": "Alexander Vasserman", "text": "tad"}, {"source_name": "lecture4", "index": 1216, "time": "01:42:25.480 --> 01:42:26.679", "speaker": "Alexander Vasserman", "text": "a function"}, {"source_name": "lecture4", "index": 1217, "time": "01:42:28.120 --> 01:42:30.240", "speaker": "Alexander Vasserman", "text": "get word span"}, {"source_name": "lecture4", "index": 1218, "time": "01:42:31.000 --> 01:42:31.969", "speaker": "Alexander Vasserman", "text": "reach!"}, {"source_name": "lecture4", "index": 1219, "time": "01:42:32.040 --> 01:42:35.389", "speaker": "Alexander Vasserman", "text": "Produced all the words from the text."}, {"source_name": "lecture4", "index": 1220, "time": "01:42:35.570 --> 01:42:40.809", "speaker": "Alexander Vasserman", "text": "So I am expecting you to use that function here."}, {"source_name": "lecture4", "index": 1221, "time": "01:42:41.160 --> 01:42:43.599", "speaker": "Alexander Vasserman", "text": "Now let me actually say that."}, {"source_name": "lecture4", "index": 1222, "time": "01:42:48.150 --> 01:42:50.209", "speaker": "Alex Wojtowicz", "text": "So as a stand, just a really long"}, {"source_name": "lecture4", "index": 1223, "time": "01:42:50.350 --> 01:42:51.120", "speaker": "Alex Wojtowicz", "text": "string"}, {"source_name": "lecture4", "index": 1224, "time": "01:42:52.420 --> 01:42:54.160", "speaker": "Alexander Vasserman", "text": "so."}, {"source_name": "lecture4", "index": 1225, "time": "01:42:54.910 --> 01:42:58.130", "speaker": "Alexander Vasserman", "text": "Oops. Sorry i'm not writing it to the right place."}, {"source_name": "lecture4", "index": 1226, "time": "01:42:58.740 --> 01:43:11.129", "speaker": "Fahad Khan", "text": "Would you just be able to paste the code for the span class and the function we wrote in the question 3, so we can just access it from that document. I'll I'll do that all right. Thanks."}, {"source_name": "lecture4", "index": 1227, "time": "01:43:29.780 --> 01:43:31.519", "speaker": "Alexander Vasserman", "text": "Let me also"}, {"source_name": "lecture4", "index": 1228, "time": "01:43:34.110 --> 01:43:35.179", "speaker": "Alexander Vasserman", "text": "give you"}, {"source_name": "lecture4", "index": 1229, "time": "01:43:38.220 --> 01:43:38.880", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture4", "index": 1230, "time": "01:43:40.830 --> 01:43:41.570", "speaker": "Alexander Vasserman", "text": "What"}, {"source_name": "lecture4", "index": 1231, "time": "01:43:41.590 --> 01:43:42.750", "speaker": "Alexander Vasserman", "text": "span is"}, {"source_name": "lecture4", "index": 1232, "time": "01:43:46.240 --> 01:43:47.150", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture4", "index": 1233, "time": "01:43:47.760 --> 01:43:49.160", "speaker": "Alexander Vasserman", "text": "hopefully that helps"}, {"source_name": "lecture4", "index": 1234, "time": "01:43:52.920 --> 01:43:54.750", "speaker": "Alexander Vasserman", "text": "Alex. More questions."}, {"source_name": "lecture4", "index": 1235, "time": "01:43:56.120 --> 01:43:57.489", "speaker": "Alex Wojtowicz", "text": "That was it for me?"}, {"source_name": "lecture4", "index": 1236, "time": "01:43:57.530 --> 01:43:59.160", "speaker": "Alexander Vasserman", "text": "All right."}, {"source_name": "lecture4", "index": 1237, "time": "01:43:59.610 --> 01:44:00.500", "speaker": "Alexander Vasserman", "text": "hi, Moon."}, {"source_name": "lecture4", "index": 1238, "time": "01:44:00.850 --> 01:44:17.970", "speaker": "Aimun Anwer", "text": "yeah. So just making sure. Do you want us to write like Write out our functions and code into that same matching the file? Or should we like make a new file entirely in just probably these just would be to make a a new python file, something like"}, {"source_name": "lecture4", "index": 1239, "time": "01:44:18.000 --> 01:44:27.420", "speaker": "Alexander Vasserman", "text": "homework, one dot python, or something like that and so that you can co submit that one file with all the code that you've written"}, {"source_name": "lecture4", "index": 1240, "time": "01:44:27.600 --> 01:44:29.369", "speaker": "Alexander Vasserman", "text": "for the homework."}, {"source_name": "lecture4", "index": 1241, "time": "01:44:30.180 --> 01:44:37.400", "speaker": "Aimun Anwer", "text": "Okay, and then, like the test files the test functions that you want us to make that should stay in the test while we should. We submit that to you?"}, {"source_name": "lecture4", "index": 1242, "time": "01:44:37.560 --> 01:44:41.240", "speaker": "Alexander Vasserman", "text": "Yes, yes, you don't want to right"}, {"source_name": "lecture4", "index": 1243, "time": "01:44:46.270 --> 01:44:48.580", "speaker": "Alexander Vasserman", "text": "to just to"}, {"source_name": "lecture4", "index": 1244, "time": "01:44:48.680 --> 01:44:49.709", "speaker": "Alexander Vasserman", "text": "get back to."}, {"source_name": "lecture4", "index": 1245, "time": "01:44:49.760 --> 01:45:09.250", "speaker": "Alexander Vasserman", "text": "Oh, should we? We're over time? I'm: Sorry. Yeah. So the other parts of the homework. Basically I want you to use some some of the set iterations to to change the implementation of the bullet matching logic some questions about which things are"}, {"source_name": "lecture4", "index": 1246, "time": "01:45:09.260 --> 01:45:10.790", "speaker": "Alexander Vasserman", "text": "match according to"}, {"source_name": "lecture4", "index": 1247, "time": "01:45:10.870 --> 01:45:12.389", "speaker": "Alexander Vasserman", "text": "different"}, {"source_name": "lecture4", "index": 1248, "time": "01:45:12.530 --> 01:45:32.390", "speaker": "Alexander Vasserman", "text": "matching criteria as well as the unit tests. so some ideas of what different you you might want to do. but basically think about what it is that you think is important description of the function. And so yes, I I i'll"}, {"source_name": "lecture4", "index": 1249, "time": "01:45:33.240 --> 01:45:41.149", "speaker": "Alexander Vasserman", "text": "put the code online, and then i'll I'll want you to submit as part of the homework submission, the test. I mentioned that. Why."}, {"source_name": "lecture4", "index": 1250, "time": "01:45:42.980 --> 01:45:49.020", "speaker": "Alexander Vasserman", "text": "all right? this is it for today? If you have any questions, please email me."}, {"source_name": "lecture4", "index": 1251, "time": "01:45:49.040 --> 01:46:05.699", "speaker": "Alexander Vasserman", "text": "you'll also have. we'll also have some time after Tuesday lesson. If You'll have questions then, and also Wednesday office hours. If you want to meet with me outside of those you're welcome to also email me and arrange that."}, {"source_name": "lecture4", "index": 1252, "time": "01:46:05.710 --> 01:46:15.760", "speaker": "Alexander Vasserman", "text": "so definitely expecting questions about homework. It might be not clear exactly how it formulated. Please read the homework, etc."}, {"source_name": "lecture4", "index": 1253, "time": "01:46:19.350 --> 01:46:21.070", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture4", "index": 1254, "time": "01:46:21.440 --> 01:46:23.380", "speaker": "Alexander Vasserman", "text": "yes,"}, {"source_name": "lecture4", "index": 1255, "time": "01:46:23.590 --> 01:46:29.609", "speaker": "Alexander Vasserman", "text": "pie charm would be helpful to write any code. So yes use by charm."}, {"source_name": "lecture4", "index": 1256, "time": "01:46:31.830 --> 01:46:40.349", "speaker": "Alexander Vasserman", "text": "all right, that's it for today. Thank you very much sorry for the delay, and thank you all for asking all the questions."}, {"source_name": "lecture4", "index": 1257, "time": "01:46:41.070 --> 01:46:43.009", "speaker": "Alexander Vasserman", "text": "I'll see you next time."}, {"source_name": "lecture4", "index": 1258, "time": "01:46:43.290 --> 01:46:44.059", "speaker": "Rana Hani", "text": "Thank you."}, {"source_name": "lecture4", "index": 1259, "time": "01:46:44.140 --> 01:46:45.070", "speaker": "Aimun Anwer", "text": "Thank you."}, {"source_name": "lecture5", "index": 1, "time": "00:09:57.380 --> 00:10:00.190", "speaker": "Alexander Vasserman", "text": "Alright. Hello, everyone."}, {"source_name": "lecture5", "index": 2, "time": "00:10:00.760 --> 00:10:02.500", "speaker": "Alexander Vasserman", "text": "Good afternoon."}, {"source_name": "lecture5", "index": 3, "time": "00:10:03.230 --> 00:10:05.430", "speaker": "Alexander Vasserman", "text": "So that's"}, {"source_name": "lecture5", "index": 4, "time": "00:10:06.970 --> 00:10:08.599", "speaker": "Alexander Vasserman", "text": "let's start."}, {"source_name": "lecture5", "index": 5, "time": "00:10:08.920 --> 00:10:10.380", "speaker": "Alexander Vasserman", "text": "How is everyone doing?"}, {"source_name": "lecture5", "index": 6, "time": "00:10:11.140 --> 00:10:18.710", "speaker": "Alexander Vasserman", "text": "You? You guys have any questions about what we've done last time or the previous few times"}, {"source_name": "lecture5", "index": 7, "time": "00:10:18.760 --> 00:10:21.510", "speaker": "Alexander Vasserman", "text": "or questions about the homework."}, {"source_name": "lecture5", "index": 8, "time": "00:10:24.340 --> 00:10:25.980", "speaker": "Alexander Vasserman", "text": "Yes."}, {"source_name": "lecture5", "index": 9, "time": "00:10:26.180 --> 00:10:30.200", "speaker": "Alexander Vasserman", "text": "yeah. So for the homework. What time is it do on Thursday"}, {"source_name": "lecture5", "index": 10, "time": "00:10:30.860 --> 00:10:32.299", "speaker": "Alexander Vasserman", "text": "end of the day?"}, {"source_name": "lecture5", "index": 11, "time": "00:10:32.480 --> 00:10:34.379", "speaker": "Rana Hani", "text": "Okay, Got it? Thank you."}, {"source_name": "lecture5", "index": 12, "time": "00:10:36.790 --> 00:10:38.910", "speaker": "Alexander Vasserman", "text": "Any other questions."}, {"source_name": "lecture5", "index": 13, "time": "00:10:41.720 --> 00:10:43.580", "speaker": "Alexander Vasserman", "text": "I mean."}, {"source_name": "lecture5", "index": 14, "time": "00:10:45.270 --> 00:10:47.010", "speaker": "Kevin Guzman", "text": "Oh, yeah, I have a quick question."}, {"source_name": "lecture5", "index": 15, "time": "00:10:48.070 --> 00:10:56.109", "speaker": "Kevin Guzman", "text": "So for the for question, 2 for the sets. Are we supposed to write the strings within the function, or or when we type in it inside."}, {"source_name": "lecture5", "index": 16, "time": "00:10:58.000 --> 00:11:00.010", "speaker": "Alexander Vasserman", "text": "Let's see"}, {"source_name": "lecture5", "index": 17, "time": "00:11:00.950 --> 00:11:02.020", "speaker": "Alexander Vasserman", "text": "so."}, {"source_name": "lecture5", "index": 18, "time": "00:11:03.360 --> 00:11:05.940", "speaker": "Alexander Vasserman", "text": "or the sets you mean."}, {"source_name": "lecture5", "index": 19, "time": "00:11:06.200 --> 00:11:09.060", "speaker": "Alexander Vasserman", "text": "Let me pull up the"}, {"source_name": "lecture5", "index": 20, "time": "00:11:14.510 --> 00:11:16.099", "speaker": "Alexander Vasserman", "text": "the assignment."}, {"source_name": "lecture5", "index": 21, "time": "00:11:16.400 --> 00:11:17.760", "speaker": "Alexander Vasserman", "text": "Second."}, {"source_name": "lecture5", "index": 22, "time": "00:11:33.720 --> 00:11:36.159", "speaker": "Alexander Vasserman", "text": "Okay. So are we"}, {"source_name": "lecture5", "index": 23, "time": "00:11:36.900 --> 00:11:38.660", "speaker": "Alexander Vasserman", "text": "talking about"}, {"source_name": "lecture5", "index": 24, "time": "00:11:39.380 --> 00:11:40.820", "speaker": "Alexander Vasserman", "text": "question?"}, {"source_name": "lecture5", "index": 25, "time": "00:11:41.230 --> 00:11:43.820", "speaker": "Kevin Guzman", "text": "Which question are we talking about? To"}, {"source_name": "lecture5", "index": 26, "time": "00:11:44.120 --> 00:11:45.310", "speaker": "Alexander Vasserman", "text": "question 2:"}, {"source_name": "lecture5", "index": 27, "time": "00:11:46.130 --> 00:11:52.430", "speaker": "Kevin Guzman", "text": "Okay. So what? I'm Just I just want to know. If, like, are we supposed to like, Write the the"}, {"source_name": "lecture5", "index": 28, "time": "00:11:52.670 --> 00:11:55.930", "speaker": "Kevin Guzman", "text": "the strings inside the function and then turn them into a set?"}, {"source_name": "lecture5", "index": 29, "time": "00:11:57.130 --> 00:12:07.270", "speaker": "Alexander Vasserman", "text": "No. So basically the the function should take sets as arguments right, and you can test it using."}, {"source_name": "lecture5", "index": 30, "time": "00:12:07.760 --> 00:12:11.590", "speaker": "Alexander Vasserman", "text": "you know, any kind of sets you want, so you can"}, {"source_name": "lecture5", "index": 31, "time": "00:12:11.740 --> 00:12:18.720", "speaker": "Alexander Vasserman", "text": "right out consistent sets. So as a test in the interactive kind of shell."}, {"source_name": "lecture5", "index": 32, "time": "00:12:18.950 --> 00:12:22.930", "speaker": "Alexander Vasserman", "text": "But the function itself should not."}, {"source_name": "lecture5", "index": 33, "time": "00:12:23.250 --> 00:12:24.110", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture5", "index": 34, "time": "00:12:24.550 --> 00:12:27.480", "speaker": "Alexander Vasserman", "text": "have a specific things."}, {"source_name": "lecture5", "index": 35, "time": "00:12:27.550 --> 00:12:28.749", "speaker": "Kevin Guzman", "text": "Oh, in it."}, {"source_name": "lecture5", "index": 36, "time": "00:12:29.400 --> 00:12:30.569", "speaker": "Kevin Guzman", "text": "alright, Thank you."}, {"source_name": "lecture5", "index": 37, "time": "00:12:34.050 --> 00:12:35.490", "speaker": "Alexander Vasserman", "text": "Any other questions."}, {"source_name": "lecture5", "index": 38, "time": "00:12:42.230 --> 00:12:50.679", "speaker": "Rana Hani", "text": "Okay, One more question. Yeah. Sorry where the notes located on D 12, because I tried finding them. And"}, {"source_name": "lecture5", "index": 39, "time": "00:12:50.800 --> 00:12:52.420", "speaker": "Rana Hani", "text": "I don't see him anywhere."}, {"source_name": "lecture5", "index": 40, "time": "00:12:53.140 --> 00:12:56.219", "speaker": "Alexander Vasserman", "text": "The class 30."}, {"source_name": "lecture5", "index": 41, "time": "00:12:56.860 --> 00:13:00.009", "speaker": "Alexander Vasserman", "text": "Okay, Can you repeat the class notes."}, {"source_name": "lecture5", "index": 42, "time": "00:13:00.310 --> 00:13:05.960", "speaker": "Rana Hani", "text": "the collab notes that you write? Yeah. So"}, {"source_name": "lecture5", "index": 43, "time": "00:13:06.100 --> 00:13:07.000", "speaker": "Alexander Vasserman", "text": "if"}, {"source_name": "lecture5", "index": 44, "time": "00:13:07.870 --> 00:13:08.550", "speaker": "Alexander Vasserman", "text": "stupid."}, {"source_name": "lecture5", "index": 45, "time": "00:13:12.400 --> 00:13:13.030", "speaker": "Alexander Vasserman", "text": "sorry."}, {"source_name": "lecture5", "index": 46, "time": "00:13:19.090 --> 00:13:21.560", "speaker": "Alexander Vasserman", "text": "So if you go to"}, {"source_name": "lecture5", "index": 47, "time": "00:13:21.760 --> 00:13:23.130", "speaker": "Alexander Vasserman", "text": "course home."}, {"source_name": "lecture5", "index": 48, "time": "00:13:25.440 --> 00:13:28.490", "speaker": "Alexander Vasserman", "text": "I generally post"}, {"source_name": "lecture5", "index": 49, "time": "00:13:29.020 --> 00:13:29.710", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture5", "index": 50, "time": "00:13:32.990 --> 00:13:43.880", "speaker": "Alexander Vasserman", "text": "all the materials in in one of these posts. So, for example, for lecture 3, there was call out, and if you go into that, there is a link, a a right there"}, {"source_name": "lecture5", "index": 51, "time": "00:13:44.100 --> 00:13:47.589", "speaker": "Alexander Vasserman", "text": "the for for the stuff that we did in the call out."}, {"source_name": "lecture5", "index": 52, "time": "00:13:51.120 --> 00:13:54.090", "speaker": "Alexander Vasserman", "text": "I think, last time he did not use call up"}, {"source_name": "lecture5", "index": 53, "time": "00:13:54.360 --> 00:13:55.820", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture5", "index": 54, "time": "00:13:58.880 --> 00:14:00.790", "speaker": "Alexander Vasserman", "text": "for lecture 4."}, {"source_name": "lecture5", "index": 55, "time": "00:14:02.900 --> 00:14:04.360", "speaker": "Alexander Vasserman", "text": "If"}, {"source_name": "lecture5", "index": 56, "time": "00:14:06.000 --> 00:14:09.189", "speaker": "Alexander Vasserman", "text": "again you look at the"}, {"source_name": "lecture5", "index": 57, "time": "00:14:09.720 --> 00:14:11.530", "speaker": "Alexander Vasserman", "text": "materials."}, {"source_name": "lecture5", "index": 58, "time": "00:14:12.490 --> 00:14:20.849", "speaker": "Alexander Vasserman", "text": "you have the code links where you can download files for matching, and"}, {"source_name": "lecture5", "index": 59, "time": "00:14:21.000 --> 00:14:24.620", "speaker": "Alexander Vasserman", "text": "oh! Mentioned that by."}, {"source_name": "lecture5", "index": 60, "time": "00:14:25.320 --> 00:14:26.140", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture5", "index": 61, "time": "00:14:26.980 --> 00:14:29.090", "speaker": "Alexander Vasserman", "text": "so that's what we worked on"}, {"source_name": "lecture5", "index": 62, "time": "00:14:29.880 --> 00:14:32.239", "speaker": "Alexander Vasserman", "text": "in lecture 4."}, {"source_name": "lecture5", "index": 63, "time": "00:14:32.630 --> 00:14:38.290", "speaker": "Alexander Vasserman", "text": "If there is something that you think should be there and not there, please let me know, email me."}, {"source_name": "lecture5", "index": 64, "time": "00:14:38.410 --> 00:14:40.100", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture5", "index": 65, "time": "00:14:40.140 --> 00:14:42.090", "speaker": "Alexander Vasserman", "text": "does that answer your question?"}, {"source_name": "lecture5", "index": 66, "time": "00:14:42.390 --> 00:14:43.850", "speaker": "Rana Hani", "text": "Yes, thank you."}, {"source_name": "lecture5", "index": 67, "time": "00:14:43.930 --> 00:14:45.050", "speaker": "Alexander Vasserman", "text": "Perfect, cool"}, {"source_name": "lecture5", "index": 68, "time": "00:14:47.340 --> 00:14:48.470", "speaker": "Alexander Vasserman", "text": "Anything else."}, {"source_name": "lecture5", "index": 69, "time": "00:14:53.210 --> 00:14:54.100", "speaker": "Alexander Vasserman", "text": "All right."}, {"source_name": "lecture5", "index": 70, "time": "00:14:55.450 --> 00:14:57.100", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture5", "index": 71, "time": "00:15:00.750 --> 00:15:16.370", "speaker": "Alexander Vasserman", "text": "just to quickly leave you. You know again what we've done so far. We talked in general about information to you and search. We did some python review we last time we did naive search implementation"}, {"source_name": "lecture5", "index": 72, "time": "00:15:16.420 --> 00:15:19.740", "speaker": "Alexander Vasserman", "text": "and did some unit testing."}, {"source_name": "lecture5", "index": 73, "time": "00:15:20.490 --> 00:15:22.020", "speaker": "Alexander Vasserman", "text": "So today"}, {"source_name": "lecture5", "index": 74, "time": "00:15:22.130 --> 00:15:24.250", "speaker": "Alexander Vasserman", "text": "you'll talk about"}, {"source_name": "lecture5", "index": 75, "time": "00:15:24.670 --> 00:15:35.720", "speaker": "Alexander Vasserman", "text": "a little bit more about any search implementation, including ranking, and they ranking and do a little bit of more unit testing, so that"}, {"source_name": "lecture5", "index": 76, "time": "00:15:35.840 --> 00:15:38.600", "speaker": "Alexander Vasserman", "text": "you guys have a a bit"}, {"source_name": "lecture5", "index": 77, "time": "00:15:39.000 --> 00:15:43.930", "speaker": "Alexander Vasserman", "text": "better understanding, maybe, of how to write unit tests."}, {"source_name": "lecture5", "index": 78, "time": "00:15:43.950 --> 00:15:47.789", "speaker": "Alexander Vasserman", "text": "Last time it was a little bit."}, {"source_name": "lecture5", "index": 79, "time": "00:15:48.190 --> 00:15:56.110", "speaker": "Alexander Vasserman", "text": "Oh, and for the homework. You do need to write our unit test so hopefully that will be a little bit"}, {"source_name": "lecture5", "index": 80, "time": "00:15:56.260 --> 00:15:57.220", "speaker": "Alexander Vasserman", "text": "of scope."}, {"source_name": "lecture5", "index": 81, "time": "00:15:58.490 --> 00:16:02.859", "speaker": "Alexander Vasserman", "text": "Then we'll also start looking at reading the writing data"}, {"source_name": "lecture5", "index": 82, "time": "00:16:03.050 --> 00:16:11.080", "speaker": "Alexander Vasserman", "text": "and specifically at Jason format. Maybe some of you are familiar with it."}, {"source_name": "lecture5", "index": 83, "time": "00:16:11.560 --> 00:16:23.939", "speaker": "Alexander Vasserman", "text": "It's commonly used in javascript, but also for storing data or for communicating between front and and back end, or"}, {"source_name": "lecture5", "index": 84, "time": "00:16:24.100 --> 00:16:29.270", "speaker": "Alexander Vasserman", "text": "communicating in different services anyway, and kind of will"}, {"source_name": "lecture5", "index": 85, "time": "00:16:29.400 --> 00:16:32.180", "speaker": "Alexander Vasserman", "text": "put search kind of for"}, {"source_name": "lecture5", "index": 86, "time": "00:16:32.250 --> 00:16:35.030", "speaker": "Alexander Vasserman", "text": "a little bit more together. So it"}, {"source_name": "lecture5", "index": 87, "time": "00:16:35.100 --> 00:16:38.229", "speaker": "Alexander Vasserman", "text": "kind of looks and feels a little bit more like"}, {"source_name": "lecture5", "index": 88, "time": "00:16:38.250 --> 00:16:41.639", "speaker": "Alexander Vasserman", "text": "a search, or like a an app."}, {"source_name": "lecture5", "index": 89, "time": "00:16:42.820 --> 00:16:45.949", "speaker": "Alexander Vasserman", "text": "So that's our plan for today."}, {"source_name": "lecture5", "index": 90, "time": "00:16:49.190 --> 00:16:51.440", "speaker": "Alexander Vasserman", "text": "Just again, kind of"}, {"source_name": "lecture5", "index": 91, "time": "00:16:51.490 --> 00:16:52.390", "speaker": "Alexander Vasserman", "text": "hey?"}, {"source_name": "lecture5", "index": 92, "time": "00:16:52.490 --> 00:16:53.659", "speaker": "Alexander Vasserman", "text": "If you"}, {"source_name": "lecture5", "index": 93, "time": "00:16:53.960 --> 00:16:56.830", "speaker": "Alexander Vasserman", "text": "to the oh."}, {"source_name": "lecture5", "index": 94, "time": "00:16:56.910 --> 00:17:12.000", "speaker": "Alexander Vasserman", "text": "last time we saw that search is essentially a you can think of it as a just a function that takes a collection of documents in the query and outputs, the most relevant documents. And we have this example"}, {"source_name": "lecture5", "index": 95, "time": "00:17:12.770 --> 00:17:14.379", "speaker": "Alexander Vasserman", "text": "oh, of"}, {"source_name": "lecture5", "index": 96, "time": "00:17:14.440 --> 00:17:18.359", "speaker": "Alexander Vasserman", "text": "of how different documents off might"}, {"source_name": "lecture5", "index": 97, "time": "00:17:19.349 --> 00:17:24.909", "speaker": "Alexander Vasserman", "text": "satisfy the query. But some of them may be none of this ways."}, {"source_name": "lecture5", "index": 98, "time": "00:17:25.160 --> 00:17:28.189", "speaker": "Alexander Vasserman", "text": "and we talked about how"}, {"source_name": "lecture5", "index": 99, "time": "00:17:28.480 --> 00:17:36.009", "speaker": "Alexander Vasserman", "text": "we want to know about how do we define what's relevant? And"}, {"source_name": "lecture5", "index": 100, "time": "00:17:36.100 --> 00:17:37.060", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture5", "index": 101, "time": "00:17:37.210 --> 00:17:39.669", "speaker": "Alexander Vasserman", "text": "a few other things, including"}, {"source_name": "lecture5", "index": 102, "time": "00:17:39.730 --> 00:17:43.029", "speaker": "Alexander Vasserman", "text": "how to how the results should be ordered."}, {"source_name": "lecture5", "index": 103, "time": "00:17:43.480 --> 00:17:48.249", "speaker": "Alexander Vasserman", "text": "And the ordering is something that you're going to be"}, {"source_name": "lecture5", "index": 104, "time": "00:17:48.330 --> 00:17:50.980", "speaker": "Alexander Vasserman", "text": "looking at a little bit more today."}, {"source_name": "lecture5", "index": 105, "time": "00:17:52.170 --> 00:17:57.430", "speaker": "Alexander Vasserman", "text": "So just kind of again review what we've done."}, {"source_name": "lecture5", "index": 106, "time": "00:17:58.160 --> 00:18:02.020", "speaker": "Alexander Vasserman", "text": "Oh, before it was to say."}, {"source_name": "lecture5", "index": 107, "time": "00:18:02.050 --> 00:18:04.460", "speaker": "Alexander Vasserman", "text": "to look at couple of matching functions."}, {"source_name": "lecture5", "index": 108, "time": "00:18:04.870 --> 00:18:06.670", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture5", "index": 109, "time": "00:18:07.180 --> 00:18:19.849", "speaker": "Alexander Vasserman", "text": "these 3 direct string matching. So if one string, if the query string is fully contained in the document string, we would say that's a match"}, {"source_name": "lecture5", "index": 110, "time": "00:18:20.380 --> 00:18:24.269", "speaker": "Alexander Vasserman", "text": "as well as a term booting matching"}, {"source_name": "lecture5", "index": 111, "time": "00:18:24.480 --> 00:18:25.390", "speaker": "Alexander Vasserman", "text": "which"}, {"source_name": "lecture5", "index": 112, "time": "00:18:25.500 --> 00:18:34.450", "speaker": "Alexander Vasserman", "text": "for which we split the committee and the document into separate terms. And"}, {"source_name": "lecture5", "index": 113, "time": "00:18:36.030 --> 00:18:45.010", "speaker": "Alexander Vasserman", "text": "basically we're looking for documents where all terms in the query are contained in the document, and we defined"}, {"source_name": "lecture5", "index": 114, "time": "00:18:45.140 --> 00:18:47.230", "speaker": "Alexander Vasserman", "text": "those as"}, {"source_name": "lecture5", "index": 115, "time": "00:18:47.690 --> 00:18:49.389", "speaker": "Alexander Vasserman", "text": "the matching document."}, {"source_name": "lecture5", "index": 116, "time": "00:18:50.900 --> 00:18:52.870", "speaker": "Alexander Vasserman", "text": "One of the things that"}, {"source_name": "lecture5", "index": 117, "time": "00:18:53.010 --> 00:19:00.840", "speaker": "Alexander Vasserman", "text": "I noted about both matching functions is that they only define what are"}, {"source_name": "lecture5", "index": 118, "time": "00:19:00.900 --> 00:19:13.099", "speaker": "Alexander Vasserman", "text": "the total? What is the total collection of documents that matches the query? It doesn't. Tell us about the ordering of the this. Results like you would expect from a search engine."}, {"source_name": "lecture5", "index": 119, "time": "00:19:15.550 --> 00:19:16.670", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture5", "index": 120, "time": "00:19:17.510 --> 00:19:19.259", "speaker": "Alexander Vasserman", "text": "that's kind of"}, {"source_name": "lecture5", "index": 121, "time": "00:19:19.380 --> 00:19:21.420", "speaker": "Alexander Vasserman", "text": "where they'll"}, {"source_name": "lecture5", "index": 122, "time": "00:19:22.180 --> 00:19:24.180", "speaker": "Alexander Vasserman", "text": "start going today"}, {"source_name": "lecture5", "index": 123, "time": "00:19:28.380 --> 00:19:29.270", "speaker": "Alexander Vasserman", "text": "to"}, {"source_name": "lecture5", "index": 124, "time": "00:19:31.330 --> 00:19:37.699", "speaker": "Alexander Vasserman", "text": "basically we'll start talking a more about an example of ranking"}, {"source_name": "lecture5", "index": 125, "time": "00:19:39.180 --> 00:19:43.899", "speaker": "Alexander Vasserman", "text": "like I said, Basically, Matching is the term determining."}, {"source_name": "lecture5", "index": 126, "time": "00:19:44.440 --> 00:19:48.550", "speaker": "Alexander Vasserman", "text": "If a document satisfies the query."}, {"source_name": "lecture5", "index": 127, "time": "00:19:48.660 --> 00:19:53.389", "speaker": "Alexander Vasserman", "text": "and so they, the the patching function, returns through or falls."}, {"source_name": "lecture5", "index": 128, "time": "00:19:53.970 --> 00:19:56.679", "speaker": "Alexander Vasserman", "text": "Does it satisfy the query, or it doesn't"}, {"source_name": "lecture5", "index": 129, "time": "00:19:57.980 --> 00:19:59.789", "speaker": "Alexander Vasserman", "text": "ranking"}, {"source_name": "lecture5", "index": 130, "time": "00:20:00.370 --> 00:20:06.140", "speaker": "Alexander Vasserman", "text": "generally determines how well the document matches the creative."}, {"source_name": "lecture5", "index": 131, "time": "00:20:07.740 --> 00:20:17.939", "speaker": "Alexander Vasserman", "text": "So in one way to think about it is to say, given all matched documents. What is the order of those documents?"}, {"source_name": "lecture5", "index": 132, "time": "00:20:18.030 --> 00:20:32.409", "speaker": "Alexander Vasserman", "text": "So we want to order documents in such a way that the top documents are the most relevant ones. And then, as you go further down the list it they documents become less and less relevant"}, {"source_name": "lecture5", "index": 133, "time": "00:20:38.060 --> 00:20:38.950", "speaker": "Alexander Vasserman", "text": "in"}, {"source_name": "lecture5", "index": 134, "time": "00:20:39.440 --> 00:20:44.009", "speaker": "Alexander Vasserman", "text": "a lot of practical applications. That's oh."}, {"source_name": "lecture5", "index": 135, "time": "00:20:45.060 --> 00:20:52.690", "speaker": "Alexander Vasserman", "text": "similar to saying, what are the best documents? So most of the time a search engine would"}, {"source_name": "lecture5", "index": 136, "time": "00:20:53.120 --> 00:21:02.630", "speaker": "Alexander Vasserman", "text": "we turn, maybe top 10 results, or maybe top 100 results, but it will not return all the results that match your query."}, {"source_name": "lecture5", "index": 137, "time": "00:21:02.700 --> 00:21:04.090", "speaker": "Alexander Vasserman", "text": "and so"}, {"source_name": "lecture5", "index": 138, "time": "00:21:04.230 --> 00:21:11.450", "speaker": "Alexander Vasserman", "text": "implicitly the order sometimes can also say, okay, Well, these are top"}, {"source_name": "lecture5", "index": 139, "time": "00:21:11.590 --> 00:21:19.700", "speaker": "Alexander Vasserman", "text": "10 or top 100 the best results, and we don't actually care about the ordering of the rest of them."}, {"source_name": "lecture5", "index": 140, "time": "00:21:20.120 --> 00:21:25.620", "speaker": "Alexander Vasserman", "text": "We just need to order those best documents for the given query."}, {"source_name": "lecture5", "index": 141, "time": "00:21:27.710 --> 00:21:30.520", "speaker": "Alexander Vasserman", "text": "and the way it's"}, {"source_name": "lecture5", "index": 142, "time": "00:21:30.630 --> 00:21:35.489", "speaker": "Alexander Vasserman", "text": "usually done is through a ranking function that."}, {"source_name": "lecture5", "index": 143, "time": "00:21:36.910 --> 00:21:38.490", "speaker": "Alexander Vasserman", "text": "given a"}, {"source_name": "lecture5", "index": 144, "time": "00:21:38.610 --> 00:21:47.129", "speaker": "Alexander Vasserman", "text": "greedy and the document outputs a score. Say, how relevant this document. It is for this screen."}, {"source_name": "lecture5", "index": 145, "time": "00:21:48.170 --> 00:21:52.209", "speaker": "Alexander Vasserman", "text": "So, instead of outputting either true or false."}, {"source_name": "lecture5", "index": 146, "time": "00:21:52.430 --> 00:21:57.590", "speaker": "Alexander Vasserman", "text": "we are going to output some number that"}, {"source_name": "lecture5", "index": 147, "time": "00:21:57.920 --> 00:21:59.490", "speaker": "Alexander Vasserman", "text": "tells us."}, {"source_name": "lecture5", "index": 148, "time": "00:22:00.180 --> 00:22:01.729", "speaker": "Alexander Vasserman", "text": "How would the matches"}, {"source_name": "lecture5", "index": 149, "time": "00:22:04.520 --> 00:22:08.950", "speaker": "Alexander Vasserman", "text": "Does this. Make some sense? Any questions so far."}, {"source_name": "lecture5", "index": 150, "time": "00:22:18.910 --> 00:22:20.429", "speaker": "Alexander Vasserman", "text": "no questions at all."}, {"source_name": "lecture5", "index": 151, "time": "00:22:20.950 --> 00:22:23.140", "speaker": "Alexander Vasserman", "text": "This is all perfectly clear."}, {"source_name": "lecture5", "index": 152, "time": "00:22:30.420 --> 00:22:31.649", "speaker": "Alexander Vasserman", "text": "Yes, 12."}, {"source_name": "lecture5", "index": 153, "time": "00:22:31.760 --> 00:22:36.560", "speaker": "Rafal \"Ralph\" Jasielec", "text": "Actually, I have a question. So let's say you get the results. We we do the"}, {"source_name": "lecture5", "index": 154, "time": "00:22:36.920 --> 00:22:39.340", "speaker": "Rafal \"Ralph\" Jasielec", "text": "the terms come up and let's say there's 10 of them."}, {"source_name": "lecture5", "index": 155, "time": "00:22:40.020 --> 00:22:42.659", "speaker": "Rafal \"Ralph\" Jasielec", "text": "So you would you do like another"}, {"source_name": "lecture5", "index": 156, "time": "00:22:43.930 --> 00:22:49.249", "speaker": "Rafal \"Ralph\" Jasielec", "text": "another loop? That basically. Okay, hey? This one has 4 terms, this one's 3."}, {"source_name": "lecture5", "index": 157, "time": "00:22:49.610 --> 00:22:53.039", "speaker": "Rafal \"Ralph\" Jasielec", "text": "Well, actually, that wouldn't work because you're looking for all the curves."}, {"source_name": "lecture5", "index": 158, "time": "00:22:53.240 --> 00:23:04.100", "speaker": "Alexander Vasserman", "text": "right? Yes. So basically you're again. Kind of starting to think about. Well, what is a a function? What what might it look like?"}, {"source_name": "lecture5", "index": 159, "time": "00:23:04.110 --> 00:23:22.619", "speaker": "Alexander Vasserman", "text": "Right? And you you mentioned counting how many terms this one has 2 terms. This one has 3 terms: the one that maybe has 3 terms has. They may be able. They'll say it's better, and so this score will be higher, and"}, {"source_name": "lecture5", "index": 160, "time": "00:23:23.680 --> 00:23:32.319", "speaker": "Alexander Vasserman", "text": "or you know, maybe we should drank it higher or basically it should appear higher in the or"}, {"source_name": "lecture5", "index": 161, "time": "00:23:32.840 --> 00:23:34.320", "speaker": "Alexander Vasserman", "text": "a result list."}, {"source_name": "lecture5", "index": 162, "time": "00:23:35.130 --> 00:23:48.079", "speaker": "Alexander Vasserman", "text": "You you're getting exactly right. That's exactly what the ranking function is about, and that's kind of what they're going to look into very simple ones"}, {"source_name": "lecture5", "index": 163, "time": "00:23:48.280 --> 00:23:52.110", "speaker": "Alexander Vasserman", "text": "kind of along the lines, or exactly along the lines of what you're talking about."}, {"source_name": "lecture5", "index": 164, "time": "00:23:54.240 --> 00:23:55.020", "speaker": "Alexander Vasserman", "text": "Pod."}, {"source_name": "lecture5", "index": 165, "time": "00:23:56.040 --> 00:23:57.700", "speaker": "Fahad Khan", "text": "How is it"}, {"source_name": "lecture5", "index": 166, "time": "00:23:57.740 --> 00:24:02.629", "speaker": "Fahad Khan", "text": "gonna calculate a score like? What exactly is it going to look for to output a score."}, {"source_name": "lecture5", "index": 167, "time": "00:24:03.320 --> 00:24:12.700", "speaker": "Alexander Vasserman", "text": "Right? Yes. So all let's postpone that question again. This is kind of the exact, the"}, {"source_name": "lecture5", "index": 168, "time": "00:24:12.830 --> 00:24:13.740", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture5", "index": 169, "time": "00:24:14.170 --> 00:24:21.129", "speaker": "Alexander Vasserman", "text": "how exactly your company! Calculating that score. He is essentially the"}, {"source_name": "lecture5", "index": 170, "time": "00:24:21.530 --> 00:24:30.889", "speaker": "Alexander Vasserman", "text": "most of one of the most important things in the search engine and the different search engine. Different search engines will implement it slightly differently or very differently."}, {"source_name": "lecture5", "index": 171, "time": "00:24:32.760 --> 00:24:34.140", "speaker": "Alexander Vasserman", "text": "They will start"}, {"source_name": "lecture5", "index": 172, "time": "00:24:34.530 --> 00:24:44.410", "speaker": "Alexander Vasserman", "text": "looking at a few very naive ways of ranking today, so that's kind of what this class is about."}, {"source_name": "lecture5", "index": 173, "time": "00:24:47.460 --> 00:24:52.380", "speaker": "Alexander Vasserman", "text": "All right. So before we continue"}, {"source_name": "lecture5", "index": 174, "time": "00:24:53.070 --> 00:24:55.600", "speaker": "Alexander Vasserman", "text": "talking about ranking."}, {"source_name": "lecture5", "index": 175, "time": "00:24:56.830 --> 00:24:58.170", "speaker": "Alexander Vasserman", "text": "let's"}, {"source_name": "lecture5", "index": 176, "time": "00:24:58.370 --> 00:24:59.269", "speaker": "Alexander Vasserman", "text": "kind of"}, {"source_name": "lecture5", "index": 177, "time": "00:24:59.570 --> 00:25:04.170", "speaker": "Alexander Vasserman", "text": "look one more time at our implementation for the matching functions."}, {"source_name": "lecture5", "index": 178, "time": "00:25:05.310 --> 00:25:06.890", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture5", "index": 179, "time": "00:25:08.910 --> 00:25:14.250", "speaker": "Alexander Vasserman", "text": "so again, we had 2 matching functions. One is string matching."}, {"source_name": "lecture5", "index": 180, "time": "00:25:14.440 --> 00:25:18.610", "speaker": "Alexander Vasserman", "text": "which basically just looked. If the query stream"}, {"source_name": "lecture5", "index": 181, "time": "00:25:18.730 --> 00:25:23.939", "speaker": "Alexander Vasserman", "text": "contained in the document stream, or was a substring of a document."}, {"source_name": "lecture5", "index": 182, "time": "00:25:25.680 --> 00:25:29.279", "speaker": "Alexander Vasserman", "text": "and the other one, which was a little bit more interesting."}, {"source_name": "lecture5", "index": 183, "time": "00:25:29.500 --> 00:25:35.710", "speaker": "Alexander Vasserman", "text": "Before it. We took 3 terms, which was just"}, {"source_name": "lecture5", "index": 184, "time": "00:25:36.030 --> 00:25:40.580", "speaker": "Alexander Vasserman", "text": "space separated words, or from the"}, {"source_name": "lecture5", "index": 185, "time": "00:25:40.800 --> 00:25:45.699", "speaker": "Alexander Vasserman", "text": "and then document terms again. Very the speaking document"}, {"source_name": "lecture5", "index": 186, "time": "00:25:45.920 --> 00:25:47.629", "speaker": "Alexander Vasserman", "text": "into separate words."}, {"source_name": "lecture5", "index": 187, "time": "00:25:48.090 --> 00:25:49.180", "speaker": "Alexander Vasserman", "text": "And then"}, {"source_name": "lecture5", "index": 188, "time": "00:25:49.760 --> 00:25:54.409", "speaker": "Alexander Vasserman", "text": "oh, we are basically implementing the logic that"}, {"source_name": "lecture5", "index": 189, "time": "00:25:54.700 --> 00:25:56.170", "speaker": "Alexander Vasserman", "text": "oh, oh."}, {"source_name": "lecture5", "index": 190, "time": "00:25:56.570 --> 00:25:57.680", "speaker": "Alexander Vasserman", "text": "terms"}, {"source_name": "lecture5", "index": 191, "time": "00:25:58.450 --> 00:26:04.389", "speaker": "Alexander Vasserman", "text": "should be All the committee Terms should be contained in the document, and only"}, {"source_name": "lecture5", "index": 192, "time": "00:26:04.420 --> 00:26:06.200", "speaker": "Alexander Vasserman", "text": "then"}, {"source_name": "lecture5", "index": 193, "time": "00:26:06.270 --> 00:26:13.860", "speaker": "Alexander Vasserman", "text": "the return true. And if even one of the terms does not occur in the document."}, {"source_name": "lecture5", "index": 194, "time": "00:26:14.350 --> 00:26:16.029", "speaker": "Alexander Vasserman", "text": "Oh, B. To turn phones"}, {"source_name": "lecture5", "index": 195, "time": "00:26:18.320 --> 00:26:19.540", "speaker": "Alexander Vasserman", "text": "any"}, {"source_name": "lecture5", "index": 196, "time": "00:26:20.070 --> 00:26:24.670", "speaker": "Alexander Vasserman", "text": "questions about this so like, just want to make sure that"}, {"source_name": "lecture5", "index": 197, "time": "00:26:24.690 --> 00:26:27.299", "speaker": "Alexander Vasserman", "text": "this is quite clear. Your"}, {"source_name": "lecture5", "index": 198, "time": "00:26:27.540 --> 00:26:34.669", "speaker": "Alexander Vasserman", "text": "the implementations of this functions. There is no questions there, because"}, {"source_name": "lecture5", "index": 199, "time": "00:26:34.930 --> 00:26:38.030", "speaker": "Alexander Vasserman", "text": "the next thing I want you to do"}, {"source_name": "lecture5", "index": 200, "time": "00:26:38.120 --> 00:26:43.180", "speaker": "Alexander Vasserman", "text": "is actually try to implement a"}, {"source_name": "lecture5", "index": 201, "time": "00:26:43.510 --> 00:26:45.030", "speaker": "Alexander Vasserman", "text": "ranking function."}, {"source_name": "lecture5", "index": 202, "time": "00:26:45.650 --> 00:26:47.410", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture5", "index": 203, "time": "00:26:48.430 --> 00:26:52.560", "speaker": "Alexander Vasserman", "text": "that's going to be kind of along these lines."}, {"source_name": "lecture5", "index": 204, "time": "00:26:53.000 --> 00:26:55.449", "speaker": "Alexander Vasserman", "text": "so i'll"}, {"source_name": "lecture5", "index": 205, "time": "00:26:55.810 --> 00:26:58.389", "speaker": "Alexander Vasserman", "text": "oh, sure! A link to the"}, {"source_name": "lecture5", "index": 206, "time": "00:26:58.980 --> 00:26:59.990", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture5", "index": 207, "time": "00:27:00.830 --> 00:27:01.780", "speaker": "Alexander Vasserman", "text": "call up"}, {"source_name": "lecture5", "index": 208, "time": "00:27:02.340 --> 00:27:03.450", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture5", "index": 209, "time": "00:27:07.850 --> 00:27:10.480", "speaker": "Alexander Vasserman", "text": "that it is it like great here"}, {"source_name": "lecture5", "index": 210, "time": "00:27:10.730 --> 00:27:12.180", "speaker": "Alexander Vasserman", "text": "in nature?"}, {"source_name": "lecture5", "index": 211, "time": "00:27:15.440 --> 00:27:24.400", "speaker": "Alexander Vasserman", "text": "So i'll i'll switch you up into groups, and basically, there is a section for Fridge group where you can work as a group."}, {"source_name": "lecture5", "index": 212, "time": "00:27:24.420 --> 00:27:31.630", "speaker": "Alexander Vasserman", "text": "But they things that we you want to implement is basically given the equity, and a document"}, {"source_name": "lecture5", "index": 213, "time": "00:27:31.770 --> 00:27:41.249", "speaker": "Alexander Vasserman", "text": "so very similar to the function signature will be very similar to the machine functions."}, {"source_name": "lecture5", "index": 214, "time": "00:27:41.490 --> 00:27:52.830", "speaker": "Alexander Vasserman", "text": "except we are going to return, not the bull in. But the score which in this case will be an integer. Basically ha! Count. How many times a term"}, {"source_name": "lecture5", "index": 215, "time": "00:27:52.930 --> 00:27:55.949", "speaker": "Alexander Vasserman", "text": "from the committee occurs in the document?"}, {"source_name": "lecture5", "index": 216, "time": "00:27:59.160 --> 00:28:00.310", "speaker": "Alexander Vasserman", "text": "Is that"}, {"source_name": "lecture5", "index": 217, "time": "00:28:01.200 --> 00:28:03.630", "speaker": "Alexander Vasserman", "text": "clear what we want to do?"}, {"source_name": "lecture5", "index": 218, "time": "00:28:07.080 --> 00:28:07.980", "speaker": "Alexander Vasserman", "text": "Great."}, {"source_name": "lecture5", "index": 219, "time": "00:28:08.090 --> 00:28:09.210", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture5", "index": 220, "time": "00:28:09.410 --> 00:28:12.229", "speaker": "Alexander Vasserman", "text": "let me split you up into"}, {"source_name": "lecture5", "index": 221, "time": "00:28:12.270 --> 00:28:14.039", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture5", "index": 222, "time": "00:28:15.090 --> 00:28:16.230", "speaker": "Alexander Vasserman", "text": "groups"}, {"source_name": "lecture5", "index": 223, "time": "00:28:16.750 --> 00:28:18.309", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture5", "index": 224, "time": "00:28:20.410 --> 00:28:22.330", "speaker": "Alexander Vasserman", "text": "just give you, if"}, {"source_name": "lecture5", "index": 225, "time": "00:28:22.390 --> 00:28:26.920", "speaker": "Alexander Vasserman", "text": "a little bit of time. Hopefully, this is not a a very difficult."}, {"source_name": "lecture5", "index": 226, "time": "00:28:27.090 --> 00:28:28.899", "speaker": "Alexander Vasserman", "text": "I think, to implement."}, {"source_name": "lecture5", "index": 227, "time": "00:28:29.250 --> 00:28:31.540", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture5", "index": 228, "time": "00:28:31.590 --> 00:28:34.870", "speaker": "Alexander Vasserman", "text": "but I want you to kind of"}, {"source_name": "lecture5", "index": 229, "time": "00:28:40.100 --> 00:28:41.440", "speaker": "Alexander Vasserman", "text": "what is that?"}, {"source_name": "lecture5", "index": 230, "time": "00:28:44.740 --> 00:28:45.520", "speaker": "Alexander Vasserman", "text": "I don't know."}, {"source_name": "lecture5", "index": 231, "time": "00:28:46.390 --> 00:28:47.420", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture5", "index": 232, "time": "00:28:49.680 --> 00:28:51.800", "speaker": "Alexander Vasserman", "text": "yeah. So breakout rooms"}, {"source_name": "lecture5", "index": 233, "time": "00:28:52.010 --> 00:28:53.460", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture5", "index": 234, "time": "00:29:03.170 --> 00:29:08.789", "speaker": "Alexander Vasserman", "text": "okay, so you should be now getting into breakout rooms. And"}, {"source_name": "lecture5", "index": 235, "time": "00:29:13.790 --> 00:29:19.799", "speaker": "Alexander Vasserman", "text": "yeah, i'll see you back, I guess, in maybe 10\u00c2\u00a0min."}, {"source_name": "lecture5", "index": 236, "time": "00:29:19.960 --> 00:29:22.269", "speaker": "Alexander Vasserman", "text": "and it's going to be in the same"}, {"source_name": "lecture5", "index": 237, "time": "00:29:24.520 --> 00:29:27.250", "speaker": "Rafal \"Ralph\" Jasielec", "text": "same file that we're doing it like the magic file. Correct?"}, {"source_name": "lecture5", "index": 238, "time": "00:29:28.050 --> 00:29:31.910", "speaker": "Alexander Vasserman", "text": "Yeah, it's going to be in the same notebook, which is different for each group."}, {"source_name": "lecture5", "index": 239, "time": "00:29:31.940 --> 00:29:32.560", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture5", "index": 240, "time": "00:31:51.970 --> 00:31:53.759", "speaker": "Alexander Vasserman", "text": "Professor. Yes."}, {"source_name": "lecture5", "index": 241, "time": "00:31:53.940 --> 00:31:56.610", "speaker": "Sheal Alendry", "text": "there was no one else in my group. I don't think I got"}, {"source_name": "lecture5", "index": 242, "time": "00:31:56.790 --> 00:31:58.070", "speaker": "Sheal Alendry", "text": "went into a group."}, {"source_name": "lecture5", "index": 243, "time": "00:31:59.340 --> 00:32:00.150", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture5", "index": 244, "time": "00:32:00.580 --> 00:32:07.040", "speaker": "Brian McClendon", "text": "let me hit the breakout room button. Either I just have to leave or join."}, {"source_name": "lecture5", "index": 245, "time": "00:32:08.330 --> 00:32:13.550", "speaker": "Alexander Vasserman", "text": "Okay? Well, so you guys can basically just"}, {"source_name": "lecture5", "index": 246, "time": "00:32:13.810 --> 00:32:16.060", "speaker": "Alexander Vasserman", "text": "work on"}, {"source_name": "lecture5", "index": 247, "time": "00:32:16.990 --> 00:32:18.799", "speaker": "Alexander Vasserman", "text": "interesting."}, {"source_name": "lecture5", "index": 248, "time": "00:32:19.950 --> 00:32:21.299", "speaker": "Alexander Vasserman", "text": "It's so good. I"}, {"source_name": "lecture5", "index": 249, "time": "00:32:21.410 --> 00:32:28.740", "speaker": "Sheal Alendry", "text": "could. I get the the a new link for that Google Doc as well, because it says savings failed for the link that I use"}, {"source_name": "lecture5", "index": 250, "time": "00:32:29.820 --> 00:32:31.070", "speaker": "Alexander Vasserman", "text": "savings."}, {"source_name": "lecture5", "index": 251, "time": "00:32:31.590 --> 00:32:37.759", "speaker": "Alexander Vasserman", "text": "So it's still in the chat. So if you open up a chat it's the the link is there."}, {"source_name": "lecture5", "index": 252, "time": "00:32:37.930 --> 00:32:40.770", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture5", "index": 253, "time": "00:32:41.790 --> 00:32:43.769", "speaker": "Alexander Vasserman", "text": "she'll."}, {"source_name": "lecture5", "index": 254, "time": "00:32:44.710 --> 00:32:47.500", "speaker": "Alexander Vasserman", "text": "You should be in a room 7 right?"}, {"source_name": "lecture5", "index": 255, "time": "00:32:47.740 --> 00:32:54.030", "speaker": "Alexander Vasserman", "text": "And so, and Brian, you also didn't you didn't get assigned."}, {"source_name": "lecture5", "index": 256, "time": "00:32:54.690 --> 00:33:03.329", "speaker": "Brian McClendon", "text": "I got a sign, but I think my Zoom client, when I tried to hit the breakout room, but it wouldn't let me in, so I I left the meeting. It came back."}, {"source_name": "lecture5", "index": 257, "time": "00:33:03.940 --> 00:33:08.850", "speaker": "Alexander Vasserman", "text": "Okay. So why don't you just join a room 7"}, {"source_name": "lecture5", "index": 258, "time": "00:33:10.580 --> 00:33:12.849", "speaker": "Alexander Vasserman", "text": "obvious this you."}, {"source_name": "lecture5", "index": 259, "time": "00:33:15.970 --> 00:33:16.949", "speaker": "Alexander Vasserman", "text": "if you can."}, {"source_name": "lecture5", "index": 260, "time": "00:33:17.080 --> 00:33:18.819", "speaker": "Alexander Vasserman", "text": "you should be able to"}, {"source_name": "lecture5", "index": 261, "time": "00:33:19.180 --> 00:33:22.449", "speaker": "Alexander Vasserman", "text": "join manually."}, {"source_name": "lecture5", "index": 262, "time": "00:33:23.070 --> 00:33:26.470", "speaker": "Brian McClendon", "text": "It's telling me. Please wait to be assigned."}, {"source_name": "lecture5", "index": 263, "time": "00:33:26.700 --> 00:33:28.180", "speaker": "Alexander Vasserman", "text": "Oh, okay."}, {"source_name": "lecture5", "index": 264, "time": "00:33:28.440 --> 00:33:29.440", "speaker": "Alexander Vasserman", "text": "sorry."}, {"source_name": "lecture5", "index": 265, "time": "00:33:46.050 --> 00:33:46.900", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture5", "index": 266, "time": "00:33:49.360 --> 00:33:51.530", "speaker": "Alexander Vasserman", "text": "So hopefully. Now, you"}, {"source_name": "lecture5", "index": 267, "time": "00:33:51.760 --> 00:33:52.829", "speaker": "Alexander Vasserman", "text": "should be good."}, {"source_name": "lecture5", "index": 268, "time": "00:41:00.560 --> 00:41:01.660", "speaker": "Shiana Thomas", "text": "Professor"}, {"source_name": "lecture5", "index": 269, "time": "00:41:04.980 --> 00:41:12.569", "speaker": "Shiana Thomas", "text": "J. Here joined the class late, and he Hasn't been assigned to a breakout room. But I say him the document for you."}, {"source_name": "lecture5", "index": 270, "time": "00:41:15.930 --> 00:41:18.529", "speaker": "Shiana Thomas", "text": "I can't hear you. I think you are on mute."}, {"source_name": "lecture5", "index": 271, "time": "00:41:20.310 --> 00:41:26.040", "speaker": "Alexander Vasserman", "text": "Okay, Sorry if some cow like when they come back. I guess it's automatically muted in me."}, {"source_name": "lecture5", "index": 272, "time": "00:41:26.530 --> 00:41:33.550", "speaker": "Alexander Vasserman", "text": "Yeah. So I mean, i'll probably bring people back in a in a few minutes, anyway. But"}, {"source_name": "lecture5", "index": 273, "time": "00:41:36.600 --> 00:41:38.110", "speaker": "Alexander Vasserman", "text": "let me see if I"}, {"source_name": "lecture5", "index": 274, "time": "00:41:39.090 --> 00:41:42.980", "speaker": "Alexander Vasserman", "text": "I can probably assign"}, {"source_name": "lecture5", "index": 275, "time": "00:41:43.810 --> 00:41:46.350", "speaker": "Alexander Vasserman", "text": "J. As well menu this."}, {"source_name": "lecture5", "index": 276, "time": "00:41:53.430 --> 00:41:54.209", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture5", "index": 277, "time": "00:41:54.290 --> 00:41:56.329", "speaker": "Alexander Vasserman", "text": "So, Jay, you're not on Group 8,"}, {"source_name": "lecture5", "index": 278, "time": "00:41:56.570 --> 00:41:58.659", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture5", "index": 279, "time": "00:41:59.640 --> 00:42:01.500", "speaker": "Alexander Vasserman", "text": "joining 90."}, {"source_name": "lecture5", "index": 280, "time": "00:42:01.560 --> 00:42:02.609", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture5", "index": 281, "time": "00:42:02.780 --> 00:42:04.950", "speaker": "Alexander Vasserman", "text": "well, anyway, this is gone."}, {"source_name": "lecture5", "index": 282, "time": "00:42:08.190 --> 00:42:09.029", "speaker": "Alexander Vasserman", "text": "Yeah."}, {"source_name": "lecture5", "index": 283, "time": "00:42:09.950 --> 00:42:13.980", "speaker": "Alexander Vasserman", "text": "Jano. Actually, while I have you here."}, {"source_name": "lecture5", "index": 284, "time": "00:42:16.160 --> 00:42:19.709", "speaker": "Alexander Vasserman", "text": "I've been forgetting to take attendance."}, {"source_name": "lecture5", "index": 285, "time": "00:42:19.740 --> 00:42:22.809", "speaker": "Alexander Vasserman", "text": "and I was wondering if this is something that"}, {"source_name": "lecture5", "index": 286, "time": "00:42:23.140 --> 00:42:30.490", "speaker": "Alexander Vasserman", "text": "you could help me with in the next few or lectures."}, {"source_name": "lecture5", "index": 287, "time": "00:42:30.660 --> 00:42:40.790", "speaker": "Alexander Vasserman", "text": "anything like just even the is a screenshot of all the participants would be good enough, right? So, like just a few"}, {"source_name": "lecture5", "index": 288, "time": "00:42:40.820 --> 00:42:45.239", "speaker": "Alexander Vasserman", "text": "page participants take screenshot and just send it to me."}, {"source_name": "lecture5", "index": 289, "time": "00:42:45.590 --> 00:42:56.140", "speaker": "Alexander Vasserman", "text": "That's really all I want, and maybe like not at the very beginning of the class. But you know, somewhere in the middle of the class I just keep forgetting to do that?"}, {"source_name": "lecture5", "index": 290, "time": "00:42:56.510 --> 00:42:58.080", "speaker": "Shiana Thomas", "text": "Oh, yeah, I could do it for you."}, {"source_name": "lecture5", "index": 291, "time": "00:42:58.390 --> 00:43:00.499", "speaker": "Shiana Thomas", "text": "Okay, Great. Thank you."}, {"source_name": "lecture5", "index": 292, "time": "00:44:21.000 --> 00:44:24.459", "speaker": "Alexander Vasserman", "text": "Alright. I think everybody is back."}, {"source_name": "lecture5", "index": 293, "time": "00:44:25.350 --> 00:44:28.090", "speaker": "Alexander Vasserman", "text": "So how was it?"}, {"source_name": "lecture5", "index": 294, "time": "00:44:28.580 --> 00:44:31.560", "speaker": "Alexander Vasserman", "text": "Did you guys find it easy."}, {"source_name": "lecture5", "index": 295, "time": "00:44:32.230 --> 00:44:33.439", "speaker": "Alexander Vasserman", "text": "difficult."}, {"source_name": "lecture5", "index": 296, "time": "00:44:33.510 --> 00:44:37.870", "speaker": "Alexander Vasserman", "text": "Let's let us, you know. Raise your hands if that was easy."}, {"source_name": "lecture5", "index": 297, "time": "00:44:43.400 --> 00:44:45.750", "speaker": "Alexander Vasserman", "text": "All right. Nice, nice."}, {"source_name": "lecture5", "index": 298, "time": "00:44:54.210 --> 00:44:58.930", "speaker": "Alexander Vasserman", "text": "Raise your hand. If it was a difficult or kind of too difficult."}, {"source_name": "lecture5", "index": 299, "time": "00:44:59.860 --> 00:45:02.109", "speaker": "Alexander Vasserman", "text": "If you've raised your kind before."}, {"source_name": "lecture5", "index": 300, "time": "00:45:02.590 --> 00:45:03.899", "speaker": "Alexander Vasserman", "text": "maybe you can"}, {"source_name": "lecture5", "index": 301, "time": "00:45:05.090 --> 00:45:06.850", "speaker": "Alexander Vasserman", "text": "down it. If it was easy for you"}, {"source_name": "lecture5", "index": 302, "time": "00:45:06.920 --> 00:45:07.750", "speaker": "Alexander Vasserman", "text": "with it."}, {"source_name": "lecture5", "index": 303, "time": "00:45:10.070 --> 00:45:22.860", "speaker": "Alexander Vasserman", "text": "and don't be afraid to raise your hand to to say it was difficult. I'm just looking at kind of numbers, not who individually they they can. I'm just trying to to, to to to get some sense of."}, {"source_name": "lecture5", "index": 304, "time": "00:45:22.890 --> 00:45:25.229", "speaker": "Alexander Vasserman", "text": "You know how people feel."}, {"source_name": "lecture5", "index": 305, "time": "00:45:27.930 --> 00:45:29.610", "speaker": "Zikang Zhang", "text": "I have a question."}, {"source_name": "lecture5", "index": 306, "time": "00:45:29.910 --> 00:45:30.759", "speaker": "Zikang Zhang", "text": "Yes."}, {"source_name": "lecture5", "index": 307, "time": "00:45:31.660 --> 00:45:37.929", "speaker": "Zikang Zhang", "text": "i'm not sure about what we should return for this question."}, {"source_name": "lecture5", "index": 308, "time": "00:45:38.370 --> 00:45:45.129", "speaker": "Zikang Zhang", "text": "and I I i'm not sure if we are going to count a a specific term. Or"}, {"source_name": "lecture5", "index": 309, "time": "00:45:49.040 --> 00:45:50.529", "speaker": "Zikang Zhang", "text": "Oh, that's right."}, {"source_name": "lecture5", "index": 310, "time": "00:45:50.970 --> 00:45:52.149", "speaker": "Zikang Zhang", "text": "Yes."}, {"source_name": "lecture5", "index": 311, "time": "00:45:52.710 --> 00:45:53.799", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture5", "index": 312, "time": "00:45:55.280 --> 00:46:02.399", "speaker": "Alexander Vasserman", "text": "that's actually a very good question, and thanks for asking it."}, {"source_name": "lecture5", "index": 313, "time": "00:46:02.480 --> 00:46:03.220", "speaker": "Alexander Vasserman", "text": "Let me"}, {"source_name": "lecture5", "index": 314, "time": "00:46:03.860 --> 00:46:08.519", "speaker": "Alexander Vasserman", "text": "share my screen again."}, {"source_name": "lecture5", "index": 315, "time": "00:46:10.340 --> 00:46:14.629", "speaker": "Alexander Vasserman", "text": "So in in this particular case I wanted to"}, {"source_name": "lecture5", "index": 316, "time": "00:46:14.800 --> 00:46:24.379", "speaker": "Alexander Vasserman", "text": "to, to, to, to to return the top account. So just a single count, which is basically how you would."}, {"source_name": "lecture5", "index": 317, "time": "00:46:26.160 --> 00:46:31.910", "speaker": "Alexander Vasserman", "text": "Yeah, like they basically like we discussed in terms of the green function. Right?"}, {"source_name": "lecture5", "index": 318, "time": "00:46:32.780 --> 00:46:36.889", "speaker": "Alexander Vasserman", "text": "We want to basically. Say."}, {"source_name": "lecture5", "index": 319, "time": "00:46:37.350 --> 00:46:38.729", "speaker": "Alexander Vasserman", "text": "is this"}, {"source_name": "lecture5", "index": 320, "time": "00:46:38.840 --> 00:46:44.159", "speaker": "Alexander Vasserman", "text": "document? How irrelevant this document is for the function."}, {"source_name": "lecture5", "index": 321, "time": "00:46:44.260 --> 00:46:49.999", "speaker": "Alexander Vasserman", "text": "And so it will be a score that is returned. It's so."}, {"source_name": "lecture5", "index": 322, "time": "00:46:56.560 --> 00:46:57.279", "speaker": "Alexander Vasserman", "text": "Yes."}, {"source_name": "lecture5", "index": 323, "time": "00:46:57.510 --> 00:46:59.599", "speaker": "Alexander Vasserman", "text": "so it's it's going to be"}, {"source_name": "lecture5", "index": 324, "time": "00:46:59.920 --> 00:47:02.099", "speaker": "Alexander Vasserman", "text": "an integer or something like that."}, {"source_name": "lecture5", "index": 325, "time": "00:47:03.530 --> 00:47:05.440", "speaker": "Alexander Vasserman", "text": "Does that make sense?"}, {"source_name": "lecture5", "index": 326, "time": "00:47:05.820 --> 00:47:06.629", "speaker": "Zikang Zhang", "text": "Yeah."}, {"source_name": "lecture5", "index": 327, "time": "00:47:11.990 --> 00:47:14.560", "speaker": "Alexander Vasserman", "text": "any other questions?"}, {"source_name": "lecture5", "index": 328, "time": "00:47:16.840 --> 00:47:18.020", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture5", "index": 329, "time": "00:47:18.400 --> 00:47:20.540", "speaker": "Alexander Vasserman", "text": "let me actually"}, {"source_name": "lecture5", "index": 330, "time": "00:47:25.920 --> 00:47:28.100", "speaker": "Alexander Vasserman", "text": "J. G."}, {"source_name": "lecture5", "index": 331, "time": "00:47:28.220 --> 00:47:29.219", "speaker": "Alexander Vasserman", "text": "Do you have"}, {"source_name": "lecture5", "index": 332, "time": "00:47:29.390 --> 00:47:31.409", "speaker": "Alexander Vasserman", "text": "good question and sorry if I"}, {"source_name": "lecture5", "index": 333, "time": "00:47:34.580 --> 00:47:35.660", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture5", "index": 334, "time": "00:47:37.840 --> 00:47:39.359", "speaker": "Alexander Vasserman", "text": "Yeah. So"}, {"source_name": "lecture5", "index": 335, "time": "00:47:40.280 --> 00:47:46.630", "speaker": "Alexander Vasserman", "text": "I I think you a lot of groups done that pretty good job of of"}, {"source_name": "lecture5", "index": 336, "time": "00:47:46.880 --> 00:47:49.160", "speaker": "Alexander Vasserman", "text": "of quoting this."}, {"source_name": "lecture5", "index": 337, "time": "00:47:49.240 --> 00:47:52.790", "speaker": "Alexander Vasserman", "text": "Basically let me"}, {"source_name": "lecture5", "index": 338, "time": "00:47:53.220 --> 00:47:54.529", "speaker": "Alexander Vasserman", "text": "just"}, {"source_name": "lecture5", "index": 339, "time": "00:47:56.140 --> 00:48:02.129", "speaker": "Alexander Vasserman", "text": "put it into our project, and there were kind of"}, {"source_name": "lecture5", "index": 340, "time": "00:48:02.230 --> 00:48:11.350", "speaker": "Alexander Vasserman", "text": "a couple of different solutions, and both of them are very much valid solutions. So if you go create"}, {"source_name": "lecture5", "index": 341, "time": "00:48:11.490 --> 00:48:16.370", "speaker": "Alexander Vasserman", "text": "a ranking.py."}, {"source_name": "lecture5", "index": 342, "time": "00:48:18.780 --> 00:48:19.839", "speaker": "Alexander Vasserman", "text": "let me."}, {"source_name": "lecture5", "index": 343, "time": "00:48:27.880 --> 00:48:30.919", "speaker": "Alexander Vasserman", "text": "And actually"}, {"source_name": "lecture5", "index": 344, "time": "00:48:32.450 --> 00:48:34.140", "speaker": "Alexander Vasserman", "text": "stuff already."}, {"source_name": "lecture5", "index": 345, "time": "00:48:34.730 --> 00:48:35.790", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture5", "index": 346, "time": "00:48:36.600 --> 00:48:38.319", "speaker": "Alexander Vasserman", "text": "basically, the"}, {"source_name": "lecture5", "index": 347, "time": "00:48:38.500 --> 00:48:42.409", "speaker": "Alexander Vasserman", "text": "2 variants, and they think I've seen both of"}, {"source_name": "lecture5", "index": 348, "time": "00:48:42.520 --> 00:48:44.990", "speaker": "Alexander Vasserman", "text": "in the in the groups."}, {"source_name": "lecture5", "index": 349, "time": "00:48:45.100 --> 00:48:58.290", "speaker": "Alexander Vasserman", "text": "and some of them are were even implemented a little bit more nicely than what I have here. But this is kind of to to be very explicit."}, {"source_name": "lecture5", "index": 350, "time": "00:49:00.540 --> 00:49:01.569", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture5", "index": 351, "time": "00:49:01.920 --> 00:49:07.390", "speaker": "Alexander Vasserman", "text": "the first one basically just counts the total number of terms"}, {"source_name": "lecture5", "index": 352, "time": "00:49:07.550 --> 00:49:12.639", "speaker": "Alexander Vasserman", "text": "that match the 3 terms right? So"}, {"source_name": "lecture5", "index": 353, "time": "00:49:12.690 --> 00:49:13.640", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture5", "index": 354, "time": "00:49:13.970 --> 00:49:15.510", "speaker": "Alexander Vasserman", "text": "top 2 lines"}, {"source_name": "lecture5", "index": 355, "time": "00:49:15.820 --> 00:49:29.699", "speaker": "Alexander Vasserman", "text": "all are the same as in Matching, and then we go through every query term, and we count how many times that all we return occurs in the document and add it to the count."}, {"source_name": "lecture5", "index": 356, "time": "00:49:29.990 --> 00:49:34.009", "speaker": "Alexander Vasserman", "text": "So it's really just the total"}, {"source_name": "lecture5", "index": 357, "time": "00:49:34.250 --> 00:49:40.579", "speaker": "Alexander Vasserman", "text": "number of times we see any one of the terms that."}, {"source_name": "lecture5", "index": 358, "time": "00:49:42.410 --> 00:49:44.630", "speaker": "Alexander Vasserman", "text": "Oh, that's part of the query."}, {"source_name": "lecture5", "index": 359, "time": "00:49:46.540 --> 00:49:49.259", "speaker": "Alexander Vasserman", "text": "The second variant is."}, {"source_name": "lecture5", "index": 360, "time": "00:49:49.640 --> 00:49:53.459", "speaker": "Alexander Vasserman", "text": "looks a little bit more like the matching function."}, {"source_name": "lecture5", "index": 361, "time": "00:49:53.480 --> 00:49:56.029", "speaker": "Alexander Vasserman", "text": "so we add one."}, {"source_name": "lecture5", "index": 362, "time": "00:49:56.060 --> 00:49:57.049", "speaker": "Alexander Vasserman", "text": "only"}, {"source_name": "lecture5", "index": 363, "time": "00:49:57.580 --> 00:49:58.580", "speaker": "Alexander Vasserman", "text": "one"}, {"source_name": "lecture5", "index": 364, "time": "00:49:58.740 --> 00:50:00.709", "speaker": "Alexander Vasserman", "text": "for each creature."}, {"source_name": "lecture5", "index": 365, "time": "00:50:01.710 --> 00:50:03.979", "speaker": "Alexander Vasserman", "text": "So here"}, {"source_name": "lecture5", "index": 366, "time": "00:50:04.240 --> 00:50:05.459", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture5", "index": 367, "time": "00:50:06.430 --> 00:50:13.800", "speaker": "Alexander Vasserman", "text": "maximum count can be just the number of query terms to start with. Right? So if you had"}, {"source_name": "lecture5", "index": 368, "time": "00:50:14.160 --> 00:50:14.950", "speaker": "Alexander Vasserman", "text": "just"}, {"source_name": "lecture5", "index": 369, "time": "00:50:15.100 --> 00:50:16.370", "speaker": "Alexander Vasserman", "text": "one term."}, {"source_name": "lecture5", "index": 370, "time": "00:50:16.560 --> 00:50:28.059", "speaker": "Alexander Vasserman", "text": "the the ranking function will not be very interesting in some sense, because it's going to be just either 0 or one, and will be exactly the same as the matching function."}, {"source_name": "lecture5", "index": 371, "time": "00:50:28.200 --> 00:50:37.119", "speaker": "Alexander Vasserman", "text": "But if you have more than one term in the quitting, then you you're basically saying well, how many of the equity terms"}, {"source_name": "lecture5", "index": 372, "time": "00:50:37.330 --> 00:50:41.710", "speaker": "Alexander Vasserman", "text": "occur in the document, and that's our rating function."}, {"source_name": "lecture5", "index": 373, "time": "00:50:44.370 --> 00:50:45.899", "speaker": "Alexander Vasserman", "text": "Does that"}, {"source_name": "lecture5", "index": 374, "time": "00:50:46.370 --> 00:50:47.939", "speaker": "Alexander Vasserman", "text": "make some sense."}, {"source_name": "lecture5", "index": 375, "time": "00:50:49.940 --> 00:50:51.180", "speaker": "Alexander Vasserman", "text": "any"}, {"source_name": "lecture5", "index": 376, "time": "00:50:51.270 --> 00:50:52.459", "speaker": "Alexander Vasserman", "text": "questions."}, {"source_name": "lecture5", "index": 377, "time": "00:50:55.680 --> 00:50:59.030", "speaker": "Alexander Vasserman", "text": "Could you explain the difference again? But between the"}, {"source_name": "lecture5", "index": 378, "time": "00:50:59.120 --> 00:51:07.690", "speaker": "Luis Gonzalez", "text": "the term condom boy internal account, because I see, like the coding wisely, how it's different. But I just want to know, like specifically, what it does"}, {"source_name": "lecture5", "index": 379, "time": "00:51:08.070 --> 00:51:09.000", "speaker": "Alexander Vasserman", "text": "right."}, {"source_name": "lecture5", "index": 380, "time": "00:51:09.190 --> 00:51:10.399", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture5", "index": 381, "time": "00:51:11.260 --> 00:51:13.590", "speaker": "Alexander Vasserman", "text": "for the term count"}, {"source_name": "lecture5", "index": 382, "time": "00:51:13.680 --> 00:51:16.530", "speaker": "Alexander Vasserman", "text": "right. Each committee term"}, {"source_name": "lecture5", "index": 383, "time": "00:51:16.600 --> 00:51:28.240", "speaker": "Alexander Vasserman", "text": "can contribute multiple counts to the overall score. So if a particular term occurs 10 times in the document."}, {"source_name": "lecture5", "index": 384, "time": "00:51:28.290 --> 00:51:31.689", "speaker": "Alexander Vasserman", "text": "the account will increase by 10."}, {"source_name": "lecture5", "index": 385, "time": "00:51:33.020 --> 00:51:35.330", "speaker": "Alexander Vasserman", "text": "In the second"}, {"source_name": "lecture5", "index": 386, "time": "00:51:35.350 --> 00:51:36.729", "speaker": "Alexander Vasserman", "text": "function"}, {"source_name": "lecture5", "index": 387, "time": "00:51:36.960 --> 00:51:39.060", "speaker": "Alexander Vasserman", "text": "you a term"}, {"source_name": "lecture5", "index": 388, "time": "00:51:39.110 --> 00:51:41.859", "speaker": "Alexander Vasserman", "text": "like, we determine a certain time in document."}, {"source_name": "lecture5", "index": 389, "time": "00:51:42.040 --> 00:51:42.850", "speaker": "Alexander Vasserman", "text": "It's"}, {"source_name": "lecture5", "index": 390, "time": "00:51:43.390 --> 00:51:45.909", "speaker": "Alexander Vasserman", "text": "still just going to be increased by one."}, {"source_name": "lecture5", "index": 391, "time": "00:51:48.370 --> 00:51:49.200", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture5", "index": 392, "time": "00:51:49.600 --> 00:51:56.380", "speaker": "Alexander Vasserman", "text": "So let's actually in order to get a little bit better understanding. Let's write some tests."}, {"source_name": "lecture5", "index": 393, "time": "00:51:56.510 --> 00:52:06.700", "speaker": "Alexander Vasserman", "text": "So again we going to right click, and you are in the file, or like outside the functions we're going to say generate."}, {"source_name": "lecture5", "index": 394, "time": "00:52:07.610 --> 00:52:08.350", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture5", "index": 395, "time": "00:52:09.450 --> 00:52:13.189", "speaker": "Alexander Vasserman", "text": "for some reason it doesn't want to do that for me anymore."}, {"source_name": "lecture5", "index": 396, "time": "00:52:18.020 --> 00:52:22.299", "speaker": "Alexander Vasserman", "text": "That's very interesting. Oh, yeah, okay. So generate test"}, {"source_name": "lecture5", "index": 397, "time": "00:52:22.720 --> 00:52:24.029", "speaker": "Alexander Vasserman", "text": "will"}, {"source_name": "lecture5", "index": 398, "time": "00:52:24.280 --> 00:52:27.130", "speaker": "Alexander Vasserman", "text": "select both functions"}, {"source_name": "lecture5", "index": 399, "time": "00:52:28.960 --> 00:52:31.259", "speaker": "Alexander Vasserman", "text": "and we'll click. Okay."}, {"source_name": "lecture5", "index": 400, "time": "00:52:31.670 --> 00:52:32.779", "speaker": "Alexander Vasserman", "text": "So."}, {"source_name": "lecture5", "index": 401, "time": "00:52:33.210 --> 00:52:36.109", "speaker": "Alexander Vasserman", "text": "hopefully, this looks familiar."}, {"source_name": "lecture5", "index": 402, "time": "00:52:39.720 --> 00:52:40.799", "speaker": "Alexander Vasserman", "text": "We are"}, {"source_name": "lecture5", "index": 403, "time": "00:52:41.460 --> 00:52:43.460", "speaker": "Alexander Vasserman", "text": "going to actually"}, {"source_name": "lecture5", "index": 404, "time": "00:52:46.590 --> 00:52:50.549", "speaker": "Alexander Vasserman", "text": "change things a little bit, and"}, {"source_name": "lecture5", "index": 405, "time": "00:52:50.610 --> 00:53:00.719", "speaker": "Alexander Vasserman", "text": "instead of having everything in this single class, you know, is going to split them into multiple classes. So let's say."}, {"source_name": "lecture5", "index": 406, "time": "00:53:02.820 --> 00:53:05.939", "speaker": "Alexander Vasserman", "text": "a separate cloud plus per function."}, {"source_name": "lecture5", "index": 407, "time": "00:53:06.010 --> 00:53:10.770", "speaker": "Alexander Vasserman", "text": "It doesn't really matter which way we do it. But"}, {"source_name": "lecture5", "index": 408, "time": "00:53:11.670 --> 00:53:19.009", "speaker": "Alexander Vasserman", "text": "sometimes that's a little easier. And so let's say that our first"}, {"source_name": "lecture5", "index": 409, "time": "00:53:19.300 --> 00:53:25.769", "speaker": "Alexander Vasserman", "text": "test will be tasting the oh use case when there is no matches."}, {"source_name": "lecture5", "index": 410, "time": "00:53:25.840 --> 00:53:26.870", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture5", "index": 411, "time": "00:53:28.150 --> 00:53:30.530", "speaker": "Alexander Vasserman", "text": "we are going to be."}, {"source_name": "lecture5", "index": 412, "time": "00:53:30.700 --> 00:53:31.729", "speaker": "Alexander Vasserman", "text": "say"}, {"source_name": "lecture5", "index": 413, "time": "00:53:31.810 --> 00:53:33.650", "speaker": "Alexander Vasserman", "text": "so. Let's"}, {"source_name": "lecture5", "index": 414, "time": "00:53:40.130 --> 00:53:49.429", "speaker": "Alexander Vasserman", "text": "group we. We. We will have that implement ranking implementation available to us, and the"}, {"source_name": "lecture5", "index": 415, "time": "00:53:50.580 --> 00:53:51.479", "speaker": "Alexander Vasserman", "text": "vehicle"}, {"source_name": "lecture5", "index": 416, "time": "00:53:51.940 --> 00:53:56.380", "speaker": "Alexander Vasserman", "text": "start using a circles again"}, {"source_name": "lecture5", "index": 417, "time": "00:53:56.660 --> 00:54:01.859", "speaker": "Alexander Vasserman", "text": "the same way that we done it before so."}, {"source_name": "lecture5", "index": 418, "time": "00:54:01.880 --> 00:54:05.929", "speaker": "Alexander Vasserman", "text": "and let's say the saying"}, {"source_name": "lecture5", "index": 419, "time": "00:54:06.020 --> 00:54:08.489", "speaker": "Alexander Vasserman", "text": "so from that"}, {"source_name": "lecture5", "index": 420, "time": "00:54:09.910 --> 00:54:17.959", "speaker": "Alexander Vasserman", "text": "ranking file a under test, let's say the query is"}, {"source_name": "lecture5", "index": 421, "time": "00:54:18.110 --> 00:54:19.419", "speaker": "Alexander Vasserman", "text": "something like"}, {"source_name": "lecture5", "index": 422, "time": "00:54:20.260 --> 00:54:24.579", "speaker": "Alexander Vasserman", "text": "t one t 2. I'm not going to give it."}, {"source_name": "lecture5", "index": 423, "time": "00:54:25.060 --> 00:54:29.590", "speaker": "Alexander Vasserman", "text": "You know it may meaningful things, but there are some 2 terms."}, {"source_name": "lecture5", "index": 424, "time": "00:54:29.640 --> 00:54:33.469", "speaker": "Alexander Vasserman", "text": "and let's say the document"}, {"source_name": "lecture5", "index": 425, "time": "00:54:33.530 --> 00:54:35.850", "speaker": "Alexander Vasserman", "text": "is equal to"}, {"source_name": "lecture5", "index": 426, "time": "00:54:36.140 --> 00:54:37.580", "speaker": "Alexander Vasserman", "text": "do you think?"}, {"source_name": "lecture5", "index": 427, "time": "00:54:39.360 --> 00:54:40.720", "speaker": "Alexander Vasserman", "text": "C. 4,"}, {"source_name": "lecture5", "index": 428, "time": "00:54:41.330 --> 00:54:45.489", "speaker": "Alexander Vasserman", "text": "Then, of course, what we expect is that"}, {"source_name": "lecture5", "index": 429, "time": "00:54:45.630 --> 00:54:47.099", "speaker": "Alexander Vasserman", "text": "the Paul"}, {"source_name": "lecture5", "index": 430, "time": "00:54:47.200 --> 00:54:53.210", "speaker": "Alexander Vasserman", "text": "term count, or our ranking function will return 0 in this case, because there is no overlap."}, {"source_name": "lecture5", "index": 431, "time": "00:54:56.300 --> 00:54:57.490", "speaker": "Alexander Vasserman", "text": "No."}, {"source_name": "lecture5", "index": 432, "time": "00:54:58.780 --> 00:55:01.180", "speaker": "Alexander Vasserman", "text": "So if the"}, {"source_name": "lecture5", "index": 433, "time": "00:55:01.380 --> 00:55:03.740", "speaker": "Alexander Vasserman", "text": "1, 2, let's say, define"}, {"source_name": "lecture5", "index": 434, "time": "00:55:04.010 --> 00:55:05.689", "speaker": "Alexander Vasserman", "text": "in another test"}, {"source_name": "lecture5", "index": 435, "time": "00:55:05.840 --> 00:55:08.220", "speaker": "Alexander Vasserman", "text": "and say, test"}, {"source_name": "lecture5", "index": 436, "time": "00:55:09.300 --> 00:55:11.679", "speaker": "Alexander Vasserman", "text": "partial match."}, {"source_name": "lecture5", "index": 437, "time": "00:55:12.750 --> 00:55:14.129", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture5", "index": 438, "time": "00:55:16.030 --> 00:55:17.319", "speaker": "Alexander Vasserman", "text": "again."}, {"source_name": "lecture5", "index": 439, "time": "00:55:23.610 --> 00:55:28.160", "speaker": "Alexander Vasserman", "text": "maybe we are us going to say"}, {"source_name": "lecture5", "index": 440, "time": "00:55:29.570 --> 00:55:30.930", "speaker": "Alexander Vasserman", "text": "term count."}, {"source_name": "lecture5", "index": 441, "time": "00:55:34.170 --> 00:55:36.410", "speaker": "Alexander Vasserman", "text": "Let's keep the same"}, {"source_name": "lecture5", "index": 442, "time": "00:55:36.740 --> 00:55:39.050", "speaker": "Alexander Vasserman", "text": "pretty. And then"}, {"source_name": "lecture5", "index": 443, "time": "00:55:41.010 --> 00:55:44.569", "speaker": "Alexander Vasserman", "text": "document, let's say, is"}, {"source_name": "lecture5", "index": 444, "time": "00:55:47.640 --> 00:55:49.500", "speaker": "Alexander Vasserman", "text": "something like that."}, {"source_name": "lecture5", "index": 445, "time": "00:55:49.600 --> 00:55:51.339", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture5", "index": 446, "time": "00:55:52.740 --> 00:55:59.450", "speaker": "Alexander Vasserman", "text": "previously, when we were defining matching functions or something like that we would say it doesn't even match."}, {"source_name": "lecture5", "index": 447, "time": "00:55:59.500 --> 00:56:08.440", "speaker": "Alexander Vasserman", "text": "So here the the ranking function that we've defined here is kind of inconsistent. Somewhat is the matching function. So"}, {"source_name": "lecture5", "index": 448, "time": "00:56:09.160 --> 00:56:20.260", "speaker": "Alexander Vasserman", "text": "these ranking functions that we're writing right now. Order everything so. And in this particular case the overlap should be one right."}, {"source_name": "lecture5", "index": 449, "time": "00:56:24.550 --> 00:56:28.409", "speaker": "Alexander Vasserman", "text": "and that's all."}, {"source_name": "lecture5", "index": 450, "time": "00:56:40.690 --> 00:56:43.460", "speaker": "Alexander Vasserman", "text": "I have another test case"}, {"source_name": "lecture5", "index": 451, "time": "00:56:47.030 --> 00:56:48.549", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture5", "index": 452, "time": "00:56:49.330 --> 00:56:52.439", "speaker": "Alexander Vasserman", "text": "basically showcase the difference"}, {"source_name": "lecture5", "index": 453, "time": "00:56:52.490 --> 00:56:58.580", "speaker": "Alexander Vasserman", "text": "between the 2 different implementations. So let's keep"}, {"source_name": "lecture5", "index": 454, "time": "00:56:59.160 --> 00:57:00.580", "speaker": "Alexander Vasserman", "text": "clearly the same."}, {"source_name": "lecture5", "index": 455, "time": "00:57:01.640 --> 00:57:07.740", "speaker": "Alexander Vasserman", "text": "But let's say the document is something like"}, {"source_name": "lecture5", "index": 456, "time": "00:57:07.870 --> 00:57:09.080", "speaker": "Alexander Vasserman", "text": "T. One."}, {"source_name": "lecture5", "index": 457, "time": "00:57:09.520 --> 00:57:13.429", "speaker": "Alexander Vasserman", "text": "U, 3, t, 2, g, one."}, {"source_name": "lecture5", "index": 458, "time": "00:57:13.760 --> 00:57:14.889", "speaker": "Alexander Vasserman", "text": "2, 2,"}, {"source_name": "lecture5", "index": 459, "time": "00:57:16.300 --> 00:57:21.970", "speaker": "Alexander Vasserman", "text": "right. So in this particular case what we expect"}, {"source_name": "lecture5", "index": 460, "time": "00:57:22.170 --> 00:57:23.700", "speaker": "Alexander Vasserman", "text": "he's"}, {"source_name": "lecture5", "index": 461, "time": "00:57:23.780 --> 00:57:24.649", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture5", "index": 462, "time": "00:57:25.070 --> 00:57:27.290", "speaker": "Alexander Vasserman", "text": "the result will be 4,"}, {"source_name": "lecture5", "index": 463, "time": "00:57:27.470 --> 00:57:33.979", "speaker": "Alexander Vasserman", "text": "so right, so t one, of course, twice, and t 2 occurs twice."}, {"source_name": "lecture5", "index": 464, "time": "00:57:35.800 --> 00:57:37.290", "speaker": "Alexander Vasserman", "text": "Maybe. Actually."}, {"source_name": "lecture5", "index": 465, "time": "00:57:37.790 --> 00:57:38.790", "speaker": "Alexander Vasserman", "text": "that's"}, {"source_name": "lecture5", "index": 466, "time": "00:57:39.160 --> 00:57:40.219", "speaker": "Alexander Vasserman", "text": "make"}, {"source_name": "lecture5", "index": 467, "time": "00:57:40.590 --> 00:57:45.830", "speaker": "Alexander Vasserman", "text": "the 2 occur 3 times just for the heck of it. So, and make it 5."}, {"source_name": "lecture5", "index": 468, "time": "00:57:53.390 --> 00:57:54.709", "speaker": "Alexander Vasserman", "text": "No."}, {"source_name": "lecture5", "index": 469, "time": "00:57:55.540 --> 00:57:56.649", "speaker": "Alexander Vasserman", "text": "that's"}, {"source_name": "lecture5", "index": 470, "time": "00:57:58.930 --> 00:57:59.939", "speaker": "Alexander Vasserman", "text": "kind of"}, {"source_name": "lecture5", "index": 471, "time": "00:58:00.690 --> 00:58:02.790", "speaker": "Alexander Vasserman", "text": "great another class."}, {"source_name": "lecture5", "index": 472, "time": "00:58:03.800 --> 00:58:07.089", "speaker": "Alexander Vasserman", "text": "But for the"}, {"source_name": "lecture5", "index": 473, "time": "00:58:08.420 --> 00:58:12.430", "speaker": "Alexander Vasserman", "text": "other function that we called bulletin term count"}, {"source_name": "lecture5", "index": 474, "time": "00:58:19.640 --> 00:58:24.819", "speaker": "Alexander Vasserman", "text": "and let's basically set up the same."}, {"source_name": "lecture5", "index": 475, "time": "00:58:25.190 --> 00:58:26.229", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture5", "index": 476, "time": "00:58:33.340 --> 00:58:35.129", "speaker": "Alexander Vasserman", "text": "the same test cases."}, {"source_name": "lecture5", "index": 477, "time": "00:58:45.200 --> 00:58:46.180", "speaker": "Alexander Vasserman", "text": "So."}, {"source_name": "lecture5", "index": 478, "time": "00:58:48.190 --> 00:58:49.450", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture5", "index": 479, "time": "00:58:50.140 --> 00:58:51.109", "speaker": "Alexander Vasserman", "text": "let's"}, {"source_name": "lecture5", "index": 480, "time": "00:58:51.740 --> 00:58:52.760", "speaker": "Alexander Vasserman", "text": "what on."}, {"source_name": "lecture5", "index": 481, "time": "00:58:56.740 --> 00:59:03.430", "speaker": "Alexander Vasserman", "text": "Run. Python tests in a test that's one way to do it so that we're running everything."}, {"source_name": "lecture5", "index": 482, "time": "00:59:03.470 --> 00:59:06.800", "speaker": "Alexander Vasserman", "text": "And as you can see"}, {"source_name": "lecture5", "index": 483, "time": "00:59:06.960 --> 00:59:11.869", "speaker": "Alexander Vasserman", "text": "we're we're getting an error because"}, {"source_name": "lecture5", "index": 484, "time": "00:59:12.370 --> 00:59:13.500", "speaker": "Alexander Vasserman", "text": "I in"}, {"source_name": "lecture5", "index": 485, "time": "00:59:14.260 --> 00:59:15.009", "speaker": "Alexander Vasserman", "text": "this"}, {"source_name": "lecture5", "index": 486, "time": "00:59:16.140 --> 00:59:18.130", "speaker": "Alexander Vasserman", "text": "in this test, right here"}, {"source_name": "lecture5", "index": 487, "time": "00:59:20.900 --> 00:59:21.640", "speaker": "Alexander Vasserman", "text": "it doesn't."}, {"source_name": "lecture5", "index": 488, "time": "00:59:22.220 --> 00:59:24.810", "speaker": "Alexander Vasserman", "text": "Yeah, the"}, {"source_name": "lecture5", "index": 489, "time": "00:59:25.070 --> 00:59:29.460", "speaker": "Alexander Vasserman", "text": "the in case of repeated matches, of course the boot in term count"}, {"source_name": "lecture5", "index": 490, "time": "00:59:29.500 --> 00:59:34.050", "speaker": "Alexander Vasserman", "text": "I should output different number"}, {"source_name": "lecture5", "index": 491, "time": "00:59:34.120 --> 00:59:38.580", "speaker": "Alexander Vasserman", "text": "to output 2. I I how many terms."}, {"source_name": "lecture5", "index": 492, "time": "00:59:38.610 --> 00:59:48.169", "speaker": "Alexander Vasserman", "text": "How many of the query terms I appeared in the document. Right? So that's that is the difference between 2"}, {"source_name": "lecture5", "index": 493, "time": "00:59:48.360 --> 00:59:54.040", "speaker": "Alexander Vasserman", "text": "3 functions to to ranking functions. And so now, if I"}, {"source_name": "lecture5", "index": 494, "time": "00:59:54.130 --> 00:59:59.880", "speaker": "Alexander Vasserman", "text": "run all the tests again, now all 6 tests. So have passed."}, {"source_name": "lecture5", "index": 495, "time": "01:00:02.090 --> 01:00:15.570", "speaker": "Amirali DJalilvand", "text": "I'm a rally. You have a question. Yeah, so wouldn't the first function. The nonviolent one be better for accumulating a score because you're getting more of those repeated terms. So it's more relevant."}, {"source_name": "lecture5", "index": 496, "time": "01:00:16.620 --> 01:00:20.479", "speaker": "Alexander Vasserman", "text": "Yes, so definitely."}, {"source_name": "lecture5", "index": 497, "time": "01:00:21.420 --> 01:00:26.740", "speaker": "Alexander Vasserman", "text": "It's better. Okay."}, {"source_name": "lecture5", "index": 498, "time": "01:00:27.170 --> 01:00:39.380", "speaker": "Alexander Vasserman", "text": "But I think both are important. Basically the problem with the first one to some degree. It's very easy to spam. I can"}, {"source_name": "lecture5", "index": 499, "time": "01:00:39.590 --> 01:00:51.319", "speaker": "Alexander Vasserman", "text": "would in a 1 million times the same board in the document, and maybe that's kind of will boost the my, my my value"}, {"source_name": "lecture5", "index": 500, "time": "01:00:51.580 --> 01:00:56.739", "speaker": "Alexander Vasserman", "text": "very high, or things like that. But yes, the way it is kind of"}, {"source_name": "lecture5", "index": 501, "time": "01:00:56.760 --> 01:01:02.510", "speaker": "Alexander Vasserman", "text": "the way they've done it so far. They the first one is"}, {"source_name": "lecture5", "index": 502, "time": "01:01:02.640 --> 01:01:03.560", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture5", "index": 503, "time": "01:01:03.680 --> 01:01:04.669", "speaker": "Alexander Vasserman", "text": "better."}, {"source_name": "lecture5", "index": 504, "time": "01:01:05.130 --> 01:01:13.440", "speaker": "Alexander Vasserman", "text": "and that's something we're going to iterate on as well. So later in the class we'll"}, {"source_name": "lecture5", "index": 505, "time": "01:01:13.820 --> 01:01:20.670", "speaker": "Alexander Vasserman", "text": "start improving our rating functions, and i'll look at the slightly more complicated ranking functions"}, {"source_name": "lecture5", "index": 506, "time": "01:01:20.850 --> 01:01:28.600", "speaker": "Alexander Vasserman", "text": "that so neither one of those 2, it's probably something that we're going to use in any like real."}, {"source_name": "lecture5", "index": 507, "time": "01:01:28.660 --> 01:01:29.950", "speaker": "Alexander Vasserman", "text": "Oh, search engine"}, {"source_name": "lecture5", "index": 508, "time": "01:01:32.100 --> 01:01:33.020", "speaker": "Alexander Vasserman", "text": "makes sense."}, {"source_name": "lecture5", "index": 509, "time": "01:01:33.990 --> 01:01:34.770", "speaker": "Amirali DJalilvand", "text": "Yeah."}, {"source_name": "lecture5", "index": 510, "time": "01:01:35.750 --> 01:01:37.020", "speaker": "Alexander Vasserman", "text": "Any"}, {"source_name": "lecture5", "index": 511, "time": "01:01:37.100 --> 01:01:38.379", "speaker": "Alexander Vasserman", "text": "other questions."}, {"source_name": "lecture5", "index": 512, "time": "01:01:42.550 --> 01:01:46.880", "speaker": "Alexander Vasserman", "text": "Okay? Hopefully, all of this was fairly straightforward."}, {"source_name": "lecture5", "index": 513, "time": "01:01:54.730 --> 01:01:55.879", "speaker": "Alexander Vasserman", "text": "Let's see."}, {"source_name": "lecture5", "index": 514, "time": "01:01:56.070 --> 01:01:57.379", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture5", "index": 515, "time": "01:01:58.430 --> 01:01:59.620", "speaker": "Alexander Vasserman", "text": "no."}, {"source_name": "lecture5", "index": 516, "time": "01:02:00.030 --> 01:02:02.139", "speaker": "Alexander Vasserman", "text": "Let's go back"}, {"source_name": "lecture5", "index": 517, "time": "01:02:03.140 --> 01:02:04.000", "speaker": "Alexander Vasserman", "text": "to"}, {"source_name": "lecture5", "index": 518, "time": "01:02:04.450 --> 01:02:06.379", "speaker": "Alexander Vasserman", "text": "ranking and"}, {"source_name": "lecture5", "index": 519, "time": "01:02:07.030 --> 01:02:10.180", "speaker": "Alexander Vasserman", "text": "let's try to figure out."}, {"source_name": "lecture5", "index": 520, "time": "01:02:10.330 --> 01:02:17.620", "speaker": "Alexander Vasserman", "text": "How do we actually write the search for function now? So"}, {"source_name": "lecture5", "index": 521, "time": "01:02:17.820 --> 01:02:18.750", "speaker": "Alexander Vasserman", "text": "all right"}, {"source_name": "lecture5", "index": 522, "time": "01:02:18.810 --> 01:02:21.019", "speaker": "Alexander Vasserman", "text": "in the match in case"}, {"source_name": "lecture5", "index": 523, "time": "01:02:21.080 --> 01:02:27.349", "speaker": "Alexander Vasserman", "text": "we just basically looked at the term."}, {"source_name": "lecture5", "index": 524, "time": "01:02:27.450 --> 01:02:38.869", "speaker": "Alexander Vasserman", "text": "and if it matched the we we added it to the output, and if it did match we didn't, and so we the search returned. Essentially all the matching documents."}, {"source_name": "lecture5", "index": 525, "time": "01:02:38.920 --> 01:02:43.740", "speaker": "Alexander Vasserman", "text": "So in the ranking case we want a similar signature."}, {"source_name": "lecture5", "index": 526, "time": "01:02:44.030 --> 01:02:47.939", "speaker": "Alexander Vasserman", "text": "right? So we want to still define"}, {"source_name": "lecture5", "index": 527, "time": "01:02:48.530 --> 01:02:49.569", "speaker": "Alexander Vasserman", "text": "search"}, {"source_name": "lecture5", "index": 528, "time": "01:02:49.670 --> 01:02:51.429", "speaker": "Alexander Vasserman", "text": "in the same way."}, {"source_name": "lecture5", "index": 529, "time": "01:02:56.270 --> 01:03:02.430", "speaker": "Alexander Vasserman", "text": "but take into account the all our ranking function."}, {"source_name": "lecture5", "index": 530, "time": "01:03:03.620 --> 01:03:04.899", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture5", "index": 531, "time": "01:03:05.760 --> 01:03:06.680", "speaker": "Alexander Vasserman", "text": "there are"}, {"source_name": "lecture5", "index": 532, "time": "01:03:07.140 --> 01:03:08.290", "speaker": "Alexander Vasserman", "text": "multiple"}, {"source_name": "lecture5", "index": 533, "time": "01:03:08.610 --> 01:03:10.800", "speaker": "Alexander Vasserman", "text": "oh ways to do it."}, {"source_name": "lecture5", "index": 534, "time": "01:03:11.030 --> 01:03:14.319", "speaker": "Alexander Vasserman", "text": "obviously."}, {"source_name": "lecture5", "index": 535, "time": "01:03:14.780 --> 01:03:17.440", "speaker": "Alexander Vasserman", "text": "and let me just implement"}, {"source_name": "lecture5", "index": 536, "time": "01:03:18.510 --> 01:03:21.209", "speaker": "Alexander Vasserman", "text": "one of them. And hopefully we can."}, {"source_name": "lecture5", "index": 537, "time": "01:03:22.180 --> 01:03:23.279", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture5", "index": 538, "time": "01:03:24.110 --> 01:03:25.829", "speaker": "Alexander Vasserman", "text": "I would say that"}, {"source_name": "lecture5", "index": 539, "time": "01:03:26.560 --> 01:03:28.609", "speaker": "Alexander Vasserman", "text": "let's"}, {"source_name": "lecture5", "index": 540, "time": "01:03:29.470 --> 01:03:35.879", "speaker": "Alexander Vasserman", "text": "hey the dictionary that where are we going to store the accounts from"}, {"source_name": "lecture5", "index": 541, "time": "01:03:36.620 --> 01:03:38.289", "speaker": "Alexander Vasserman", "text": "each document"}, {"source_name": "lecture5", "index": 542, "time": "01:03:38.780 --> 01:03:40.600", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture5", "index": 543, "time": "01:03:40.990 --> 01:03:43.149", "speaker": "Alexander Vasserman", "text": "let's iterate"}, {"source_name": "lecture5", "index": 544, "time": "01:03:43.510 --> 01:03:46.399", "speaker": "Alexander Vasserman", "text": "over the documents"}, {"source_name": "lecture5", "index": 545, "time": "01:03:55.020 --> 01:03:58.380", "speaker": "Alexander Vasserman", "text": "here. I'm actually going to use index"}, {"source_name": "lecture5", "index": 546, "time": "01:03:58.460 --> 01:04:00.830", "speaker": "Alexander Vasserman", "text": "of the document instead of"}, {"source_name": "lecture5", "index": 547, "time": "01:04:00.870 --> 01:04:05.889", "speaker": "Alexander Vasserman", "text": "the document itself in the accounts."}, {"source_name": "lecture5", "index": 548, "time": "01:04:10.040 --> 01:04:11.229", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture5", "index": 549, "time": "01:04:17.550 --> 01:04:18.580", "speaker": "Alexander Vasserman", "text": "let me"}, {"source_name": "lecture5", "index": 550, "time": "01:04:19.210 --> 01:04:24.450", "speaker": "Alexander Vasserman", "text": "say that counts of I, and let's use. Let's say terms"}, {"source_name": "lecture5", "index": 551, "time": "01:04:24.790 --> 01:04:25.870", "speaker": "Alexander Vasserman", "text": "count."}, {"source_name": "lecture5", "index": 552, "time": "01:04:26.020 --> 01:04:27.490", "speaker": "Alexander Vasserman", "text": "is the"}, {"source_name": "lecture5", "index": 553, "time": "01:04:28.120 --> 01:04:30.340", "speaker": "Alexander Vasserman", "text": "which is it called to queen"}, {"source_name": "lecture5", "index": 554, "time": "01:04:30.710 --> 01:04:31.399", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture5", "index": 555, "time": "01:04:32.570 --> 01:04:36.010", "speaker": "Alexander Vasserman", "text": "document is equal to Doc."}, {"source_name": "lecture5", "index": 556, "time": "01:04:36.590 --> 01:04:42.450", "speaker": "Alexander Vasserman", "text": "So these are our scores. And now we want to"}, {"source_name": "lecture5", "index": 557, "time": "01:04:44.550 --> 01:04:45.839", "speaker": "Alexander Vasserman", "text": "output"}, {"source_name": "lecture5", "index": 558, "time": "01:04:46.030 --> 01:04:46.790", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture5", "index": 559, "time": "01:04:48.590 --> 01:04:50.220", "speaker": "Alexander Vasserman", "text": "documents"}, {"source_name": "lecture5", "index": 560, "time": "01:04:51.400 --> 01:04:55.460", "speaker": "Alexander Vasserman", "text": "according to discounts, all of them, according to discounts."}, {"source_name": "lecture5", "index": 561, "time": "01:04:56.240 --> 01:04:57.589", "speaker": "Alexander Vasserman", "text": "One kind of"}, {"source_name": "lecture5", "index": 562, "time": "01:04:57.740 --> 01:05:02.040", "speaker": "Alexander Vasserman", "text": "a way to do it is order indexes. So"}, {"source_name": "lecture5", "index": 563, "time": "01:05:02.180 --> 01:05:09.120", "speaker": "Alexander Vasserman", "text": "so what i'm going to do is to have this a little tag"}, {"source_name": "lecture5", "index": 564, "time": "01:05:09.440 --> 01:05:11.240", "speaker": "Alexander Vasserman", "text": "where"}, {"source_name": "lecture5", "index": 565, "time": "01:05:12.750 --> 01:05:14.010", "speaker": "Alexander Vasserman", "text": "i'll take."}, {"source_name": "lecture5", "index": 566, "time": "01:05:19.940 --> 01:05:23.569", "speaker": "Alexander Vasserman", "text": "Basically i'll take a list of"}, {"source_name": "lecture5", "index": 567, "time": "01:05:23.920 --> 01:05:27.060", "speaker": "Alexander Vasserman", "text": "all the indices that are"}, {"source_name": "lecture5", "index": 568, "time": "01:05:27.360 --> 01:05:31.130", "speaker": "Alexander Vasserman", "text": "that I have. So these are going to be the"}, {"source_name": "lecture5", "index": 569, "time": "01:05:31.230 --> 01:05:42.210", "speaker": "Alexander Vasserman", "text": "numbers from 0 up to number of documents minus one, and those are exactly all the different eyes that we have here."}, {"source_name": "lecture5", "index": 570, "time": "01:05:43.450 --> 01:05:48.130", "speaker": "Alexander Vasserman", "text": "and what i'm going to do is to sort it."}, {"source_name": "lecture5", "index": 571, "time": "01:05:49.230 --> 01:05:52.379", "speaker": "Alexander Vasserman", "text": "And the python has this"}, {"source_name": "lecture5", "index": 572, "time": "01:05:52.750 --> 01:05:55.569", "speaker": "Alexander Vasserman", "text": "nice way of sorting it"}, {"source_name": "lecture5", "index": 573, "time": "01:05:55.950 --> 01:06:01.930", "speaker": "Alexander Vasserman", "text": "where you can provide the key. So counts. Not yet. Basically"}, {"source_name": "lecture5", "index": 574, "time": "01:06:02.160 --> 01:06:02.830", "speaker": "Alexander Vasserman", "text": "Hmm."}, {"source_name": "lecture5", "index": 575, "time": "01:06:05.770 --> 01:06:06.799", "speaker": "Alexander Vasserman", "text": "would"}, {"source_name": "lecture5", "index": 576, "time": "01:06:07.800 --> 01:06:09.490", "speaker": "Alexander Vasserman", "text": "return the count"}, {"source_name": "lecture5", "index": 577, "time": "01:06:09.550 --> 01:06:15.959", "speaker": "Alexander Vasserman", "text": "for each integer for each index. And so the sort will be based on this."}, {"source_name": "lecture5", "index": 578, "time": "01:06:16.080 --> 01:06:17.670", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture5", "index": 579, "time": "01:06:18.930 --> 01:06:24.069", "speaker": "Alexander Vasserman", "text": "finally, I would want to have a reverse equals to true."}, {"source_name": "lecture5", "index": 580, "time": "01:06:24.180 --> 01:06:33.290", "speaker": "Alexander Vasserman", "text": "which means that I want not the normal ordering which would put the smallest number first, but reverse order."}, {"source_name": "lecture5", "index": 581, "time": "01:06:36.590 --> 01:06:37.629", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture5", "index": 582, "time": "01:06:38.790 --> 01:06:42.239", "speaker": "Alexander Vasserman", "text": "what i'm going to do then is"}, {"source_name": "lecture5", "index": 583, "time": "01:06:44.290 --> 01:06:45.679", "speaker": "Alexander Vasserman", "text": "he turns"}, {"source_name": "lecture5", "index": 584, "time": "01:06:45.890 --> 01:06:50.479", "speaker": "Alexander Vasserman", "text": "documents in the order given by the indices."}, {"source_name": "lecture5", "index": 585, "time": "01:06:57.740 --> 01:06:58.629", "speaker": "Alexander Vasserman", "text": "All right."}, {"source_name": "lecture5", "index": 586, "time": "01:06:59.270 --> 01:07:00.339", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture5", "index": 587, "time": "01:07:00.670 --> 01:07:03.500", "speaker": "Alexander Vasserman", "text": "i'm sure that was confusing."}, {"source_name": "lecture5", "index": 588, "time": "01:07:05.880 --> 01:07:06.959", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture5", "index": 589, "time": "01:07:07.620 --> 01:07:09.749", "speaker": "Alexander Vasserman", "text": "I want to see a lot of questions."}, {"source_name": "lecture5", "index": 590, "time": "01:07:12.960 --> 01:07:13.890", "speaker": "Alexander Vasserman", "text": "Alex."}, {"source_name": "lecture5", "index": 591, "time": "01:07:15.550 --> 01:07:20.559", "speaker": "Alex Wojtowicz", "text": "So when you did the can you explain more about when you declare the indexes variable?"}, {"source_name": "lecture5", "index": 592, "time": "01:07:20.760 --> 01:07:22.780", "speaker": "Alex Wojtowicz", "text": "And when you did, you sort it through it."}, {"source_name": "lecture5", "index": 593, "time": "01:07:22.890 --> 01:07:24.049", "speaker": "Alex Wojtowicz", "text": "Didn't you sort it"}, {"source_name": "lecture5", "index": 594, "time": "01:07:24.130 --> 01:07:25.189", "speaker": "Alex Wojtowicz", "text": "I the amount of"}, {"source_name": "lecture5", "index": 595, "time": "01:07:26.320 --> 01:07:29.190", "speaker": "Alex Wojtowicz", "text": "keys in the accounts, and then reverse it"}, {"source_name": "lecture5", "index": 596, "time": "01:07:29.950 --> 01:07:31.540", "speaker": "Alexander Vasserman", "text": "right? So"}, {"source_name": "lecture5", "index": 597, "time": "01:07:31.980 --> 01:07:41.879", "speaker": "Alexander Vasserman", "text": "what does a sort function do right. So if or in specifically, the sort function with the"}, {"source_name": "lecture5", "index": 598, "time": "01:07:41.980 --> 01:07:51.580", "speaker": "Alexander Vasserman", "text": "so key is basically says, Here is the function that would apply to it to an element of a"}, {"source_name": "lecture5", "index": 599, "time": "01:07:52.350 --> 01:07:54.529", "speaker": "Alexander Vasserman", "text": "at least, that you're trying to sort."}, {"source_name": "lecture5", "index": 600, "time": "01:07:54.770 --> 01:07:58.809", "speaker": "Alexander Vasserman", "text": "and the return the value that you should be sorting by."}, {"source_name": "lecture5", "index": 601, "time": "01:07:59.400 --> 01:08:00.790", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture5", "index": 602, "time": "01:08:00.910 --> 01:08:02.579", "speaker": "Alexander Vasserman", "text": "in our case."}, {"source_name": "lecture5", "index": 603, "time": "01:08:02.860 --> 01:08:04.819", "speaker": "Alexander Vasserman", "text": "the elements"}, {"source_name": "lecture5", "index": 604, "time": "01:08:04.960 --> 01:08:10.499", "speaker": "Alexander Vasserman", "text": "that we're trying to sort are all the integers"}, {"source_name": "lecture5", "index": 605, "time": "01:08:10.770 --> 01:08:24.139", "speaker": "Alexander Vasserman", "text": "between 0 and the up to length of documents minus one. So these are all the different eyes that the computed the term counts here for"}, {"source_name": "lecture5", "index": 606, "time": "01:08:24.370 --> 01:08:26.739", "speaker": "Alexander Vasserman", "text": "right. So these are the"}, {"source_name": "lecture5", "index": 607, "time": "01:08:27.270 --> 01:08:32.260", "speaker": "Alexander Vasserman", "text": "the indexes, right? These are the the things that we want. You"}, {"source_name": "lecture5", "index": 608, "time": "01:08:32.359 --> 01:08:33.899", "speaker": "Alexander Vasserman", "text": "order"}, {"source_name": "lecture5", "index": 609, "time": "01:08:36.819 --> 01:08:40.869", "speaker": "Alexander Vasserman", "text": "just to kind of understand that the concept."}, {"source_name": "lecture5", "index": 610, "time": "01:08:40.920 --> 01:08:42.660", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture5", "index": 611, "time": "01:08:42.810 --> 01:08:53.980", "speaker": "Alexander Vasserman", "text": "reach. What we want to return is exactly the same documents as the input but the order is basically given by those in this right. So we won't."}, {"source_name": "lecture5", "index": 612, "time": "01:08:54.649 --> 01:08:56.240", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture5", "index": 613, "time": "01:08:59.040 --> 01:09:08.980", "speaker": "Alexander Vasserman", "text": "this function basically for given any index, let's say, index 0. It will give us the count"}, {"source_name": "lecture5", "index": 614, "time": "01:09:09.330 --> 01:09:14.430", "speaker": "Alexander Vasserman", "text": "of terms corresponding to the document of the index 0."}, {"source_name": "lecture5", "index": 615, "time": "01:09:15.279 --> 01:09:22.689", "speaker": "Alex Wojtowicz", "text": "So basically what it's doing is, it's getting the the actual value in the account at that index, and it's sorting it by the value in there."}, {"source_name": "lecture5", "index": 616, "time": "01:09:23.500 --> 01:09:25.079", "speaker": "Alexander Vasserman", "text": "That's exactly right."}, {"source_name": "lecture5", "index": 617, "time": "01:09:25.520 --> 01:09:26.189", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture5", "index": 618, "time": "01:09:31.520 --> 01:09:46.910", "speaker": "Alexander Vasserman", "text": "Does it make sense to everyone else? I know this is kind of confusing, and maybe a little bit more confusing than necessary. Just kind of wanted to keep you a little bit on your toes."}, {"source_name": "lecture5", "index": 619, "time": "01:09:47.010 --> 01:09:49.369", "speaker": "Alexander Vasserman", "text": "We can certainly"}, {"source_name": "lecture5", "index": 620, "time": "01:09:51.950 --> 01:09:52.990", "speaker": "Alexander Vasserman", "text": "have."}, {"source_name": "lecture5", "index": 621, "time": "01:09:53.149 --> 01:09:59.350", "speaker": "Alexander Vasserman", "text": "and implementation that's a little bit easier to understand. For example, he could"}, {"source_name": "lecture5", "index": 622, "time": "01:10:02.850 --> 01:10:04.130", "speaker": "Alexander Vasserman", "text": "calculate."}, {"source_name": "lecture5", "index": 623, "time": "01:10:04.720 --> 01:10:08.479", "speaker": "Alexander Vasserman", "text": "So let's let's do slightly different implementation"}, {"source_name": "lecture5", "index": 624, "time": "01:10:08.640 --> 01:10:10.730", "speaker": "Alexander Vasserman", "text": "A. And"}, {"source_name": "lecture5", "index": 625, "time": "01:10:11.160 --> 01:10:21.230", "speaker": "Alexander Vasserman", "text": "well, anyway, maybe I I won't spend time right now, but we could have, for example, compute at all discounts, and then basically select"}, {"source_name": "lecture5", "index": 626, "time": "01:10:21.710 --> 01:10:38.890", "speaker": "Alexander Vasserman", "text": "one by one. The document is the best count. Then remove it from the accounts. Take another one that next one, this the next best count. They remove it, etc., so we could basically do it one by one."}, {"source_name": "lecture5", "index": 627, "time": "01:10:38.970 --> 01:10:44.250", "speaker": "Alexander Vasserman", "text": "Instead of using this sorted"}, {"source_name": "lecture5", "index": 628, "time": "01:10:44.340 --> 01:10:55.580", "speaker": "Alexander Vasserman", "text": "function, we could probably sort it in other ways as well. So this is kind of just one example. How we could do it. You can"}, {"source_name": "lecture5", "index": 629, "time": "01:10:55.680 --> 01:10:56.769", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture5", "index": 630, "time": "01:10:57.260 --> 01:11:00.319", "speaker": "Alexander Vasserman", "text": "experiment with a little bit more on your own time."}, {"source_name": "lecture5", "index": 631, "time": "01:11:04.050 --> 01:11:08.849", "speaker": "Alexander Vasserman", "text": "But hopefully, the concept"}, {"source_name": "lecture5", "index": 632, "time": "01:11:09.060 --> 01:11:26.950", "speaker": "Alexander Vasserman", "text": "is clear that we're ordering documents based on the output of the term count function, and the higher the value which some country to returns, the the higher up the document will be"}, {"source_name": "lecture5", "index": 633, "time": "01:11:27.020 --> 01:11:27.910", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture5", "index": 634, "time": "01:11:29.110 --> 01:11:29.960", "speaker": "Alexander Vasserman", "text": "stored."}, {"source_name": "lecture5", "index": 635, "time": "01:11:32.140 --> 01:11:34.840", "speaker": "Alexander Vasserman", "text": "That's that part makes sense to everyone."}, {"source_name": "lecture5", "index": 636, "time": "01:11:42.500 --> 01:11:43.400", "speaker": "Alexander Vasserman", "text": "All right."}, {"source_name": "lecture5", "index": 637, "time": "01:11:43.680 --> 01:11:44.490", "speaker": "Alexander Vasserman", "text": "great."}, {"source_name": "lecture5", "index": 638, "time": "01:11:45.890 --> 01:11:47.019", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture5", "index": 639, "time": "01:11:48.370 --> 01:11:49.630", "speaker": "Alexander Vasserman", "text": "let's"}, {"source_name": "lecture5", "index": 640, "time": "01:11:57.790 --> 01:12:00.850", "speaker": "Alexander Vasserman", "text": "Yeah. So basically we we have"}, {"source_name": "lecture5", "index": 641, "time": "01:12:02.400 --> 01:12:04.320", "speaker": "Alexander Vasserman", "text": "functions."}, {"source_name": "lecture5", "index": 642, "time": "01:12:06.810 --> 01:12:07.969", "speaker": "Alexander Vasserman", "text": "Let's reach."}, {"source_name": "lecture5", "index": 643, "time": "01:12:08.160 --> 01:12:20.059", "speaker": "Alexander Vasserman", "text": "Give us a little bit and talk a little bit about Jason. And in general date data, and the reason why I want to talk about it just kind of to"}, {"source_name": "lecture5", "index": 644, "time": "01:12:20.160 --> 01:12:30.790", "speaker": "Alexander Vasserman", "text": "to bring it back is that is all the kind of search functions we have implemented. So far, documents"}, {"source_name": "lecture5", "index": 645, "time": "01:12:30.930 --> 01:12:34.509", "speaker": "Alexander Vasserman", "text": "we're supplied as part of the"}, {"source_name": "lecture5", "index": 646, "time": "01:12:35.020 --> 01:12:39.359", "speaker": "Alexander Vasserman", "text": "argument, which is kind of not really"}, {"source_name": "lecture5", "index": 647, "time": "01:12:40.050 --> 01:12:42.990", "speaker": "Alexander Vasserman", "text": "feasible in in most cases"}, {"source_name": "lecture5", "index": 648, "time": "01:12:43.070 --> 01:12:47.269", "speaker": "Alexander Vasserman", "text": "you want to read it from somewhere from some file."}, {"source_name": "lecture5", "index": 649, "time": "01:12:47.420 --> 01:12:58.600", "speaker": "Alexander Vasserman", "text": "And so basically I wanted to talk about one of the ways that structured data can be stored, and how"}, {"source_name": "lecture5", "index": 650, "time": "01:12:59.450 --> 01:13:03.499", "speaker": "Alexander Vasserman", "text": "and so that we can use the"}, {"source_name": "lecture5", "index": 651, "time": "01:13:04.610 --> 01:13:08.620", "speaker": "Alexander Vasserman", "text": "did this format for reading documents?"}, {"source_name": "lecture5", "index": 652, "time": "01:13:10.020 --> 01:13:11.110", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture5", "index": 653, "time": "01:13:12.460 --> 01:13:16.350", "speaker": "Alexander Vasserman", "text": "how many of you have seen Jason before"}, {"source_name": "lecture5", "index": 654, "time": "01:13:19.340 --> 01:13:21.160", "speaker": "Alexander Vasserman", "text": "or from me? There was Jason."}, {"source_name": "lecture5", "index": 655, "time": "01:13:24.580 --> 01:13:30.469", "speaker": "Alexander Vasserman", "text": "Okay, all right. So not too many, which is good."}, {"source_name": "lecture5", "index": 656, "time": "01:13:31.450 --> 01:13:41.100", "speaker": "Alexander Vasserman", "text": "So it's basically a language depend on the data representation, meaning that they you, you could be"}, {"source_name": "lecture5", "index": 657, "time": "01:13:41.650 --> 01:13:57.159", "speaker": "Alexander Vasserman", "text": "coding in any language whatsoever. But you want to represent and store your data in the same format independently Where? What language you're using. It's"}, {"source_name": "lecture5", "index": 658, "time": "01:13:57.240 --> 01:14:08.779", "speaker": "Alexander Vasserman", "text": "a that's based representation. So you know, unlike some other representations where it might be binary format that's hard to read."}, {"source_name": "lecture5", "index": 659, "time": "01:14:08.850 --> 01:14:21.959", "speaker": "Alexander Vasserman", "text": "The Json representation is something that you can read. Well as a human, basically it's humiliable, I should say."}, {"source_name": "lecture5", "index": 660, "time": "01:14:23.330 --> 01:14:25.650", "speaker": "Alexander Vasserman", "text": "So let me"}, {"source_name": "lecture5", "index": 661, "time": "01:14:25.890 --> 01:14:27.400", "speaker": "Alexander Vasserman", "text": "actually"}, {"source_name": "lecture5", "index": 662, "time": "01:14:30.940 --> 01:14:31.960", "speaker": "Alexander Vasserman", "text": "give"}, {"source_name": "lecture5", "index": 663, "time": "01:14:34.020 --> 01:14:34.850", "speaker": "Alexander Vasserman", "text": "and then"}, {"source_name": "lecture5", "index": 664, "time": "01:14:35.350 --> 01:14:37.250", "speaker": "Alexander Vasserman", "text": "example. So"}, {"source_name": "lecture5", "index": 665, "time": "01:14:38.710 --> 01:14:39.740", "speaker": "Alexander Vasserman", "text": "in the"}, {"source_name": "lecture5", "index": 666, "time": "01:14:41.320 --> 01:14:42.420", "speaker": "Alexander Vasserman", "text": "again"}, {"source_name": "lecture5", "index": 667, "time": "01:14:44.170 --> 01:14:49.420", "speaker": "Alexander Vasserman", "text": "on the clubs home I've posted"}, {"source_name": "lecture5", "index": 668, "time": "01:14:49.570 --> 01:14:51.690", "speaker": "Alexander Vasserman", "text": "this file."}, {"source_name": "lecture5", "index": 669, "time": "01:14:53.530 --> 01:14:55.979", "speaker": "Alexander Vasserman", "text": "we you can"}, {"source_name": "lecture5", "index": 670, "time": "01:14:56.400 --> 01:14:57.840", "speaker": "Alexander Vasserman", "text": "download."}, {"source_name": "lecture5", "index": 671, "time": "01:15:08.020 --> 01:15:13.119", "speaker": "Alexander Vasserman", "text": "I I already have it downloaded, but you can download it from here."}, {"source_name": "lecture5", "index": 672, "time": "01:15:13.240 --> 01:15:14.849", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture5", "index": 673, "time": "01:15:16.170 --> 01:15:18.020", "speaker": "Alexander Vasserman", "text": "that's"}, {"source_name": "lecture5", "index": 674, "time": "01:15:18.370 --> 01:15:19.469", "speaker": "Alexander Vasserman", "text": "open it up"}, {"source_name": "lecture5", "index": 675, "time": "01:15:19.850 --> 01:15:21.309", "speaker": "Alexander Vasserman", "text": "and take a look at it."}, {"source_name": "lecture5", "index": 676, "time": "01:15:23.690 --> 01:15:24.950", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture5", "index": 677, "time": "01:15:35.830 --> 01:15:37.160", "speaker": "Alexander Vasserman", "text": "sorry just a second."}, {"source_name": "lecture5", "index": 678, "time": "01:16:22.860 --> 01:16:25.380", "speaker": "Alexander Vasserman", "text": "So this is kind of a"}, {"source_name": "lecture5", "index": 679, "time": "01:16:28.280 --> 01:16:30.580", "speaker": "Alexander Vasserman", "text": "like an example of a"}, {"source_name": "lecture5", "index": 680, "time": "01:16:30.760 --> 01:16:32.229", "speaker": "Alexander Vasserman", "text": "A. Json file."}, {"source_name": "lecture5", "index": 681, "time": "01:16:32.960 --> 01:16:37.269", "speaker": "Alexander Vasserman", "text": "So it looks very much like"}, {"source_name": "lecture5", "index": 682, "time": "01:16:37.340 --> 01:16:39.450", "speaker": "Alexander Vasserman", "text": "python data structures."}, {"source_name": "lecture5", "index": 683, "time": "01:16:39.550 --> 01:16:45.209", "speaker": "Alexander Vasserman", "text": "So at the in this particular case. At the very top we have a list"}, {"source_name": "lecture5", "index": 684, "time": "01:16:45.490 --> 01:16:47.119", "speaker": "Alexander Vasserman", "text": "of"}, {"source_name": "lecture5", "index": 685, "time": "01:16:47.160 --> 01:16:54.730", "speaker": "Alexander Vasserman", "text": "different things, and the things inside the list are actually dictionaries."}, {"source_name": "lecture5", "index": 686, "time": "01:16:54.990 --> 01:16:56.440", "speaker": "Alexander Vasserman", "text": "So."}, {"source_name": "lecture5", "index": 687, "time": "01:16:56.640 --> 01:17:02.069", "speaker": "Alexander Vasserman", "text": "again, kind of very familiar syntax, where the"}, {"source_name": "lecture5", "index": 688, "time": "01:17:02.100 --> 01:17:03.980", "speaker": "Alexander Vasserman", "text": "piece of the dictionary."}, {"source_name": "lecture5", "index": 689, "time": "01:17:04.170 --> 01:17:05.389", "speaker": "Alexander Vasserman", "text": "our"}, {"source_name": "lecture5", "index": 690, "time": "01:17:07.080 --> 01:17:11.850", "speaker": "Alexander Vasserman", "text": "all names of the fields, essentially and the values are the values."}, {"source_name": "lecture5", "index": 691, "time": "01:17:11.920 --> 01:17:21.400", "speaker": "Alexander Vasserman", "text": "So here is in in this file. We have just a few articles from Wikipedia in"}, {"source_name": "lecture5", "index": 692, "time": "01:17:21.730 --> 01:17:28.779", "speaker": "Alexander Vasserman", "text": "select that. No, in the property for no particular reason, I think they're all"}, {"source_name": "lecture5", "index": 693, "time": "01:17:30.290 --> 01:17:36.749", "speaker": "Alexander Vasserman", "text": "but basically what you can see is that you can store multiple."}, {"source_name": "lecture5", "index": 694, "time": "01:17:36.840 --> 01:17:37.670", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture5", "index": 695, "time": "01:17:38.960 --> 01:17:40.330", "speaker": "Alexander Vasserman", "text": "our tributes"}, {"source_name": "lecture5", "index": 696, "time": "01:17:41.440 --> 01:17:42.500", "speaker": "Alexander Vasserman", "text": "for"}, {"source_name": "lecture5", "index": 697, "time": "01:17:43.140 --> 01:17:44.710", "speaker": "Alexander Vasserman", "text": "each document."}, {"source_name": "lecture5", "index": 698, "time": "01:17:44.930 --> 01:18:00.480", "speaker": "Alexander Vasserman", "text": "So here we will have documents, and like there is an Id that we can associate with the document and the your Wikipedia URL the title, the text, which is cut a little bit, and"}, {"source_name": "lecture5", "index": 699, "time": "01:18:00.970 --> 01:18:05.019", "speaker": "Alexander Vasserman", "text": "also it turns out we haven't"}, {"source_name": "lecture5", "index": 700, "time": "01:18:05.040 --> 01:18:17.489", "speaker": "Alexander Vasserman", "text": "used before. But basically it's similar to terms, or again, kind of words. And so here we have that as a at least as well."}, {"source_name": "lecture5", "index": 701, "time": "01:18:17.900 --> 01:18:19.860", "speaker": "Alexander Vasserman", "text": "So basically"}, {"source_name": "lecture5", "index": 702, "time": "01:18:20.470 --> 01:18:22.649", "speaker": "Alexander Vasserman", "text": "what we have is"}, {"source_name": "lecture5", "index": 703, "time": "01:18:22.730 --> 01:18:23.930", "speaker": "Alexander Vasserman", "text": "it is a"}, {"source_name": "lecture5", "index": 704, "time": "01:18:23.950 --> 01:18:26.099", "speaker": "Alexander Vasserman", "text": "representation that"}, {"source_name": "lecture5", "index": 705, "time": "01:18:26.250 --> 01:18:34.700", "speaker": "Alexander Vasserman", "text": "Oh, is it's originally from Javascript, but looks very much like a python data structure, and it"}, {"source_name": "lecture5", "index": 706, "time": "01:18:34.730 --> 01:18:39.099", "speaker": "Alexander Vasserman", "text": "or can have lists and dictionaries, and"}, {"source_name": "lecture5", "index": 707, "time": "01:18:39.320 --> 01:18:42.769", "speaker": "Alexander Vasserman", "text": "Constance, or as a values."}, {"source_name": "lecture5", "index": 708, "time": "01:18:42.970 --> 01:18:45.910", "speaker": "Alexander Vasserman", "text": "all the keys in the dictionary"}, {"source_name": "lecture5", "index": 709, "time": "01:18:46.220 --> 01:18:50.889", "speaker": "Alexander Vasserman", "text": "are always strings. So these are kind of teams of the fields."}, {"source_name": "lecture5", "index": 710, "time": "01:18:51.360 --> 01:18:54.420", "speaker": "Alexander Vasserman", "text": "Does that make sense to people"}, {"source_name": "lecture5", "index": 711, "time": "01:18:54.730 --> 01:18:56.370", "speaker": "Alexander Vasserman", "text": "any questions."}, {"source_name": "lecture5", "index": 712, "time": "01:19:07.690 --> 01:19:09.450", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture5", "index": 713, "time": "01:19:09.510 --> 01:19:10.510", "speaker": "Alexander Vasserman", "text": "okay."}, {"source_name": "lecture5", "index": 714, "time": "01:19:11.510 --> 01:19:15.789", "speaker": "Alexander Vasserman", "text": "So either I lost all of you, or this is kind of all. Table."}, {"source_name": "lecture5", "index": 715, "time": "01:19:25.320 --> 01:19:35.359", "speaker": "Alexander Vasserman", "text": "Raise your hand if you feel like this is kind of 3 will. And of this and you know, kind of you understand this"}, {"source_name": "lecture5", "index": 716, "time": "01:19:35.570 --> 01:19:38.349", "speaker": "Alexander Vasserman", "text": "format of studying data."}, {"source_name": "lecture5", "index": 717, "time": "01:19:44.880 --> 01:19:45.880", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture5", "index": 718, "time": "01:19:52.800 --> 01:19:58.539", "speaker": "Alexander Vasserman", "text": "all right. So some of you. Certainly not everyone. But"}, {"source_name": "lecture5", "index": 719, "time": "01:19:59.660 --> 01:20:08.150", "speaker": "Alexander Vasserman", "text": "all right. Well, so let's look at how we can work with this data in python."}, {"source_name": "lecture5", "index": 720, "time": "01:20:08.640 --> 01:20:10.130", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture5", "index": 721, "time": "01:20:11.110 --> 01:20:13.959", "speaker": "Alexander Vasserman", "text": "so in Python we have a"}, {"source_name": "lecture5", "index": 722, "time": "01:20:14.320 --> 01:20:19.520", "speaker": "Alexander Vasserman", "text": "library that's called Json that we can import."}, {"source_name": "lecture5", "index": 723, "time": "01:20:19.640 --> 01:20:21.389", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture5", "index": 724, "time": "01:20:21.580 --> 01:20:24.160", "speaker": "Alexander Vasserman", "text": "if we have a"}, {"source_name": "lecture5", "index": 725, "time": "01:20:24.250 --> 01:20:25.639", "speaker": "Alexander Vasserman", "text": "a file"}, {"source_name": "lecture5", "index": 726, "time": "01:20:25.750 --> 01:20:33.560", "speaker": "Alexander Vasserman", "text": "we can just read that file using that library, so we can say."}, {"source_name": "lecture5", "index": 727, "time": "01:20:37.930 --> 01:20:38.620", "speaker": "Alexander Vasserman", "text": "Well."}, {"source_name": "lecture5", "index": 728, "time": "01:20:39.980 --> 01:20:44.209", "speaker": "Alexander Vasserman", "text": "first let's. We need to open the file. I guess so."}, {"source_name": "lecture5", "index": 729, "time": "01:20:44.320 --> 01:20:45.200", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture5", "index": 730, "time": "01:21:03.780 --> 01:21:06.720", "speaker": "Alexander Vasserman", "text": "hopefully, this is"}, {"source_name": "lecture5", "index": 731, "time": "01:21:08.140 --> 01:21:09.250", "speaker": "Alexander Vasserman", "text": "familiar"}, {"source_name": "lecture5", "index": 732, "time": "01:21:09.430 --> 01:21:10.629", "speaker": "Alexander Vasserman", "text": "to most of you."}, {"source_name": "lecture5", "index": 733, "time": "01:21:13.310 --> 01:21:19.289", "speaker": "Alexander Vasserman", "text": "Edward and Fahad. Do you have questions, or this is still"}, {"source_name": "lecture5", "index": 734, "time": "01:21:19.680 --> 01:21:21.440", "speaker": "Alexander Vasserman", "text": "from okay."}, {"source_name": "lecture5", "index": 735, "time": "01:21:21.530 --> 01:21:24.150", "speaker": "Alexander Vasserman", "text": "Yeah. So hopefully they did."}, {"source_name": "lecture5", "index": 736, "time": "01:21:24.590 --> 01:21:31.440", "speaker": "Alexander Vasserman", "text": "Working with files is familiar to you from before. This is just"}, {"source_name": "lecture5", "index": 737, "time": "01:21:31.510 --> 01:21:39.839", "speaker": "Alexander Vasserman", "text": "opening this file for reading, and one thing to"}, {"source_name": "lecture5", "index": 738, "time": "01:21:39.870 --> 01:21:53.089", "speaker": "Alexander Vasserman", "text": "notice, and sometimes easy to forget is this are before the stream. The reason for it is the backslashes Python is trying to interpret those."}, {"source_name": "lecture5", "index": 739, "time": "01:21:53.100 --> 01:22:01.519", "speaker": "Alexander Vasserman", "text": "And so, if you're working on windows without this, are it's going to try to interpret"}, {"source_name": "lecture5", "index": 740, "time": "01:22:01.800 --> 01:22:07.309", "speaker": "Alexander Vasserman", "text": "the backslash characters and special characters. And that's not what we want."}, {"source_name": "lecture5", "index": 741, "time": "01:22:11.470 --> 01:22:13.210", "speaker": "Alexander Vasserman", "text": "So actually."}, {"source_name": "lecture5", "index": 742, "time": "01:22:13.380 --> 01:22:14.469", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture5", "index": 743, "time": "01:22:14.640 --> 01:22:18.679", "speaker": "Alexander Vasserman", "text": "where I'm going to open this file is slightly different."}, {"source_name": "lecture5", "index": 744, "time": "01:22:18.750 --> 01:22:22.109", "speaker": "Alexander Vasserman", "text": "What i'm going to say is."}, {"source_name": "lecture5", "index": 745, "time": "01:22:33.390 --> 01:22:48.299", "speaker": "Alexander Vasserman", "text": "and I don't know if you've seen this syntax before. So this syntax basically is just a more convenient way to open a file, so that it is, it can be automatically closed."}, {"source_name": "lecture5", "index": 746, "time": "01:22:48.550 --> 01:23:01.179", "speaker": "Alexander Vasserman", "text": "Otherwise we would have to remember to close the file, or even if there is some kind of error, etc. So this is kind of the the syntax that we're going to be using. But"}, {"source_name": "lecture5", "index": 747, "time": "01:23:01.290 --> 01:23:05.500", "speaker": "Alexander Vasserman", "text": "the main point that I wanted to to"}, {"source_name": "lecture5", "index": 748, "time": "01:23:06.860 --> 01:23:08.679", "speaker": "Alexander Vasserman", "text": "make is that"}, {"source_name": "lecture5", "index": 749, "time": "01:23:08.820 --> 01:23:09.870", "speaker": "Alexander Vasserman", "text": "we have"}, {"source_name": "lecture5", "index": 750, "time": "01:23:09.940 --> 01:23:11.050", "speaker": "Alexander Vasserman", "text": "this"}, {"source_name": "lecture5", "index": 751, "time": "01:23:12.330 --> 01:23:15.900", "speaker": "Alexander Vasserman", "text": "Jason load function that"}, {"source_name": "lecture5", "index": 752, "time": "01:23:15.970 --> 01:23:18.960", "speaker": "Alexander Vasserman", "text": "we can give this file pointer."}, {"source_name": "lecture5", "index": 753, "time": "01:23:19.240 --> 01:23:20.740", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture5", "index": 754, "time": "01:23:20.850 --> 01:23:21.889", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture5", "index": 755, "time": "01:23:22.140 --> 01:23:28.510", "speaker": "Alexander Vasserman", "text": "Oh, it makes it basically loads this data in structured format"}, {"source_name": "lecture5", "index": 756, "time": "01:23:28.710 --> 01:23:30.190", "speaker": "Alexander Vasserman", "text": "into python."}, {"source_name": "lecture5", "index": 757, "time": "01:23:30.400 --> 01:23:31.500", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture5", "index": 758, "time": "01:23:36.240 --> 01:23:37.309", "speaker": "Alexander Vasserman", "text": "sorry if"}, {"source_name": "lecture5", "index": 759, "time": "01:23:37.560 --> 01:23:38.320", "speaker": "Alexander Vasserman", "text": "Yeah."}, {"source_name": "lecture5", "index": 760, "time": "01:23:39.030 --> 01:23:40.410", "speaker": "Alexander Vasserman", "text": "Oh, sorry"}, {"source_name": "lecture5", "index": 761, "time": "01:23:41.030 --> 01:23:44.780", "speaker": "Alexander Vasserman", "text": "if we ask what is the type of the data. It's the least."}, {"source_name": "lecture5", "index": 762, "time": "01:23:45.300 --> 01:23:46.440", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture5", "index": 763, "time": "01:23:47.300 --> 01:23:48.309", "speaker": "Alexander Vasserman", "text": "V. 10"}, {"source_name": "lecture5", "index": 764, "time": "01:23:49.050 --> 01:23:50.160", "speaker": "Alexander Vasserman", "text": "say."}, {"source_name": "lecture5", "index": 765, "time": "01:23:51.640 --> 01:23:52.400", "speaker": "Alexander Vasserman", "text": "well"}, {"source_name": "lecture5", "index": 766, "time": "01:23:57.300 --> 01:24:00.989", "speaker": "Alexander Vasserman", "text": "do all kinds of provisions. So it's has"}, {"source_name": "lecture5", "index": 767, "time": "01:24:01.020 --> 01:24:03.720", "speaker": "Alexander Vasserman", "text": "10 elements in it. And"}, {"source_name": "lecture5", "index": 768, "time": "01:24:05.840 --> 01:24:08.160", "speaker": "Alexander Vasserman", "text": "so data of"}, {"source_name": "lecture5", "index": 769, "time": "01:24:08.490 --> 01:24:12.410", "speaker": "Alexander Vasserman", "text": "in the first position is exactly the"}, {"source_name": "lecture5", "index": 770, "time": "01:24:12.430 --> 01:24:13.969", "speaker": "Alexander Vasserman", "text": "dictionary that"}, {"source_name": "lecture5", "index": 771, "time": "01:24:14.150 --> 01:24:23.060", "speaker": "Alexander Vasserman", "text": "if you can see if we had seen and so like, you know, kind of looks exactly like like a dictionary, so we can say."}, {"source_name": "lecture5", "index": 772, "time": "01:24:26.590 --> 01:24:28.410", "speaker": "Alexander Vasserman", "text": "these are the keys."}, {"source_name": "lecture5", "index": 773, "time": "01:24:31.190 --> 01:24:32.790", "speaker": "Alexander Vasserman", "text": "and we can also get"}, {"source_name": "lecture5", "index": 774, "time": "01:24:33.750 --> 01:24:36.210", "speaker": "Alexander Vasserman", "text": "particular field"}, {"source_name": "lecture5", "index": 775, "time": "01:24:36.460 --> 01:24:37.870", "speaker": "Alexander Vasserman", "text": "like, let's say"}, {"source_name": "lecture5", "index": 776, "time": "01:24:39.310 --> 01:24:40.990", "speaker": "Alexander Vasserman", "text": "title."}, {"source_name": "lecture5", "index": 777, "time": "01:24:41.500 --> 01:24:42.230", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture5", "index": 778, "time": "01:24:45.420 --> 01:24:47.810", "speaker": "Alexander Vasserman", "text": "hopefully, this is"}, {"source_name": "lecture5", "index": 779, "time": "01:24:48.020 --> 01:24:51.490", "speaker": "Alexander Vasserman", "text": "very straightforward and clear."}, {"source_name": "lecture5", "index": 780, "time": "01:24:52.600 --> 01:24:54.989", "speaker": "Alexander Vasserman", "text": "Do you guys have any questions?"}, {"source_name": "lecture5", "index": 781, "time": "01:25:03.750 --> 01:25:05.280", "speaker": "Alexander Vasserman", "text": "Yes, Ralph."}, {"source_name": "lecture5", "index": 782, "time": "01:25:06.340 --> 01:25:09.489", "speaker": "Rafal \"Ralph\" Jasielec", "text": "So it says that the length of the data is 10,"}, {"source_name": "lecture5", "index": 783, "time": "01:25:11.290 --> 01:25:15.100", "speaker": "Rafal \"Ralph\" Jasielec", "text": "that 10 elements, or is that 10 lines."}, {"source_name": "lecture5", "index": 784, "time": "01:25:15.260 --> 01:25:28.679", "speaker": "Alexander Vasserman", "text": "Well, so it's not lines, because you know it doesn't care about the Alliance spacing, but it's 10 different dictionaries. Essentially so if you kind of"}, {"source_name": "lecture5", "index": 785, "time": "01:25:28.700 --> 01:25:29.790", "speaker": "Alexander Vasserman", "text": "lucid"}, {"source_name": "lecture5", "index": 786, "time": "01:25:29.830 --> 01:25:33.559", "speaker": "Alexander Vasserman", "text": "this file in this collapsed format."}, {"source_name": "lecture5", "index": 787, "time": "01:25:33.940 --> 01:25:38.439", "speaker": "Alexander Vasserman", "text": "It's 10 documents. Each one is a a dictionary"}, {"source_name": "lecture5", "index": 788, "time": "01:25:40.190 --> 01:25:42.629", "speaker": "Alexander Vasserman", "text": "just like you look at the first one."}, {"source_name": "lecture5", "index": 789, "time": "01:25:42.730 --> 01:25:44.660", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture5", "index": 790, "time": "01:25:45.030 --> 01:25:52.569", "speaker": "Alexander Vasserman", "text": "it just a normal Python list like a Python list would look like they've seen element of the list"}, {"source_name": "lecture5", "index": 791, "time": "01:25:52.770 --> 01:25:58.680", "speaker": "Alexander Vasserman", "text": "being different things in this particular case elements of the list are dictionaries."}, {"source_name": "lecture5", "index": 792, "time": "01:25:59.900 --> 01:26:19.629", "speaker": "Alexander Vasserman", "text": "This is not, strictly speaking, necessary for Python for Json. Sometimes you represent a a kind of just a single object in the whole file, or just so. You don't have a list. You may be. Maybe the dictionary is the top level, but that's usually the"}, {"source_name": "lecture5", "index": 793, "time": "01:26:19.640 --> 01:26:23.740", "speaker": "Alexander Vasserman", "text": "2 kind of types of the files that"}, {"source_name": "lecture5", "index": 794, "time": "01:26:23.970 --> 01:26:24.780", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture5", "index": 795, "time": "01:26:25.720 --> 01:26:29.340", "speaker": "Alexander Vasserman", "text": "well or 2 types of Json structures that you'll see."}, {"source_name": "lecture5", "index": 796, "time": "01:26:31.190 --> 01:26:34.110", "speaker": "Rafal \"Ralph\" Jasielec", "text": "So is Json specifically"}, {"source_name": "lecture5", "index": 797, "time": "01:26:34.340 --> 01:26:36.409", "speaker": "Rafal \"Ralph\" Jasielec", "text": "acting as sort of zip file"}, {"source_name": "lecture5", "index": 798, "time": "01:26:36.580 --> 01:26:43.799", "speaker": "Rafal \"Ralph\" Jasielec", "text": "that allows you to put multiple elements in this case dictionaries, or would you be able to do this with the"}, {"source_name": "lecture5", "index": 799, "time": "01:26:45.070 --> 01:26:47.039", "speaker": "Rafal \"Ralph\" Jasielec", "text": "python file?"}, {"source_name": "lecture5", "index": 800, "time": "01:26:47.440 --> 01:26:49.969", "speaker": "Alexander Vasserman", "text": "Well, so this is a text file"}, {"source_name": "lecture5", "index": 801, "time": "01:26:50.020 --> 01:26:53.670", "speaker": "Alexander Vasserman", "text": "right? So it's, you know"}, {"source_name": "lecture5", "index": 802, "time": "01:26:53.880 --> 01:26:56.490", "speaker": "Alexander Vasserman", "text": "it's so, you know, just."}, {"source_name": "lecture5", "index": 803, "time": "01:26:56.750 --> 01:27:13.730", "speaker": "Alexander Vasserman", "text": "but it not so. It's not a zip file in the sense that Zip file would be binary that you need a specific program to open up right here. This is just text, and, like my editor, helps me navigate this text. But really, you know, it's just"}, {"source_name": "lecture5", "index": 804, "time": "01:27:14.470 --> 01:27:16.280", "speaker": "Alexander Vasserman", "text": "a text file."}, {"source_name": "lecture5", "index": 805, "time": "01:27:16.470 --> 01:27:26.260", "speaker": "Alexander Vasserman", "text": "The thing about Jason is basically it allows me to store multiple structured"}, {"source_name": "lecture5", "index": 806, "time": "01:27:26.570 --> 01:27:34.540", "speaker": "Alexander Vasserman", "text": "well multiple structures in some sense, into the same file. Right so here we have multiple dot."}, {"source_name": "lecture5", "index": 807, "time": "01:27:34.670 --> 01:27:50.100", "speaker": "Alexander Vasserman", "text": "So we have 10 documents, and for each document we actually wanted to store different attributes like title like URL. And that's what Json is convenient for right. So by zoom"}, {"source_name": "lecture5", "index": 808, "time": "01:27:50.110 --> 01:27:56.059", "speaker": "Alexander Vasserman", "text": "for each object we have these different attributes, and we can have multiple objects in this list."}, {"source_name": "lecture5", "index": 809, "time": "01:27:56.180 --> 01:28:11.959", "speaker": "Alexander Vasserman", "text": "and the structure of the objects can be arbitrarily complex. So, for example, you can see that one of the attributes is itself at least right."}, {"source_name": "lecture5", "index": 810, "time": "01:28:12.080 --> 01:28:18.890", "speaker": "Alexander Vasserman", "text": "So in on the python side. What it means is that the value"}, {"source_name": "lecture5", "index": 811, "time": "01:28:21.030 --> 01:28:23.899", "speaker": "Alexander Vasserman", "text": "for this key in the dictionary is, it is"}, {"source_name": "lecture5", "index": 812, "time": "01:28:24.520 --> 01:28:25.389", "speaker": "Alexander Vasserman", "text": "itself"}, {"source_name": "lecture5", "index": 813, "time": "01:28:26.620 --> 01:28:27.620", "speaker": "Alexander Vasserman", "text": "makes sense."}, {"source_name": "lecture5", "index": 814, "time": "01:28:28.930 --> 01:28:29.780", "speaker": "Alexander Vasserman", "text": "All right."}, {"source_name": "lecture5", "index": 815, "time": "01:28:30.860 --> 01:28:31.700", "speaker": "Alexander Vasserman", "text": "Hi. Everyone."}, {"source_name": "lecture5", "index": 816, "time": "01:28:32.190 --> 01:28:47.740", "speaker": "Aimun Anwer", "text": "Yeah. So to clarify quickly. So we're gonna be using this, like Json files basically to test our search engine with using that, I'm: assuming using the list you just brought up. That's within the"}, {"source_name": "lecture5", "index": 817, "time": "01:28:47.810 --> 01:28:48.849", "speaker": "Aimun Anwer", "text": "the dictionary."}, {"source_name": "lecture5", "index": 818, "time": "01:28:50.950 --> 01:29:07.619", "speaker": "Alexander Vasserman", "text": "Yes, that's that's exactly right. So basically, this is just the an example kind of set of documents that we can use for to test our search on you"}, {"source_name": "lecture5", "index": 819, "time": "01:29:07.750 --> 01:29:09.160", "speaker": "Alexander Vasserman", "text": "just."}, {"source_name": "lecture5", "index": 820, "time": "01:29:09.320 --> 01:29:11.159", "speaker": "Alexander Vasserman", "text": "and we'll"}, {"source_name": "lecture5", "index": 821, "time": "01:29:11.950 --> 01:29:14.510", "speaker": "Alexander Vasserman", "text": "play around with a few other"}, {"source_name": "lecture5", "index": 822, "time": "01:29:14.970 --> 01:29:18.180", "speaker": "Alexander Vasserman", "text": "examples during this course. But this is kind of a"}, {"source_name": "lecture5", "index": 823, "time": "01:29:18.200 --> 01:29:23.730", "speaker": "Alexander Vasserman", "text": "very simple, small kind of example that"}, {"source_name": "lecture5", "index": 824, "time": "01:29:23.880 --> 01:29:25.379", "speaker": "Alexander Vasserman", "text": "we can start this"}, {"source_name": "lecture5", "index": 825, "time": "01:29:30.290 --> 01:29:31.070", "speaker": "Alexander Vasserman", "text": "all right."}, {"source_name": "lecture5", "index": 826, "time": "01:29:35.620 --> 01:29:36.700", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture5", "index": 827, "time": "01:29:39.230 --> 01:29:40.260", "speaker": "Alexander Vasserman", "text": "by the"}, {"source_name": "lecture5", "index": 828, "time": "01:29:41.650 --> 01:29:42.410", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture5", "index": 829, "time": "01:29:43.010 --> 01:29:45.800", "speaker": "Alexander Vasserman", "text": "okay. So let's actually go back to this"}, {"source_name": "lecture5", "index": 830, "time": "01:29:45.900 --> 01:29:54.349", "speaker": "Alexander Vasserman", "text": "search implementation and let's define another function that's let's say"}, {"source_name": "lecture5", "index": 831, "time": "01:29:57.730 --> 01:30:00.129", "speaker": "Alexander Vasserman", "text": "just the kind of a"}, {"source_name": "lecture5", "index": 832, "time": "01:30:00.480 --> 01:30:08.809", "speaker": "Alexander Vasserman", "text": "utility function. And what I want to do is kind of have an interactive"}, {"source_name": "lecture5", "index": 833, "time": "01:30:09.810 --> 01:30:11.629", "speaker": "Alexander Vasserman", "text": "kind of"}, {"source_name": "lecture5", "index": 834, "time": "01:30:13.980 --> 01:30:14.820", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture5", "index": 835, "time": "01:30:14.870 --> 01:30:16.919", "speaker": "Alexander Vasserman", "text": "a search implementation."}, {"source_name": "lecture5", "index": 836, "time": "01:30:16.990 --> 01:30:18.280", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture5", "index": 837, "time": "01:30:18.460 --> 01:30:19.340", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture5", "index": 838, "time": "01:30:19.490 --> 01:30:20.850", "speaker": "Alexander Vasserman", "text": "we can"}, {"source_name": "lecture5", "index": 839, "time": "01:30:20.920 --> 01:30:23.480", "speaker": "Alexander Vasserman", "text": "essentially play around this. Is it?"}, {"source_name": "lecture5", "index": 840, "time": "01:30:23.680 --> 01:30:24.809", "speaker": "Alexander Vasserman", "text": "So?"}, {"source_name": "lecture5", "index": 841, "time": "01:30:25.510 --> 01:30:30.049", "speaker": "Alexander Vasserman", "text": "What we are going to have is"}, {"source_name": "lecture5", "index": 842, "time": "01:30:31.430 --> 01:30:32.410", "speaker": "Alexander Vasserman", "text": "we are"}, {"source_name": "lecture5", "index": 843, "time": "01:30:35.830 --> 01:30:37.570", "speaker": "Alexander Vasserman", "text": "going to"}, {"source_name": "lecture5", "index": 844, "time": "01:30:37.610 --> 01:30:40.000", "speaker": "Alexander Vasserman", "text": "use exactly that same code"}, {"source_name": "lecture5", "index": 845, "time": "01:30:40.610 --> 01:30:43.500", "speaker": "Alexander Vasserman", "text": "in there to to what the data."}, {"source_name": "lecture5", "index": 846, "time": "01:31:03.110 --> 01:31:04.469", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture5", "index": 847, "time": "01:31:07.300 --> 01:31:09.010", "speaker": "Alexander Vasserman", "text": "then"}, {"source_name": "lecture5", "index": 848, "time": "01:31:09.880 --> 01:31:12.640", "speaker": "Alexander Vasserman", "text": "what we can say is the"}, {"source_name": "lecture5", "index": 849, "time": "01:31:14.030 --> 01:31:17.630", "speaker": "Alexander Vasserman", "text": "let's start with documents"}, {"source_name": "lecture5", "index": 850, "time": "01:31:17.650 --> 01:31:20.049", "speaker": "Alexander Vasserman", "text": "being just the"}, {"source_name": "lecture5", "index": 851, "time": "01:31:30.000 --> 01:31:31.200", "speaker": "Alexander Vasserman", "text": "so."}, {"source_name": "lecture5", "index": 852, "time": "01:31:42.600 --> 01:31:46.430", "speaker": "Alexander Vasserman", "text": "Oh, hopefully, this syntax now is."}, {"source_name": "lecture5", "index": 853, "time": "01:31:46.580 --> 01:31:50.740", "speaker": "Alexander Vasserman", "text": "Some would familiar to you. So i'm using this comprehension"}, {"source_name": "lecture5", "index": 854, "time": "01:31:50.770 --> 01:31:56.750", "speaker": "Alexander Vasserman", "text": "to extract specific field for each of those"}, {"source_name": "lecture5", "index": 855, "time": "01:31:57.160 --> 01:32:02.790", "speaker": "Alexander Vasserman", "text": "records. So if you look back at their records, they text"}, {"source_name": "lecture5", "index": 856, "time": "01:32:02.960 --> 01:32:09.049", "speaker": "Alexander Vasserman", "text": "of the document is in this initial text field. So"}, {"source_name": "lecture5", "index": 857, "time": "01:32:09.340 --> 01:32:10.400", "speaker": "Alexander Vasserman", "text": "for"}, {"source_name": "lecture5", "index": 858, "time": "01:32:10.760 --> 01:32:11.719", "speaker": "Alexander Vasserman", "text": "each"}, {"source_name": "lecture5", "index": 859, "time": "01:32:12.310 --> 01:32:13.190", "speaker": "Alexander Vasserman", "text": "oh"}, {"source_name": "lecture5", "index": 860, "time": "01:32:13.890 --> 01:32:16.069", "speaker": "Alexander Vasserman", "text": "records in data."}, {"source_name": "lecture5", "index": 861, "time": "01:32:16.200 --> 01:32:17.459", "speaker": "Alexander Vasserman", "text": "let me actually"}, {"source_name": "lecture5", "index": 862, "time": "01:32:17.590 --> 01:32:18.920", "speaker": "Alexander Vasserman", "text": "call it record."}, {"source_name": "lecture5", "index": 863, "time": "01:32:28.600 --> 01:32:30.630", "speaker": "Alexander Vasserman", "text": "I want to just"}, {"source_name": "lecture5", "index": 864, "time": "01:32:30.830 --> 01:32:33.660", "speaker": "Alexander Vasserman", "text": "take the in your text"}, {"source_name": "lecture5", "index": 865, "time": "01:32:34.210 --> 01:32:38.460", "speaker": "Alexander Vasserman", "text": "from that record and create a list of of those."}, {"source_name": "lecture5", "index": 866, "time": "01:32:40.620 --> 01:32:44.500", "speaker": "Alexander Vasserman", "text": "any questions about this. So this is going to be the"}, {"source_name": "lecture5", "index": 867, "time": "01:32:44.530 --> 01:32:45.440", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture5", "index": 868, "time": "01:32:45.840 --> 01:32:47.499", "speaker": "Alexander Vasserman", "text": "a list of documents"}, {"source_name": "lecture5", "index": 869, "time": "01:32:47.610 --> 01:32:57.119", "speaker": "Alexander Vasserman", "text": "the same way that we've seen them before. So just list of of things rather than structured data like this in the Json."}, {"source_name": "lecture5", "index": 870, "time": "01:32:58.940 --> 01:33:00.180", "speaker": "Alexander Vasserman", "text": "Any questions there."}, {"source_name": "lecture5", "index": 871, "time": "01:33:03.120 --> 01:33:03.990", "speaker": "Alexander Vasserman", "text": "all right"}, {"source_name": "lecture5", "index": 872, "time": "01:33:07.720 --> 01:33:08.670", "speaker": "Alexander Vasserman", "text": "done."}, {"source_name": "lecture5", "index": 873, "time": "01:33:09.310 --> 01:33:10.779", "speaker": "Alexander Vasserman", "text": "Maybe I'll see."}, {"source_name": "lecture5", "index": 874, "time": "01:33:12.530 --> 01:33:13.860", "speaker": "Alexander Vasserman", "text": "I want to"}, {"source_name": "lecture5", "index": 875, "time": "01:33:14.720 --> 01:33:16.399", "speaker": "Alexander Vasserman", "text": "really just to read it"}, {"source_name": "lecture5", "index": 876, "time": "01:33:16.440 --> 01:33:19.110", "speaker": "Alexander Vasserman", "text": "from input to."}, {"source_name": "lecture5", "index": 877, "time": "01:33:24.600 --> 01:33:27.240", "speaker": "Alexander Vasserman", "text": "I'll have something like that."}, {"source_name": "lecture5", "index": 878, "time": "01:33:27.400 --> 01:33:28.950", "speaker": "Alexander Vasserman", "text": "And."}, {"source_name": "lecture5", "index": 879, "time": "01:33:31.420 --> 01:33:32.440", "speaker": "Alexander Vasserman", "text": "wow."}, {"source_name": "lecture5", "index": 880, "time": "01:33:34.740 --> 01:33:36.180", "speaker": "Alexander Vasserman", "text": "there is a query."}, {"source_name": "lecture5", "index": 881, "time": "01:33:36.440 --> 01:33:37.480", "speaker": "Alexander Vasserman", "text": "Let me"}, {"source_name": "lecture5", "index": 882, "time": "01:33:38.440 --> 01:33:40.440", "speaker": "Alexander Vasserman", "text": "just"}, {"source_name": "lecture5", "index": 883, "time": "01:33:42.360 --> 01:33:44.360", "speaker": "Alexander Vasserman", "text": "in the output"}, {"source_name": "lecture5", "index": 884, "time": "01:33:44.640 --> 01:33:45.920", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture5", "index": 885, "time": "01:33:45.940 --> 01:33:47.599", "speaker": "Alexander Vasserman", "text": "Sergey gives me."}, {"source_name": "lecture5", "index": 886, "time": "01:33:51.930 --> 01:33:53.000", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture5", "index": 887, "time": "01:34:13.520 --> 01:34:17.089", "speaker": "Alexander Vasserman", "text": "basically have some function like this"}, {"source_name": "lecture5", "index": 888, "time": "01:34:17.510 --> 01:34:18.469", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture5", "index": 889, "time": "01:34:19.460 --> 01:34:20.599", "speaker": "Alexander Vasserman", "text": "I can."}, {"source_name": "lecture5", "index": 890, "time": "01:34:20.690 --> 01:34:21.599", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture5", "index": 891, "time": "01:34:22.070 --> 01:34:23.059", "speaker": "Alexander Vasserman", "text": "from"}, {"source_name": "lecture5", "index": 892, "time": "01:34:23.670 --> 01:34:32.939", "speaker": "Alexander Vasserman", "text": "from the interpreter, or I can create a script. This, and just kind of an easy way to interact"}, {"source_name": "lecture5", "index": 893, "time": "01:34:32.990 --> 01:34:49.909", "speaker": "Alexander Vasserman", "text": "of this what we've created so far, where the documents are stored and red once I don't have to kind of redo them all the time, but I can submit different queries, etc., right? So if"}, {"source_name": "lecture5", "index": 894, "time": "01:34:52.200 --> 01:34:53.480", "speaker": "Alexander Vasserman", "text": "if I do."}, {"source_name": "lecture5", "index": 895, "time": "01:35:15.280 --> 01:35:17.099", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture5", "index": 896, "time": "01:35:17.400 --> 01:35:24.930", "speaker": "Alexander Vasserman", "text": "maybe there is something to work on. I think there is. There is a little bit of problems in coding. So."}, {"source_name": "lecture5", "index": 897, "time": "01:35:25.260 --> 01:35:35.849", "speaker": "Alexander Vasserman", "text": "anyways, that's kind of where we can restart this next time. But this kind of guys in things together a little bit more."}, {"source_name": "lecture5", "index": 898, "time": "01:35:35.970 --> 01:35:37.879", "speaker": "Alexander Vasserman", "text": "and so we can"}, {"source_name": "lecture5", "index": 899, "time": "01:35:37.960 --> 01:35:43.450", "speaker": "Alexander Vasserman", "text": "kind of have well, as much of an app as we're going to have"}, {"source_name": "lecture5", "index": 900, "time": "01:35:44.930 --> 01:35:49.819", "speaker": "Alexander Vasserman", "text": "the main thing that we are going to be changing."}, {"source_name": "lecture5", "index": 901, "time": "01:35:49.850 --> 01:35:54.059", "speaker": "Alexander Vasserman", "text": "So during this class is needed this search function."}, {"source_name": "lecture5", "index": 902, "time": "01:35:54.160 --> 01:35:59.349", "speaker": "Alexander Vasserman", "text": "and also how the documents are represented, but"}, {"source_name": "lecture5", "index": 903, "time": "01:35:59.590 --> 01:36:06.969", "speaker": "Alexander Vasserman", "text": "but otherwise essentially, that's going to be the input and output of the of our app"}, {"source_name": "lecture5", "index": 904, "time": "01:36:07.790 --> 01:36:10.330", "speaker": "Alexander Vasserman", "text": "Adverb: You have a question."}, {"source_name": "lecture5", "index": 905, "time": "01:36:11.130 --> 01:36:21.439", "speaker": "Edward Daugela", "text": "Yeah. I just wanted to ask about the structure of the data of the Json file. I know we were talking about. It was a typed list, but then it was also dictionaries."}, {"source_name": "lecture5", "index": 906, "time": "01:36:21.530 --> 01:36:31.820", "speaker": "Edward Daugela", "text": "Was it a list containing like multiple dictionaries. Or I didn't Really, that's exactly right, is each element just a dictionary of each document."}, {"source_name": "lecture5", "index": 907, "time": "01:36:32.080 --> 01:36:44.889", "speaker": "Alexander Vasserman", "text": "Yes, so it's a list containing multiple dictionaries and the keys in that dictionary are the these names of the fields. And so in particular, there is"}, {"source_name": "lecture5", "index": 908, "time": "01:36:45.000 --> 01:36:54.190", "speaker": "Alexander Vasserman", "text": "a one key that's in the text, and the volume for that he is the text of the document."}, {"source_name": "lecture5", "index": 909, "time": "01:36:54.320 --> 01:36:59.879", "speaker": "Edward Daugela", "text": "So when we're doing the like, the ranking or the relevance."}, {"source_name": "lecture5", "index": 910, "time": "01:36:59.950 --> 01:37:04.309", "speaker": "Edward Daugela", "text": "we're just looking at the split list of the tokens right like when we're comparing them."}, {"source_name": "lecture5", "index": 911, "time": "01:37:04.420 --> 01:37:11.389", "speaker": "Alexander Vasserman", "text": "Yes, basically that's that's what your would be. That's what we're doing, really right."}, {"source_name": "lecture5", "index": 912, "time": "01:37:11.410 --> 01:37:17.999", "speaker": "Alexander Vasserman", "text": "But the way we've been writing quote so far is the we take the the the stream"}, {"source_name": "lecture5", "index": 913, "time": "01:37:18.050 --> 01:37:30.029", "speaker": "Alexander Vasserman", "text": "rather than the list of tokens, and we split it every time. Right? It certainly would be a little bit more efficient and nicer to just all this."}, {"source_name": "lecture5", "index": 914, "time": "01:37:30.130 --> 01:37:42.370", "speaker": "Alexander Vasserman", "text": "Just take a list of tokens like this, and then we wouldn't have to do the split the way we have to do"}, {"source_name": "lecture5", "index": 915, "time": "01:37:42.520 --> 01:37:45.099", "speaker": "Alexander Vasserman", "text": "do it every time like we do here."}, {"source_name": "lecture5", "index": 916, "time": "01:37:46.500 --> 01:37:47.420", "speaker": "Edward Daugela", "text": "Okay, Thank you."}, {"source_name": "lecture5", "index": 917, "time": "01:37:47.790 --> 01:37:48.460", "speaker": "Alexander Vasserman", "text": "Yep."}, {"source_name": "lecture5", "index": 918, "time": "01:37:50.800 --> 01:38:00.139", "speaker": "Fahad Khan", "text": "It's not really a question. But I just wanna let you know that if you just import J. Json on the top of the thing, your function should run properly"}, {"source_name": "lecture5", "index": 919, "time": "01:38:00.760 --> 01:38:04.280", "speaker": "Fahad Khan", "text": "because mine's running properly. I just had to import. Json."}, {"source_name": "lecture5", "index": 920, "time": "01:38:04.870 --> 01:38:05.670", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture5", "index": 921, "time": "01:38:05.730 --> 01:38:13.169", "speaker": "Alexander Vasserman", "text": "interesting. Okay, yeah, thanks. That's kind of surprising. So. But I appreciate it. Yeah, thanks."}, {"source_name": "lecture5", "index": 922, "time": "01:38:15.110 --> 01:38:19.009", "speaker": "Alexander Vasserman", "text": "All right. Well, so that's that's all we've got for today."}, {"source_name": "lecture5", "index": 923, "time": "01:38:19.140 --> 01:38:32.379", "speaker": "Alexander Vasserman", "text": "I'm happy to stay on the call if you have any questions that you wanted to to in more personal setting. Remember, there are office hours tomorrow at 5."}, {"source_name": "lecture5", "index": 924, "time": "01:38:32.400 --> 01:38:33.779", "speaker": "Alexander Vasserman", "text": "If you have"}, {"source_name": "lecture5", "index": 925, "time": "01:38:33.820 --> 01:38:49.460", "speaker": "Alexander Vasserman", "text": "any questions about the material or the homework, or just want to combine chat, please drop in. There is a zoom link on the G 2 L on the calendar."}, {"source_name": "lecture5", "index": 926, "time": "01:38:49.530 --> 01:38:51.240", "speaker": "Alexander Vasserman", "text": "Yeah, and"}, {"source_name": "lecture5", "index": 927, "time": "01:38:51.660 --> 01:38:53.830", "speaker": "Alexander Vasserman", "text": "please make sure that you"}, {"source_name": "lecture5", "index": 928, "time": "01:38:54.120 --> 01:39:00.339", "speaker": "Alexander Vasserman", "text": "start doing your homework before the office hours, so that"}, {"source_name": "lecture5", "index": 929, "time": "01:39:00.380 --> 01:39:01.240", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture5", "index": 930, "time": "01:39:01.330 --> 01:39:03.989", "speaker": "Alexander Vasserman", "text": "you know, if you have questions."}, {"source_name": "lecture5", "index": 931, "time": "01:39:04.260 --> 01:39:07.370", "speaker": "Alexander Vasserman", "text": "and because you might."}, {"source_name": "lecture5", "index": 932, "time": "01:39:09.190 --> 01:39:10.889", "speaker": "Alexander Vasserman", "text": "All right."}, {"source_name": "lecture5", "index": 933, "time": "01:39:11.200 --> 01:39:15.720", "speaker": "Alexander Vasserman", "text": "That's that's it for today. Thank you very much."}, {"source_name": "lecture5", "index": 934, "time": "01:39:16.210 --> 01:39:19.139", "speaker": "Alexander Vasserman", "text": "or being in the class."}, {"source_name": "lecture5", "index": 935, "time": "01:39:19.940 --> 01:39:24.050", "speaker": "Alexander Vasserman", "text": "and i'll see you all later, unless."}, {"source_name": "lecture6", "index": 1, "time": "00:08:50.230 --> 00:08:52.809", "speaker": "Alexander Vasserman", "text": "All right. Good afternoon, everyone."}, {"source_name": "lecture6", "index": 2, "time": "00:08:53.930 --> 00:08:55.370", "speaker": "Alexander Vasserman", "text": "Let's just"}, {"source_name": "lecture6", "index": 3, "time": "00:08:55.540 --> 00:08:56.699", "speaker": "Alexander Vasserman", "text": "that, is it."}, {"source_name": "lecture6", "index": 4, "time": "00:08:58.340 --> 00:09:03.319", "speaker": "Alexander Vasserman", "text": "Today we are going to be digging into."}, {"source_name": "lecture6", "index": 5, "time": "00:09:03.630 --> 00:09:04.450", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture6", "index": 6, "time": "00:09:05.410 --> 00:09:11.469", "speaker": "Alexander Vasserman", "text": "more learning more about actual search engine, and like various components of the search engine"}, {"source_name": "lecture6", "index": 7, "time": "00:09:11.590 --> 00:09:13.020", "speaker": "Alexander Vasserman", "text": "last time"}, {"source_name": "lecture6", "index": 8, "time": "00:09:13.430 --> 00:09:19.530", "speaker": "Alexander Vasserman", "text": "we looked at the very naive implementation and kind of finished that"}, {"source_name": "lecture6", "index": 9, "time": "00:09:19.850 --> 00:09:20.710", "speaker": "Alexander Vasserman", "text": "off."}, {"source_name": "lecture6", "index": 10, "time": "00:09:20.830 --> 00:09:24.080", "speaker": "Alexander Vasserman", "text": "And so now we kind of all have"}, {"source_name": "lecture6", "index": 11, "time": "00:09:24.140 --> 00:09:26.949", "speaker": "Alexander Vasserman", "text": "that as an example. How we can"}, {"source_name": "lecture6", "index": 12, "time": "00:09:27.370 --> 00:09:28.330", "speaker": "Alexander Vasserman", "text": "look at"}, {"source_name": "lecture6", "index": 13, "time": "00:09:28.600 --> 00:09:29.890", "speaker": "Alexander Vasserman", "text": "how, how."}, {"source_name": "lecture6", "index": 14, "time": "00:09:30.130 --> 00:09:32.639", "speaker": "Alexander Vasserman", "text": "what are the main components of the search engine."}, {"source_name": "lecture6", "index": 15, "time": "00:09:33.040 --> 00:09:37.569", "speaker": "Alexander Vasserman", "text": "How they fit together have some idea of."}, {"source_name": "lecture6", "index": 16, "time": "00:09:37.720 --> 00:09:43.230", "speaker": "Alexander Vasserman", "text": "what they do, and how how we've done those things in our naive implementation."}, {"source_name": "lecture6", "index": 17, "time": "00:09:43.360 --> 00:09:45.460", "speaker": "Alexander Vasserman", "text": "But also where"}, {"source_name": "lecture6", "index": 18, "time": "00:09:45.620 --> 00:09:46.480", "speaker": "Alexander Vasserman", "text": "are"}, {"source_name": "lecture6", "index": 19, "time": "00:09:46.620 --> 00:09:50.029", "speaker": "Alexander Vasserman", "text": "we are going to go further in the class."}, {"source_name": "lecture6", "index": 20, "time": "00:09:54.450 --> 00:10:02.110", "speaker": "Alexander Vasserman", "text": "first, though. Do you guys have any questions about anything that we've covered in the previous classes?"}, {"source_name": "lecture6", "index": 21, "time": "00:10:02.590 --> 00:10:03.960", "speaker": "Alexander Vasserman", "text": "yes, around it."}, {"source_name": "lecture6", "index": 22, "time": "00:10:04.280 --> 00:10:19.010", "speaker": "Rana Hani", "text": "Yeah, Could you go over Number 6 on the homework? Because I'm just confused on what the test cases are supposed to be like. The wording is confusing a little."}, {"source_name": "lecture6", "index": 23, "time": "00:10:23.940 --> 00:10:24.910", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture6", "index": 24, "time": "00:10:26.320 --> 00:10:27.360", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture6", "index": 25, "time": "00:10:28.440 --> 00:10:29.789", "speaker": "Alexander Vasserman", "text": "so first of all."}, {"source_name": "lecture6", "index": 26, "time": "00:10:34.970 --> 00:10:35.960", "speaker": "Alexander Vasserman", "text": "you"}, {"source_name": "lecture6", "index": 27, "time": "00:10:36.420 --> 00:10:37.380", "speaker": "Alexander Vasserman", "text": "our"}, {"source_name": "lecture6", "index": 28, "time": "00:10:38.060 --> 00:10:39.720", "speaker": "Alexander Vasserman", "text": "expected to"}, {"source_name": "lecture6", "index": 29, "time": "00:10:41.350 --> 00:10:45.889", "speaker": "Alexander Vasserman", "text": "basically add test cases to this"}, {"source_name": "lecture6", "index": 30, "time": "00:10:46.150 --> 00:10:49.600", "speaker": "Alexander Vasserman", "text": "test matching. Oh, file that we've"}, {"source_name": "lecture6", "index": 31, "time": "00:10:49.820 --> 00:10:53.479", "speaker": "Alexander Vasserman", "text": "done before, and that's available in G 2 L:"}, {"source_name": "lecture6", "index": 32, "time": "00:10:54.010 --> 00:10:59.919", "speaker": "Alexander Vasserman", "text": "Right? So these are some of the use cases that are already"}, {"source_name": "lecture6", "index": 33, "time": "00:10:59.980 --> 00:11:06.229", "speaker": "Alexander Vasserman", "text": "basically implemented, and what you need is to"}, {"source_name": "lecture6", "index": 34, "time": "00:11:06.960 --> 00:11:09.410", "speaker": "Alexander Vasserman", "text": "complete"}, {"source_name": "lecture6", "index": 35, "time": "00:11:09.620 --> 00:11:11.789", "speaker": "Alexander Vasserman", "text": "all the different scenarios."}, {"source_name": "lecture6", "index": 36, "time": "00:11:14.250 --> 00:11:15.710", "speaker": "Alexander Vasserman", "text": "no!"}, {"source_name": "lecture6", "index": 37, "time": "00:11:17.340 --> 00:11:18.280", "speaker": "Alexander Vasserman", "text": "Pull up"}, {"source_name": "lecture6", "index": 38, "time": "00:11:18.370 --> 00:11:19.400", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture6", "index": 39, "time": "00:11:19.840 --> 00:11:21.170", "speaker": "Alexander Vasserman", "text": "a homework."}, {"source_name": "lecture6", "index": 40, "time": "00:11:21.350 --> 00:11:22.700", "speaker": "Alexander Vasserman", "text": "Give me just a second."}, {"source_name": "lecture6", "index": 41, "time": "00:11:22.770 --> 00:11:23.510", "speaker": "Alexander Vasserman", "text": "Sorry"}, {"source_name": "lecture6", "index": 42, "time": "00:11:48.840 --> 00:11:49.810", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture6", "index": 43, "time": "00:11:51.140 --> 00:11:52.610", "speaker": "Alexander Vasserman", "text": "for the homework."}, {"source_name": "lecture6", "index": 44, "time": "00:11:53.480 --> 00:11:54.390", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture6", "index": 45, "time": "00:11:54.690 --> 00:11:55.959", "speaker": "Alexander Vasserman", "text": "we go to"}, {"source_name": "lecture6", "index": 46, "time": "00:11:56.440 --> 00:11:57.780", "speaker": "Alexander Vasserman", "text": "Number 6."}, {"source_name": "lecture6", "index": 47, "time": "00:11:58.480 --> 00:11:59.840", "speaker": "Alexander Vasserman", "text": "Basically."}, {"source_name": "lecture6", "index": 48, "time": "00:12:00.480 --> 00:12:01.759", "speaker": "Alexander Vasserman", "text": "there is."}, {"source_name": "lecture6", "index": 49, "time": "00:12:02.800 --> 00:12:03.810", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture6", "index": 50, "time": "00:12:08.120 --> 00:12:11.260", "speaker": "Alexander Vasserman", "text": "we we have 3 functions that we want to"}, {"source_name": "lecture6", "index": 51, "time": "00:12:11.350 --> 00:12:14.679", "speaker": "Alexander Vasserman", "text": "test, right? So we have"}, {"source_name": "lecture6", "index": 52, "time": "00:12:14.780 --> 00:12:17.290", "speaker": "Alexander Vasserman", "text": "the search function."}, {"source_name": "lecture6", "index": 53, "time": "00:12:17.630 --> 00:12:19.580", "speaker": "Alexander Vasserman", "text": "We have 3 match."}, {"source_name": "lecture6", "index": 54, "time": "00:12:19.820 --> 00:12:23.089", "speaker": "Alexander Vasserman", "text": "and we have a bull intermatch."}, {"source_name": "lecture6", "index": 55, "time": "00:12:24.020 --> 00:12:37.169", "speaker": "Alexander Vasserman", "text": "Right? So these are the functions that we're going to be testing, and that's the ones that are going to appear inside the that. So here are the details that we're implement have implemented for the string match."}, {"source_name": "lecture6", "index": 56, "time": "00:12:37.180 --> 00:12:47.860", "speaker": "Alexander Vasserman", "text": "Here is one for search. So in general, the way the test would war would look like is, you have some kind of a assertion either equal or to, or false."}, {"source_name": "lecture6", "index": 57, "time": "00:12:48.870 --> 00:12:56.329", "speaker": "Alexander Vasserman", "text": "and if it's equal, what the expected expected return value is, and then the call"}, {"source_name": "lecture6", "index": 58, "time": "00:12:56.440 --> 00:12:59.500", "speaker": "Alexander Vasserman", "text": "to a particular function, this specific"}, {"source_name": "lecture6", "index": 59, "time": "00:12:59.980 --> 00:13:01.340", "speaker": "Alexander Vasserman", "text": "set of arguments."}, {"source_name": "lecture6", "index": 60, "time": "00:13:01.530 --> 00:13:13.439", "speaker": "Alexander Vasserman", "text": "and so the cases that are described in the homework assignment are essentially the cases describing what the arguments should be"}, {"source_name": "lecture6", "index": 61, "time": "00:13:13.850 --> 00:13:14.740", "speaker": "Alexander Vasserman", "text": "right."}, {"source_name": "lecture6", "index": 62, "time": "00:13:15.570 --> 00:13:16.700", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture6", "index": 63, "time": "00:13:17.370 --> 00:13:18.340", "speaker": "Alexander Vasserman", "text": "for"}, {"source_name": "lecture6", "index": 64, "time": "00:13:20.140 --> 00:13:21.680", "speaker": "Alexander Vasserman", "text": "the search."}, {"source_name": "lecture6", "index": 65, "time": "00:13:21.860 --> 00:13:23.280", "speaker": "Alexander Vasserman", "text": "what we want."}, {"source_name": "lecture6", "index": 66, "time": "00:13:23.490 --> 00:13:24.460", "speaker": "Alexander Vasserman", "text": "he's"}, {"source_name": "lecture6", "index": 67, "time": "00:13:24.930 --> 00:13:29.399", "speaker": "Alexander Vasserman", "text": "tasting this empty query, and"}, {"source_name": "lecture6", "index": 68, "time": "00:13:29.710 --> 00:13:35.189", "speaker": "Alexander Vasserman", "text": "the anti-document list. So that's the the 2 arguments right? That we have"}, {"source_name": "lecture6", "index": 69, "time": "00:13:35.430 --> 00:13:37.140", "speaker": "Alexander Vasserman", "text": "so what we?"}, {"source_name": "lecture6", "index": 70, "time": "00:13:37.210 --> 00:13:45.599", "speaker": "Alexander Vasserman", "text": "It's good to know essentially what's gonna happen if you pass in empty query, or if they the list of documents is is an empty list"}, {"source_name": "lecture6", "index": 71, "time": "00:13:48.270 --> 00:13:50.370", "speaker": "Alexander Vasserman", "text": "for a string match."}, {"source_name": "lecture6", "index": 72, "time": "00:13:54.550 --> 00:13:57.810", "speaker": "Alexander Vasserman", "text": "so this is a typo."}, {"source_name": "lecture6", "index": 73, "time": "00:13:58.750 --> 00:14:08.730", "speaker": "Alexander Vasserman", "text": "yeah. So you want to again Empty query. Empty document. It's not a document list that for the first thing match, because we have just"}, {"source_name": "lecture6", "index": 74, "time": "00:14:08.800 --> 00:14:12.930", "speaker": "Alexander Vasserman", "text": "the query and the document we we're dealing with a single document."}, {"source_name": "lecture6", "index": 75, "time": "00:14:14.450 --> 00:14:18.549", "speaker": "Alexander Vasserman", "text": "and then basically what you want is"}, {"source_name": "lecture6", "index": 76, "time": "00:14:18.630 --> 00:14:19.960", "speaker": "Alexander Vasserman", "text": "look"}, {"source_name": "lecture6", "index": 77, "time": "00:14:20.080 --> 00:14:20.920", "speaker": "Alexander Vasserman", "text": "at"}, {"source_name": "lecture6", "index": 78, "time": "00:14:21.130 --> 00:14:23.480", "speaker": "Alexander Vasserman", "text": "matching this multiple"}, {"source_name": "lecture6", "index": 79, "time": "00:14:25.800 --> 00:14:27.779", "speaker": "Alexander Vasserman", "text": "multiple horse integrated."}, {"source_name": "lecture6", "index": 80, "time": "00:14:27.890 --> 00:14:29.509", "speaker": "Alexander Vasserman", "text": "Oh, how that!"}, {"source_name": "lecture6", "index": 81, "time": "00:14:29.910 --> 00:14:30.820", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture6", "index": 82, "time": "00:14:31.150 --> 00:14:35.059", "speaker": "Alexander Vasserman", "text": "the depending on what you have, how that reflects!"}, {"source_name": "lecture6", "index": 83, "time": "00:14:35.120 --> 00:14:39.669", "speaker": "Alexander Vasserman", "text": "And and in the document, under what conditions it matches or doesn't match."}, {"source_name": "lecture6", "index": 84, "time": "00:14:44.220 --> 00:14:46.589", "speaker": "Alexander Vasserman", "text": "And in particular."}, {"source_name": "lecture6", "index": 85, "time": "00:14:46.780 --> 00:14:49.750", "speaker": "Alexander Vasserman", "text": "what we want to think about is the difference between"}, {"source_name": "lecture6", "index": 86, "time": "00:14:49.790 --> 00:14:53.089", "speaker": "Alexander Vasserman", "text": "the string match and bull in term match."}, {"source_name": "lecture6", "index": 87, "time": "00:14:53.360 --> 00:14:55.170", "speaker": "Alexander Vasserman", "text": "and under what"}, {"source_name": "lecture6", "index": 88, "time": "00:14:56.570 --> 00:15:00.780", "speaker": "Alexander Vasserman", "text": "create document pairs, they return different results."}, {"source_name": "lecture6", "index": 89, "time": "00:15:01.950 --> 00:15:04.290", "speaker": "Alexander Vasserman", "text": "so that's kind of the"}, {"source_name": "lecture6", "index": 90, "time": "00:15:04.750 --> 00:15:05.710", "speaker": "Alexander Vasserman", "text": "focus"}, {"source_name": "lecture6", "index": 91, "time": "00:15:06.360 --> 00:15:12.180", "speaker": "Alexander Vasserman", "text": "so the the list of tests here is kind of more of a"}, {"source_name": "lecture6", "index": 92, "time": "00:15:12.440 --> 00:15:26.449", "speaker": "Alexander Vasserman", "text": "guidelines. So exactly how you define tests can be one to one to this, or if you feel like you, you want to test out all those different use cases in a little bit differently."}, {"source_name": "lecture6", "index": 93, "time": "00:15:26.470 --> 00:15:28.020", "speaker": "Alexander Vasserman", "text": "you're you're welcome to."}, {"source_name": "lecture6", "index": 94, "time": "00:15:28.470 --> 00:15:31.499", "speaker": "Alexander Vasserman", "text": "and then for good and term match."}, {"source_name": "lecture6", "index": 95, "time": "00:15:31.610 --> 00:15:33.239", "speaker": "Alexander Vasserman", "text": "You probably want"}, {"source_name": "lecture6", "index": 96, "time": "00:15:33.610 --> 00:15:40.070", "speaker": "Alexander Vasserman", "text": "essentially all the same inputs or input pairs as you did for string match."}, {"source_name": "lecture6", "index": 97, "time": "00:15:40.150 --> 00:15:48.910", "speaker": "Alexander Vasserman", "text": "The expected output will be different. So exactly what happens under those conditions might be different."}, {"source_name": "lecture6", "index": 98, "time": "00:15:48.980 --> 00:15:50.330", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture6", "index": 99, "time": "00:15:51.030 --> 00:15:53.039", "speaker": "Alexander Vasserman", "text": "are heading those"}, {"source_name": "lecture6", "index": 100, "time": "00:15:53.660 --> 00:15:56.149", "speaker": "Alexander Vasserman", "text": "look at the same inputs"}, {"source_name": "lecture6", "index": 101, "time": "00:15:56.330 --> 00:16:00.480", "speaker": "Alexander Vasserman", "text": "kind of provides a good description of how they are different."}, {"source_name": "lecture6", "index": 102, "time": "00:16:00.560 --> 00:16:09.519", "speaker": "Alexander Vasserman", "text": "right? So if you remember, when we talked about unit tests, one of the functions of the unit test is kind of provide a good description of"}, {"source_name": "lecture6", "index": 103, "time": "00:16:09.540 --> 00:16:13.019", "speaker": "Alexander Vasserman", "text": "function of the functionality of the expected functionality"}, {"source_name": "lecture6", "index": 104, "time": "00:16:13.160 --> 00:16:14.840", "speaker": "Alexander Vasserman", "text": "of the"}, {"source_name": "lecture6", "index": 105, "time": "00:16:14.920 --> 00:16:17.319", "speaker": "Alexander Vasserman", "text": "functions they're testing."}, {"source_name": "lecture6", "index": 106, "time": "00:16:18.140 --> 00:16:19.660", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture6", "index": 107, "time": "00:16:19.830 --> 00:16:24.089", "speaker": "Alexander Vasserman", "text": "when they have 2 different matching functions, it's good"}, {"source_name": "lecture6", "index": 108, "time": "00:16:24.200 --> 00:16:26.420", "speaker": "Alexander Vasserman", "text": "to see what the differences are."}, {"source_name": "lecture6", "index": 109, "time": "00:16:27.010 --> 00:16:27.740", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture6", "index": 110, "time": "00:16:29.320 --> 00:16:34.310", "speaker": "Alexander Vasserman", "text": "does that make sense? Any other questions about homework? Sex"}, {"source_name": "lecture6", "index": 111, "time": "00:16:36.460 --> 00:16:41.349", "speaker": "Amirali DJalilvand", "text": "for homework? 6. Is it supposed to be 17 test cases in total?"}, {"source_name": "lecture6", "index": 112, "time": "00:16:41.930 --> 00:16:42.830", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture6", "index": 113, "time": "00:16:43.160 --> 00:16:44.210", "speaker": "Alexander Vasserman", "text": "maybe"}, {"source_name": "lecture6", "index": 114, "time": "00:16:44.250 --> 00:16:45.649", "speaker": "Alexander Vasserman", "text": "Yeah,"}, {"source_name": "lecture6", "index": 115, "time": "00:16:50.320 --> 00:17:02.579", "speaker": "Alexander Vasserman", "text": "yeah, I might have added a few more after I said 13 maybe this 17. Sorry, because I think you start with 4. Initially. Okay? Yes, yes."}, {"source_name": "lecture6", "index": 116, "time": "00:17:03.450 --> 00:17:04.390", "speaker": "Alexander Vasserman", "text": "exactly"}, {"source_name": "lecture6", "index": 117, "time": "00:17:04.550 --> 00:17:07.550", "speaker": "Alexander Vasserman", "text": "that. It may be 13. Yeah. Adding 13. Yes."}, {"source_name": "lecture6", "index": 118, "time": "00:17:09.440 --> 00:17:18.870", "speaker": "Alexander Vasserman", "text": "but basically the the main point is that you want to cover all these kind of conditions rather than exactly the number of"}, {"source_name": "lecture6", "index": 119, "time": "00:17:19.040 --> 00:17:20.929", "speaker": "Alexander Vasserman", "text": "test cases that you have."}, {"source_name": "lecture6", "index": 120, "time": "00:17:20.990 --> 00:17:22.729", "speaker": "Alexander Vasserman", "text": "Right? If"}, {"source_name": "lecture6", "index": 121, "time": "00:17:24.690 --> 00:17:25.329", "speaker": "Alexander Vasserman", "text": "yeah."}, {"source_name": "lecture6", "index": 122, "time": "00:17:25.880 --> 00:17:27.229", "speaker": "Alexander Vasserman", "text": "hopefully, that makes sense."}, {"source_name": "lecture6", "index": 123, "time": "00:17:28.250 --> 00:17:31.169", "speaker": "Alexander Vasserman", "text": "Alex, do you have another question."}, {"source_name": "lecture6", "index": 124, "time": "00:17:31.280 --> 00:17:34.489", "speaker": "Alex Wojtowicz", "text": "Yeah. I have a question on Number 4 for the homework."}, {"source_name": "lecture6", "index": 125, "time": "00:17:34.650 --> 00:17:42.009", "speaker": "Alex Wojtowicz", "text": "So what are you allowed to use? Are you allowed to use the not in operator that it mentioned? Or are you supposed to use, some other method?"}, {"source_name": "lecture6", "index": 126, "time": "00:17:42.950 --> 00:17:46.299", "speaker": "Alex Wojtowicz", "text": "And what does it mean by the function? Signature should not change"}, {"source_name": "lecture6", "index": 127, "time": "00:17:46.910 --> 00:17:48.710", "speaker": "Alexander Vasserman", "text": "right? So"}, {"source_name": "lecture6", "index": 128, "time": "00:17:48.890 --> 00:17:51.580", "speaker": "Alexander Vasserman", "text": "What is the function? A signature?"}, {"source_name": "lecture6", "index": 129, "time": "00:17:52.360 --> 00:17:55.399", "speaker": "Alexander Vasserman", "text": "Do do you? Do you know what function signature refers to?"}, {"source_name": "lecture6", "index": 130, "time": "00:17:55.910 --> 00:17:56.560", "speaker": "Alex Wojtowicz", "text": "No."}, {"source_name": "lecture6", "index": 131, "time": "00:17:56.740 --> 00:18:00.159", "speaker": "Alexander Vasserman", "text": "no. Okay. Great. so"}, {"source_name": "lecture6", "index": 132, "time": "00:18:00.300 --> 00:18:01.550", "speaker": "Alexander Vasserman", "text": "this"}, {"source_name": "lecture6", "index": 133, "time": "00:18:02.030 --> 00:18:07.499", "speaker": "Alexander Vasserman", "text": "is function signature, right. The signature is basically the name of the function."}, {"source_name": "lecture6", "index": 134, "time": "00:18:07.540 --> 00:18:09.640", "speaker": "Alexander Vasserman", "text": "and what arguments it takes."}, {"source_name": "lecture6", "index": 135, "time": "00:18:09.760 --> 00:18:12.509", "speaker": "Alexander Vasserman", "text": "and what kind of thing it outputs"}, {"source_name": "lecture6", "index": 136, "time": "00:18:12.700 --> 00:18:16.200", "speaker": "Alexander Vasserman", "text": "that's called the signature. So basically it"}, {"source_name": "lecture6", "index": 137, "time": "00:18:16.660 --> 00:18:19.379", "speaker": "Alexander Vasserman", "text": "kind of defines a"}, {"source_name": "lecture6", "index": 138, "time": "00:18:19.770 --> 00:18:26.480", "speaker": "Alexander Vasserman", "text": "function. I i'm not quite sure why it's called signature frankly, but that's the common term"}, {"source_name": "lecture6", "index": 139, "time": "00:18:26.500 --> 00:18:29.950", "speaker": "Alexander Vasserman", "text": "so for a thing matching"}, {"source_name": "lecture6", "index": 140, "time": "00:18:30.360 --> 00:18:32.700", "speaker": "Alexander Vasserman", "text": "or sorry. This is"}, {"source_name": "lecture6", "index": 141, "time": "00:18:34.240 --> 00:18:36.300", "speaker": "Alexander Vasserman", "text": "for bulletin term match, right?"}, {"source_name": "lecture6", "index": 142, "time": "00:18:36.390 --> 00:18:46.480", "speaker": "Alexander Vasserman", "text": "so you still have a created. That's a thing, a document that is is a thing, and you still want to output the bullying. That's"}, {"source_name": "lecture6", "index": 143, "time": "00:18:46.680 --> 00:18:48.890", "speaker": "Alexander Vasserman", "text": "does the greedy."}, {"source_name": "lecture6", "index": 144, "time": "00:18:50.290 --> 00:18:52.600", "speaker": "Alexander Vasserman", "text": "That's the document, Major. The query."}, {"source_name": "lecture6", "index": 145, "time": "00:18:52.660 --> 00:18:55.029", "speaker": "Alexander Vasserman", "text": "Basically, that's still the case."}, {"source_name": "lecture6", "index": 146, "time": "00:18:55.050 --> 00:18:57.440", "speaker": "Alexander Vasserman", "text": "But what you want to do is"}, {"source_name": "lecture6", "index": 147, "time": "00:18:59.000 --> 00:19:00.780", "speaker": "Alexander Vasserman", "text": "change the logic here"}, {"source_name": "lecture6", "index": 148, "time": "00:19:01.150 --> 00:19:03.350", "speaker": "Alexander Vasserman", "text": "to use set operations"}, {"source_name": "lecture6", "index": 149, "time": "00:19:03.510 --> 00:19:05.740", "speaker": "Alexander Vasserman", "text": "and kind of think about"}, {"source_name": "lecture6", "index": 150, "time": "00:19:06.160 --> 00:19:07.050", "speaker": "Alexander Vasserman", "text": "what"}, {"source_name": "lecture6", "index": 151, "time": "00:19:07.640 --> 00:19:09.670", "speaker": "Alexander Vasserman", "text": "this description"}, {"source_name": "lecture6", "index": 152, "time": "00:19:09.780 --> 00:19:12.109", "speaker": "Alexander Vasserman", "text": "means in terms of set operations."}, {"source_name": "lecture6", "index": 153, "time": "00:19:12.570 --> 00:19:14.370", "speaker": "Alexander Vasserman", "text": "And so if"}, {"source_name": "lecture6", "index": 154, "time": "00:19:14.490 --> 00:19:15.790", "speaker": "Alexander Vasserman", "text": "instead of"}, {"source_name": "lecture6", "index": 155, "time": "00:19:15.960 --> 00:19:17.649", "speaker": "Alexander Vasserman", "text": "query terms being"}, {"source_name": "lecture6", "index": 156, "time": "00:19:18.050 --> 00:19:24.410", "speaker": "Alexander Vasserman", "text": "at least if you convert to to set and document in terms to set, what kind of set operation."}, {"source_name": "lecture6", "index": 157, "time": "00:19:24.770 --> 00:19:26.010", "speaker": "Alexander Vasserman", "text": "Are we doing here?"}, {"source_name": "lecture6", "index": 158, "time": "00:19:27.240 --> 00:19:33.929", "speaker": "Alex Wojtowicz", "text": "Oh, so you just turn them into sets, and then then you use like set logic, and then you return the result."}, {"source_name": "lecture6", "index": 159, "time": "00:19:33.960 --> 00:19:34.930", "speaker": "Alexander Vasserman", "text": "Exactly."}, {"source_name": "lecture6", "index": 160, "time": "00:19:35.150 --> 00:19:36.249", "speaker": "Alexander Vasserman", "text": "That's exactly right."}, {"source_name": "lecture6", "index": 161, "time": "00:19:40.160 --> 00:19:41.070", "speaker": "Alexander Vasserman", "text": "All right."}, {"source_name": "lecture6", "index": 162, "time": "00:19:42.280 --> 00:19:43.060", "speaker": "Alexander Vasserman", "text": "How you?"}, {"source_name": "lecture6", "index": 163, "time": "00:19:43.240 --> 00:19:54.550", "speaker": "Aimun Anwer", "text": "No, it's fine. so actually going back to Number 6 quickly, when it came to the empty string and empty document tests like."}, {"source_name": "lecture6", "index": 164, "time": "00:19:54.990 --> 00:19:59.280", "speaker": "Aimun Anwer", "text": "Are we trying to make it so that our tests are like"}, {"source_name": "lecture6", "index": 165, "time": "00:19:59.560 --> 00:20:14.879", "speaker": "Aimun Anwer", "text": "like they? We passed the test once we've like, set them, or like created them. So how would we want like what kind of result do we want the test? from like the test? Basically"}, {"source_name": "lecture6", "index": 166, "time": "00:20:15.100 --> 00:20:18.289", "speaker": "Alexander Vasserman", "text": "when in the in this homework"}, {"source_name": "lecture6", "index": 167, "time": "00:20:18.470 --> 00:20:21.279", "speaker": "Alexander Vasserman", "text": "what you want is basically, so that."}, {"source_name": "lecture6", "index": 168, "time": "00:20:22.620 --> 00:20:35.629", "speaker": "Alexander Vasserman", "text": "you want to set up the test so that the implementations that we have already kind of pass, right? So test should pass is the current implementation."}, {"source_name": "lecture6", "index": 169, "time": "00:20:35.660 --> 00:20:38.379", "speaker": "Alexander Vasserman", "text": "And when you"}, {"source_name": "lecture6", "index": 170, "time": "00:20:38.430 --> 00:20:41.450", "speaker": "Alexander Vasserman", "text": "actually make a change in number 4"}, {"source_name": "lecture6", "index": 171, "time": "00:20:41.880 --> 00:20:51.050", "speaker": "Alexander Vasserman", "text": "so maybe actually doing. Number 6 would be good before doing Number 4 because one of the things the test provide for you is when you make that change."}, {"source_name": "lecture6", "index": 172, "time": "00:20:51.270 --> 00:20:55.400", "speaker": "Alexander Vasserman", "text": "the results should be the same. So you shouldn't have to change tasks."}, {"source_name": "lecture6", "index": 173, "time": "00:20:55.500 --> 00:20:58.249", "speaker": "Alexander Vasserman", "text": "and they still should all pass."}, {"source_name": "lecture6", "index": 174, "time": "00:20:59.190 --> 00:21:03.560", "speaker": "Alexander Vasserman", "text": "Now some of the use cases that you might be noticing"}, {"source_name": "lecture6", "index": 175, "time": "00:21:03.610 --> 00:21:11.060", "speaker": "Alexander Vasserman", "text": "are kind of a little bit counterintuitive, and maybe we need to change kind of how the"}, {"source_name": "lecture6", "index": 176, "time": "00:21:11.090 --> 00:21:19.250", "speaker": "Alexander Vasserman", "text": "function like how we define the function and what the functionality should be, and therefore what they in in the test scenario, what it should return."}, {"source_name": "lecture6", "index": 177, "time": "00:21:20.910 --> 00:21:24.679", "speaker": "Alexander Vasserman", "text": "think about it, that's kind of a little bit beyond the scope of the homework."}, {"source_name": "lecture6", "index": 178, "time": "00:21:24.760 --> 00:21:27.700", "speaker": "Alexander Vasserman", "text": "So what what do you think the function should do?"}, {"source_name": "lecture6", "index": 179, "time": "00:21:27.750 --> 00:21:34.460", "speaker": "Alexander Vasserman", "text": "that's definitely something interesting to think about? but that's not a part of the"}, {"source_name": "lecture6", "index": 180, "time": "00:21:34.550 --> 00:21:36.850", "speaker": "Alexander Vasserman", "text": "it. What's required for the homework"}, {"source_name": "lecture6", "index": 181, "time": "00:21:38.520 --> 00:21:39.440", "speaker": "Alexander Vasserman", "text": "alright."}, {"source_name": "lecture6", "index": 182, "time": "00:21:40.170 --> 00:21:41.700", "speaker": "Alexander Vasserman", "text": "around him."}, {"source_name": "lecture6", "index": 183, "time": "00:21:42.080 --> 00:21:47.429", "speaker": "Rana Hani", "text": "Yeah. So going back to 6, so empty string is curry, or or"}, {"source_name": "lecture6", "index": 184, "time": "00:21:47.760 --> 00:21:52.300", "speaker": "Rana Hani", "text": "is the expected results supposed to be an empty string inside."}, {"source_name": "lecture6", "index": 185, "time": "00:21:52.400 --> 00:22:05.439", "speaker": "Alexander Vasserman", "text": "like a carrier? I'm just confused about that. Yeah, Sorry they what they they the description that describes the what what I'm describing here. It is the arguments, not they expect the digital value."}, {"source_name": "lecture6", "index": 186, "time": "00:22:05.740 --> 00:22:10.349", "speaker": "Alexander Vasserman", "text": "What it is the expected to turn value. You should figure it out"}, {"source_name": "lecture6", "index": 187, "time": "00:22:10.470 --> 00:22:22.549", "speaker": "Alexander Vasserman", "text": "either by logic, or you can cheat and run the function, See what what it, what it returns, and put that into the task, as they expect to return value"}, {"source_name": "lecture6", "index": 188, "time": "00:22:22.910 --> 00:22:23.650", "speaker": "Alexander Vasserman", "text": "right?"}, {"source_name": "lecture6", "index": 189, "time": "00:22:23.740 --> 00:22:27.119", "speaker": "Alexander Vasserman", "text": "So you can do it that way."}, {"source_name": "lecture6", "index": 190, "time": "00:22:27.250 --> 00:22:28.649", "speaker": "Alexander Vasserman", "text": "given that"}, {"source_name": "lecture6", "index": 191, "time": "00:22:29.850 --> 00:22:30.590", "speaker": "Alexander Vasserman", "text": "Well."}, {"source_name": "lecture6", "index": 192, "time": "00:22:31.060 --> 00:22:32.200", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture6", "index": 193, "time": "00:22:32.530 --> 00:22:36.009", "speaker": "Alexander Vasserman", "text": "for now trust, maybe the output of the"}, {"source_name": "lecture6", "index": 194, "time": "00:22:36.090 --> 00:22:43.530", "speaker": "Alexander Vasserman", "text": "a function or a trust. Our implementation generally what you want in terms of the"}, {"source_name": "lecture6", "index": 195, "time": "00:22:44.240 --> 00:22:51.109", "speaker": "Alexander Vasserman", "text": "kind of how you, or in terms of your process Generally you want to think about what the function should return."}, {"source_name": "lecture6", "index": 196, "time": "00:22:51.300 --> 00:22:53.229", "speaker": "Alexander Vasserman", "text": "and so setting up"}, {"source_name": "lecture6", "index": 197, "time": "00:22:53.310 --> 00:22:54.780", "speaker": "Alexander Vasserman", "text": "the tests."}, {"source_name": "lecture6", "index": 198, "time": "00:22:55.040 --> 00:23:00.460", "speaker": "Alexander Vasserman", "text": "as you understand the function and what what it should do. And then you, you"}, {"source_name": "lecture6", "index": 199, "time": "00:23:00.600 --> 00:23:04.259", "speaker": "Alexander Vasserman", "text": "actually run the test to figure out if what you've implemented"}, {"source_name": "lecture6", "index": 200, "time": "00:23:04.460 --> 00:23:07.570", "speaker": "Alexander Vasserman", "text": "satisfies the constraints that you thought"}, {"source_name": "lecture6", "index": 201, "time": "00:23:07.950 --> 00:23:10.200", "speaker": "Alexander Vasserman", "text": "you want them to satisfy."}, {"source_name": "lecture6", "index": 202, "time": "00:23:10.460 --> 00:23:12.210", "speaker": "Alexander Vasserman", "text": "And then, when it doesn't"}, {"source_name": "lecture6", "index": 203, "time": "00:23:13.400 --> 00:23:18.190", "speaker": "Alexander Vasserman", "text": "you either realized that you didn't set up your tests right."}, {"source_name": "lecture6", "index": 204, "time": "00:23:18.260 --> 00:23:34.169", "speaker": "Alexander Vasserman", "text": "And so what you're tasting is not exactly what your thought was. You you were testing, or that you know your implementation actually has bugs. And you know what you've implemented. It's not what you thought you implemented, and that's kind of the the main"}, {"source_name": "lecture6", "index": 205, "time": "00:23:34.280 --> 00:23:35.930", "speaker": "Alexander Vasserman", "text": "purpose of the tests."}, {"source_name": "lecture6", "index": 206, "time": "00:23:37.410 --> 00:23:39.769", "speaker": "Alexander Vasserman", "text": "but but yeah"}, {"source_name": "lecture6", "index": 207, "time": "00:23:39.960 --> 00:23:48.579", "speaker": "Alexander Vasserman", "text": "kind of I prefer that you think about what the return values should be and put that into the task. But then it's certainly."}, {"source_name": "lecture6", "index": 208, "time": "00:23:48.900 --> 00:23:50.610", "speaker": "Alexander Vasserman", "text": "Oh, easy to"}, {"source_name": "lecture6", "index": 209, "time": "00:23:51.210 --> 00:23:54.179", "speaker": "Alexander Vasserman", "text": "yeah to to just plug in values."}, {"source_name": "lecture6", "index": 210, "time": "00:23:54.220 --> 00:23:57.859", "speaker": "Alexander Vasserman", "text": "But going back to like empty query."}, {"source_name": "lecture6", "index": 211, "time": "00:23:58.150 --> 00:24:00.409", "speaker": "Alexander Vasserman", "text": "Well, so what would be"}, {"source_name": "lecture6", "index": 212, "time": "00:24:00.960 --> 00:24:04.049", "speaker": "Alexander Vasserman", "text": "in antiquity? What? What does it mean that the"}, {"source_name": "lecture6", "index": 213, "time": "00:24:04.150 --> 00:24:05.810", "speaker": "Alexander Vasserman", "text": "great argument is empty?"}, {"source_name": "lecture6", "index": 214, "time": "00:24:08.640 --> 00:24:11.460", "speaker": "Alexander Vasserman", "text": "probably, since you asked the question, what do you think that"}, {"source_name": "lecture6", "index": 215, "time": "00:24:11.480 --> 00:24:12.910", "speaker": "Alexander Vasserman", "text": "that that means"}, {"source_name": "lecture6", "index": 216, "time": "00:24:14.200 --> 00:24:15.250", "speaker": "Rana Hani", "text": "like? There's"}, {"source_name": "lecture6", "index": 217, "time": "00:24:15.360 --> 00:24:17.880", "speaker": "Rana Hani", "text": "no documents are like, no strings inside it?"}, {"source_name": "lecture6", "index": 218, "time": "00:24:18.380 --> 00:24:19.939", "speaker": "Alexander Vasserman", "text": "Well, so"}, {"source_name": "lecture6", "index": 219, "time": "00:24:20.390 --> 00:24:22.100", "speaker": "Alexander Vasserman", "text": "you know it's a function"}, {"source_name": "lecture6", "index": 220, "time": "00:24:22.130 --> 00:24:26.089", "speaker": "Alexander Vasserman", "text": "that has to take 2 arguments right? It has to take us to"}, {"source_name": "lecture6", "index": 221, "time": "00:24:26.210 --> 00:24:28.570", "speaker": "Alexander Vasserman", "text": "create a string and a document stream."}, {"source_name": "lecture6", "index": 222, "time": "00:24:29.680 --> 00:24:32.819", "speaker": "Alexander Vasserman", "text": "We can't call this function without those 2 arguments."}, {"source_name": "lecture6", "index": 223, "time": "00:24:33.040 --> 00:24:33.920", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture6", "index": 224, "time": "00:24:34.390 --> 00:24:36.580", "speaker": "Alexander Vasserman", "text": "the query can be an empty screen."}, {"source_name": "lecture6", "index": 225, "time": "00:24:36.980 --> 00:24:41.019", "speaker": "Alexander Vasserman", "text": "or the document can be an empty screen. And that's what I mean by empty"}, {"source_name": "lecture6", "index": 226, "time": "00:24:41.120 --> 00:24:42.849", "speaker": "Alexander Vasserman", "text": "and this"}, {"source_name": "lecture6", "index": 227, "time": "00:24:42.930 --> 00:24:44.300", "speaker": "Alexander Vasserman", "text": "particular context"}, {"source_name": "lecture6", "index": 228, "time": "00:24:44.700 --> 00:24:46.010", "speaker": "Alexander Vasserman", "text": "for"}, {"source_name": "lecture6", "index": 229, "time": "00:24:46.300 --> 00:24:47.230", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture6", "index": 230, "time": "00:24:48.380 --> 00:24:49.519", "speaker": "Alexander Vasserman", "text": "for search"}, {"source_name": "lecture6", "index": 231, "time": "00:24:49.760 --> 00:24:50.570", "speaker": "Alexander Vasserman", "text": "right!"}, {"source_name": "lecture6", "index": 232, "time": "00:24:50.880 --> 00:24:53.470", "speaker": "Alexander Vasserman", "text": "The documents is a list."}, {"source_name": "lecture6", "index": 233, "time": "00:24:53.760 --> 00:24:56.969", "speaker": "Alexander Vasserman", "text": "and so you can supply in the empty list."}, {"source_name": "lecture6", "index": 234, "time": "00:24:57.090 --> 00:24:58.910", "speaker": "Alexander Vasserman", "text": "Right? So at least it contains"}, {"source_name": "lecture6", "index": 235, "time": "00:24:59.090 --> 00:25:00.490", "speaker": "Alexander Vasserman", "text": "no elements."}, {"source_name": "lecture6", "index": 236, "time": "00:25:00.660 --> 00:25:03.650", "speaker": "Alexander Vasserman", "text": "and that's kind of empty document collection or"}, {"source_name": "lecture6", "index": 237, "time": "00:25:03.810 --> 00:25:04.530", "speaker": "Alexander Vasserman", "text": "right"}, {"source_name": "lecture6", "index": 238, "time": "00:25:04.650 --> 00:25:09.280", "speaker": "Alexander Vasserman", "text": "that's kind of a corner case that you want to test this."}, {"source_name": "lecture6", "index": 239, "time": "00:25:10.390 --> 00:25:11.659", "speaker": "Alexander Vasserman", "text": "Does that make sense?"}, {"source_name": "lecture6", "index": 240, "time": "00:25:12.000 --> 00:25:21.580", "speaker": "Alexander Vasserman", "text": "Yeah, Thank you."}, {"source_name": "lecture6", "index": 241, "time": "00:25:21.830 --> 00:25:22.710", "speaker": "Alexander Vasserman", "text": "Not"}, {"source_name": "lecture6", "index": 242, "time": "00:25:23.060 --> 00:25:30.789", "speaker": "Alexander Vasserman", "text": "clear for me what's not going to be clear for you. So by asking these questions, you're helping me and helping"}, {"source_name": "lecture6", "index": 243, "time": "00:25:30.880 --> 00:25:34.990", "speaker": "Alexander Vasserman", "text": "your fellow students. so I appreciate all the questions."}, {"source_name": "lecture6", "index": 244, "time": "00:25:37.390 --> 00:25:40.310", "speaker": "Alexander Vasserman", "text": "Okay, Any other questions."}, {"source_name": "lecture6", "index": 245, "time": "00:25:44.180 --> 00:25:44.960", "speaker": "Alexander Vasserman", "text": "please."}, {"source_name": "lecture6", "index": 246, "time": "00:25:47.160 --> 00:25:59.809", "speaker": "Luis Gonzalez", "text": "Oh, yeah, I just wanted to ask. yeah, it's a regarding about Number 6. So I know it is in a number. So you said there's supposed to be a total of 13 different test cases. So are those"}, {"source_name": "lecture6", "index": 247, "time": "00:25:59.950 --> 00:26:08.230", "speaker": "Luis Gonzalez", "text": "i'm just a little confused with the wording or those like so many like each of them, for example, like the match. And then the Boolean term match."}, {"source_name": "lecture6", "index": 248, "time": "00:26:08.380 --> 00:26:11.919", "speaker": "Alexander Vasserman", "text": "Yeah. So basically, when I say"}, {"source_name": "lecture6", "index": 249, "time": "00:26:12.430 --> 00:26:17.750", "speaker": "Alexander Vasserman", "text": "cases a: I mean this this function, the test functions."}, {"source_name": "lecture6", "index": 250, "time": "00:26:17.850 --> 00:26:24.469", "speaker": "Alexander Vasserman", "text": "So, and each function is generally like an application of the function under task"}, {"source_name": "lecture6", "index": 251, "time": "00:26:26.350 --> 00:26:38.480", "speaker": "Alexander Vasserman", "text": "which you know here. Whatever I say, function on the task. The string match here function under test is search right? So you have a single call within each test function."}, {"source_name": "lecture6", "index": 252, "time": "00:26:38.670 --> 00:26:44.040", "speaker": "Alexander Vasserman", "text": "And what i'm counting there and again, numbers are"}, {"source_name": "lecture6", "index": 253, "time": "00:26:44.240 --> 00:26:47.739", "speaker": "Alexander Vasserman", "text": "not necessarily exact. Is the number of"}, {"source_name": "lecture6", "index": 254, "time": "00:26:47.780 --> 00:26:53.220", "speaker": "Alexander Vasserman", "text": "this test functions that you have here. So right now we have 4 implemented"}, {"source_name": "lecture6", "index": 255, "time": "00:26:53.600 --> 00:26:57.010", "speaker": "Alexander Vasserman", "text": "right, and you'll need to add 13 more"}, {"source_name": "lecture6", "index": 256, "time": "00:26:57.130 --> 00:26:58.850", "speaker": "Luis Gonzalez", "text": "about that."}, {"source_name": "lecture6", "index": 257, "time": "00:27:00.550 --> 00:27:07.529", "speaker": "Luis Gonzalez", "text": "Oh, sorry. This so doesn't matter which one we do as long as we do 13 and we like, You know, it makes sense with what you're asking."}, {"source_name": "lecture6", "index": 258, "time": "00:27:08.120 --> 00:27:14.389", "speaker": "Alexander Vasserman", "text": "Yeah, basically the the the main concern is that you cover the"}, {"source_name": "lecture6", "index": 259, "time": "00:27:14.490 --> 00:27:24.730", "speaker": "Alexander Vasserman", "text": "cases that i'm asking for right, so that all those sets of parameters or sets of quid document pairs"}, {"source_name": "lecture6", "index": 260, "time": "00:27:25.040 --> 00:27:37.000", "speaker": "Alexander Vasserman", "text": "like the 3 document pairs, that kind of test the behavior that i'm asking for that's exercised in some of your calls. That's the important part. The exact number of tasks."}, {"source_name": "lecture6", "index": 261, "time": "00:27:37.070 --> 00:27:39.759", "speaker": "Alexander Vasserman", "text": "Is not that important?"}, {"source_name": "lecture6", "index": 262, "time": "00:27:39.950 --> 00:27:42.999", "speaker": "Alexander Vasserman", "text": "so if you feel like you need."}, {"source_name": "lecture6", "index": 263, "time": "00:27:43.040 --> 00:27:45.320", "speaker": "Alexander Vasserman", "text": "if you more than 13"}, {"source_name": "lecture6", "index": 264, "time": "00:27:45.550 --> 00:28:02.889", "speaker": "Alexander Vasserman", "text": "that might be easier to do rather than worry about exactly 13, because, like. As you can see, each one is fairly small. It's a it's really kind of not that much work to to make it 14 or 15"}, {"source_name": "lecture6", "index": 265, "time": "00:28:03.150 --> 00:28:04.030", "speaker": "Alexander Vasserman", "text": "right."}, {"source_name": "lecture6", "index": 266, "time": "00:28:04.100 --> 00:28:05.999", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture6", "index": 267, "time": "00:28:06.040 --> 00:28:08.540", "speaker": "Alexander Vasserman", "text": "the main thing that you're thinking about is"}, {"source_name": "lecture6", "index": 268, "time": "00:28:08.820 --> 00:28:10.090", "speaker": "Alexander Vasserman", "text": "like what"}, {"source_name": "lecture6", "index": 269, "time": "00:28:10.160 --> 00:28:16.960", "speaker": "Alexander Vasserman", "text": "these arguments should be right. What do I specify as the query? What do I specify as a document."}, {"source_name": "lecture6", "index": 270, "time": "00:28:17.010 --> 00:28:17.940", "speaker": "Alexander Vasserman", "text": "so that"}, {"source_name": "lecture6", "index": 271, "time": "00:28:17.980 --> 00:28:26.000", "speaker": "Alexander Vasserman", "text": "I am testing a scenario. That's kind of different. And one of the scenarios that is outlined in the homework problem."}, {"source_name": "lecture6", "index": 272, "time": "00:28:28.960 --> 00:28:29.899", "speaker": "Luis Gonzalez", "text": "Me, sir."}, {"source_name": "lecture6", "index": 273, "time": "00:28:30.140 --> 00:28:31.050", "speaker": "Luis Gonzalez", "text": "Yeah, yeah."}, {"source_name": "lecture6", "index": 274, "time": "00:28:31.070 --> 00:28:32.020", "speaker": "Alexander Vasserman", "text": "okay, cool."}, {"source_name": "lecture6", "index": 275, "time": "00:28:34.580 --> 00:28:36.710", "speaker": "Alexander Vasserman", "text": "All right. So hopefully."}, {"source_name": "lecture6", "index": 276, "time": "00:28:36.890 --> 00:28:38.069", "speaker": "Alexander Vasserman", "text": "that kind of"}, {"source_name": "lecture6", "index": 277, "time": "00:28:38.110 --> 00:28:48.299", "speaker": "Alexander Vasserman", "text": "explains it. And again, I'm: too totally expecting homeworks to be not easy and hard to understand, because"}, {"source_name": "lecture6", "index": 278, "time": "00:28:48.430 --> 00:28:49.880", "speaker": "Alexander Vasserman", "text": "basically"}, {"source_name": "lecture6", "index": 279, "time": "00:28:50.050 --> 00:28:51.360", "speaker": "Alexander Vasserman", "text": "we are"}, {"source_name": "lecture6", "index": 280, "time": "00:28:52.810 --> 00:28:57.790", "speaker": "Alexander Vasserman", "text": "the the the the class is a bit different than probably what you used to where"}, {"source_name": "lecture6", "index": 281, "time": "00:28:57.890 --> 00:29:06.489", "speaker": "Alexander Vasserman", "text": "you know the material was. Okay, how do we use this particular thing like? I don't know. If you were starting a for a loop"}, {"source_name": "lecture6", "index": 282, "time": "00:29:06.730 --> 00:29:10.000", "speaker": "Alexander Vasserman", "text": "you'd get 10 problems about, you know."}, {"source_name": "lecture6", "index": 283, "time": "00:29:10.170 --> 00:29:12.229", "speaker": "Alexander Vasserman", "text": "that can be solved with a for loop."}, {"source_name": "lecture6", "index": 284, "time": "00:29:12.730 --> 00:29:14.939", "speaker": "Alexander Vasserman", "text": "Here we are kind of"}, {"source_name": "lecture6", "index": 285, "time": "00:29:15.190 --> 00:29:23.449", "speaker": "Alexander Vasserman", "text": "mostly thinking about. How do we set up a process? How do we build our project out. So"}, {"source_name": "lecture6", "index": 286, "time": "00:29:23.610 --> 00:29:29.210", "speaker": "Alexander Vasserman", "text": "the understanding of what's involved is almost"}, {"source_name": "lecture6", "index": 287, "time": "00:29:29.490 --> 00:29:31.619", "speaker": "Alexander Vasserman", "text": "the big part of the homework."}, {"source_name": "lecture6", "index": 288, "time": "00:29:31.890 --> 00:29:33.550", "speaker": "Alexander Vasserman", "text": "Once you figured out"}, {"source_name": "lecture6", "index": 289, "time": "00:29:34.250 --> 00:29:36.270", "speaker": "Alexander Vasserman", "text": "what it is that i'm doing."}, {"source_name": "lecture6", "index": 290, "time": "00:29:36.990 --> 00:29:39.769", "speaker": "Alexander Vasserman", "text": "Decoding might be actually not very difficult."}, {"source_name": "lecture6", "index": 291, "time": "00:29:39.870 --> 00:29:42.329", "speaker": "Alexander Vasserman", "text": "But in order to understand"}, {"source_name": "lecture6", "index": 292, "time": "00:29:42.610 --> 00:29:44.740", "speaker": "Alexander Vasserman", "text": "what is asked"}, {"source_name": "lecture6", "index": 293, "time": "00:29:44.970 --> 00:29:46.000", "speaker": "Alexander Vasserman", "text": "of you."}, {"source_name": "lecture6", "index": 294, "time": "00:29:46.890 --> 00:29:47.850", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture6", "index": 295, "time": "00:29:47.870 --> 00:29:52.439", "speaker": "Alexander Vasserman", "text": "is something that you probably needed to understand what was going on in the class."}, {"source_name": "lecture6", "index": 296, "time": "00:29:52.930 --> 00:29:55.429", "speaker": "Alexander Vasserman", "text": "or you might have questions about."}, {"source_name": "lecture6", "index": 297, "time": "00:29:55.640 --> 00:29:58.430", "speaker": "Alexander Vasserman", "text": "and I'm more than happy to answer those questions."}, {"source_name": "lecture6", "index": 298, "time": "00:30:02.280 --> 00:30:03.110", "speaker": "Alexander Vasserman", "text": "Alright."}, {"source_name": "lecture6", "index": 299, "time": "00:30:05.130 --> 00:30:05.980", "speaker": "Alexander Vasserman", "text": "Hello!"}, {"source_name": "lecture6", "index": 300, "time": "00:30:06.750 --> 00:30:07.820", "speaker": "Alexander Vasserman", "text": "Let's"}, {"source_name": "lecture6", "index": 301, "time": "00:30:08.530 --> 00:30:22.280", "speaker": "Rafal \"Ralph\" Jasielec", "text": "we just one quick question about number 3 you you want? Do you want a single function, or do you want, or are we allowed to use a class and then functions within that class."}, {"source_name": "lecture6", "index": 302, "time": "00:30:22.940 --> 00:30:24.460", "speaker": "Alexander Vasserman", "text": "yeah, up to you."}, {"source_name": "lecture6", "index": 303, "time": "00:30:24.760 --> 00:30:25.470", "speaker": "Rafal \"Ralph\" Jasielec", "text": "Okay."}, {"source_name": "lecture6", "index": 304, "time": "00:30:26.150 --> 00:30:26.850", "speaker": "Alexander Vasserman", "text": "Yeah."}, {"source_name": "lecture6", "index": 305, "time": "00:30:36.810 --> 00:30:41.529", "speaker": "Alexander Vasserman", "text": "All right. Yes. So basically just coming back."}, {"source_name": "lecture6", "index": 306, "time": "00:30:41.590 --> 00:30:43.699", "speaker": "Alexander Vasserman", "text": "we are going to"}, {"source_name": "lecture6", "index": 307, "time": "00:30:44.210 --> 00:30:57.560", "speaker": "Alexander Vasserman", "text": "look at what we've done so far like reading the data of this Json. like doing this, the matching and search and ranking the things that we talked about very kind of genetically"}, {"source_name": "lecture6", "index": 308, "time": "00:30:57.680 --> 00:31:01.120", "speaker": "Alexander Vasserman", "text": "and in a kind of"}, {"source_name": "lecture6", "index": 309, "time": "00:31:01.230 --> 00:31:02.220", "speaker": "Alexander Vasserman", "text": "away."}, {"source_name": "lecture6", "index": 310, "time": "00:31:02.580 --> 00:31:04.450", "speaker": "Alexander Vasserman", "text": "we are going to look at"}, {"source_name": "lecture6", "index": 311, "time": "00:31:04.600 --> 00:31:08.240", "speaker": "Alexander Vasserman", "text": "actual components of the search engine."}, {"source_name": "lecture6", "index": 312, "time": "00:31:08.290 --> 00:31:13.939", "speaker": "Alexander Vasserman", "text": "And what are some of the things that they're supposed to do, both in terms of"}, {"source_name": "lecture6", "index": 313, "time": "00:31:14.050 --> 00:31:16.500", "speaker": "Alexander Vasserman", "text": "what a fully fledged"}, {"source_name": "lecture6", "index": 314, "time": "00:31:16.650 --> 00:31:19.059", "speaker": "Alexander Vasserman", "text": "so it turns on my do"}, {"source_name": "lecture6", "index": 315, "time": "00:31:19.100 --> 00:31:24.720", "speaker": "Alexander Vasserman", "text": "A. And what a a search engine that we are implementing might do."}, {"source_name": "lecture6", "index": 316, "time": "00:31:25.550 --> 00:31:27.189", "speaker": "Alexander Vasserman", "text": "so let's"}, {"source_name": "lecture6", "index": 317, "time": "00:31:27.790 --> 00:31:28.970", "speaker": "Alexander Vasserman", "text": "First."}, {"source_name": "lecture6", "index": 318, "time": "00:31:29.160 --> 00:31:38.329", "speaker": "Alexander Vasserman", "text": "let's first talk about what it is that we even mean about, you know, describing components over describing all software architecture."}, {"source_name": "lecture6", "index": 319, "time": "00:31:38.440 --> 00:31:39.919", "speaker": "Alexander Vasserman", "text": "right? So"}, {"source_name": "lecture6", "index": 320, "time": "00:31:39.950 --> 00:31:41.270", "speaker": "Alexander Vasserman", "text": "basically"}, {"source_name": "lecture6", "index": 321, "time": "00:31:41.450 --> 00:31:43.430", "speaker": "Alexander Vasserman", "text": "software, when"}, {"source_name": "lecture6", "index": 322, "time": "00:31:43.490 --> 00:31:48.400", "speaker": "Alexander Vasserman", "text": "you talk about software architecture, it's that's exactly kind of describing"}, {"source_name": "lecture6", "index": 323, "time": "00:31:48.490 --> 00:31:50.370", "speaker": "Alexander Vasserman", "text": "in very general terms"}, {"source_name": "lecture6", "index": 324, "time": "00:31:50.390 --> 00:31:52.390", "speaker": "Alexander Vasserman", "text": "what the different components are."}, {"source_name": "lecture6", "index": 325, "time": "00:31:52.510 --> 00:31:55.540", "speaker": "Alexander Vasserman", "text": "and what and how they relate to each other."}, {"source_name": "lecture6", "index": 326, "time": "00:31:55.960 --> 00:31:58.240", "speaker": "Alexander Vasserman", "text": "So think of it in terms of"}, {"source_name": "lecture6", "index": 327, "time": "00:31:58.470 --> 00:32:00.839", "speaker": "Alexander Vasserman", "text": "again. If you're working on a team."}, {"source_name": "lecture6", "index": 328, "time": "00:32:01.380 --> 00:32:02.800", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture6", "index": 329, "time": "00:32:03.110 --> 00:32:05.849", "speaker": "Alexander Vasserman", "text": "Maybe each one of you is"}, {"source_name": "lecture6", "index": 330, "time": "00:32:05.970 --> 00:32:11.860", "speaker": "Alexander Vasserman", "text": "assigned, or you decide that each one of you is going to implement one of those components."}, {"source_name": "lecture6", "index": 331, "time": "00:32:12.470 --> 00:32:14.989", "speaker": "Alexander Vasserman", "text": "You need to make sure that"}, {"source_name": "lecture6", "index": 332, "time": "00:32:15.010 --> 00:32:18.919", "speaker": "Alexander Vasserman", "text": "when you bring them all together that actually works."}, {"source_name": "lecture6", "index": 333, "time": "00:32:19.210 --> 00:32:21.070", "speaker": "Alexander Vasserman", "text": "and that there are some"}, {"source_name": "lecture6", "index": 334, "time": "00:32:21.110 --> 00:32:23.829", "speaker": "Alexander Vasserman", "text": "requirements and understandings about"}, {"source_name": "lecture6", "index": 335, "time": "00:32:24.100 --> 00:32:27.040", "speaker": "Alexander Vasserman", "text": "what exactly each component is going to do."}, {"source_name": "lecture6", "index": 336, "time": "00:32:27.320 --> 00:32:32.919", "speaker": "Alexander Vasserman", "text": "So that's kind of what's meant by software architecture. It's basically some"}, {"source_name": "lecture6", "index": 337, "time": "00:32:33.080 --> 00:32:39.660", "speaker": "Alexander Vasserman", "text": "initial design that says, okay, we have these components. This is how they interact with each other"}, {"source_name": "lecture6", "index": 338, "time": "00:32:39.790 --> 00:32:41.080", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture6", "index": 339, "time": "00:32:41.640 --> 00:32:49.760", "speaker": "Alexander Vasserman", "text": "kind of describe the system at the higher level of obstruction not in specific implementation details."}, {"source_name": "lecture6", "index": 340, "time": "00:32:50.590 --> 00:32:51.960", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture6", "index": 341, "time": "00:32:53.350 --> 00:32:56.170", "speaker": "Alexander Vasserman", "text": "also kind of related to this scores."}, {"source_name": "lecture6", "index": 342, "time": "00:32:56.480 --> 00:32:59.230", "speaker": "Alexander Vasserman", "text": "What we're kind of doing is"}, {"source_name": "lecture6", "index": 343, "time": "00:32:59.260 --> 00:33:00.110", "speaker": "Alexander Vasserman", "text": "here"}, {"source_name": "lecture6", "index": 344, "time": "00:33:00.130 --> 00:33:01.490", "speaker": "Alexander Vasserman", "text": "implementing"}, {"source_name": "lecture6", "index": 345, "time": "00:33:01.860 --> 00:33:05.609", "speaker": "Alexander Vasserman", "text": "a search engine. We essentially implemented the way in a one."}, {"source_name": "lecture6", "index": 346, "time": "00:33:05.850 --> 00:33:14.029", "speaker": "Alexander Vasserman", "text": "and then we are going to be switching some of the components to a 2 more advanced versions to get"}, {"source_name": "lecture6", "index": 347, "time": "00:33:14.130 --> 00:33:21.000", "speaker": "Alexander Vasserman", "text": "to a better search engine, and that's kind of also a very realistic process"}, {"source_name": "lecture6", "index": 348, "time": "00:33:21.360 --> 00:33:37.170", "speaker": "Alexander Vasserman", "text": "like in an in industry. If you're working for a company, it's something that you want to do oftentimes is implement something really quickly something that works something that gives you some idea of, like what exactly you're trying to make do"}, {"source_name": "lecture6", "index": 349, "time": "00:33:37.200 --> 00:33:43.390", "speaker": "Alexander Vasserman", "text": "gives you some idea of what the software architecture is going to be about? What are the different"}, {"source_name": "lecture6", "index": 350, "time": "00:33:43.410 --> 00:33:44.320", "speaker": "Alexander Vasserman", "text": "pieces."}, {"source_name": "lecture6", "index": 351, "time": "00:33:44.760 --> 00:33:45.830", "speaker": "Alexander Vasserman", "text": "And then"}, {"source_name": "lecture6", "index": 352, "time": "00:33:45.900 --> 00:33:48.380", "speaker": "Alexander Vasserman", "text": "you are set up to"}, {"source_name": "lecture6", "index": 353, "time": "00:33:48.760 --> 00:34:04.700", "speaker": "Alexander Vasserman", "text": "maybe work as a team, or or even if you're working by yourself changing one component at a time and saying, okay, Well, I can improve this component, maybe like, you know, I would need to make things"}, {"source_name": "lecture6", "index": 354, "time": "00:34:04.760 --> 00:34:11.389", "speaker": "Alexander Vasserman", "text": "run faster, and I know this is is the component where a lot of the time is spanned, so I need to improve it."}, {"source_name": "lecture6", "index": 355, "time": "00:34:11.520 --> 00:34:12.909", "speaker": "Alexander Vasserman", "text": "So that kind of"}, {"source_name": "lecture6", "index": 356, "time": "00:34:12.960 --> 00:34:13.850", "speaker": "Alexander Vasserman", "text": "is"}, {"source_name": "lecture6", "index": 357, "time": "00:34:13.960 --> 00:34:14.839", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture6", "index": 358, "time": "00:34:15.510 --> 00:34:25.490", "speaker": "Alexander Vasserman", "text": "but he isn't for search for for. Sorry for some architecture. Why, we think about it, but also kind of the process of"}, {"source_name": "lecture6", "index": 359, "time": "00:34:25.560 --> 00:34:29.499", "speaker": "Alexander Vasserman", "text": "developing a larger software project. And"}, {"source_name": "lecture6", "index": 360, "time": "00:34:29.739 --> 00:34:30.509", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture6", "index": 361, "time": "00:34:33.060 --> 00:34:34.339", "speaker": "Alexander Vasserman", "text": "so hopefully that"}, {"source_name": "lecture6", "index": 362, "time": "00:34:34.380 --> 00:34:35.650", "speaker": "Alexander Vasserman", "text": "make some sense"}, {"source_name": "lecture6", "index": 363, "time": "00:34:35.989 --> 00:34:39.949", "speaker": "Alexander Vasserman", "text": "in terms of the goal. here. so we are."}, {"source_name": "lecture6", "index": 364, "time": "00:34:40.880 --> 00:34:43.930", "speaker": "Alexander Vasserman", "text": "Yeah, we're we're trying to introduce this architecture."}, {"source_name": "lecture6", "index": 365, "time": "00:34:45.590 --> 00:34:46.810", "speaker": "Alexander Vasserman", "text": "basically"}, {"source_name": "lecture6", "index": 366, "time": "00:34:47.179 --> 00:35:05.499", "speaker": "Alexander Vasserman", "text": "The the main 2 things that we care about in the search system. we've mentioned that before is kind of effectiveness or quality of the results or relevance. you know all I can use those terms somewhat interchangeably. But, for any particular query."}, {"source_name": "lecture6", "index": 367, "time": "00:35:05.590 --> 00:35:08.589", "speaker": "Alexander Vasserman", "text": "does the search engine return"}, {"source_name": "lecture6", "index": 368, "time": "00:35:08.680 --> 00:35:11.450", "speaker": "Alexander Vasserman", "text": "the results quickly enough."}, {"source_name": "lecture6", "index": 369, "time": "00:35:12.130 --> 00:35:13.140", "speaker": "Alexander Vasserman", "text": "or"}, {"source_name": "lecture6", "index": 370, "time": "00:35:13.730 --> 00:35:16.429", "speaker": "Alexander Vasserman", "text": "the other"}, {"source_name": "lecture6", "index": 371, "time": "00:35:16.640 --> 00:35:17.600", "speaker": "Alexander Vasserman", "text": "kind of"}, {"source_name": "lecture6", "index": 372, "time": "00:35:17.940 --> 00:35:20.049", "speaker": "Alexander Vasserman", "text": "concern is efficiency"}, {"source_name": "lecture6", "index": 373, "time": "00:35:20.420 --> 00:35:28.929", "speaker": "Alexander Vasserman", "text": "the response time. So what is the time? From the time that user enter the query to the time that they got the results back."}, {"source_name": "lecture6", "index": 374, "time": "00:35:29.000 --> 00:35:30.609", "speaker": "Alexander Vasserman", "text": "If that time is"}, {"source_name": "lecture6", "index": 375, "time": "00:35:30.820 --> 00:35:36.430", "speaker": "Alexander Vasserman", "text": "5\u00c2\u00a0min, you're probably not gonna get too many users. That's not something that people expect."}, {"source_name": "lecture6", "index": 376, "time": "00:35:36.760 --> 00:35:40.099", "speaker": "Alexander Vasserman", "text": "generally. What you want is maybe like"}, {"source_name": "lecture6", "index": 377, "time": "00:35:40.130 --> 00:35:41.829", "speaker": "Alexander Vasserman", "text": "a second at most"}, {"source_name": "lecture6", "index": 378, "time": "00:35:43.240 --> 00:35:45.369", "speaker": "Alexander Vasserman", "text": "that it actually have been studies"}, {"source_name": "lecture6", "index": 379, "time": "00:35:45.420 --> 00:35:46.419", "speaker": "Alexander Vasserman", "text": "where"}, {"source_name": "lecture6", "index": 380, "time": "00:35:46.690 --> 00:35:52.400", "speaker": "Alexander Vasserman", "text": "anything be up beyond 500\u00c2\u00a0ms, or like half a second"}, {"source_name": "lecture6", "index": 381, "time": "00:35:52.600 --> 00:35:54.350", "speaker": "Alexander Vasserman", "text": "basically"}, {"source_name": "lecture6", "index": 382, "time": "00:35:54.820 --> 00:36:06.759", "speaker": "Alexander Vasserman", "text": "drives away users. So if you slow down your system, if you start adding features, or you start changing, making changes, and"}, {"source_name": "lecture6", "index": 383, "time": "00:36:06.820 --> 00:36:09.850", "speaker": "Alexander Vasserman", "text": "your response time increases."}, {"source_name": "lecture6", "index": 384, "time": "00:36:11.070 --> 00:36:12.169", "speaker": "Alexander Vasserman", "text": "that's"}, {"source_name": "lecture6", "index": 385, "time": "00:36:13.330 --> 00:36:14.759", "speaker": "Alexander Vasserman", "text": "you can measure"}, {"source_name": "lecture6", "index": 386, "time": "00:36:14.940 --> 00:36:21.479", "speaker": "Alexander Vasserman", "text": "exactly how your users will actually respond to it, and oftentimes that"}, {"source_name": "lecture6", "index": 387, "time": "00:36:21.710 --> 00:36:23.880", "speaker": "Alexander Vasserman", "text": "you'll have negative perception"}, {"source_name": "lecture6", "index": 388, "time": "00:36:24.250 --> 00:36:27.620", "speaker": "Alexander Vasserman", "text": "above basically 500\u00c2\u00a0ms threshold."}, {"source_name": "lecture6", "index": 389, "time": "00:36:27.670 --> 00:36:29.689", "speaker": "Alexander Vasserman", "text": "So it's quite important."}, {"source_name": "lecture6", "index": 390, "time": "00:36:30.640 --> 00:36:38.940", "speaker": "Alexander Vasserman", "text": "We might not be quite there, and it also, of course, depends on the size of number of documents that you're"}, {"source_name": "lecture6", "index": 391, "time": "00:36:39.520 --> 00:36:42.940", "speaker": "Alexander Vasserman", "text": "trying to search over and kind of the"}, {"source_name": "lecture6", "index": 392, "time": "00:36:43.710 --> 00:36:47.249", "speaker": "Alexander Vasserman", "text": "complexity of your search algorithms, etc., right?"}, {"source_name": "lecture6", "index": 393, "time": "00:36:47.690 --> 00:36:50.249", "speaker": "Alexander Vasserman", "text": "But those are the 2 main"}, {"source_name": "lecture6", "index": 394, "time": "00:36:52.240 --> 00:36:53.680", "speaker": "Alexander Vasserman", "text": "requirements"}, {"source_name": "lecture6", "index": 395, "time": "00:36:54.030 --> 00:36:55.809", "speaker": "Alexander Vasserman", "text": "that you are trying to achieve."}, {"source_name": "lecture6", "index": 396, "time": "00:36:59.050 --> 00:37:05.889", "speaker": "Alexander Vasserman", "text": "and kind of the the way I was talking about before. How do you decide which component potentially to work on."}, {"source_name": "lecture6", "index": 397, "time": "00:37:06.170 --> 00:37:07.040", "speaker": "Alexander Vasserman", "text": "Well."}, {"source_name": "lecture6", "index": 398, "time": "00:37:07.180 --> 00:37:09.070", "speaker": "Alexander Vasserman", "text": "one of the ways and"}, {"source_name": "lecture6", "index": 399, "time": "00:37:09.140 --> 00:37:13.850", "speaker": "Alexander Vasserman", "text": "most common way is, oh, my system does not kind of"}, {"source_name": "lecture6", "index": 400, "time": "00:37:14.230 --> 00:37:19.120", "speaker": "Alexander Vasserman", "text": "that doesn't do well on one of those 2 dimensions."}, {"source_name": "lecture6", "index": 401, "time": "00:37:19.260 --> 00:37:28.089", "speaker": "Alexander Vasserman", "text": "So let me see what component is responsible the most for, decreasing quality or inefficiency."}, {"source_name": "lecture6", "index": 402, "time": "00:37:28.120 --> 00:37:34.299", "speaker": "Alexander Vasserman", "text": "or you know, or what component is not developed enough, I can actually improve things"}, {"source_name": "lecture6", "index": 403, "time": "00:37:34.500 --> 00:37:38.100", "speaker": "Alexander Vasserman", "text": "more. So that's kind of again. Why, this"}, {"source_name": "lecture6", "index": 404, "time": "00:37:40.350 --> 00:37:46.440", "speaker": "Alexander Vasserman", "text": "view of the software project is important and kind of the why we talk about the"}, {"source_name": "lecture6", "index": 405, "time": "00:37:46.480 --> 00:37:49.269", "speaker": "Alexander Vasserman", "text": "this requirements, or what"}, {"source_name": "lecture6", "index": 406, "time": "00:37:50.420 --> 00:37:51.180", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture6", "index": 407, "time": "00:37:51.700 --> 00:37:52.500", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture6", "index": 408, "time": "00:37:52.900 --> 00:37:55.879", "speaker": "Alexander Vasserman", "text": "what what are we going to measure in some sense."}, {"source_name": "lecture6", "index": 409, "time": "00:37:56.500 --> 00:37:59.420", "speaker": "Alexander Vasserman", "text": "So now, specifically for"}, {"source_name": "lecture6", "index": 410, "time": "00:37:59.850 --> 00:38:01.630", "speaker": "Alexander Vasserman", "text": "a search engine."}, {"source_name": "lecture6", "index": 411, "time": "00:38:02.320 --> 00:38:03.549", "speaker": "Alexander Vasserman", "text": "we have"}, {"source_name": "lecture6", "index": 412, "time": "00:38:04.000 --> 00:38:06.819", "speaker": "Alexander Vasserman", "text": "essentially 2 separate components."}, {"source_name": "lecture6", "index": 413, "time": "00:38:07.700 --> 00:38:09.000", "speaker": "Alexander Vasserman", "text": "one part"}, {"source_name": "lecture6", "index": 414, "time": "00:38:09.040 --> 00:38:11.020", "speaker": "Alexander Vasserman", "text": "that takes place"}, {"source_name": "lecture6", "index": 415, "time": "00:38:11.130 --> 00:38:12.509", "speaker": "Alexander Vasserman", "text": "before"}, {"source_name": "lecture6", "index": 416, "time": "00:38:12.690 --> 00:38:16.259", "speaker": "Alexander Vasserman", "text": "it user takes any equity"}, {"source_name": "lecture6", "index": 417, "time": "00:38:16.330 --> 00:38:24.759", "speaker": "Alexander Vasserman", "text": "for user type, any queries. So that's called indexing process or offline process. So that's something where"}, {"source_name": "lecture6", "index": 418, "time": "00:38:25.280 --> 00:38:28.669", "speaker": "Alexander Vasserman", "text": "we do. Essentially, we prepared documents"}, {"source_name": "lecture6", "index": 419, "time": "00:38:29.050 --> 00:38:30.740", "speaker": "Alexander Vasserman", "text": "for being searched"}, {"source_name": "lecture6", "index": 420, "time": "00:38:31.680 --> 00:38:32.680", "speaker": "Alexander Vasserman", "text": "and then"}, {"source_name": "lecture6", "index": 421, "time": "00:38:32.780 --> 00:38:47.199", "speaker": "Alexander Vasserman", "text": "greedy process is what exactly happens when the user types in the query and real time or online. And so here we care about the latency and response time"}, {"source_name": "lecture6", "index": 422, "time": "00:38:47.500 --> 00:38:52.000", "speaker": "Alexander Vasserman", "text": "in the indexing process. What we care more about oftentimes is this."}, {"source_name": "lecture6", "index": 423, "time": "00:38:52.440 --> 00:38:57.099", "speaker": "Alexander Vasserman", "text": "potentially throughput, or like? You know, how much time are we spending on each document?"}, {"source_name": "lecture6", "index": 424, "time": "00:38:57.170 --> 00:39:00.750", "speaker": "Alexander Vasserman", "text": "maybe it's not important that"}, {"source_name": "lecture6", "index": 425, "time": "00:39:00.830 --> 00:39:02.200", "speaker": "Alexander Vasserman", "text": "necessarily"}, {"source_name": "lecture6", "index": 426, "time": "00:39:02.400 --> 00:39:13.599", "speaker": "Alexander Vasserman", "text": "we get things done fast, like takes view. Second, but we're probably doing something for a large number of documents. So it's"}, {"source_name": "lecture6", "index": 427, "time": "00:39:14.000 --> 00:39:18.460", "speaker": "Alexander Vasserman", "text": "costly in terms of compute, and things like that so kind of different"}, {"source_name": "lecture6", "index": 428, "time": "00:39:19.480 --> 00:39:22.010", "speaker": "Alexander Vasserman", "text": "reasons and different aspects."}, {"source_name": "lecture6", "index": 429, "time": "00:39:22.340 --> 00:39:23.279", "speaker": "Alexander Vasserman", "text": "Yes, Ralph."}, {"source_name": "lecture6", "index": 430, "time": "00:39:23.900 --> 00:39:27.120", "speaker": "Rafal \"Ralph\" Jasielec", "text": "So for the indexing process. How you're saying"}, {"source_name": "lecture6", "index": 431, "time": "00:39:28.800 --> 00:39:32.700", "speaker": "Rafal \"Ralph\" Jasielec", "text": "prior to the user interactions. So what exactly."}, {"source_name": "lecture6", "index": 432, "time": "00:39:33.290 --> 00:39:40.800", "speaker": "Rafal \"Ralph\" Jasielec", "text": "I guess what? What? What exactly is going on before. Let's say I type something in. Is there something happening behind scenes that"}, {"source_name": "lecture6", "index": 433, "time": "00:39:40.930 --> 00:39:42.310", "speaker": "Rafal \"Ralph\" Jasielec", "text": "kind of preps"}, {"source_name": "lecture6", "index": 434, "time": "00:39:42.740 --> 00:39:44.800", "speaker": "Rafal \"Ralph\" Jasielec", "text": "where your search or"}, {"source_name": "lecture6", "index": 435, "time": "00:39:45.010 --> 00:39:47.359", "speaker": "Alexander Vasserman", "text": "yes so"}, {"source_name": "lecture6", "index": 436, "time": "00:39:47.610 --> 00:39:48.720", "speaker": "Alexander Vasserman", "text": "if you"}, {"source_name": "lecture6", "index": 437, "time": "00:39:48.900 --> 00:39:51.960", "speaker": "Alexander Vasserman", "text": "remember the definition from like."}, {"source_name": "lecture6", "index": 438, "time": "00:39:52.080 --> 00:40:03.219", "speaker": "Alexander Vasserman", "text": "What is information that youable? And what kind of things we care about? a lot of it is. How do we organize information right? How do we organize our documents"}, {"source_name": "lecture6", "index": 439, "time": "00:40:03.240 --> 00:40:05.449", "speaker": "Alexander Vasserman", "text": "and all of that organizing"}, {"source_name": "lecture6", "index": 440, "time": "00:40:05.550 --> 00:40:07.069", "speaker": "Alexander Vasserman", "text": "happens"}, {"source_name": "lecture6", "index": 441, "time": "00:40:07.250 --> 00:40:10.329", "speaker": "Alexander Vasserman", "text": "in the indexing process?"}, {"source_name": "lecture6", "index": 442, "time": "00:40:10.490 --> 00:40:11.830", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture6", "index": 443, "time": "00:40:12.000 --> 00:40:14.310", "speaker": "Alexander Vasserman", "text": "before any queries that are submitted."}, {"source_name": "lecture6", "index": 444, "time": "00:40:15.250 --> 00:40:17.859", "speaker": "Alexander Vasserman", "text": "like we creating structures."}, {"source_name": "lecture6", "index": 445, "time": "00:40:17.910 --> 00:40:20.079", "speaker": "Alexander Vasserman", "text": "and those structures are used to"}, {"source_name": "lecture6", "index": 446, "time": "00:40:20.320 --> 00:40:22.819", "speaker": "Alexander Vasserman", "text": "during the query time."}, {"source_name": "lecture6", "index": 447, "time": "00:40:23.540 --> 00:40:24.350", "speaker": "Alexander Vasserman", "text": "Mary."}, {"source_name": "lecture6", "index": 448, "time": "00:40:24.930 --> 00:40:27.710", "speaker": "Alexander Vasserman", "text": "but it might be more kind of helpful."}, {"source_name": "lecture6", "index": 449, "time": "00:40:27.760 --> 00:40:29.739", "speaker": "Alexander Vasserman", "text": "Do you go over this slide"}, {"source_name": "lecture6", "index": 450, "time": "00:40:29.820 --> 00:40:32.959", "speaker": "Alexander Vasserman", "text": "to kind of see what are the components"}, {"source_name": "lecture6", "index": 451, "time": "00:40:33.030 --> 00:40:37.370", "speaker": "Alexander Vasserman", "text": "of the indexing process. And maybe that will give you a little bit more of an idea."}, {"source_name": "lecture6", "index": 452, "time": "00:40:40.000 --> 00:40:40.979", "speaker": "Alexander Vasserman", "text": "Alex."}, {"source_name": "lecture6", "index": 453, "time": "00:40:41.330 --> 00:40:42.810", "speaker": "Alexander Vasserman", "text": "do you have a question?"}, {"source_name": "lecture6", "index": 454, "time": "00:40:43.100 --> 00:40:49.939", "speaker": "Alex Wojtowicz", "text": "Yeah, this is a part of the slide. Then I like, I'll wait for it. But the next one process started in, went up. Silence uploaded."}, {"source_name": "lecture6", "index": 455, "time": "00:40:50.030 --> 00:40:55.999", "speaker": "Alex Wojtowicz", "text": "Is it always happening when there are changes in like? How they define indexes"}, {"source_name": "lecture6", "index": 456, "time": "00:40:56.140 --> 00:40:57.450", "speaker": "Alex Wojtowicz", "text": "like"}, {"source_name": "lecture6", "index": 457, "time": "00:40:57.480 --> 00:41:01.409", "speaker": "Alex Wojtowicz", "text": "when new, how many processes is in a crazy amount of data."}, {"source_name": "lecture6", "index": 458, "time": "00:41:01.940 --> 00:41:13.889", "speaker": "Alexander Vasserman", "text": "Yes, all of the above right. So basically yes, it's exactly what kind of described on on this slide a little bit so the first part is"}, {"source_name": "lecture6", "index": 459, "time": "00:41:14.150 --> 00:41:20.440", "speaker": "Alexander Vasserman", "text": "text acquisition, or you know the data acquisition. In most cases"}, {"source_name": "lecture6", "index": 460, "time": "00:41:20.560 --> 00:41:22.240", "speaker": "Alexander Vasserman", "text": "it's"}, {"source_name": "lecture6", "index": 461, "time": "00:41:22.490 --> 00:41:24.149", "speaker": "Alexander Vasserman", "text": "a pretty important part."}, {"source_name": "lecture6", "index": 462, "time": "00:41:24.750 --> 00:41:29.900", "speaker": "Alexander Vasserman", "text": "What is the set of documents. We're even going to be searching over. How do we"}, {"source_name": "lecture6", "index": 463, "time": "00:41:30.000 --> 00:41:31.769", "speaker": "Alexander Vasserman", "text": "collect them?"}, {"source_name": "lecture6", "index": 464, "time": "00:41:32.100 --> 00:41:35.390", "speaker": "Alexander Vasserman", "text": "How do we put them in some kind of a standard form"}, {"source_name": "lecture6", "index": 465, "time": "00:41:35.620 --> 00:41:39.030", "speaker": "Alexander Vasserman", "text": "so that our system can operate on them"}, {"source_name": "lecture6", "index": 466, "time": "00:41:39.340 --> 00:41:40.160", "speaker": "Alexander Vasserman", "text": "right?"}, {"source_name": "lecture6", "index": 467, "time": "00:41:40.680 --> 00:41:42.440", "speaker": "Alexander Vasserman", "text": "So that's"}, {"source_name": "lecture6", "index": 468, "time": "00:41:42.950 --> 00:41:52.250", "speaker": "Alexander Vasserman", "text": "in case of a web. It's something that's called crawler. But basically you have to somehow."}, {"source_name": "lecture6", "index": 469, "time": "00:41:52.640 --> 00:41:56.539", "speaker": "Alexander Vasserman", "text": "Get all develop documents out there"}, {"source_name": "lecture6", "index": 470, "time": "00:41:56.720 --> 00:41:59.129", "speaker": "Alexander Vasserman", "text": "and bring them into your system."}, {"source_name": "lecture6", "index": 471, "time": "00:41:59.390 --> 00:42:03.850", "speaker": "Alexander Vasserman", "text": "Right? So for web search. That's the text acquisition part"}, {"source_name": "lecture6", "index": 472, "time": "00:42:04.030 --> 00:42:05.500", "speaker": "Alexander Vasserman", "text": "for"}, {"source_name": "lecture6", "index": 473, "time": "00:42:08.310 --> 00:42:12.320", "speaker": "Alexander Vasserman", "text": "depending what your search engine is. It might be a"}, {"source_name": "lecture6", "index": 474, "time": "00:42:12.630 --> 00:42:21.189", "speaker": "Alexander Vasserman", "text": "You might be getting data from a few databases, and maybe they they they store e tax then."}, {"source_name": "lecture6", "index": 475, "time": "00:42:21.550 --> 00:42:27.669", "speaker": "Alexander Vasserman", "text": "or whatever, or like, you know, let's say it's a e-commerce site."}, {"source_name": "lecture6", "index": 476, "time": "00:42:27.690 --> 00:42:33.809", "speaker": "Alexander Vasserman", "text": "Maybe the the there is a system that collects descriptions from the sellers."}, {"source_name": "lecture6", "index": 477, "time": "00:42:33.920 --> 00:42:42.249", "speaker": "Alexander Vasserman", "text": "and those are stored in some database, and then you need to pull the data from that database or things like that. Right?"}, {"source_name": "lecture6", "index": 478, "time": "00:42:42.420 --> 00:42:43.910", "speaker": "Alexander Vasserman", "text": "So for us."}, {"source_name": "lecture6", "index": 479, "time": "00:42:44.340 --> 00:42:45.250", "speaker": "Alexander Vasserman", "text": "we are"}, {"source_name": "lecture6", "index": 480, "time": "00:42:45.800 --> 00:42:48.629", "speaker": "Alexander Vasserman", "text": "not going to focus too much on that part."}, {"source_name": "lecture6", "index": 481, "time": "00:42:50.000 --> 00:42:52.530", "speaker": "Alexander Vasserman", "text": "I'm, Jane, you are going to be providing"}, {"source_name": "lecture6", "index": 482, "time": "00:42:52.640 --> 00:43:00.119", "speaker": "Alexander Vasserman", "text": "files to you in something like Jason, so you can just log the files, and that's your text acquisition"}, {"source_name": "lecture6", "index": 483, "time": "00:43:00.240 --> 00:43:04.459", "speaker": "Alexander Vasserman", "text": "but those 3 phone files have to come from somewhere"}, {"source_name": "lecture6", "index": 484, "time": "00:43:04.690 --> 00:43:09.229", "speaker": "Alexander Vasserman", "text": "and most of the time. That's actually a non-trivial amount of work"}, {"source_name": "lecture6", "index": 485, "time": "00:43:09.430 --> 00:43:15.500", "speaker": "Alexander Vasserman", "text": "for things that are like for any kind of deal probably real work problem"}, {"source_name": "lecture6", "index": 486, "time": "00:43:15.520 --> 00:43:17.400", "speaker": "Alexander Vasserman", "text": "so that's kind of"}, {"source_name": "lecture6", "index": 487, "time": "00:43:17.500 --> 00:43:20.979", "speaker": "Alexander Vasserman", "text": "yeah, sometimes the hardest or most weighted part of the system."}, {"source_name": "lecture6", "index": 488, "time": "00:43:21.920 --> 00:43:22.729", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture6", "index": 489, "time": "00:43:23.220 --> 00:43:27.269", "speaker": "Fahad Khan", "text": "do databases, store files, or just text from files?"}, {"source_name": "lecture6", "index": 490, "time": "00:43:28.350 --> 00:43:36.040", "speaker": "Alexander Vasserman", "text": "Yes. Well, that's a good question. And there are all kinds of different database types, really right? So the"}, {"source_name": "lecture6", "index": 491, "time": "00:43:36.800 --> 00:43:48.149", "speaker": "Alexander Vasserman", "text": "most commonly, when people talk about databases people talk about relational databases. And so you have essentially something that source structured records."}, {"source_name": "lecture6", "index": 492, "time": "00:43:48.780 --> 00:43:53.059", "speaker": "Alexander Vasserman", "text": "But some of the fields in in those records might be taxed fields"}, {"source_name": "lecture6", "index": 493, "time": "00:43:53.090 --> 00:44:06.290", "speaker": "Alexander Vasserman", "text": "right? So then, you know, it's just a thing. It's just another data type that can be stored in a relational database and that can be a large amount of text"}, {"source_name": "lecture6", "index": 494, "time": "00:44:06.700 --> 00:44:07.899", "speaker": "Alexander Vasserman", "text": "it's"}, {"source_name": "lecture6", "index": 495, "time": "00:44:08.200 --> 00:44:14.090", "speaker": "Alexander Vasserman", "text": "relational databases are not very well optimized for doing anything with that large amount of text."}, {"source_name": "lecture6", "index": 496, "time": "00:44:14.210 --> 00:44:19.710", "speaker": "Alexander Vasserman", "text": "and so that's why you want to have a separate search system."}, {"source_name": "lecture6", "index": 497, "time": "00:44:20.520 --> 00:44:32.460", "speaker": "Alexander Vasserman", "text": "A. And that's why they they're going to pull data from that database or something like that. but there are different types of databases. You might have heard of no sequel databases, or"}, {"source_name": "lecture6", "index": 498, "time": "00:44:32.680 --> 00:44:38.159", "speaker": "Alexander Vasserman", "text": "various types, so so like there has been a a lot of"}, {"source_name": "lecture6", "index": 499, "time": "00:44:38.350 --> 00:44:43.569", "speaker": "Alexander Vasserman", "text": "other types of databases optimized for different things but"}, {"source_name": "lecture6", "index": 500, "time": "00:44:43.700 --> 00:44:45.330", "speaker": "Alexander Vasserman", "text": "oh, generally."}, {"source_name": "lecture6", "index": 501, "time": "00:44:46.320 --> 00:44:49.069", "speaker": "Alexander Vasserman", "text": "and it on in on very high level."}, {"source_name": "lecture6", "index": 502, "time": "00:44:49.630 --> 00:44:51.089", "speaker": "Alexander Vasserman", "text": "I would"}, {"source_name": "lecture6", "index": 503, "time": "00:44:51.260 --> 00:44:52.459", "speaker": "Alexander Vasserman", "text": "Oh, 3. It"}, {"source_name": "lecture6", "index": 504, "time": "00:44:52.540 --> 00:44:55.849", "speaker": "Alexander Vasserman", "text": "databases kind of heavily structured data."}, {"source_name": "lecture6", "index": 505, "time": "00:44:55.940 --> 00:45:04.869", "speaker": "Alexander Vasserman", "text": "So you have different fields in the record. And you compare basically when you do operations you compare whether or not"}, {"source_name": "lecture6", "index": 506, "time": "00:45:05.000 --> 00:45:07.950", "speaker": "Alexander Vasserman", "text": "I feel digital to some"}, {"source_name": "lecture6", "index": 507, "time": "00:45:08.140 --> 00:45:10.739", "speaker": "Alexander Vasserman", "text": "part of the creative that you are issuing. But"}, {"source_name": "lecture6", "index": 508, "time": "00:45:10.780 --> 00:45:29.100", "speaker": "Alexander Vasserman", "text": "there, there is very little logic in terms of what that equality means. Right? That's just exactly the same right? Or you have like very state definitions. We basically thing. In very first lecture we talked a little bit about the difference between databases and the search engine."}, {"source_name": "lecture6", "index": 509, "time": "00:45:29.290 --> 00:45:31.779", "speaker": "Alexander Vasserman", "text": "and so oftentimes"}, {"source_name": "lecture6", "index": 510, "time": "00:45:31.810 --> 00:45:33.129", "speaker": "Alexander Vasserman", "text": "for"}, {"source_name": "lecture6", "index": 511, "time": "00:45:33.170 --> 00:45:35.600", "speaker": "Alexander Vasserman", "text": "operations of a"}, {"source_name": "lecture6", "index": 512, "time": "00:45:35.720 --> 00:45:37.440", "speaker": "Alexander Vasserman", "text": "of your application."}, {"source_name": "lecture6", "index": 513, "time": "00:45:37.540 --> 00:45:41.150", "speaker": "Alexander Vasserman", "text": "Whatever interacts with your users in terms of collecting data"}, {"source_name": "lecture6", "index": 514, "time": "00:45:41.190 --> 00:45:47.079", "speaker": "Alexander Vasserman", "text": "that you might want to use a database and 3 text that they enter, maybe as just"}, {"source_name": "lecture6", "index": 515, "time": "00:45:47.100 --> 00:45:50.730", "speaker": "Alexander Vasserman", "text": "a black box. Essentially well, there is some text that we"}, {"source_name": "lecture6", "index": 516, "time": "00:45:51.310 --> 00:45:54.700", "speaker": "Alexander Vasserman", "text": "we don't know what to do with it. but then."}, {"source_name": "lecture6", "index": 517, "time": "00:45:55.180 --> 00:45:57.850", "speaker": "Alexander Vasserman", "text": "if you want to search over that data"}, {"source_name": "lecture6", "index": 518, "time": "00:45:59.050 --> 00:46:00.669", "speaker": "Alexander Vasserman", "text": "you want to."}, {"source_name": "lecture6", "index": 519, "time": "00:46:00.890 --> 00:46:01.709", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture6", "index": 520, "time": "00:46:01.730 --> 00:46:06.419", "speaker": "Alexander Vasserman", "text": "move it to a search engine through this indexing process."}, {"source_name": "lecture6", "index": 521, "time": "00:46:08.390 --> 00:46:09.850", "speaker": "Alexander Vasserman", "text": "Hopefully, that makes sense."}, {"source_name": "lecture6", "index": 522, "time": "00:46:13.540 --> 00:46:14.929", "speaker": "Alexander Vasserman", "text": "any questions."}, {"source_name": "lecture6", "index": 523, "time": "00:46:14.950 --> 00:46:19.129", "speaker": "Alexander Vasserman", "text": "We're going to get a little bit more deeper into this. So like, you know, if it's"}, {"source_name": "lecture6", "index": 524, "time": "00:46:19.190 --> 00:46:20.120", "speaker": "Alexander Vasserman", "text": "not"}, {"source_name": "lecture6", "index": 525, "time": "00:46:20.190 --> 00:46:29.109", "speaker": "Alexander Vasserman", "text": "making total sense, it's okay. i'm going to talk a little bit more about it. And also, we're going to get into"}, {"source_name": "lecture6", "index": 526, "time": "00:46:29.480 --> 00:46:32.549", "speaker": "Alexander Vasserman", "text": "decode and kind of looking at."}, {"source_name": "lecture6", "index": 527, "time": "00:46:32.740 --> 00:46:33.589", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture6", "index": 528, "time": "00:46:34.470 --> 00:46:40.870", "speaker": "Alexander Vasserman", "text": "what it is that we've done so far. How those things map onto a different"}, {"source_name": "lecture6", "index": 529, "time": "00:46:40.950 --> 00:46:43.359", "speaker": "Alexander Vasserman", "text": "categories of things."}, {"source_name": "lecture6", "index": 530, "time": "00:46:43.670 --> 00:46:55.810", "speaker": "Alexander Vasserman", "text": "and the mapping will not be necessarily always be very obvious, because we did fairly all work so far. But, you know, hopefully, it's going to be a good illustration for you."}, {"source_name": "lecture6", "index": 531, "time": "00:46:57.170 --> 00:46:58.189", "speaker": "Alexander Vasserman", "text": "So."}, {"source_name": "lecture6", "index": 532, "time": "00:46:59.310 --> 00:47:00.799", "speaker": "Alexander Vasserman", "text": "moving on"}, {"source_name": "lecture6", "index": 533, "time": "00:47:01.110 --> 00:47:02.800", "speaker": "Alexander Vasserman", "text": "to the next stage"}, {"source_name": "lecture6", "index": 534, "time": "00:47:03.190 --> 00:47:06.779", "speaker": "Alexander Vasserman", "text": "that stages text transformation"}, {"source_name": "lecture6", "index": 535, "time": "00:47:06.980 --> 00:47:09.169", "speaker": "Alexander Vasserman", "text": "or document transformation."}, {"source_name": "lecture6", "index": 536, "time": "00:47:09.420 --> 00:47:13.179", "speaker": "Alexander Vasserman", "text": "basically the document might have"}, {"source_name": "lecture6", "index": 537, "time": "00:47:13.410 --> 00:47:14.910", "speaker": "Alexander Vasserman", "text": "a lot of"}, {"source_name": "lecture6", "index": 538, "time": "00:47:15.640 --> 00:47:23.130", "speaker": "Alexander Vasserman", "text": "structure data associated with it, or just a lot of data. And sometimes it's important to"}, {"source_name": "lecture6", "index": 539, "time": "00:47:23.200 --> 00:47:24.749", "speaker": "Alexander Vasserman", "text": "figure out"}, {"source_name": "lecture6", "index": 540, "time": "00:47:24.860 --> 00:47:30.610", "speaker": "Alexander Vasserman", "text": "what are the fields that you want to be searching on, and what fields are maybe not relevant."}, {"source_name": "lecture6", "index": 541, "time": "00:47:30.940 --> 00:47:33.299", "speaker": "Alexander Vasserman", "text": "so, for example, you know, in"}, {"source_name": "lecture6", "index": 542, "time": "00:47:33.340 --> 00:47:39.809", "speaker": "Alexander Vasserman", "text": "Wikipedia, example, that we looked at briefly when they were looking at Json."}, {"source_name": "lecture6", "index": 543, "time": "00:47:39.850 --> 00:47:41.330", "speaker": "Alexander Vasserman", "text": "maybe"}, {"source_name": "lecture6", "index": 544, "time": "00:47:41.370 --> 00:47:50.019", "speaker": "Alexander Vasserman", "text": "we don't care about URL. You probably do not care about the document. Id as as as something that we're going to be searching by"}, {"source_name": "lecture6", "index": 545, "time": "00:47:50.910 --> 00:47:54.849", "speaker": "Alexander Vasserman", "text": "so kind of some of those decisions"}, {"source_name": "lecture6", "index": 546, "time": "00:47:55.660 --> 00:48:01.549", "speaker": "Alexander Vasserman", "text": "are part of the transformation from the document that you acquired"}, {"source_name": "lecture6", "index": 547, "time": "00:48:01.660 --> 00:48:07.470", "speaker": "Alexander Vasserman", "text": "to some kind of more standardized representation, that your system is going to be operating on."}, {"source_name": "lecture6", "index": 548, "time": "00:48:09.110 --> 00:48:16.169", "speaker": "Alexander Vasserman", "text": "so yeah, so basically identifying the important parts maybe doing some waiting things like that."}, {"source_name": "lecture6", "index": 549, "time": "00:48:16.220 --> 00:48:19.430", "speaker": "Alexander Vasserman", "text": "Then there is some normalization."}, {"source_name": "lecture6", "index": 550, "time": "00:48:21.940 --> 00:48:23.310", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture6", "index": 551, "time": "00:48:23.740 --> 00:48:27.510", "speaker": "Alexander Vasserman", "text": "so, for example, what we did"}, {"source_name": "lecture6", "index": 552, "time": "00:48:27.650 --> 00:48:30.249", "speaker": "Alexander Vasserman", "text": "was lowercase everything right?"}, {"source_name": "lecture6", "index": 553, "time": "00:48:30.360 --> 00:48:34.510", "speaker": "Alexander Vasserman", "text": "that's a type of normalization of the tax."}, {"source_name": "lecture6", "index": 554, "time": "00:48:34.920 --> 00:48:43.270", "speaker": "Alexander Vasserman", "text": "And the organization is basically splitting things into words. So if you look at that problem a little bit as well."}, {"source_name": "lecture6", "index": 555, "time": "00:48:43.530 --> 00:48:50.690", "speaker": "Alexander Vasserman", "text": "and for now using again very simplistic way of doing that, but just using split."}, {"source_name": "lecture6", "index": 556, "time": "00:48:50.730 --> 00:48:53.700", "speaker": "Alexander Vasserman", "text": "But it's more complicated."}, {"source_name": "lecture6", "index": 557, "time": "00:48:53.950 --> 00:48:55.530", "speaker": "Alexander Vasserman", "text": "So it's actually"}, {"source_name": "lecture6", "index": 558, "time": "00:48:55.880 --> 00:48:58.709", "speaker": "Alexander Vasserman", "text": "the transformation is about"}, {"source_name": "lecture6", "index": 559, "time": "00:48:59.040 --> 00:48:59.939", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture6", "index": 560, "time": "00:49:00.300 --> 00:49:01.870", "speaker": "Alexander Vasserman", "text": "we've got"}, {"source_name": "lecture6", "index": 561, "time": "00:49:02.020 --> 00:49:04.210", "speaker": "Alexander Vasserman", "text": "our document. That's"}, {"source_name": "lecture6", "index": 562, "time": "00:49:06.050 --> 00:49:08.810", "speaker": "Alexander Vasserman", "text": "it's a random format"}, {"source_name": "lecture6", "index": 563, "time": "00:49:08.950 --> 00:49:14.580", "speaker": "Alexander Vasserman", "text": "depending on on the source of the document. They might be pulling documents from multiple sources."}, {"source_name": "lecture6", "index": 564, "time": "00:49:14.600 --> 00:49:19.840", "speaker": "Alexander Vasserman", "text": "They they might have different fields depending on the source, etc. So"}, {"source_name": "lecture6", "index": 565, "time": "00:49:20.050 --> 00:49:37.219", "speaker": "Alexander Vasserman", "text": "we are kind of trying to standardize both in terms of the fields that we're searching over and in terms of how the text is represented. So, removing capitalization is the most obvious one, at least in English, right so the world"}, {"source_name": "lecture6", "index": 566, "time": "00:49:37.290 --> 00:49:47.709", "speaker": "Alexander Vasserman", "text": "that shouldn't really matter most of the time. That or not the word is capitalized but also like splitting into individual words. that's kind of part of the standard process."}, {"source_name": "lecture6", "index": 567, "time": "00:49:48.660 --> 00:50:00.759", "speaker": "Alexander Vasserman", "text": "And finally, the the the final part is once we represent the documents in kind of standard way, we want to create those data structures that support"}, {"source_name": "lecture6", "index": 568, "time": "00:50:00.830 --> 00:50:09.300", "speaker": "Alexander Vasserman", "text": "fast access, right or fast search. That's something that we are going to focus a lot on improving. That's kind of"}, {"source_name": "lecture6", "index": 569, "time": "00:50:09.340 --> 00:50:12.769", "speaker": "Alexander Vasserman", "text": "one of the biggest things that"}, {"source_name": "lecture6", "index": 570, "time": "00:50:14.070 --> 00:50:17.140", "speaker": "Alexander Vasserman", "text": "make search work right"}, {"source_name": "lecture6", "index": 571, "time": "00:50:17.270 --> 00:50:20.889", "speaker": "Alexander Vasserman", "text": "so we will get to that very soon."}, {"source_name": "lecture6", "index": 572, "time": "00:50:22.510 --> 00:50:24.469", "speaker": "Alexander Vasserman", "text": "for now things like"}, {"source_name": "lecture6", "index": 573, "time": "00:50:26.350 --> 00:50:27.140", "speaker": "Alexander Vasserman", "text": "well."}, {"source_name": "lecture6", "index": 574, "time": "00:50:27.840 --> 00:50:28.999", "speaker": "Alexander Vasserman", "text": "you know, when"}, {"source_name": "lecture6", "index": 575, "time": "00:50:29.310 --> 00:50:32.309", "speaker": "Alexander Vasserman", "text": "maybe when you convert a"}, {"source_name": "lecture6", "index": 576, "time": "00:50:32.500 --> 00:50:41.079", "speaker": "Alexander Vasserman", "text": "document to a set for your homework. That might be kind of a little bit of a preparation for more efficient searching"}, {"source_name": "lecture6", "index": 577, "time": "00:50:41.320 --> 00:50:54.560", "speaker": "Alexander Vasserman", "text": "so like it's a little bit of a stretch to to to call it an index. But that's kind of the idea is given our documents. How do we organize them so that search can be efficient."}, {"source_name": "lecture6", "index": 578, "time": "00:50:56.120 --> 00:50:57.880", "speaker": "Alexander Vasserman", "text": "So kind of"}, {"source_name": "lecture6", "index": 579, "time": "00:50:58.100 --> 00:51:03.430", "speaker": "Alexander Vasserman", "text": "looking at all of that in a picture a little bit more and"}, {"source_name": "lecture6", "index": 580, "time": "00:51:03.570 --> 00:51:07.099", "speaker": "Alexander Vasserman", "text": "kind of representing it a little bit more visually."}, {"source_name": "lecture6", "index": 581, "time": "00:51:08.050 --> 00:51:09.450", "speaker": "Alexander Vasserman", "text": "We have"}, {"source_name": "lecture6", "index": 582, "time": "00:51:10.200 --> 00:51:11.250", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture6", "index": 583, "time": "00:51:11.840 --> 00:51:24.910", "speaker": "Alexander Vasserman", "text": "resource or like, you know, some documents out there, whether you know in in this picture. It's email or web pages, news articles, whatever but they are somewhere out there."}, {"source_name": "lecture6", "index": 584, "time": "00:51:26.580 --> 00:51:29.330", "speaker": "Alexander Vasserman", "text": "we need to run text acquisition."}, {"source_name": "lecture6", "index": 585, "time": "00:51:29.450 --> 00:51:30.819", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture6", "index": 586, "time": "00:51:30.920 --> 00:51:34.319", "speaker": "Alexander Vasserman", "text": "we oftentimes want to store"}, {"source_name": "lecture6", "index": 587, "time": "00:51:34.840 --> 00:51:35.919", "speaker": "Alexander Vasserman", "text": "somewhat"}, {"source_name": "lecture6", "index": 588, "time": "00:51:37.980 --> 00:51:42.060", "speaker": "Alexander Vasserman", "text": "various level of authorization. It's kind of their."}, {"source_name": "lecture6", "index": 589, "time": "00:51:42.230 --> 00:52:00.010", "speaker": "Alexander Vasserman", "text": "The boundary is not necessarily very stake between text acquisition, text transformation. But basically we do want to store the original documents in some they document data store so that we can later present those documents to the user"}, {"source_name": "lecture6", "index": 590, "time": "00:52:00.020 --> 00:52:08.359", "speaker": "Alexander Vasserman", "text": "in a search results, or when they click on the specific search result, etc. we want to present something that's"}, {"source_name": "lecture6", "index": 591, "time": "00:52:10.240 --> 00:52:12.729", "speaker": "Alexander Vasserman", "text": "pretty close to what we acquired."}, {"source_name": "lecture6", "index": 592, "time": "00:52:13.140 --> 00:52:16.920", "speaker": "Alexander Vasserman", "text": "So that's the document store is where we"}, {"source_name": "lecture6", "index": 593, "time": "00:52:17.000 --> 00:52:17.839", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture6", "index": 594, "time": "00:52:18.070 --> 00:52:20.780", "speaker": "Alexander Vasserman", "text": "put the result of tax, the condition."}, {"source_name": "lecture6", "index": 595, "time": "00:52:22.350 --> 00:52:23.560", "speaker": "Alexander Vasserman", "text": "Then we do"}, {"source_name": "lecture6", "index": 596, "time": "00:52:24.230 --> 00:52:34.050", "speaker": "Alexander Vasserman", "text": "some transformation on individual documents. We create some index across all documents to make search faster and"}, {"source_name": "lecture6", "index": 597, "time": "00:52:34.100 --> 00:52:35.490", "speaker": "Alexander Vasserman", "text": "we create index."}, {"source_name": "lecture6", "index": 598, "time": "00:52:35.680 --> 00:52:39.169", "speaker": "Alexander Vasserman", "text": "So basically for the indexing process, there are"}, {"source_name": "lecture6", "index": 599, "time": "00:52:39.260 --> 00:52:40.910", "speaker": "Alexander Vasserman", "text": "essentially 2 outputs."}, {"source_name": "lecture6", "index": 600, "time": "00:52:41.140 --> 00:52:43.060", "speaker": "Alexander Vasserman", "text": "the document data store"}, {"source_name": "lecture6", "index": 601, "time": "00:52:43.160 --> 00:52:44.359", "speaker": "Alexander Vasserman", "text": "and the index."}, {"source_name": "lecture6", "index": 602, "time": "00:52:44.730 --> 00:52:46.890", "speaker": "Alexander Vasserman", "text": "That's the 2 important"}, {"source_name": "lecture6", "index": 603, "time": "00:52:47.160 --> 00:52:50.129", "speaker": "Alexander Vasserman", "text": "outputs of this process."}, {"source_name": "lecture6", "index": 604, "time": "00:52:50.150 --> 00:52:53.480", "speaker": "Alexander Vasserman", "text": "And like I said, this is the process that happens offline."}, {"source_name": "lecture6", "index": 605, "time": "00:52:53.610 --> 00:52:55.229", "speaker": "Alexander Vasserman", "text": "meaning that"}, {"source_name": "lecture6", "index": 606, "time": "00:52:56.910 --> 00:53:00.750", "speaker": "Alexander Vasserman", "text": "it happens independently of the user query."}, {"source_name": "lecture6", "index": 607, "time": "00:53:00.790 --> 00:53:02.829", "speaker": "Alexander Vasserman", "text": "So none of this is"}, {"source_name": "lecture6", "index": 608, "time": "00:53:02.980 --> 00:53:05.450", "speaker": "Alexander Vasserman", "text": "done. In response to"}, {"source_name": "lecture6", "index": 609, "time": "00:53:05.470 --> 00:53:07.230", "speaker": "Alexander Vasserman", "text": "a user query."}, {"source_name": "lecture6", "index": 610, "time": "00:53:07.280 --> 00:53:11.800", "speaker": "Alexander Vasserman", "text": "This is more in the response to saying, oh, there is some"}, {"source_name": "lecture6", "index": 611, "time": "00:53:11.840 --> 00:53:14.899", "speaker": "Alexander Vasserman", "text": "documents available that I would like to search over"}, {"source_name": "lecture6", "index": 612, "time": "00:53:15.030 --> 00:53:16.899", "speaker": "Alexander Vasserman", "text": "right, whether"}, {"source_name": "lecture6", "index": 613, "time": "00:53:17.310 --> 00:53:25.029", "speaker": "Alexander Vasserman", "text": "that's because new documents, all this, like you always get in charge documents like this web pages, for example."}, {"source_name": "lecture6", "index": 614, "time": "00:53:25.300 --> 00:53:29.990", "speaker": "Alexander Vasserman", "text": "that's all this new web page is created, or with you know again"}, {"source_name": "lecture6", "index": 615, "time": "00:53:30.010 --> 00:53:44.799", "speaker": "Alexander Vasserman", "text": "taking e-commerce site, a seller might be selling new products every day, or like, you know, if you have a lot of sell different sellers, some of them will change something all the time. So you need to keep track of those changes and those changes."}, {"source_name": "lecture6", "index": 616, "time": "00:53:44.880 --> 00:53:49.230", "speaker": "Alexander Vasserman", "text": "We'll trigger some of the processing in the indexing process right?"}, {"source_name": "lecture6", "index": 617, "time": "00:53:49.380 --> 00:53:51.589", "speaker": "Alexander Vasserman", "text": "Or you want to just expand"}, {"source_name": "lecture6", "index": 618, "time": "00:53:51.640 --> 00:54:03.289", "speaker": "Alexander Vasserman", "text": "what you're searching over. And maybe there is another source of information completely different sources that you want to integrate, and then you just run over a large number of documents"}, {"source_name": "lecture6", "index": 619, "time": "00:54:03.720 --> 00:54:05.680", "speaker": "Alexander Vasserman", "text": "all the documents from that source."}, {"source_name": "lecture6", "index": 620, "time": "00:54:06.050 --> 00:54:09.049", "speaker": "Alexander Vasserman", "text": "So, but basically all of this is done"}, {"source_name": "lecture6", "index": 621, "time": "00:54:09.260 --> 00:54:10.139", "speaker": "Alexander Vasserman", "text": "all right."}, {"source_name": "lecture6", "index": 622, "time": "00:54:11.310 --> 00:54:20.530", "speaker": "Alexander Vasserman", "text": "It may be influenced by what kind of queries you anticipate that users will do. And basically you're building index in a way that"}, {"source_name": "lecture6", "index": 623, "time": "00:54:20.670 --> 00:54:22.840", "speaker": "Alexander Vasserman", "text": "they'll help you me."}, {"source_name": "lecture6", "index": 624, "time": "00:54:23.150 --> 00:54:24.529", "speaker": "Alexander Vasserman", "text": "The queries"}, {"source_name": "lecture6", "index": 625, "time": "00:54:24.910 --> 00:54:26.000", "speaker": "Alexander Vasserman", "text": "from fast."}, {"source_name": "lecture6", "index": 626, "time": "00:54:26.570 --> 00:54:27.500", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture6", "index": 627, "time": "00:54:28.400 --> 00:54:30.689", "speaker": "Alexander Vasserman", "text": "this all happens before"}, {"source_name": "lecture6", "index": 628, "time": "00:54:32.610 --> 00:54:34.550", "speaker": "Alexander Vasserman", "text": "before the queries happen"}, {"source_name": "lecture6", "index": 629, "time": "00:54:34.680 --> 00:54:35.359", "speaker": "Alexander Vasserman", "text": "right?"}, {"source_name": "lecture6", "index": 630, "time": "00:54:37.470 --> 00:54:40.329", "speaker": "Alexander Vasserman", "text": "Does that conceptually make sense that like"}, {"source_name": "lecture6", "index": 631, "time": "00:54:40.360 --> 00:54:46.319", "speaker": "Alexander Vasserman", "text": "kind of this offline process? Why, we need it? What it's kind of at least in very"}, {"source_name": "lecture6", "index": 632, "time": "00:54:46.420 --> 00:54:48.549", "speaker": "Alexander Vasserman", "text": "general terms what it's doing."}, {"source_name": "lecture6", "index": 633, "time": "00:54:51.870 --> 00:54:53.310", "speaker": "Alexander Vasserman", "text": "all right."}, {"source_name": "lecture6", "index": 634, "time": "00:54:53.740 --> 00:54:54.969", "speaker": "Alexander Vasserman", "text": "So done."}, {"source_name": "lecture6", "index": 635, "time": "00:54:56.330 --> 00:54:57.200", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture6", "index": 636, "time": "00:54:58.260 --> 00:55:10.860", "speaker": "Alexander Vasserman", "text": "next part is the query process. What actually happens in the response degree, or actually part of that process you can think of is even a help user"}, {"source_name": "lecture6", "index": 637, "time": "00:55:10.940 --> 00:55:16.709", "speaker": "Alexander Vasserman", "text": "create the query or kind of guide user into creating"}, {"source_name": "lecture6", "index": 638, "time": "00:55:17.230 --> 00:55:18.629", "speaker": "Alexander Vasserman", "text": "Oh, good, great!"}, {"source_name": "lecture6", "index": 639, "time": "00:55:18.690 --> 00:55:20.209", "speaker": "Alexander Vasserman", "text": "So that there."}, {"source_name": "lecture6", "index": 640, "time": "00:55:20.900 --> 00:55:24.350", "speaker": "Alexander Vasserman", "text": "specific enough to to represent what it is that they want"}, {"source_name": "lecture6", "index": 641, "time": "00:55:24.660 --> 00:55:25.529", "speaker": "Alexander Vasserman", "text": "for."}, {"source_name": "lecture6", "index": 642, "time": "00:55:25.930 --> 00:55:27.579", "speaker": "Alexander Vasserman", "text": "maybe not"}, {"source_name": "lecture6", "index": 643, "time": "00:55:28.010 --> 00:55:36.919", "speaker": "Alexander Vasserman", "text": "too specific, so that they can get more documents, or you know they the more standard thing is like, you know. Maybe there is some"}, {"source_name": "lecture6", "index": 644, "time": "00:55:37.020 --> 00:55:41.019", "speaker": "Alexander Vasserman", "text": "misspelling that you want to automatically propose correction to."}, {"source_name": "lecture6", "index": 645, "time": "00:55:41.150 --> 00:55:42.629", "speaker": "Alexander Vasserman", "text": "etc.,"}, {"source_name": "lecture6", "index": 646, "time": "00:55:43.060 --> 00:55:47.399", "speaker": "Alexander Vasserman", "text": "right? So basically there is some kind of user interaction component."}, {"source_name": "lecture6", "index": 647, "time": "00:55:47.440 --> 00:55:48.339", "speaker": "Alexander Vasserman", "text": "That"}, {"source_name": "lecture6", "index": 648, "time": "00:55:48.410 --> 00:55:49.339", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture6", "index": 649, "time": "00:55:50.500 --> 00:55:56.320", "speaker": "Alexander Vasserman", "text": "takes the query from the user and maybe helps these, the"}, {"source_name": "lecture6", "index": 650, "time": "00:55:56.390 --> 00:55:57.830", "speaker": "Alexander Vasserman", "text": "creation of the creating."}, {"source_name": "lecture6", "index": 651, "time": "00:55:58.190 --> 00:55:59.080", "speaker": "Alexander Vasserman", "text": "Then"}, {"source_name": "lecture6", "index": 652, "time": "00:55:59.230 --> 00:56:00.080", "speaker": "Alexander Vasserman", "text": "there is"}, {"source_name": "lecture6", "index": 653, "time": "00:56:00.290 --> 00:56:01.310", "speaker": "Alexander Vasserman", "text": "another"}, {"source_name": "lecture6", "index": 654, "time": "00:56:01.590 --> 00:56:13.180", "speaker": "Alexander Vasserman", "text": "component is basically again doing normalization. So let's say, lowercasing everything. And and the organization which is again splitting"}, {"source_name": "lecture6", "index": 655, "time": "00:56:13.770 --> 00:56:15.469", "speaker": "Alexander Vasserman", "text": "it into individual words."}, {"source_name": "lecture6", "index": 656, "time": "00:56:15.600 --> 00:56:18.060", "speaker": "Alexander Vasserman", "text": "Remember, we had to"}, {"source_name": "lecture6", "index": 657, "time": "00:56:18.190 --> 00:56:26.350", "speaker": "Alexander Vasserman", "text": "split, creating towards the same way that this, with documents and towards, and the lower case, both of them, and in general."}, {"source_name": "lecture6", "index": 658, "time": "00:56:26.660 --> 00:56:31.069", "speaker": "Alexander Vasserman", "text": "whatever the process is, it should be applied the same to we"}, {"source_name": "lecture6", "index": 659, "time": "00:56:31.220 --> 00:56:32.620", "speaker": "Alexander Vasserman", "text": "and the document"}, {"source_name": "lecture6", "index": 660, "time": "00:56:32.920 --> 00:56:39.740", "speaker": "Alexander Vasserman", "text": "because they want to be able to compare them afterwards. So if, for example, you"}, {"source_name": "lecture6", "index": 661, "time": "00:56:39.970 --> 00:56:43.900", "speaker": "Alexander Vasserman", "text": "lowercase everything in the equity, but not in the document."}, {"source_name": "lecture6", "index": 662, "time": "00:56:44.240 --> 00:56:53.450", "speaker": "Alexander Vasserman", "text": "Well, now, you wouldn't be able to match as easily they capitalize boards in the document, even though it should be exact match"}, {"source_name": "lecture6", "index": 663, "time": "00:56:53.800 --> 00:56:56.070", "speaker": "Alexander Vasserman", "text": "right? So that's kind of"}, {"source_name": "lecture6", "index": 664, "time": "00:56:56.390 --> 00:56:57.310", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture6", "index": 665, "time": "00:56:58.620 --> 00:57:05.909", "speaker": "Alexander Vasserman", "text": "and there could be additional transformations so so like, you know, they'll talk a little bit more about it. But, like"}, {"source_name": "lecture6", "index": 666, "time": "00:57:05.940 --> 00:57:10.980", "speaker": "Alexander Vasserman", "text": "you, you, you might introduce some synonyms, automatically expand the query, using synonyms"}, {"source_name": "lecture6", "index": 667, "time": "00:57:11.030 --> 00:57:12.779", "speaker": "Alexander Vasserman", "text": "or"}, {"source_name": "lecture6", "index": 668, "time": "00:57:13.020 --> 00:57:16.180", "speaker": "Alexander Vasserman", "text": "other kind of enrichments of the query so like"}, {"source_name": "lecture6", "index": 669, "time": "00:57:16.210 --> 00:57:21.020", "speaker": "Alexander Vasserman", "text": "kind of pre processing the query side how do we make"}, {"source_name": "lecture6", "index": 670, "time": "00:57:22.790 --> 00:57:26.560", "speaker": "Alexander Vasserman", "text": "The really better, essentially for the rest of the process?"}, {"source_name": "lecture6", "index": 671, "time": "00:57:30.560 --> 00:57:32.070", "speaker": "Alexander Vasserman", "text": "The next part is"}, {"source_name": "lecture6", "index": 672, "time": "00:57:32.140 --> 00:57:33.120", "speaker": "Alexander Vasserman", "text": "ranking"}, {"source_name": "lecture6", "index": 673, "time": "00:57:33.810 --> 00:57:35.339", "speaker": "Alexander Vasserman", "text": "or"}, {"source_name": "lecture6", "index": 674, "time": "00:57:35.380 --> 00:57:40.930", "speaker": "Alexander Vasserman", "text": "you know what we did in matching or ranking. That's kind of the core of the"}, {"source_name": "lecture6", "index": 675, "time": "00:57:41.060 --> 00:57:42.810", "speaker": "Alexander Vasserman", "text": "search"}, {"source_name": "lecture6", "index": 676, "time": "00:57:43.690 --> 00:57:46.089", "speaker": "Alexander Vasserman", "text": "that mean the best documents"}, {"source_name": "lecture6", "index": 677, "time": "00:57:46.140 --> 00:57:47.009", "speaker": "Alexander Vasserman", "text": "for"}, {"source_name": "lecture6", "index": 678, "time": "00:57:48.600 --> 00:57:50.409", "speaker": "Alexander Vasserman", "text": "for this query right?"}, {"source_name": "lecture6", "index": 679, "time": "00:57:53.980 --> 00:58:00.280", "speaker": "Alexander Vasserman", "text": "A lot more to talk about there. But kind of conceptually, hopefully, that's that's pretty simple."}, {"source_name": "lecture6", "index": 680, "time": "00:58:01.380 --> 00:58:03.509", "speaker": "Alexander Vasserman", "text": "then evaluation"}, {"source_name": "lecture6", "index": 681, "time": "00:58:03.580 --> 00:58:07.290", "speaker": "Alexander Vasserman", "text": "is a quite important part that sometimes overlooked."}, {"source_name": "lecture6", "index": 682, "time": "00:58:07.360 --> 00:58:11.250", "speaker": "Alexander Vasserman", "text": "but, basically we want to"}, {"source_name": "lecture6", "index": 683, "time": "00:58:11.710 --> 00:58:15.120", "speaker": "Alexander Vasserman", "text": "know how well our system performs."}, {"source_name": "lecture6", "index": 684, "time": "00:58:15.430 --> 00:58:16.950", "speaker": "Alexander Vasserman", "text": "both in terms of"}, {"source_name": "lecture6", "index": 685, "time": "00:58:17.080 --> 00:58:23.950", "speaker": "Alexander Vasserman", "text": "the latencies, you know, kind of basically along those 2 dimensions we talked about"}, {"source_name": "lecture6", "index": 686, "time": "00:58:24.020 --> 00:58:30.080", "speaker": "Alexander Vasserman", "text": "quality of allowance versus like efficiency, and"}, {"source_name": "lecture6", "index": 687, "time": "00:58:30.830 --> 00:58:35.789", "speaker": "Alexander Vasserman", "text": "all in terms of latency and throughput so timing"}, {"source_name": "lecture6", "index": 688, "time": "00:58:35.820 --> 00:58:37.720", "speaker": "Alexander Vasserman", "text": "all right. so"}, {"source_name": "lecture6", "index": 689, "time": "00:58:38.080 --> 00:58:42.269", "speaker": "Alexander Vasserman", "text": "in order to do that, we need to kind of output certain"}, {"source_name": "lecture6", "index": 690, "time": "00:58:42.430 --> 00:58:43.450", "speaker": "Alexander Vasserman", "text": "oh"}, {"source_name": "lecture6", "index": 691, "time": "00:58:44.970 --> 00:58:52.330", "speaker": "Alexander Vasserman", "text": "methods. So we we need to measure those things we need to also get"}, {"source_name": "lecture6", "index": 692, "time": "00:58:52.580 --> 00:58:57.419", "speaker": "Alexander Vasserman", "text": "user feedback and place it. User Feedback is important. So what documents they clicked on?"}, {"source_name": "lecture6", "index": 693, "time": "00:58:57.470 --> 00:58:58.470", "speaker": "Alexander Vasserman", "text": "That's"}, {"source_name": "lecture6", "index": 694, "time": "00:58:58.490 --> 00:59:00.799", "speaker": "Alexander Vasserman", "text": "Oh, part of the"}, {"source_name": "lecture6", "index": 695, "time": "00:59:01.050 --> 00:59:01.899", "speaker": "Alexander Vasserman", "text": "all right"}, {"source_name": "lecture6", "index": 696, "time": "00:59:02.340 --> 00:59:08.169", "speaker": "Alexander Vasserman", "text": "online part, essentially of the evolution process. So we have to collect the data"}, {"source_name": "lecture6", "index": 697, "time": "00:59:08.330 --> 00:59:16.639", "speaker": "Alexander Vasserman", "text": "and then offline part is basically how we? What do we do with that data in order to actually make an evaluation?"}, {"source_name": "lecture6", "index": 698, "time": "00:59:16.830 --> 00:59:27.949", "speaker": "Alexander Vasserman", "text": "So we'll we'll talk about this part later in the course as well. But basically. The question here is, how do we know that what we've built is actually good."}, {"source_name": "lecture6", "index": 699, "time": "00:59:29.690 --> 00:59:32.669", "speaker": "Alexander Vasserman", "text": "and that's not a 3 real question"}, {"source_name": "lecture6", "index": 700, "time": "00:59:32.830 --> 00:59:35.950", "speaker": "Alexander Vasserman", "text": "I To some degree it's a harder question."}, {"source_name": "lecture6", "index": 701, "time": "00:59:36.380 --> 00:59:44.829", "speaker": "Alexander Vasserman", "text": "or search engines, or more generally kind of machine learning systems. Then for many other types of applications."}, {"source_name": "lecture6", "index": 702, "time": "00:59:46.030 --> 00:59:47.240", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture6", "index": 703, "time": "00:59:47.590 --> 00:59:49.309", "speaker": "Alexander Vasserman", "text": "finally, there is a"}, {"source_name": "lecture6", "index": 704, "time": "00:59:49.730 --> 00:59:52.969", "speaker": "Alexander Vasserman", "text": "second part of the user interaction is displaying the results."}, {"source_name": "lecture6", "index": 705, "time": "00:59:55.010 --> 00:59:56.129", "speaker": "Alexander Vasserman", "text": "it's"}, {"source_name": "lecture6", "index": 706, "time": "00:59:56.610 --> 01:00:04.900", "speaker": "Alexander Vasserman", "text": "basically the representation oftentimes that you get from a search is maybe just a this or some"}, {"source_name": "lecture6", "index": 707, "time": "01:00:05.330 --> 01:00:17.069", "speaker": "Alexander Vasserman", "text": "representation of a document that's not ready to be displayed. And here is the part where we can use that document collection to display things"}, {"source_name": "lecture6", "index": 708, "time": "01:00:17.260 --> 01:00:21.300", "speaker": "Alexander Vasserman", "text": "so again, kind of a little bit more in the graphical form."}, {"source_name": "lecture6", "index": 709, "time": "01:00:22.390 --> 01:00:26.470", "speaker": "Alexander Vasserman", "text": "we have the document store and the index that are"}, {"source_name": "lecture6", "index": 710, "time": "01:00:26.560 --> 01:00:28.140", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture6", "index": 711, "time": "01:00:28.700 --> 01:00:30.600", "speaker": "Alexander Vasserman", "text": "outputs of the"}, {"source_name": "lecture6", "index": 712, "time": "01:00:31.340 --> 01:00:32.229", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture6", "index": 713, "time": "01:00:32.800 --> 01:00:34.330", "speaker": "Alexander Vasserman", "text": "of the indexing process."}, {"source_name": "lecture6", "index": 714, "time": "01:00:34.870 --> 01:00:35.700", "speaker": "Alexander Vasserman", "text": "I mean."}, {"source_name": "lecture6", "index": 715, "time": "01:00:36.400 --> 01:00:38.089", "speaker": "Alexander Vasserman", "text": "we have"}, {"source_name": "lecture6", "index": 716, "time": "01:00:38.200 --> 01:00:39.769", "speaker": "Alexander Vasserman", "text": "a user"}, {"source_name": "lecture6", "index": 717, "time": "01:00:40.060 --> 01:00:40.839", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture6", "index": 718, "time": "01:00:40.970 --> 01:00:44.610", "speaker": "Alexander Vasserman", "text": "goes through the user interaction to ranking that"}, {"source_name": "lecture6", "index": 719, "time": "01:00:45.610 --> 01:00:47.240", "speaker": "Alexander Vasserman", "text": "uses the index"}, {"source_name": "lecture6", "index": 720, "time": "01:00:47.370 --> 01:00:49.010", "speaker": "Alexander Vasserman", "text": "to return results"}, {"source_name": "lecture6", "index": 721, "time": "01:00:49.680 --> 01:00:52.829", "speaker": "Alexander Vasserman", "text": "and basically user interaction component again."}, {"source_name": "lecture6", "index": 722, "time": "01:00:53.080 --> 01:00:56.949", "speaker": "Alexander Vasserman", "text": "potentially uses the document store and the search results"}, {"source_name": "lecture6", "index": 723, "time": "01:00:57.100 --> 01:00:59.259", "speaker": "Alexander Vasserman", "text": "to produce results to the user"}, {"source_name": "lecture6", "index": 724, "time": "01:00:59.760 --> 01:01:02.500", "speaker": "Alexander Vasserman", "text": "right? So that's kind of going"}, {"source_name": "lecture6", "index": 725, "time": "01:01:03.720 --> 01:01:08.830", "speaker": "Alexander Vasserman", "text": "forward and backwards, essentially between the user and the index"}, {"source_name": "lecture6", "index": 726, "time": "01:01:09.450 --> 01:01:10.759", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture6", "index": 727, "time": "01:01:10.790 --> 01:01:14.119", "speaker": "Alexander Vasserman", "text": "kind of on the side you have the simulation component"}, {"source_name": "lecture6", "index": 728, "time": "01:01:14.720 --> 01:01:19.329", "speaker": "Alexander Vasserman", "text": "so we are storing information about"}, {"source_name": "lecture6", "index": 729, "time": "01:01:19.360 --> 01:01:23.710", "speaker": "Alexander Vasserman", "text": "this is the performance as well as the user interactions"}, {"source_name": "lecture6", "index": 730, "time": "01:01:23.830 --> 01:01:26.549", "speaker": "Alexander Vasserman", "text": "into what's called log data"}, {"source_name": "lecture6", "index": 731, "time": "01:01:27.020 --> 01:01:27.939", "speaker": "Alexander Vasserman", "text": "still be."}, {"source_name": "lecture6", "index": 732, "time": "01:01:28.040 --> 01:01:28.859", "speaker": "Alexander Vasserman", "text": "hey"}, {"source_name": "lecture6", "index": 733, "time": "01:01:29.460 --> 01:01:35.800", "speaker": "Alexander Vasserman", "text": "outputting that information is oftentimes called logging. And so the"}, {"source_name": "lecture6", "index": 734, "time": "01:01:35.880 --> 01:01:39.500", "speaker": "Alexander Vasserman", "text": "kind of this potentially database of some sort"}, {"source_name": "lecture6", "index": 735, "time": "01:01:39.630 --> 01:01:52.210", "speaker": "Alexander Vasserman", "text": "is where we output all those logs. So for this query it took that much time the user was clicking this on this result, etc., all"}, {"source_name": "lecture6", "index": 736, "time": "01:01:52.230 --> 01:01:54.469", "speaker": "Alexander Vasserman", "text": "any kind of problem information."}, {"source_name": "lecture6", "index": 737, "time": "01:01:54.690 --> 01:02:00.259", "speaker": "Alexander Vasserman", "text": "And the reason why there is another error between the relation ranking is that."}, {"source_name": "lecture6", "index": 738, "time": "01:02:00.410 --> 01:02:03.409", "speaker": "Alexander Vasserman", "text": "in most systems out there"}, {"source_name": "lecture6", "index": 739, "time": "01:02:03.490 --> 01:02:07.439", "speaker": "Alexander Vasserman", "text": "our evaluation is what used to improve rating"}, {"source_name": "lecture6", "index": 740, "time": "01:02:07.900 --> 01:02:12.850", "speaker": "Alexander Vasserman", "text": "right? So that is kind of where your machine learning happens."}, {"source_name": "lecture6", "index": 741, "time": "01:02:12.960 --> 01:02:16.189", "speaker": "Alexander Vasserman", "text": "or well, just any kind of"}, {"source_name": "lecture6", "index": 742, "time": "01:02:16.400 --> 01:02:20.500", "speaker": "Alexander Vasserman", "text": "analysis happens that how do you improve the ranking algorithms"}, {"source_name": "lecture6", "index": 743, "time": "01:02:21.230 --> 01:02:22.660", "speaker": "Alexander Vasserman", "text": "is"}, {"source_name": "lecture6", "index": 744, "time": "01:02:22.820 --> 01:02:25.709", "speaker": "Alexander Vasserman", "text": "primarily based on the evolution data"}, {"source_name": "lecture6", "index": 745, "time": "01:02:27.190 --> 01:02:28.639", "speaker": "Alexander Vasserman", "text": "or log date them."}, {"source_name": "lecture6", "index": 746, "time": "01:02:31.320 --> 01:02:32.919", "speaker": "Alexander Vasserman", "text": "Any questions."}, {"source_name": "lecture6", "index": 747, "time": "01:02:35.030 --> 01:02:36.129", "speaker": "Alexander Vasserman", "text": "so far"}, {"source_name": "lecture6", "index": 748, "time": "01:02:36.570 --> 01:02:42.029", "speaker": "Alexander Vasserman", "text": "like conceptually does this make sense in terms of what are the different"}, {"source_name": "lecture6", "index": 749, "time": "01:02:42.170 --> 01:02:44.560", "speaker": "Alexander Vasserman", "text": "parts of the search engine are."}, {"source_name": "lecture6", "index": 750, "time": "01:02:48.800 --> 01:02:49.810", "speaker": "Rafal \"Ralph\" Jasielec", "text": "I got it?"}, {"source_name": "lecture6", "index": 751, "time": "01:02:49.890 --> 01:02:51.729", "speaker": "Rafal \"Ralph\" Jasielec", "text": "I got one question"}, {"source_name": "lecture6", "index": 752, "time": "01:02:52.370 --> 01:02:55.010", "speaker": "Rafal \"Ralph\" Jasielec", "text": "because you said behind the scenes, the"}, {"source_name": "lecture6", "index": 753, "time": "01:02:55.310 --> 01:03:02.209", "speaker": "Rafal \"Ralph\" Jasielec", "text": "the the browser or not, the browser, the the search engine looks through all documents or"}, {"source_name": "lecture6", "index": 754, "time": "01:03:03.100 --> 01:03:04.689", "speaker": "Rafal \"Ralph\" Jasielec", "text": "basically grabs."}, {"source_name": "lecture6", "index": 755, "time": "01:03:04.720 --> 01:03:06.989", "speaker": "Rafal \"Ralph\" Jasielec", "text": "And so an index system of sorts them."}, {"source_name": "lecture6", "index": 756, "time": "01:03:07.680 --> 01:03:13.889", "speaker": "Rafal \"Ralph\" Jasielec", "text": "Is it just like a like a big like a big net just grabbing everything. Or is it"}, {"source_name": "lecture6", "index": 757, "time": "01:03:14.300 --> 01:03:16.380", "speaker": "Rafal \"Ralph\" Jasielec", "text": "kind of specific, like most"}, {"source_name": "lecture6", "index": 758, "time": "01:03:16.510 --> 01:03:17.959", "speaker": "Rafal \"Ralph\" Jasielec", "text": "most popular."}, {"source_name": "lecture6", "index": 759, "time": "01:03:18.400 --> 01:03:20.910", "speaker": "Rafal \"Ralph\" Jasielec", "text": "the types of documents or or websites?"}, {"source_name": "lecture6", "index": 760, "time": "01:03:21.330 --> 01:03:25.359", "speaker": "Alexander Vasserman", "text": "Yeah. So if you're talking about web, search. It's driving"}, {"source_name": "lecture6", "index": 761, "time": "01:03:25.830 --> 01:03:27.680", "speaker": "Alexander Vasserman", "text": "mostly everything"}, {"source_name": "lecture6", "index": 762, "time": "01:03:27.740 --> 01:03:29.020", "speaker": "Alexander Vasserman", "text": "like"}, {"source_name": "lecture6", "index": 763, "time": "01:03:29.610 --> 01:03:32.460", "speaker": "Alexander Vasserman", "text": "certain sites. Do not allow"}, {"source_name": "lecture6", "index": 764, "time": "01:03:33.760 --> 01:03:37.669", "speaker": "Alexander Vasserman", "text": "search engines to actually get the data from those sites"}, {"source_name": "lecture6", "index": 765, "time": "01:03:37.710 --> 01:03:43.439", "speaker": "Alexander Vasserman", "text": "so that's kind of part of the configuration of the side. But for the most part it's kind of"}, {"source_name": "lecture6", "index": 766, "time": "01:03:43.710 --> 01:03:45.229", "speaker": "Alexander Vasserman", "text": "just get everything."}, {"source_name": "lecture6", "index": 767, "time": "01:03:46.080 --> 01:03:53.489", "speaker": "Alexander Vasserman", "text": "and so the number of documents that we are talking about is certainly in many billions."}, {"source_name": "lecture6", "index": 768, "time": "01:03:53.620 --> 01:03:55.879", "speaker": "Alexander Vasserman", "text": "as a matter of fact."}, {"source_name": "lecture6", "index": 769, "time": "01:03:55.970 --> 01:03:56.859", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture6", "index": 770, "time": "01:03:57.580 --> 01:04:17.380", "speaker": "Alexander Vasserman", "text": "it used to be back in the day when, like there was a lot of search computation. So it web search computation in the nineties some search engines were advertising themselves by the size of their index. Right? We have a bit in documents. In our index we have 5 billion documents in our index."}, {"source_name": "lecture6", "index": 771, "time": "01:04:17.460 --> 01:04:18.259", "speaker": "Alexander Vasserman", "text": "right?"}, {"source_name": "lecture6", "index": 772, "time": "01:04:18.990 --> 01:04:19.890", "speaker": "Alexander Vasserman", "text": "It's"}, {"source_name": "lecture6", "index": 773, "time": "01:04:20.030 --> 01:04:22.669", "speaker": "Alexander Vasserman", "text": "a little bit less important now"}, {"source_name": "lecture6", "index": 774, "time": "01:04:22.860 --> 01:04:27.909", "speaker": "Alexander Vasserman", "text": "because a lot of the documents are out there on the web actually"}, {"source_name": "lecture6", "index": 775, "time": "01:04:28.200 --> 01:04:30.870", "speaker": "Alexander Vasserman", "text": "generated on the spot, potentially"}, {"source_name": "lecture6", "index": 776, "time": "01:04:30.950 --> 01:04:39.260", "speaker": "Alexander Vasserman", "text": "right. So it might be an entry in the database somewhere, and not, and the page is actually generated in response to"}, {"source_name": "lecture6", "index": 777, "time": "01:04:39.350 --> 01:04:46.230", "speaker": "Alexander Vasserman", "text": "some action by the user right. So the number of documents on the web is kind of a"}, {"source_name": "lecture6", "index": 778, "time": "01:04:46.300 --> 01:04:56.999", "speaker": "Alexander Vasserman", "text": "a little bit of a way thing. but for the most part yes, everything that's publicly available a web search engine would bring in."}, {"source_name": "lecture6", "index": 779, "time": "01:04:57.120 --> 01:04:58.589", "speaker": "Alexander Vasserman", "text": "So you know."}, {"source_name": "lecture6", "index": 780, "time": "01:04:58.720 --> 01:05:01.250", "speaker": "Alexander Vasserman", "text": "it will be a"}, {"source_name": "lecture6", "index": 781, "time": "01:05:01.740 --> 01:05:06.639", "speaker": "Alexander Vasserman", "text": "something like somebody's random blog, or even like you know."}, {"source_name": "lecture6", "index": 782, "time": "01:05:06.740 --> 01:05:08.750", "speaker": "Alexander Vasserman", "text": "random tweets."}, {"source_name": "lecture6", "index": 783, "time": "01:05:08.780 --> 01:05:13.669", "speaker": "Alexander Vasserman", "text": "or like, you know, anything that's kind of publicly available."}, {"source_name": "lecture6", "index": 784, "time": "01:05:13.950 --> 01:05:16.120", "speaker": "Alexander Vasserman", "text": "it will be being brought in"}, {"source_name": "lecture6", "index": 785, "time": "01:05:16.550 --> 01:05:19.269", "speaker": "Alexander Vasserman", "text": "down the like if you're"}, {"source_name": "lecture6", "index": 786, "time": "01:05:20.000 --> 01:05:21.219", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture6", "index": 787, "time": "01:05:21.240 --> 01:05:22.319", "speaker": "Alexander Vasserman", "text": "this"}, {"source_name": "lecture6", "index": 788, "time": "01:05:22.480 --> 01:05:27.069", "speaker": "Alexander Vasserman", "text": "where we are talking about text acquisition, right?"}, {"source_name": "lecture6", "index": 789, "time": "01:05:27.170 --> 01:05:31.999", "speaker": "Alexander Vasserman", "text": "that's what we're talking about. And like, I said, there might be multiple sources."}, {"source_name": "lecture6", "index": 790, "time": "01:05:32.430 --> 01:05:34.089", "speaker": "Alexander Vasserman", "text": "actually, I think I have."}, {"source_name": "lecture6", "index": 791, "time": "01:05:34.440 --> 01:05:37.709", "speaker": "Alexander Vasserman", "text": "Oh, yeah, slide down a little bit more details"}, {"source_name": "lecture6", "index": 792, "time": "01:05:38.740 --> 01:05:41.379", "speaker": "Alexander Vasserman", "text": "basically the the sources might be different."}, {"source_name": "lecture6", "index": 793, "time": "01:05:41.440 --> 01:05:43.690", "speaker": "Alexander Vasserman", "text": "Right? And, for example."}, {"source_name": "lecture6", "index": 794, "time": "01:05:43.810 --> 01:05:45.449", "speaker": "Alexander Vasserman", "text": "to be through"}, {"source_name": "lecture6", "index": 795, "time": "01:05:45.620 --> 01:05:50.180", "speaker": "Alexander Vasserman", "text": "might provide the search engine all the tweets that"}, {"source_name": "lecture6", "index": 796, "time": "01:05:50.690 --> 01:05:52.860", "speaker": "Alexander Vasserman", "text": "happen as they happen"}, {"source_name": "lecture6", "index": 797, "time": "01:05:53.210 --> 01:05:54.490", "speaker": "Alexander Vasserman", "text": "through a"}, {"source_name": "lecture6", "index": 798, "time": "01:05:55.640 --> 01:05:56.540", "speaker": "Alexander Vasserman", "text": "hey seed"}, {"source_name": "lecture6", "index": 799, "time": "01:05:56.830 --> 01:05:58.700", "speaker": "Alexander Vasserman", "text": "right to"}, {"source_name": "lecture6", "index": 800, "time": "01:05:58.990 --> 01:06:04.610", "speaker": "Alexander Vasserman", "text": "basically for the web search. This is kind of what"}, {"source_name": "lecture6", "index": 801, "time": "01:06:04.670 --> 01:06:08.080", "speaker": "Alexander Vasserman", "text": "what i'm describing here. There are kind of"}, {"source_name": "lecture6", "index": 802, "time": "01:06:08.490 --> 01:06:10.239", "speaker": "Alexander Vasserman", "text": "2 months. Essentially."}, {"source_name": "lecture6", "index": 803, "time": "01:06:10.670 --> 01:06:19.229", "speaker": "Alexander Vasserman", "text": "it's essentially a 2 modes, for no no matter what search engine what type of search engine you using. So there is a"}, {"source_name": "lecture6", "index": 804, "time": "01:06:19.300 --> 01:06:20.750", "speaker": "Alexander Vasserman", "text": "what's called crawler."}, {"source_name": "lecture6", "index": 805, "time": "01:06:20.820 --> 01:06:39.429", "speaker": "Alexander Vasserman", "text": "where you're trying to figure out all divided, urls out there in the world. And what's generally happening is you? You're reading some websites. You extract the link from the website, and you following those links to to get the new websites. And and that's the process. Kind of did that. The crawler gets into"}, {"source_name": "lecture6", "index": 806, "time": "01:06:39.440 --> 01:06:42.340", "speaker": "Alexander Vasserman", "text": "so. But basically somehow you figure out"}, {"source_name": "lecture6", "index": 807, "time": "01:06:42.900 --> 01:06:49.039", "speaker": "Alexander Vasserman", "text": "what sites to visit what you are else to visit, and you pull the documents from it."}, {"source_name": "lecture6", "index": 808, "time": "01:06:49.910 --> 01:06:51.680", "speaker": "Alexander Vasserman", "text": "You. Basically"}, {"source_name": "lecture6", "index": 809, "time": "01:06:52.240 --> 01:06:57.920", "speaker": "Alexander Vasserman", "text": "it requires the document the same way as a browser request that when a user research site"}, {"source_name": "lecture6", "index": 810, "time": "01:07:00.250 --> 01:07:01.189", "speaker": "Alexander Vasserman", "text": "Yes, of."}, {"source_name": "lecture6", "index": 811, "time": "01:07:01.410 --> 01:07:05.019", "speaker": "Rafal \"Ralph\" Jasielec", "text": "So so for the text acquisition step"}, {"source_name": "lecture6", "index": 812, "time": "01:07:05.290 --> 01:07:09.399", "speaker": "Rafal \"Ralph\" Jasielec", "text": "is, for example, Google, or whatever search engine"}, {"source_name": "lecture6", "index": 813, "time": "01:07:09.770 --> 01:07:13.979", "speaker": "Rafal \"Ralph\" Jasielec", "text": "do they take those documents? They make copies of them, and they store them in their own."}, {"source_name": "lecture6", "index": 814, "time": "01:07:14.260 --> 01:07:18.090", "speaker": "Rafal \"Ralph\" Jasielec", "text": "Because if that's the case, isn't that like an immense amount of"}, {"source_name": "lecture6", "index": 815, "time": "01:07:18.450 --> 01:07:20.450", "speaker": "Rafal \"Ralph\" Jasielec", "text": "space that they need"}, {"source_name": "lecture6", "index": 816, "time": "01:07:20.560 --> 01:07:21.910", "speaker": "Rafal \"Ralph\" Jasielec", "text": "like the data space."}, {"source_name": "lecture6", "index": 817, "time": "01:07:22.120 --> 01:07:27.030", "speaker": "Alexander Vasserman", "text": "Yes, and that's basically what you have. And all those data centers that they"}, {"source_name": "lecture6", "index": 818, "time": "01:07:27.060 --> 01:07:36.289", "speaker": "Alexander Vasserman", "text": "either own or rent, or whatever. Yes, but you have the exact copy of all the documents out there."}, {"source_name": "lecture6", "index": 819, "time": "01:07:37.560 --> 01:07:38.509", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture6", "index": 820, "time": "01:07:39.830 --> 01:07:45.560", "speaker": "Alexander Vasserman", "text": "also just to kind of give you some idea. Text is actually very"}, {"source_name": "lecture6", "index": 821, "time": "01:07:46.170 --> 01:07:47.700", "speaker": "Alexander Vasserman", "text": "small amount of data."}, {"source_name": "lecture6", "index": 822, "time": "01:07:48.370 --> 01:07:52.499", "speaker": "Alexander Vasserman", "text": "like all of text on the Internet."}, {"source_name": "lecture6", "index": 823, "time": "01:07:53.790 --> 01:07:54.740", "speaker": "Alexander Vasserman", "text": "is"}, {"source_name": "lecture6", "index": 824, "time": "01:07:55.360 --> 01:07:57.100", "speaker": "Alexander Vasserman", "text": "probably going to"}, {"source_name": "lecture6", "index": 825, "time": "01:07:57.530 --> 01:07:59.060", "speaker": "Alexander Vasserman", "text": "it on a"}, {"source_name": "lecture6", "index": 826, "time": "01:07:59.620 --> 01:08:02.810", "speaker": "Alexander Vasserman", "text": "biggest hard drive over a single machine."}, {"source_name": "lecture6", "index": 827, "time": "01:08:03.590 --> 01:08:04.430", "speaker": "Alexander Vasserman", "text": "right"}, {"source_name": "lecture6", "index": 828, "time": "01:08:04.750 --> 01:08:07.680", "speaker": "Alexander Vasserman", "text": "versus thinking about"}, {"source_name": "lecture6", "index": 829, "time": "01:08:07.800 --> 01:08:11.109", "speaker": "Alexander Vasserman", "text": "something like Netflix streams"}, {"source_name": "lecture6", "index": 830, "time": "01:08:11.210 --> 01:08:14.189", "speaker": "Alexander Vasserman", "text": "or all the Youtube videos."}, {"source_name": "lecture6", "index": 831, "time": "01:08:14.320 --> 01:08:19.170", "speaker": "Alexander Vasserman", "text": "That is where you get into really big amounts of data."}, {"source_name": "lecture6", "index": 832, "time": "01:08:19.300 --> 01:08:24.139", "speaker": "Alexander Vasserman", "text": "right? So like when you start representing like manipulating videos."}, {"source_name": "lecture6", "index": 833, "time": "01:08:24.350 --> 01:08:28.570", "speaker": "Alexander Vasserman", "text": "but still you have to store them somewhere."}, {"source_name": "lecture6", "index": 834, "time": "01:08:28.880 --> 01:08:30.160", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture6", "index": 835, "time": "01:08:30.240 --> 01:08:41.620", "speaker": "Alexander Vasserman", "text": "I mean, in case of Youtube, Youtube is a service that already stores it, so that there the kind of document collection is Users provide the the the videos"}, {"source_name": "lecture6", "index": 836, "time": "01:08:41.750 --> 01:08:45.649", "speaker": "Alexander Vasserman", "text": "and so the the document collection is kind of"}, {"source_name": "lecture6", "index": 837, "time": "01:08:45.920 --> 01:08:50.160", "speaker": "Alexander Vasserman", "text": "or text. Well, in this place, document, organization"}, {"source_name": "lecture6", "index": 838, "time": "01:08:50.640 --> 01:08:51.569", "speaker": "Alexander Vasserman", "text": "he is"}, {"source_name": "lecture6", "index": 839, "time": "01:08:51.740 --> 01:08:54.000", "speaker": "Alexander Vasserman", "text": "are relatively simple, right."}, {"source_name": "lecture6", "index": 840, "time": "01:08:54.100 --> 01:08:59.119", "speaker": "Alexander Vasserman", "text": "You you control, like Youtube controls its own application that collects"}, {"source_name": "lecture6", "index": 841, "time": "01:08:59.200 --> 01:09:00.529", "speaker": "Alexander Vasserman", "text": "documents."}, {"source_name": "lecture6", "index": 842, "time": "01:09:00.859 --> 01:09:06.319", "speaker": "Alexander Vasserman", "text": "but you know the size of those like overall collection is massive."}, {"source_name": "lecture6", "index": 843, "time": "01:09:06.609 --> 01:09:11.070", "speaker": "Alexander Vasserman", "text": "and so these are a huge data centers that"}, {"source_name": "lecture6", "index": 844, "time": "01:09:11.279 --> 01:09:12.899", "speaker": "Alexander Vasserman", "text": "they know"}, {"source_name": "lecture6", "index": 845, "time": "01:09:13.060 --> 01:09:14.609", "speaker": "Alexander Vasserman", "text": "10,000. So"}, {"source_name": "lecture6", "index": 846, "time": "01:09:14.700 --> 01:09:23.360", "speaker": "Alexander Vasserman", "text": "computers or tens of thousands, i'm not sure. what is the scale these days. but it's"}, {"source_name": "lecture6", "index": 847, "time": "01:09:23.410 --> 01:09:27.649", "speaker": "Alexander Vasserman", "text": "a huge building somewhere"}, {"source_name": "lecture6", "index": 848, "time": "01:09:28.890 --> 01:09:33.089", "speaker": "Alexander Vasserman", "text": "far away from everything where chid land is cheap, and"}, {"source_name": "lecture6", "index": 849, "time": "01:09:33.160 --> 01:09:34.320", "speaker": "Alexander Vasserman", "text": "you can"}, {"source_name": "lecture6", "index": 850, "time": "01:09:34.470 --> 01:09:42.090", "speaker": "Alexander Vasserman", "text": "cheaply cool all this machines with this, some source of water or something like that."}, {"source_name": "lecture6", "index": 851, "time": "01:09:45.109 --> 01:09:46.050", "speaker": "Alexander Vasserman", "text": "so yes."}, {"source_name": "lecture6", "index": 852, "time": "01:09:47.069 --> 01:09:49.460", "speaker": "Alexander Vasserman", "text": "absolutely everything gets coated."}, {"source_name": "lecture6", "index": 853, "time": "01:09:49.810 --> 01:09:58.059", "speaker": "Alexander Vasserman", "text": "And as a matter of fact, they'll have multiple copies of everything. they'll to some degree"}, {"source_name": "lecture6", "index": 854, "time": "01:09:58.120 --> 01:10:00.730", "speaker": "Alexander Vasserman", "text": "document data store has a code here"}, {"source_name": "lecture6", "index": 855, "time": "01:10:00.950 --> 01:10:03.399", "speaker": "Alexander Vasserman", "text": "index to some"}, {"source_name": "lecture6", "index": 856, "time": "01:10:03.550 --> 01:10:18.289", "speaker": "Alexander Vasserman", "text": "most of the information. in all the documents there as well. So that's another copy you might store if you more copies along the way, you might store a copy of the text information, so that."}, {"source_name": "lecture6", "index": 857, "time": "01:10:18.380 --> 01:10:20.110", "speaker": "Alexander Vasserman", "text": "if"}, {"source_name": "lecture6", "index": 858, "time": "01:10:20.630 --> 01:10:37.429", "speaker": "Alexander Vasserman", "text": "you know, something went wrong with your in the creation process, you know how to start from scratch or you. It makes it easier for you to figure out where the problem is, etc. So you might store actually multiple causes of things, and"}, {"source_name": "lecture6", "index": 859, "time": "01:10:37.800 --> 01:10:42.919", "speaker": "Alexander Vasserman", "text": "generally especially when you're talking about text. That's not the big concern"}, {"source_name": "lecture6", "index": 860, "time": "01:10:47.120 --> 01:10:48.210", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture6", "index": 861, "time": "01:10:48.760 --> 01:10:49.809", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture6", "index": 862, "time": "01:10:50.250 --> 01:10:51.750", "speaker": "Alexander Vasserman", "text": "second"}, {"source_name": "lecture6", "index": 863, "time": "01:10:52.380 --> 01:10:53.219", "speaker": "Alexander Vasserman", "text": "kind of"}, {"source_name": "lecture6", "index": 864, "time": "01:10:53.430 --> 01:10:58.510", "speaker": "Alexander Vasserman", "text": "architecture potential architecture for documentary acquisition."}, {"source_name": "lecture6", "index": 865, "time": "01:10:58.800 --> 01:11:10.270", "speaker": "Alexander Vasserman", "text": "should they say, document acquisition or their text acquisition. because a lot of the things are in text anymore, even though we are kind of focusing on building a a, a a text engine"}, {"source_name": "lecture6", "index": 866, "time": "01:11:12.580 --> 01:11:20.710", "speaker": "Alexander Vasserman", "text": "so is kind of more seeds architecture. which again kind of might be"}, {"source_name": "lecture6", "index": 867, "time": "01:11:21.760 --> 01:11:33.829", "speaker": "Alexander Vasserman", "text": "any twitter might be good example, like you know, all older systems like Rss. or it for internal systems, maybe anytime the a database is updated"}, {"source_name": "lecture6", "index": 868, "time": "01:11:33.870 --> 01:11:37.809", "speaker": "Alexander Vasserman", "text": "a message is sent to your"}, {"source_name": "lecture6", "index": 869, "time": "01:11:37.840 --> 01:11:39.240", "speaker": "Alexander Vasserman", "text": "indexing system."}, {"source_name": "lecture6", "index": 870, "time": "01:11:39.300 --> 01:11:41.809", "speaker": "Alexander Vasserman", "text": "saying, I have a new document for you."}, {"source_name": "lecture6", "index": 871, "time": "01:11:42.310 --> 01:11:44.870", "speaker": "Alexander Vasserman", "text": "right? And so that's"}, {"source_name": "lecture6", "index": 872, "time": "01:11:45.120 --> 01:11:50.220", "speaker": "Alexander Vasserman", "text": "kind of a push architecture in the sense that documents are pushed"}, {"source_name": "lecture6", "index": 873, "time": "01:11:50.700 --> 01:11:57.289", "speaker": "Alexander Vasserman", "text": "to the text. Acquisition system rather than text acquisition system is responsible for"}, {"source_name": "lecture6", "index": 874, "time": "01:11:57.470 --> 01:12:02.469", "speaker": "Alexander Vasserman", "text": "figuring out where to pull data from or where to get it from and request it."}, {"source_name": "lecture6", "index": 875, "time": "01:12:02.640 --> 01:12:07.830", "speaker": "Alexander Vasserman", "text": "So when you're going to a particular URL, you request"}, {"source_name": "lecture6", "index": 876, "time": "01:12:07.940 --> 01:12:10.610", "speaker": "Alexander Vasserman", "text": "the data to be provided to you"}, {"source_name": "lecture6", "index": 877, "time": "01:12:10.650 --> 01:12:12.090", "speaker": "Alexander Vasserman", "text": "from that website."}, {"source_name": "lecture6", "index": 878, "time": "01:12:12.230 --> 01:12:19.390", "speaker": "Alexander Vasserman", "text": "and you pull that data right if you have a database that sends you notifications."}, {"source_name": "lecture6", "index": 879, "time": "01:12:19.600 --> 01:12:23.149", "speaker": "Alexander Vasserman", "text": "Here is a new to a new document that's available."}, {"source_name": "lecture6", "index": 880, "time": "01:12:23.290 --> 01:12:27.879", "speaker": "Alexander Vasserman", "text": "You didn't have to do anything for that. So that's kind of a push. Architecture."}, {"source_name": "lecture6", "index": 881, "time": "01:12:30.380 --> 01:12:45.490", "speaker": "Alexander Vasserman", "text": "those terms are kind of a little bit more general than search you'll. You'll see that in distributed systems, etc. there's so far the standard terms but kind of as a related to to text the transition"}, {"source_name": "lecture6", "index": 882, "time": "01:12:45.690 --> 01:12:51.769", "speaker": "Alexander Vasserman", "text": "for document acquisition. that's kind of an interesting part of it as well."}, {"source_name": "lecture6", "index": 883, "time": "01:12:52.720 --> 01:12:55.030", "speaker": "Alexander Vasserman", "text": "we are not going to"}, {"source_name": "lecture6", "index": 884, "time": "01:12:55.560 --> 01:12:56.410", "speaker": "Alexander Vasserman", "text": "you"}, {"source_name": "lecture6", "index": 885, "time": "01:12:56.680 --> 01:13:12.569", "speaker": "Alexander Vasserman", "text": "very much or at all like, I said, with document acquisition that can be its own course. There is a lot of different things that can be happening there, and it's very much application, specific domain, specific, etc. but you know kind of"}, {"source_name": "lecture6", "index": 886, "time": "01:13:12.620 --> 01:13:20.100", "speaker": "Alexander Vasserman", "text": "some of the conversions you might be doing even as part of the"}, {"source_name": "lecture6", "index": 887, "time": "01:13:21.320 --> 01:13:23.420", "speaker": "Alexander Vasserman", "text": "acquisition phase is"}, {"source_name": "lecture6", "index": 888, "time": "01:13:23.740 --> 01:13:28.489", "speaker": "Alexander Vasserman", "text": "extracting the text from things like Pdf or word document."}, {"source_name": "lecture6", "index": 889, "time": "01:13:28.510 --> 01:13:34.169", "speaker": "Alexander Vasserman", "text": "or maybe it's a video recording, and maybe you do speech recognition"}, {"source_name": "lecture6", "index": 890, "time": "01:13:34.190 --> 01:13:37.460", "speaker": "Alexander Vasserman", "text": "or you know, it's a"}, {"source_name": "lecture6", "index": 891, "time": "01:13:38.460 --> 01:13:45.640", "speaker": "Alexander Vasserman", "text": "this lecture, and then you have text capturing and have a transcript"}, {"source_name": "lecture6", "index": 892, "time": "01:13:45.740 --> 01:13:49.190", "speaker": "Alexander Vasserman", "text": "that's kind of actually one of the"}, {"source_name": "lecture6", "index": 893, "time": "01:13:49.560 --> 01:13:58.549", "speaker": "Alexander Vasserman", "text": "things that i'm thinking you might want to look at kind of going to be an interesting use case potentially to search these lectures."}, {"source_name": "lecture6", "index": 894, "time": "01:13:59.580 --> 01:14:01.099", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture6", "index": 895, "time": "01:14:01.840 --> 01:14:03.130", "speaker": "Alexander Vasserman", "text": "But yeah, so"}, {"source_name": "lecture6", "index": 896, "time": "01:14:03.150 --> 01:14:07.119", "speaker": "Alexander Vasserman", "text": "a lot of potential conversion happening here to convert"}, {"source_name": "lecture6", "index": 897, "time": "01:14:07.360 --> 01:14:09.210", "speaker": "Alexander Vasserman", "text": "things into text"}, {"source_name": "lecture6", "index": 898, "time": "01:14:09.440 --> 01:14:11.279", "speaker": "Alexander Vasserman", "text": "most search engines"}, {"source_name": "lecture6", "index": 899, "time": "01:14:11.400 --> 01:14:14.239", "speaker": "Alexander Vasserman", "text": "still operate essentially on text."}, {"source_name": "lecture6", "index": 900, "time": "01:14:14.430 --> 01:14:16.949", "speaker": "Alexander Vasserman", "text": "there are some newer search engines. That"}, {"source_name": "lecture6", "index": 901, "time": "01:14:18.620 --> 01:14:21.099", "speaker": "Alexander Vasserman", "text": "that do not use"}, {"source_name": "lecture6", "index": 902, "time": "01:14:21.820 --> 01:14:27.860", "speaker": "Alexander Vasserman", "text": "text very much, but that's very much on the boundaries and kind of"}, {"source_name": "lecture6", "index": 903, "time": "01:14:27.900 --> 01:14:29.720", "speaker": "Alexander Vasserman", "text": "extreme use cases."}, {"source_name": "lecture6", "index": 904, "time": "01:14:29.820 --> 01:14:31.979", "speaker": "Alexander Vasserman", "text": "I just believe"}, {"source_name": "lecture6", "index": 905, "time": "01:14:32.000 --> 01:14:35.709", "speaker": "Alexander Vasserman", "text": "kind of everything you you have different ways of."}, {"source_name": "lecture6", "index": 906, "time": "01:14:35.910 --> 01:14:50.220", "speaker": "Alexander Vasserman", "text": "converting things to text. Maybe it's text around an image or you know, kind of description over the image description of video, etc. But so in some ways you trying to pull text out of it."}, {"source_name": "lecture6", "index": 907, "time": "01:14:55.210 --> 01:14:57.939", "speaker": "Alexander Vasserman", "text": "yes, so all done."}, {"source_name": "lecture6", "index": 908, "time": "01:14:58.730 --> 01:14:59.910", "speaker": "Alexander Vasserman", "text": "Document"}, {"source_name": "lecture6", "index": 909, "time": "01:15:00.860 --> 01:15:02.420", "speaker": "Alexander Vasserman", "text": "data store"}, {"source_name": "lecture6", "index": 910, "time": "01:15:02.450 --> 01:15:03.810", "speaker": "Alexander Vasserman", "text": "is an important"}, {"source_name": "lecture6", "index": 911, "time": "01:15:04.030 --> 01:15:07.320", "speaker": "Alexander Vasserman", "text": "aspect of of what you're doing."}, {"source_name": "lecture6", "index": 912, "time": "01:15:07.880 --> 01:15:19.159", "speaker": "Alexander Vasserman", "text": "So we want to store the text, the metadata, everything that's related to the document in a single place. it might also include other types of information."}, {"source_name": "lecture6", "index": 913, "time": "01:15:20.810 --> 01:15:22.010", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture6", "index": 914, "time": "01:15:22.320 --> 01:15:23.510", "speaker": "Alexander Vasserman", "text": "it should"}, {"source_name": "lecture6", "index": 915, "time": "01:15:23.710 --> 01:15:26.249", "speaker": "Alexander Vasserman", "text": "provide a fast access"}, {"source_name": "lecture6", "index": 916, "time": "01:15:26.440 --> 01:15:27.450", "speaker": "Alexander Vasserman", "text": "to"}, {"source_name": "lecture6", "index": 917, "time": "01:15:27.610 --> 01:15:34.180", "speaker": "Alexander Vasserman", "text": "the search engine for a particular document. give me some part of the document or"}, {"source_name": "lecture6", "index": 918, "time": "01:15:34.220 --> 01:15:37.259", "speaker": "Alexander Vasserman", "text": "a anything at all, so that we can"}, {"source_name": "lecture6", "index": 919, "time": "01:15:37.820 --> 01:15:43.010", "speaker": "Alexander Vasserman", "text": "use it in inside of the query process right for user interactions."}, {"source_name": "lecture6", "index": 920, "time": "01:15:45.690 --> 01:15:47.729", "speaker": "Alexander Vasserman", "text": "yeah. So here we could"}, {"source_name": "lecture6", "index": 921, "time": "01:15:48.030 --> 01:15:50.889", "speaker": "Alexander Vasserman", "text": "or use a relational database"}, {"source_name": "lecture6", "index": 922, "time": "01:15:50.980 --> 01:15:52.990", "speaker": "Alexander Vasserman", "text": "to store the documents."}, {"source_name": "lecture6", "index": 923, "time": "01:15:53.100 --> 01:15:55.339", "speaker": "Alexander Vasserman", "text": "in some cases it might be."}, {"source_name": "lecture6", "index": 924, "time": "01:15:56.250 --> 01:15:57.699", "speaker": "Alexander Vasserman", "text": "Oh, well."}, {"source_name": "lecture6", "index": 925, "time": "01:15:57.930 --> 01:16:03.529", "speaker": "Alexander Vasserman", "text": "and a lot of cases it's you know, specialized databases, anyway."}, {"source_name": "lecture6", "index": 926, "time": "01:16:05.180 --> 01:16:11.170", "speaker": "Alexander Vasserman", "text": "What we are going to use is essentially in memory store. So we just"}, {"source_name": "lecture6", "index": 927, "time": "01:16:12.010 --> 01:16:12.820", "speaker": "Alexander Vasserman", "text": "have"}, {"source_name": "lecture6", "index": 928, "time": "01:16:13.050 --> 01:16:15.420", "speaker": "Alexander Vasserman", "text": "all the documents in a single list."}, {"source_name": "lecture6", "index": 929, "time": "01:16:15.920 --> 01:16:20.160", "speaker": "Alexander Vasserman", "text": "or something like that, like we've had"}, {"source_name": "lecture6", "index": 930, "time": "01:16:20.210 --> 01:16:31.909", "speaker": "Alexander Vasserman", "text": "have already, and we just load it from Json file or something. And so we're not going to care too much about the infrastructure. And again, kind of the"}, {"source_name": "lecture6", "index": 931, "time": "01:16:34.030 --> 01:16:37.389", "speaker": "Alexander Vasserman", "text": "database system aspects of"}, {"source_name": "lecture6", "index": 932, "time": "01:16:37.560 --> 01:16:40.219", "speaker": "Alexander Vasserman", "text": "any of our components."}, {"source_name": "lecture6", "index": 933, "time": "01:16:40.290 --> 01:16:42.019", "speaker": "Alexander Vasserman", "text": "even in the"}, {"source_name": "lecture6", "index": 934, "time": "01:16:42.370 --> 01:16:43.150", "speaker": "Alexander Vasserman", "text": "kind of"}, {"source_name": "lecture6", "index": 935, "time": "01:16:43.300 --> 01:16:44.620", "speaker": "Alexander Vasserman", "text": "our final"}, {"source_name": "lecture6", "index": 936, "time": "01:16:44.950 --> 01:16:57.899", "speaker": "Alexander Vasserman", "text": "a version of our code is something that is going to run on a single computer without using any of the specialized systems like database systems. So this is kind of a little bit outside of the scope of the course, but"}, {"source_name": "lecture6", "index": 937, "time": "01:16:58.150 --> 01:16:59.330", "speaker": "Alexander Vasserman", "text": "just to"}, {"source_name": "lecture6", "index": 938, "time": "01:16:59.670 --> 01:17:02.949", "speaker": "Alexander Vasserman", "text": "it's important to have this idea kind of of what?"}, {"source_name": "lecture6", "index": 939, "time": "01:17:04.220 --> 01:17:06.509", "speaker": "Alexander Vasserman", "text": "what the document store"}, {"source_name": "lecture6", "index": 940, "time": "01:17:06.580 --> 01:17:09.870", "speaker": "Alexander Vasserman", "text": "All these components are responsible for them"}, {"source_name": "lecture6", "index": 941, "time": "01:17:10.380 --> 01:17:11.099", "speaker": "Alexander Vasserman", "text": "what"}, {"source_name": "lecture6", "index": 942, "time": "01:17:11.120 --> 01:17:15.240", "speaker": "Alexander Vasserman", "text": "they might be in the real world system."}, {"source_name": "lecture6", "index": 943, "time": "01:17:21.060 --> 01:17:22.170", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture6", "index": 944, "time": "01:17:23.190 --> 01:17:24.409", "speaker": "Alexander Vasserman", "text": "we kind of"}, {"source_name": "lecture6", "index": 945, "time": "01:17:24.660 --> 01:17:25.510", "speaker": "Alexander Vasserman", "text": "talk"}, {"source_name": "lecture6", "index": 946, "time": "01:17:25.840 --> 01:17:27.289", "speaker": "Alexander Vasserman", "text": "a little bit about"}, {"source_name": "lecture6", "index": 947, "time": "01:17:27.860 --> 01:17:38.160", "speaker": "Alexander Vasserman", "text": "this already kind of just providing more examples in the in the text transformation, you know. So we could"}, {"source_name": "lecture6", "index": 948, "time": "01:17:38.360 --> 01:17:39.800", "speaker": "Alexander Vasserman", "text": "a particular"}, {"source_name": "lecture6", "index": 949, "time": "01:17:41.240 --> 01:17:42.330", "speaker": "Alexander Vasserman", "text": "fields"}, {"source_name": "lecture6", "index": 950, "time": "01:17:42.410 --> 01:17:43.860", "speaker": "Alexander Vasserman", "text": "we might"}, {"source_name": "lecture6", "index": 951, "time": "01:17:43.920 --> 01:17:48.640", "speaker": "Alexander Vasserman", "text": "of one to weigh them differently. For example, title terms might be more important."}, {"source_name": "lecture6", "index": 952, "time": "01:17:50.750 --> 01:17:52.430", "speaker": "Alexander Vasserman", "text": "Then we need"}, {"source_name": "lecture6", "index": 953, "time": "01:17:52.670 --> 01:17:53.580", "speaker": "Alexander Vasserman", "text": "to"}, {"source_name": "lecture6", "index": 954, "time": "01:17:53.890 --> 01:18:05.490", "speaker": "Alexander Vasserman", "text": "normalize and tokenize. So kind of splitting things into words, sometimes cases or symbols. Basically the the output is what we call terms, right?"}, {"source_name": "lecture6", "index": 955, "time": "01:18:05.510 --> 01:18:07.489", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture6", "index": 956, "time": "01:18:08.060 --> 01:18:13.030", "speaker": "Alexander Vasserman", "text": "Yeah. So there is definitely a lot more that we will be doing for normalization"}, {"source_name": "lecture6", "index": 957, "time": "01:18:13.210 --> 01:18:27.430", "speaker": "Alexander Vasserman", "text": "or some a little bit more, maybe. but there is definitely more to be done. especially if you're talking about languages other than in English that comes with like a lot of different obstacles."}, {"source_name": "lecture6", "index": 958, "time": "01:18:27.480 --> 01:18:37.349", "speaker": "Alexander Vasserman", "text": "and certainly for the organization or splitting text into terms. we now using very primitive."}, {"source_name": "lecture6", "index": 959, "time": "01:18:37.420 --> 01:18:48.219", "speaker": "Alexander Vasserman", "text": "all kind of all just split on to the spaces. That's certainly not going to work, and that's where we are going to spend a little bit of time to do better than that."}, {"source_name": "lecture6", "index": 960, "time": "01:18:48.280 --> 01:18:50.690", "speaker": "Alexander Vasserman", "text": "and there are definitely"}, {"source_name": "lecture6", "index": 961, "time": "01:18:50.880 --> 01:18:51.960", "speaker": "Alexander Vasserman", "text": "a lot of"}, {"source_name": "lecture6", "index": 962, "time": "01:18:52.050 --> 01:18:56.860", "speaker": "Alexander Vasserman", "text": "non 3 real problems there, especially again, if they're talking about"}, {"source_name": "lecture6", "index": 963, "time": "01:18:56.890 --> 01:18:57.780", "speaker": "Alexander Vasserman", "text": "on"}, {"source_name": "lecture6", "index": 964, "time": "01:18:58.980 --> 01:19:05.380", "speaker": "Alexander Vasserman", "text": "languages other than in English, where a concept of a board might not be even present like there is no white"}, {"source_name": "lecture6", "index": 965, "time": "01:19:05.400 --> 01:19:07.049", "speaker": "Alexander Vasserman", "text": "space separating"}, {"source_name": "lecture6", "index": 966, "time": "01:19:07.340 --> 01:19:08.330", "speaker": "Alexander Vasserman", "text": "words"}, {"source_name": "lecture6", "index": 967, "time": "01:19:08.600 --> 01:19:10.130", "speaker": "Alexander Vasserman", "text": "in text."}, {"source_name": "lecture6", "index": 968, "time": "01:19:11.800 --> 01:19:12.760", "speaker": "Alexander Vasserman", "text": "Oh!"}, {"source_name": "lecture6", "index": 969, "time": "01:19:12.970 --> 01:19:13.950", "speaker": "Alexander Vasserman", "text": "And then"}, {"source_name": "lecture6", "index": 970, "time": "01:19:14.130 --> 01:19:15.190", "speaker": "Alexander Vasserman", "text": "you know, kind of"}, {"source_name": "lecture6", "index": 971, "time": "01:19:15.860 --> 01:19:16.780", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture6", "index": 972, "time": "01:19:18.240 --> 01:19:22.419", "speaker": "Alexander Vasserman", "text": "boy, how exactly we're organizing the data in this thing"}, {"source_name": "lecture6", "index": 973, "time": "01:19:22.730 --> 01:19:25.099", "speaker": "Alexander Vasserman", "text": "moving from documents to"}, {"source_name": "lecture6", "index": 974, "time": "01:19:25.630 --> 01:19:28.259", "speaker": "Alexander Vasserman", "text": "all index terms and features that there?"}, {"source_name": "lecture6", "index": 975, "time": "01:19:29.140 --> 01:19:31.849", "speaker": "Alexander Vasserman", "text": "And yeah, so basically we'll"}, {"source_name": "lecture6", "index": 976, "time": "01:19:32.110 --> 01:19:32.929", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture6", "index": 977, "time": "01:19:33.510 --> 01:19:37.920", "speaker": "Alexander Vasserman", "text": "in the creation is one of the core things that you're going to talk about."}, {"source_name": "lecture6", "index": 978, "time": "01:19:39.370 --> 01:19:40.389", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture6", "index": 979, "time": "01:19:41.090 --> 01:19:44.840", "speaker": "Alexander Vasserman", "text": "that's kind of I've been talking a lot"}, {"source_name": "lecture6", "index": 980, "time": "01:19:44.980 --> 01:19:48.870", "speaker": "Alexander Vasserman", "text": "You've been asking a lot of questions which is great"}, {"source_name": "lecture6", "index": 981, "time": "01:19:49.030 --> 01:19:50.679", "speaker": "Alexander Vasserman", "text": "this"}, {"source_name": "lecture6", "index": 982, "time": "01:19:55.350 --> 01:19:56.320", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture6", "index": 983, "time": "01:19:56.550 --> 01:19:59.810", "speaker": "Alexander Vasserman", "text": "Haven't gotten to actual implementation, though."}, {"source_name": "lecture6", "index": 984, "time": "01:20:00.290 --> 01:20:01.429", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture6", "index": 985, "time": "01:20:01.920 --> 01:20:02.779", "speaker": "Alexander Vasserman", "text": "you can"}, {"source_name": "lecture6", "index": 986, "time": "01:20:02.950 --> 01:20:03.849", "speaker": "Alexander Vasserman", "text": "start"}, {"source_name": "lecture6", "index": 987, "time": "01:20:04.020 --> 01:20:06.490", "speaker": "Alexander Vasserman", "text": "a little bit, I think, and then"}, {"source_name": "lecture6", "index": 988, "time": "01:20:08.630 --> 01:20:12.579", "speaker": "Alexander Vasserman", "text": "kind of go into all more details next time."}, {"source_name": "lecture6", "index": 989, "time": "01:20:12.740 --> 01:20:14.010", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture6", "index": 990, "time": "01:20:14.330 --> 01:20:15.240", "speaker": "Alexander Vasserman", "text": "let's"}, {"source_name": "lecture6", "index": 991, "time": "01:20:15.980 --> 01:20:20.010", "speaker": "Alexander Vasserman", "text": "say we create a new file."}, {"source_name": "lecture6", "index": 992, "time": "01:20:20.600 --> 01:20:21.750", "speaker": "Alexander Vasserman", "text": "let's say."}, {"source_name": "lecture6", "index": 993, "time": "01:20:23.170 --> 01:20:25.519", "speaker": "Alexander Vasserman", "text": "we have indexing process."}, {"source_name": "lecture6", "index": 994, "time": "01:20:27.350 --> 01:20:28.410", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture6", "index": 995, "time": "01:20:28.790 --> 01:20:30.309", "speaker": "Alexander Vasserman", "text": "what we want to do"}, {"source_name": "lecture6", "index": 996, "time": "01:20:30.370 --> 01:20:33.779", "speaker": "Alexander Vasserman", "text": "now is to kind of convert"}, {"source_name": "lecture6", "index": 997, "time": "01:20:33.930 --> 01:20:37.829", "speaker": "Alexander Vasserman", "text": "the diagram like we have here. Let me make it"}, {"source_name": "lecture6", "index": 998, "time": "01:20:39.070 --> 01:20:40.070", "speaker": "Alexander Vasserman", "text": "bigger"}, {"source_name": "lecture6", "index": 999, "time": "01:20:40.460 --> 01:20:42.240", "speaker": "Alexander Vasserman", "text": "right"}, {"source_name": "lecture6", "index": 1000, "time": "01:20:42.300 --> 01:20:44.469", "speaker": "Alexander Vasserman", "text": "into a"}, {"source_name": "lecture6", "index": 1001, "time": "01:20:45.600 --> 01:20:47.040", "speaker": "Alexander Vasserman", "text": "code components"}, {"source_name": "lecture6", "index": 1002, "time": "01:20:47.170 --> 01:20:54.770", "speaker": "Alexander Vasserman", "text": "whether those are classes or functions. you can start this functions and then convert them to classes"}, {"source_name": "lecture6", "index": 1003, "time": "01:20:55.630 --> 01:21:06.769", "speaker": "Alexander Vasserman", "text": "generally that they they could even be different services, like, you know, kind of leaving moment different machines. But at the end of the day it doesn't really matter. What's important is."}, {"source_name": "lecture6", "index": 1004, "time": "01:21:06.910 --> 01:21:12.779", "speaker": "Alexander Vasserman", "text": "what are the interactions between different components?"}, {"source_name": "lecture6", "index": 1005, "time": "01:21:13.240 --> 01:21:22.259", "speaker": "Alexander Vasserman", "text": "And what is the logic kind of what are the requirements of which component. So whether or not it's you defining what arguments your function is going to take."}, {"source_name": "lecture6", "index": 1006, "time": "01:21:22.430 --> 01:21:23.480", "speaker": "Alexander Vasserman", "text": "or"}, {"source_name": "lecture6", "index": 1007, "time": "01:21:23.570 --> 01:21:27.960", "speaker": "Alexander Vasserman", "text": "what your service. You know what the the face for your services."}, {"source_name": "lecture6", "index": 1008, "time": "01:21:28.120 --> 01:21:28.940", "speaker": "Alexander Vasserman", "text": "It's"}, {"source_name": "lecture6", "index": 1009, "time": "01:21:30.330 --> 01:21:31.570", "speaker": "Alexander Vasserman", "text": "basically the same."}, {"source_name": "lecture6", "index": 1010, "time": "01:21:31.610 --> 01:21:33.519", "speaker": "Alexander Vasserman", "text": "right? So you're just deciding"}, {"source_name": "lecture6", "index": 1011, "time": "01:21:34.100 --> 01:21:36.740", "speaker": "Alexander Vasserman", "text": "what are the inputs? What is the output"}, {"source_name": "lecture6", "index": 1012, "time": "01:21:36.900 --> 01:21:39.830", "speaker": "Alexander Vasserman", "text": "and what are the constraints? Right?"}, {"source_name": "lecture6", "index": 1013, "time": "01:21:40.720 --> 01:21:41.679", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture6", "index": 1014, "time": "01:21:42.350 --> 01:21:45.610", "speaker": "Alexander Vasserman", "text": "kind of moving to the code."}, {"source_name": "lecture6", "index": 1015, "time": "01:21:47.160 --> 01:21:50.249", "speaker": "Alexander Vasserman", "text": "maybe we have. They'll have a function"}, {"source_name": "lecture6", "index": 1016, "time": "01:21:52.030 --> 01:21:53.710", "speaker": "Alexander Vasserman", "text": "agency process."}, {"source_name": "lecture6", "index": 1017, "time": "01:21:54.090 --> 01:21:54.929", "speaker": "Alexander Vasserman", "text": "right?"}, {"source_name": "lecture6", "index": 1018, "time": "01:21:56.840 --> 01:21:58.379", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture6", "index": 1019, "time": "01:21:59.500 --> 01:22:01.030", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture6", "index": 1020, "time": "01:22:01.050 --> 01:22:01.849", "speaker": "Alexander Vasserman", "text": "like"}, {"source_name": "lecture6", "index": 1021, "time": "01:22:02.340 --> 01:22:03.489", "speaker": "Alexander Vasserman", "text": "like we said."}, {"source_name": "lecture6", "index": 1022, "time": "01:22:03.710 --> 01:22:04.490", "speaker": "Alexander Vasserman", "text": "it"}, {"source_name": "lecture6", "index": 1023, "time": "01:22:04.730 --> 01:22:11.040", "speaker": "Alexander Vasserman", "text": "has a couple of outputs. So let's say that those outputs will be classes."}, {"source_name": "lecture6", "index": 1024, "time": "01:22:11.090 --> 01:22:12.050", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture6", "index": 1025, "time": "01:22:12.190 --> 01:22:13.750", "speaker": "Alexander Vasserman", "text": "so we have some kind of"}, {"source_name": "lecture6", "index": 1026, "time": "01:22:15.070 --> 01:22:16.150", "speaker": "Alexander Vasserman", "text": "document"}, {"source_name": "lecture6", "index": 1027, "time": "01:22:17.100 --> 01:22:18.740", "speaker": "Alexander Vasserman", "text": "collection, right?"}, {"source_name": "lecture6", "index": 1028, "time": "01:22:19.030 --> 01:22:26.589", "speaker": "Alexander Vasserman", "text": "Which i'm not going to define right now. So i'm just going to have a placeholder there."}, {"source_name": "lecture6", "index": 1029, "time": "01:22:27.050 --> 01:22:29.659", "speaker": "Alexander Vasserman", "text": "we also have"}, {"source_name": "lecture6", "index": 1030, "time": "01:22:30.340 --> 01:22:32.060", "speaker": "Alexander Vasserman", "text": "in index"}, {"source_name": "lecture6", "index": 1031, "time": "01:22:32.430 --> 01:22:34.380", "speaker": "Alexander Vasserman", "text": "that's going to be an output."}, {"source_name": "lecture6", "index": 1032, "time": "01:22:34.710 --> 01:22:35.639", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture6", "index": 1033, "time": "01:22:36.230 --> 01:22:38.059", "speaker": "Alexander Vasserman", "text": "i'm going to"}, {"source_name": "lecture6", "index": 1034, "time": "01:22:38.430 --> 01:22:41.330", "speaker": "Alexander Vasserman", "text": "also leave it as just a placeholder"}, {"source_name": "lecture6", "index": 1035, "time": "01:22:46.100 --> 01:22:47.120", "speaker": "Alexander Vasserman", "text": "to."}, {"source_name": "lecture6", "index": 1036, "time": "01:22:53.920 --> 01:22:54.990", "speaker": "Alexander Vasserman", "text": "This is"}, {"source_name": "lecture6", "index": 1037, "time": "01:22:55.770 --> 01:22:58.600", "speaker": "Alexander Vasserman", "text": "this function, though, is going to output"}, {"source_name": "lecture6", "index": 1038, "time": "01:22:59.130 --> 01:23:00.749", "speaker": "Alexander Vasserman", "text": "a document, collection"}, {"source_name": "lecture6", "index": 1039, "time": "01:23:01.060 --> 01:23:02.529", "speaker": "Alexander Vasserman", "text": "and an index."}, {"source_name": "lecture6", "index": 1040, "time": "01:23:02.700 --> 01:23:04.570", "speaker": "Alexander Vasserman", "text": "right? So"}, {"source_name": "lecture6", "index": 1041, "time": "01:23:04.770 --> 01:23:05.679", "speaker": "Alexander Vasserman", "text": "I am"}, {"source_name": "lecture6", "index": 1042, "time": "01:23:05.770 --> 01:23:08.299", "speaker": "Alexander Vasserman", "text": "starting to define."}, {"source_name": "lecture6", "index": 1043, "time": "01:23:08.540 --> 01:23:10.340", "speaker": "Alexander Vasserman", "text": "my."}, {"source_name": "lecture6", "index": 1044, "time": "01:23:10.560 --> 01:23:15.170", "speaker": "Alexander Vasserman", "text": "essentially enter what you call interface or"}, {"source_name": "lecture6", "index": 1045, "time": "01:23:15.430 --> 01:23:16.280", "speaker": "Alexander Vasserman", "text": "And if"}, {"source_name": "lecture6", "index": 1046, "time": "01:23:16.660 --> 01:23:23.619", "speaker": "Alexander Vasserman", "text": "the boundary, what what are the inputs what the outputs are what needs to be known"}, {"source_name": "lecture6", "index": 1047, "time": "01:23:23.640 --> 01:23:26.340", "speaker": "Alexander Vasserman", "text": "for for this to be implemented"}, {"source_name": "lecture6", "index": 1048, "time": "01:23:26.400 --> 01:23:27.110", "speaker": "Alexander Vasserman", "text": "right?"}, {"source_name": "lecture6", "index": 1049, "time": "01:23:29.190 --> 01:23:32.010", "speaker": "Alexander Vasserman", "text": "I also want to"}, {"source_name": "lecture6", "index": 1050, "time": "01:23:32.800 --> 01:23:35.170", "speaker": "Alexander Vasserman", "text": "define something like."}, {"source_name": "lecture6", "index": 1051, "time": "01:23:35.630 --> 01:23:37.129", "speaker": "Alexander Vasserman", "text": "Oh, a class"}, {"source_name": "lecture6", "index": 1052, "time": "01:23:38.610 --> 01:23:39.590", "speaker": "Alexander Vasserman", "text": "source."}, {"source_name": "lecture6", "index": 1053, "time": "01:23:44.760 --> 01:23:45.929", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture6", "index": 1054, "time": "01:23:46.610 --> 01:23:47.480", "speaker": "Alexander Vasserman", "text": "again."}, {"source_name": "lecture6", "index": 1055, "time": "01:23:47.740 --> 01:23:50.289", "speaker": "Alexander Vasserman", "text": "not sure exactly what it's going to be."}, {"source_name": "lecture6", "index": 1056, "time": "01:23:50.450 --> 01:23:51.320", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture6", "index": 1057, "time": "01:23:51.660 --> 01:23:55.240", "speaker": "Alexander Vasserman", "text": "we are going to care. Take a document source."}, {"source_name": "lecture6", "index": 1058, "time": "01:23:55.430 --> 01:23:56.710", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture6", "index": 1059, "time": "01:23:57.280 --> 01:24:00.259", "speaker": "Alexander Vasserman", "text": "you're going to be processing it right? So"}, {"source_name": "lecture6", "index": 1060, "time": "01:24:05.180 --> 01:24:06.300", "speaker": "Alexander Vasserman", "text": "source"}, {"source_name": "lecture6", "index": 1061, "time": "01:24:07.080 --> 01:24:08.419", "speaker": "Alexander Vasserman", "text": "of type source."}, {"source_name": "lecture6", "index": 1062, "time": "01:24:12.680 --> 01:24:13.460", "speaker": "Alexander Vasserman", "text": "right?"}, {"source_name": "lecture6", "index": 1063, "time": "01:24:15.640 --> 01:24:16.650", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture6", "index": 1064, "time": "01:24:17.050 --> 01:24:20.180", "speaker": "Alexander Vasserman", "text": "what are the major steps right?"}, {"source_name": "lecture6", "index": 1065, "time": "01:24:20.380 --> 01:24:22.809", "speaker": "Alexander Vasserman", "text": "we have"}, {"source_name": "lecture6", "index": 1066, "time": "01:24:25.210 --> 01:24:26.820", "speaker": "Alexander Vasserman", "text": "a"}, {"source_name": "lecture6", "index": 1067, "time": "01:24:27.680 --> 01:24:28.820", "speaker": "Alexander Vasserman", "text": "document"}, {"source_name": "lecture6", "index": 1068, "time": "01:24:29.550 --> 01:24:30.840", "speaker": "Alexander Vasserman", "text": "collection"}, {"source_name": "lecture6", "index": 1069, "time": "01:24:31.640 --> 01:24:35.099", "speaker": "Alexander Vasserman", "text": "that is again going to be some kind of function"}, {"source_name": "lecture6", "index": 1070, "time": "01:24:35.120 --> 01:24:38.450", "speaker": "Alexander Vasserman", "text": "that returns that takes us to"}, {"source_name": "lecture6", "index": 1071, "time": "01:24:38.550 --> 01:24:49.470", "speaker": "Alexander Vasserman", "text": "and return to the document collection. Or maybe it's actually defined in the source class. So maybe i'll let's say our source."}, {"source_name": "lecture6", "index": 1072, "time": "01:24:49.500 --> 01:24:50.609", "speaker": "Alexander Vasserman", "text": "We'll have"}, {"source_name": "lecture6", "index": 1073, "time": "01:24:51.340 --> 01:24:54.039", "speaker": "Alexander Vasserman", "text": "function that's called"}, {"source_name": "lecture6", "index": 1074, "time": "01:24:54.870 --> 01:24:55.830", "speaker": "Alexander Vasserman", "text": "read"}, {"source_name": "lecture6", "index": 1075, "time": "01:24:56.310 --> 01:24:57.540", "speaker": "Alexander Vasserman", "text": "documents"}, {"source_name": "lecture6", "index": 1076, "time": "01:25:02.820 --> 01:25:04.449", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture6", "index": 1077, "time": "01:25:05.410 --> 01:25:06.360", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture6", "index": 1078, "time": "01:25:08.930 --> 01:25:09.630", "speaker": "Alexander Vasserman", "text": "it"}, {"source_name": "lecture6", "index": 1079, "time": "01:25:11.130 --> 01:25:12.150", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture6", "index": 1080, "time": "01:25:12.330 --> 01:25:15.869", "speaker": "Alexander Vasserman", "text": "document collection. Maybe we'll be just"}, {"source_name": "lecture6", "index": 1081, "time": "01:25:16.920 --> 01:25:18.769", "speaker": "Alexander Vasserman", "text": "document source dot"}, {"source_name": "lecture6", "index": 1082, "time": "01:25:18.790 --> 01:25:20.200", "speaker": "Alexander Vasserman", "text": "big documents."}, {"source_name": "lecture6", "index": 1083, "time": "01:25:22.610 --> 01:25:23.620", "speaker": "Alexander Vasserman", "text": "And then"}, {"source_name": "lecture6", "index": 1084, "time": "01:25:25.150 --> 01:25:26.910", "speaker": "Alexander Vasserman", "text": "we'll have some kind of"}, {"source_name": "lecture6", "index": 1085, "time": "01:25:29.100 --> 01:25:31.110", "speaker": "Alexander Vasserman", "text": "transformed documents"}, {"source_name": "lecture6", "index": 1086, "time": "01:25:36.340 --> 01:25:38.960", "speaker": "Alexander Vasserman", "text": "which is basically"}, {"source_name": "lecture6", "index": 1087, "time": "01:25:40.960 --> 01:25:42.330", "speaker": "Alexander Vasserman", "text": "cool some function"}, {"source_name": "lecture6", "index": 1088, "time": "01:25:48.800 --> 01:25:49.900", "speaker": "Alexander Vasserman", "text": "on the"}, {"source_name": "lecture6", "index": 1089, "time": "01:25:50.830 --> 01:25:52.299", "speaker": "Alexander Vasserman", "text": "document collection."}, {"source_name": "lecture6", "index": 1090, "time": "01:25:55.520 --> 01:25:56.440", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture6", "index": 1091, "time": "01:25:56.470 --> 01:25:58.050", "speaker": "Alexander Vasserman", "text": "as you can see."}, {"source_name": "lecture6", "index": 1092, "time": "01:25:58.470 --> 01:25:59.880", "speaker": "Alexander Vasserman", "text": "basically"}, {"source_name": "lecture6", "index": 1093, "time": "01:25:59.990 --> 01:26:03.840", "speaker": "Alexander Vasserman", "text": "i'm not really putting very much logic anywhere"}, {"source_name": "lecture6", "index": 1094, "time": "01:26:05.390 --> 01:26:07.999", "speaker": "Alexander Vasserman", "text": "but i'm just outlining"}, {"source_name": "lecture6", "index": 1095, "time": "01:26:08.230 --> 01:26:13.039", "speaker": "Alexander Vasserman", "text": "the components that we're going to need to implement."}, {"source_name": "lecture6", "index": 1096, "time": "01:26:13.470 --> 01:26:15.390", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture6", "index": 1097, "time": "01:26:17.170 --> 01:26:18.269", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture6", "index": 1098, "time": "01:26:22.420 --> 01:26:23.730", "speaker": "Alexander Vasserman", "text": "but the"}, {"source_name": "lecture6", "index": 1099, "time": "01:26:24.290 --> 01:26:26.699", "speaker": "Alexander Vasserman", "text": "point is that"}, {"source_name": "lecture6", "index": 1100, "time": "01:26:28.920 --> 01:26:31.880", "speaker": "Alexander Vasserman", "text": "that's the place where we can get started."}, {"source_name": "lecture6", "index": 1101, "time": "01:26:32.680 --> 01:26:34.300", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture6", "index": 1102, "time": "01:26:34.700 --> 01:26:42.959", "speaker": "Alexander Vasserman", "text": "afterwards we can think about individual components what they need to do and kind of focus on those"}, {"source_name": "lecture6", "index": 1103, "time": "01:26:47.230 --> 01:26:48.389", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture6", "index": 1104, "time": "01:26:51.360 --> 01:26:52.500", "speaker": "Alexander Vasserman", "text": "let's say."}, {"source_name": "lecture6", "index": 1105, "time": "01:26:53.030 --> 01:26:57.159", "speaker": "Alexander Vasserman", "text": "be fine. They will say index, you know, will be"}, {"source_name": "lecture6", "index": 1106, "time": "01:26:57.430 --> 01:26:59.019", "speaker": "Alexander Vasserman", "text": "something like"}, {"source_name": "lecture6", "index": 1107, "time": "01:26:59.360 --> 01:27:00.349", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture6", "index": 1108, "time": "01:27:09.610 --> 01:27:11.760", "speaker": "Alexander Vasserman", "text": "on transport documents."}, {"source_name": "lecture6", "index": 1109, "time": "01:27:12.200 --> 01:27:12.889", "speaker": "Alexander Vasserman", "text": "Right?"}, {"source_name": "lecture6", "index": 1110, "time": "01:27:38.270 --> 01:27:40.559", "speaker": "Alexander Vasserman", "text": "And then basically"}, {"source_name": "lecture6", "index": 1111, "time": "01:27:40.850 --> 01:27:42.549", "speaker": "Alexander Vasserman", "text": "the return"}, {"source_name": "lecture6", "index": 1112, "time": "01:27:44.360 --> 01:27:45.870", "speaker": "Alexander Vasserman", "text": "the power of"}, {"source_name": "lecture6", "index": 1113, "time": "01:27:46.540 --> 01:27:48.349", "speaker": "Alexander Vasserman", "text": "document, collection"}, {"source_name": "lecture6", "index": 1114, "time": "01:27:48.580 --> 01:27:49.420", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture6", "index": 1115, "time": "01:27:49.650 --> 01:27:50.610", "speaker": "Alexander Vasserman", "text": "index"}, {"source_name": "lecture6", "index": 1116, "time": "01:27:57.400 --> 01:27:58.250", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture6", "index": 1117, "time": "01:27:58.980 --> 01:28:00.230", "speaker": "Alexander Vasserman", "text": "to some degree."}, {"source_name": "lecture6", "index": 1118, "time": "01:28:00.540 --> 01:28:05.469", "speaker": "Alexander Vasserman", "text": "you know, in the last, whatever a few minutes we've implemented our indexing process"}, {"source_name": "lecture6", "index": 1119, "time": "01:28:05.860 --> 01:28:07.300", "speaker": "Alexander Vasserman", "text": "there."}, {"source_name": "lecture6", "index": 1120, "time": "01:28:07.970 --> 01:28:11.760", "speaker": "Alexander Vasserman", "text": "this might not be the final implementation, we might"}, {"source_name": "lecture6", "index": 1121, "time": "01:28:12.030 --> 01:28:26.759", "speaker": "Alexander Vasserman", "text": "I decide that we have one slightly different abstractions. Maybe. you know, some of these things will be classes, and maybe, instead of creating this function. Maybe it's going to be a"}, {"source_name": "lecture6", "index": 1122, "time": "01:28:26.770 --> 01:28:36.860", "speaker": "Alexander Vasserman", "text": "function on on the index class that says, add document or things like that, right? So there are some decisions that we are"}, {"source_name": "lecture6", "index": 1123, "time": "01:28:37.030 --> 01:28:40.449", "speaker": "Alexander Vasserman", "text": "going to need to make even at this level"}, {"source_name": "lecture6", "index": 1124, "time": "01:28:40.850 --> 01:28:42.509", "speaker": "Alexander Vasserman", "text": "of obstruction."}, {"source_name": "lecture6", "index": 1125, "time": "01:28:42.810 --> 01:28:47.509", "speaker": "Alexander Vasserman", "text": "But this level of instruction is quite useful."}, {"source_name": "lecture6", "index": 1126, "time": "01:28:47.740 --> 01:28:55.210", "speaker": "Alexander Vasserman", "text": "and that's a place to start, and that's kind of one of the skills in building a larger."}, {"source_name": "lecture6", "index": 1127, "time": "01:28:55.240 --> 01:28:58.980", "speaker": "Alexander Vasserman", "text": "Our project is kind of going from"}, {"source_name": "lecture6", "index": 1128, "time": "01:28:59.350 --> 01:29:03.889", "speaker": "Alexander Vasserman", "text": "generic representation like this or kind of description of the process"}, {"source_name": "lecture6", "index": 1129, "time": "01:29:04.140 --> 01:29:10.440", "speaker": "Alexander Vasserman", "text": "to splitting it up into components which are kind of very closely aligned"}, {"source_name": "lecture6", "index": 1130, "time": "01:29:10.610 --> 01:29:17.340", "speaker": "Alexander Vasserman", "text": "to. Maybe the the diagram. But they don't have to be exactly the same, and you start making some decisions about"}, {"source_name": "lecture6", "index": 1131, "time": "01:29:17.370 --> 01:29:22.500", "speaker": "Alexander Vasserman", "text": "how the data kind of flows through the process."}, {"source_name": "lecture6", "index": 1132, "time": "01:29:25.390 --> 01:29:26.250", "speaker": "Alexander Vasserman", "text": "Bill."}, {"source_name": "lecture6", "index": 1133, "time": "01:29:26.520 --> 01:29:27.500", "speaker": "Alexander Vasserman", "text": "be"}, {"source_name": "lecture6", "index": 1134, "time": "01:29:28.070 --> 01:29:33.019", "speaker": "Alexander Vasserman", "text": "talking obviously more about this and iterating on this. And"}, {"source_name": "lecture6", "index": 1135, "time": "01:29:34.740 --> 01:29:35.510", "speaker": "Alexander Vasserman", "text": "yeah."}, {"source_name": "lecture6", "index": 1136, "time": "01:29:35.650 --> 01:29:39.929", "speaker": "Alexander Vasserman", "text": "but but hopefully kind of the approach"}, {"source_name": "lecture6", "index": 1137, "time": "01:29:40.110 --> 01:29:41.349", "speaker": "Alexander Vasserman", "text": "makes sense."}, {"source_name": "lecture6", "index": 1138, "time": "01:29:41.680 --> 01:29:43.679", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture6", "index": 1139, "time": "01:29:45.890 --> 01:29:47.499", "speaker": "Alexander Vasserman", "text": "yeah, the high level"}, {"source_name": "lecture6", "index": 1140, "time": "01:29:47.520 --> 01:29:49.679", "speaker": "Alexander Vasserman", "text": "components of the"}, {"source_name": "lecture6", "index": 1141, "time": "01:29:49.880 --> 01:29:55.219", "speaker": "Alexander Vasserman", "text": "search makes sense. again, maybe it's not"}, {"source_name": "lecture6", "index": 1142, "time": "01:29:55.260 --> 01:30:05.939", "speaker": "Alexander Vasserman", "text": "Christianly clear to you yet exactly what each component responsible for and to some degree the exact boundaries between components are somewhat way"}, {"source_name": "lecture6", "index": 1143, "time": "01:30:06.160 --> 01:30:11.670", "speaker": "Alexander Vasserman", "text": "potentially so in one system you might decide that"}, {"source_name": "lecture6", "index": 1144, "time": "01:30:11.750 --> 01:30:16.559", "speaker": "Alexander Vasserman", "text": "a particular step goes into text"}, {"source_name": "lecture6", "index": 1145, "time": "01:30:16.800 --> 01:30:22.080", "speaker": "Alexander Vasserman", "text": "or document collection versus docking transformation, right"}, {"source_name": "lecture6", "index": 1146, "time": "01:30:22.570 --> 01:30:23.580", "speaker": "Alexander Vasserman", "text": "or"}, {"source_name": "lecture6", "index": 1147, "time": "01:30:23.630 --> 01:30:25.550", "speaker": "Alexander Vasserman", "text": "something is part of"}, {"source_name": "lecture6", "index": 1148, "time": "01:30:25.690 --> 01:30:30.610", "speaker": "Alexander Vasserman", "text": "transforming document versus creating the index out of the transform document."}, {"source_name": "lecture6", "index": 1149, "time": "01:30:30.860 --> 01:30:32.759", "speaker": "Alexander Vasserman", "text": "The the boundaries are"}, {"source_name": "lecture6", "index": 1150, "time": "01:30:33.860 --> 01:30:36.760", "speaker": "Alexander Vasserman", "text": "somewhat artificial in some sense."}, {"source_name": "lecture6", "index": 1151, "time": "01:30:36.870 --> 01:30:47.620", "speaker": "Alexander Vasserman", "text": "right. But basically we we are trying to create some meaningful representation intermediate representations in our system, and that's kind of the goal."}, {"source_name": "lecture6", "index": 1152, "time": "01:30:47.790 --> 01:30:48.410", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture6", "index": 1153, "time": "01:30:51.470 --> 01:30:52.429", "speaker": "Alexander Vasserman", "text": "all right"}, {"source_name": "lecture6", "index": 1154, "time": "01:30:53.110 --> 01:30:54.210", "speaker": "Alexander Vasserman", "text": "on."}, {"source_name": "lecture6", "index": 1155, "time": "01:30:54.300 --> 01:30:56.620", "speaker": "Alexander Vasserman", "text": "I think this is."}, {"source_name": "lecture6", "index": 1156, "time": "01:30:56.940 --> 01:30:59.979", "speaker": "Alexander Vasserman", "text": "where are we going to stop for today?"}, {"source_name": "lecture6", "index": 1157, "time": "01:31:00.650 --> 01:31:02.800", "speaker": "Alexander Vasserman", "text": "Oh, that's it."}, {"source_name": "lecture6", "index": 1158, "time": "01:31:03.560 --> 01:31:05.169", "speaker": "Alexander Vasserman", "text": "Do we have any questions."}, {"source_name": "lecture6", "index": 1159, "time": "01:31:11.640 --> 01:31:14.360", "speaker": "Alexander Vasserman", "text": "Well, if you don't have any questions."}, {"source_name": "lecture6", "index": 1160, "time": "01:31:14.510 --> 01:31:18.690", "speaker": "Alexander Vasserman", "text": "then you know, have a good weekend"}, {"source_name": "lecture6", "index": 1161, "time": "01:31:20.430 --> 01:31:24.099", "speaker": "Alexander Vasserman", "text": "make sure to finish from work by the end of the day today."}, {"source_name": "lecture6", "index": 1162, "time": "01:31:25.360 --> 01:31:28.040", "speaker": "Alexander Vasserman", "text": "probably for the second homework."}, {"source_name": "lecture6", "index": 1163, "time": "01:31:28.090 --> 01:31:28.960", "speaker": "Alexander Vasserman", "text": "I'll"}, {"source_name": "lecture6", "index": 1164, "time": "01:31:29.090 --> 01:31:33.679", "speaker": "Alexander Vasserman", "text": "wait a little bit. I want to take a look at your first homeworks and kind of"}, {"source_name": "lecture6", "index": 1165, "time": "01:31:36.390 --> 01:31:42.619", "speaker": "Alexander Vasserman", "text": "adjust my level of expectations potentially either up or down. So"}, {"source_name": "lecture6", "index": 1166, "time": "01:31:42.750 --> 01:31:49.229", "speaker": "Alexander Vasserman", "text": "but don't take it as a motivation not to do well in the first homework anyways."}, {"source_name": "lecture6", "index": 1167, "time": "01:31:51.900 --> 01:32:09.910", "speaker": "Alexander Vasserman", "text": "but yes, I the one of the things that first homework goal of the first homework was to test some of the understanding of the basics of Python and some of the data structures that will be useful and some of the process. And how clear"}, {"source_name": "lecture6", "index": 1168, "time": "01:32:09.920 --> 01:32:17.620", "speaker": "Alexander Vasserman", "text": "those are to you. Oh, this out going very deeply into kind of details of search."}, {"source_name": "lecture6", "index": 1169, "time": "01:32:17.750 --> 01:32:19.260", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture6", "index": 1170, "time": "01:32:20.090 --> 01:32:26.260", "speaker": "Alexander Vasserman", "text": "so I wanna see where we are. before I start the signing"}, {"source_name": "lecture6", "index": 1171, "time": "01:32:26.590 --> 01:32:29.499", "speaker": "Alexander Vasserman", "text": "things that are a little bit more specific."}, {"source_name": "lecture6", "index": 1172, "time": "01:32:29.550 --> 01:32:30.990", "speaker": "Alexander Vasserman", "text": "Do what they're building."}, {"source_name": "lecture6", "index": 1173, "time": "01:32:35.330 --> 01:32:36.150", "speaker": "Alexander Vasserman", "text": "all right."}, {"source_name": "lecture6", "index": 1174, "time": "01:32:36.690 --> 01:32:38.420", "speaker": "Alexander Vasserman", "text": "if you have"}, {"source_name": "lecture6", "index": 1175, "time": "01:32:38.460 --> 01:32:39.170", "speaker": "Alexander Vasserman", "text": "any"}, {"source_name": "lecture6", "index": 1176, "time": "01:32:39.730 --> 01:32:42.650", "speaker": "Alexander Vasserman", "text": "additional questions. You're welcome to stay"}, {"source_name": "lecture6", "index": 1177, "time": "01:32:44.490 --> 01:32:46.510", "speaker": "Alexander Vasserman", "text": "on, but otherwise"}, {"source_name": "lecture6", "index": 1178, "time": "01:32:46.710 --> 01:32:52.770", "speaker": "Alexander Vasserman", "text": "thank you very much. Everyone for coming, and for all the questions you've been asking."}, {"source_name": "lecture6", "index": 1179, "time": "01:32:55.120 --> 01:32:56.120", "speaker": "Alexander Vasserman", "text": "and i'll"}, {"source_name": "lecture6", "index": 1180, "time": "01:32:56.410 --> 01:32:57.800", "speaker": "Alexander Vasserman", "text": "see you next time."}, {"source_name": "lecture6", "index": 1181, "time": "01:32:59.890 --> 01:33:01.649", "speaker": "Luis Gonzalez", "text": "Thank you so much. Have a good weekend."}, {"source_name": "lecture6", "index": 1182, "time": "01:33:01.720 --> 01:33:02.380", "speaker": "Alexander Vasserman", "text": "Yep."}, {"source_name": "lecture6", "index": 1183, "time": "01:33:02.470 --> 01:33:04.070", "speaker": "Aimun Anwer", "text": "Have a nice weekend."}, {"source_name": "lecture6", "index": 1184, "time": "01:33:04.350 --> 01:33:05.610", "speaker": "Alexander Vasserman", "text": "you, too. Thanks."}, {"source_name": "lecture7", "index": 1, "time": "00:08:20.760 --> 00:08:22.400", "speaker": "Alexander Vasserman", "text": "Alright? Hi, everyone!"}, {"source_name": "lecture7", "index": 2, "time": "00:08:22.850 --> 00:08:24.169", "speaker": "Alexander Vasserman", "text": "How is everyone doing"}, {"source_name": "lecture7", "index": 3, "time": "00:08:26.100 --> 00:08:27.120", "speaker": "Rana Hani", "text": "good? How are you?"}, {"source_name": "lecture7", "index": 4, "time": "00:08:27.840 --> 00:08:28.900", "speaker": "Alexander Vasserman", "text": "All right?"}, {"source_name": "lecture7", "index": 5, "time": "00:08:29.980 --> 00:08:32.600", "speaker": "Alexander Vasserman", "text": "So let's"}, {"source_name": "lecture7", "index": 6, "time": "00:08:32.929 --> 00:08:34.150", "speaker": "Alexander Vasserman", "text": "get going"}, {"source_name": "lecture7", "index": 7, "time": "00:08:34.990 --> 00:08:37.010", "speaker": "Alexander Vasserman", "text": "today, email."}, {"source_name": "lecture7", "index": 8, "time": "00:08:37.530 --> 00:08:39.210", "speaker": "Alexander Vasserman", "text": "have"}, {"source_name": "lecture7", "index": 9, "time": "00:08:39.980 --> 00:08:46.609", "speaker": "Alexander Vasserman", "text": "They'll review the homework one and continue with the architecture."}, {"source_name": "lecture7", "index": 10, "time": "00:08:46.640 --> 00:08:48.039", "speaker": "Alexander Vasserman", "text": "So we we started"}, {"source_name": "lecture7", "index": 11, "time": "00:08:48.140 --> 00:08:52.430", "speaker": "Alexander Vasserman", "text": "last time we started on our search architecture, and"}, {"source_name": "lecture7", "index": 12, "time": "00:08:52.450 --> 00:08:55.690", "speaker": "Alexander Vasserman", "text": "we discussed how."}, {"source_name": "lecture7", "index": 13, "time": "00:08:55.780 --> 00:08:59.249", "speaker": "Alexander Vasserman", "text": "what are the different components of a search engine"}, {"source_name": "lecture7", "index": 14, "time": "00:08:59.360 --> 00:09:03.180", "speaker": "Alexander Vasserman", "text": "are, and the at the end of the lesson we started"}, {"source_name": "lecture7", "index": 15, "time": "00:09:03.910 --> 00:09:07.590", "speaker": "Alexander Vasserman", "text": "looking at converting the"}, {"source_name": "lecture7", "index": 16, "time": "00:09:09.400 --> 00:09:13.730", "speaker": "Alexander Vasserman", "text": "overall diagram or overall architecture into the code."}, {"source_name": "lecture7", "index": 17, "time": "00:09:14.290 --> 00:09:17.140", "speaker": "Alexander Vasserman", "text": "So today we'll"}, {"source_name": "lecture7", "index": 18, "time": "00:09:17.790 --> 00:09:19.820", "speaker": "Alexander Vasserman", "text": "after the homework. One review"}, {"source_name": "lecture7", "index": 19, "time": "00:09:19.880 --> 00:09:22.550", "speaker": "Alexander Vasserman", "text": "we'll continue working on that."}, {"source_name": "lecture7", "index": 20, "time": "00:09:23.470 --> 00:09:24.260", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 21, "time": "00:09:24.390 --> 00:09:30.890", "speaker": "Alexander Vasserman", "text": "before we get into the Homework Review. Are there any questions"}, {"source_name": "lecture7", "index": 22, "time": "00:09:30.940 --> 00:09:31.640", "speaker": "Alexander Vasserman", "text": "from?"}, {"source_name": "lecture7", "index": 23, "time": "00:09:32.330 --> 00:09:35.909", "speaker": "Alexander Vasserman", "text": "Oh, yeah, previous lectures or anything else."}, {"source_name": "lecture7", "index": 24, "time": "00:09:43.470 --> 00:09:44.490", "speaker": "Alexander Vasserman", "text": "All right."}, {"source_name": "lecture7", "index": 25, "time": "00:09:44.760 --> 00:09:47.390", "speaker": "Alexander Vasserman", "text": "If there are no questions."}, {"source_name": "lecture7", "index": 26, "time": "00:09:47.930 --> 00:09:50.650", "speaker": "Alexander Vasserman", "text": "let's get into the homework."}, {"source_name": "lecture7", "index": 27, "time": "00:09:52.650 --> 00:09:53.740", "speaker": "Alexander Vasserman", "text": "So."}, {"source_name": "lecture7", "index": 28, "time": "00:09:59.260 --> 00:10:05.929", "speaker": "Alexander Vasserman", "text": "And what i'm going to do actually is i'm going to do the homework in"}, {"source_name": "lecture7", "index": 29, "time": "00:10:06.190 --> 00:10:07.160", "speaker": "Alexander Vasserman", "text": "in the"}, {"source_name": "lecture7", "index": 30, "time": "00:10:07.540 --> 00:10:08.530", "speaker": "Alexander Vasserman", "text": "cool."}, {"source_name": "lecture7", "index": 31, "time": "00:10:09.140 --> 00:10:14.210", "speaker": "Alexander Vasserman", "text": "So we've seen Call out before that. So the"}, {"source_name": "lecture7", "index": 32, "time": "00:10:14.560 --> 00:10:18.709", "speaker": "Alexander Vasserman", "text": "good way to kind of create a mixed"}, {"source_name": "lecture7", "index": 33, "time": "00:10:19.260 --> 00:10:21.980", "speaker": "Alexander Vasserman", "text": "text and python"}, {"source_name": "lecture7", "index": 34, "time": "00:10:22.170 --> 00:10:23.340", "speaker": "Alexander Vasserman", "text": "environment."}, {"source_name": "lecture7", "index": 35, "time": "00:10:24.130 --> 00:10:26.069", "speaker": "Alexander Vasserman", "text": "Oh, it's all"}, {"source_name": "lecture7", "index": 36, "time": "00:10:26.160 --> 00:10:33.430", "speaker": "Alexander Vasserman", "text": "you know. One way to also do the the homework. If you're if you want to do it for the homeworks"}, {"source_name": "lecture7", "index": 37, "time": "00:10:33.640 --> 00:10:35.860", "speaker": "Alexander Vasserman", "text": "later home works, you can do that."}, {"source_name": "lecture7", "index": 38, "time": "00:10:38.100 --> 00:10:40.020", "speaker": "Alexander Vasserman", "text": "you can just share it"}, {"source_name": "lecture7", "index": 39, "time": "00:10:40.180 --> 00:10:44.730", "speaker": "Alexander Vasserman", "text": "with me and submit your homework that way."}, {"source_name": "lecture7", "index": 40, "time": "00:10:44.780 --> 00:10:53.079", "speaker": "Alexander Vasserman", "text": "but also just as a demonstration, so that you all remember that that's one of the options how we in general to"}, {"source_name": "lecture7", "index": 41, "time": "00:10:53.120 --> 00:10:53.890", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 42, "time": "00:10:54.310 --> 00:10:59.880", "speaker": "Alexander Vasserman", "text": "kind of play around with python, especially when you don't need the"}, {"source_name": "lecture7", "index": 43, "time": "00:10:59.910 --> 00:11:00.690", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 44, "time": "00:11:01.540 --> 00:11:05.769", "speaker": "Alexander Vasserman", "text": "any of the project files that you've created before."}, {"source_name": "lecture7", "index": 45, "time": "00:11:07.410 --> 00:11:12.320", "speaker": "Alexander Vasserman", "text": "All right. So let's create new homework. Also a new notebook."}, {"source_name": "lecture7", "index": 46, "time": "00:11:12.960 --> 00:11:14.920", "speaker": "Alexander Vasserman", "text": "Let's"}, {"source_name": "lecture7", "index": 47, "time": "00:11:15.610 --> 00:11:16.580", "speaker": "Alexander Vasserman", "text": "call it"}, {"source_name": "lecture7", "index": 48, "time": "00:11:17.970 --> 00:11:19.240", "speaker": "Alexander Vasserman", "text": "1 1,"}, {"source_name": "lecture7", "index": 49, "time": "00:11:20.300 --> 00:11:21.790", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture7", "index": 50, "time": "00:11:24.200 --> 00:11:26.490", "speaker": "Alexander Vasserman", "text": "let's start this."}, {"source_name": "lecture7", "index": 51, "time": "00:11:27.900 --> 00:11:29.529", "speaker": "Alexander Vasserman", "text": "Oh, she one!"}, {"source_name": "lecture7", "index": 52, "time": "00:11:29.850 --> 00:11:30.600", "speaker": "Alexander Vasserman", "text": "Hmm."}, {"source_name": "lecture7", "index": 53, "time": "00:11:33.750 --> 00:11:34.700", "speaker": "Alexander Vasserman", "text": "So."}, {"source_name": "lecture7", "index": 54, "time": "00:11:35.880 --> 00:11:44.600", "speaker": "Alexander Vasserman", "text": "So what are the differences between the searching for record? It's in a database and searching for documents, using search engine."}, {"source_name": "lecture7", "index": 55, "time": "00:11:48.520 --> 00:11:49.629", "speaker": "Alexander Vasserman", "text": "and he"}, {"source_name": "lecture7", "index": 56, "time": "00:11:49.730 --> 00:11:50.690", "speaker": "Alexander Vasserman", "text": "well, what"}, {"source_name": "lecture7", "index": 57, "time": "00:11:50.920 --> 00:11:53.770", "speaker": "Alexander Vasserman", "text": "what are some of the things that people start about"}, {"source_name": "lecture7", "index": 58, "time": "00:11:54.220 --> 00:11:55.220", "speaker": "Alexander Vasserman", "text": "anyone."}, {"source_name": "lecture7", "index": 59, "time": "00:11:56.690 --> 00:11:57.770", "speaker": "Alexander Vasserman", "text": "Yeah, Alex."}, {"source_name": "lecture7", "index": 60, "time": "00:11:58.420 --> 00:12:04.939", "speaker": "Alex Wojtowicz", "text": "I said that databases are usually more organized, and that the data that it's taking in is limited."}, {"source_name": "lecture7", "index": 61, "time": "00:12:06.530 --> 00:12:08.590", "speaker": "Alexander Vasserman", "text": "Yes, so"}, {"source_name": "lecture7", "index": 62, "time": "00:12:08.880 --> 00:12:12.969", "speaker": "Alexander Vasserman", "text": "tokenize this one way to to say it"}, {"source_name": "lecture7", "index": 63, "time": "00:12:13.200 --> 00:12:17.980", "speaker": "Alexander Vasserman", "text": "another way to say it. I think that the data is"}, {"source_name": "lecture7", "index": 64, "time": "00:12:18.170 --> 00:12:19.480", "speaker": "Alexander Vasserman", "text": "oh, structured"}, {"source_name": "lecture7", "index": 65, "time": "00:12:20.650 --> 00:12:21.380", "speaker": "Alexander Vasserman", "text": "right"}, {"source_name": "lecture7", "index": 66, "time": "00:12:21.910 --> 00:12:23.120", "speaker": "Alex Wojtowicz", "text": "0 for"}, {"source_name": "lecture7", "index": 67, "time": "00:12:23.450 --> 00:12:24.260", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 68, "time": "00:12:24.680 --> 00:12:26.020", "speaker": "Alexander Vasserman", "text": "database."}, {"source_name": "lecture7", "index": 69, "time": "00:12:27.360 --> 00:12:28.260", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 70, "time": "00:12:29.210 --> 00:12:30.690", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture7", "index": 71, "time": "00:12:31.830 --> 00:12:32.820", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture7", "index": 72, "time": "00:12:33.120 --> 00:12:36.030", "speaker": "Alexander Vasserman", "text": "which is what that means. So"}, {"source_name": "lecture7", "index": 73, "time": "00:12:36.600 --> 00:12:37.500", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 74, "time": "00:12:38.880 --> 00:12:40.190", "speaker": "Alexander Vasserman", "text": "well defined"}, {"source_name": "lecture7", "index": 75, "time": "00:12:40.890 --> 00:12:41.800", "speaker": "Alexander Vasserman", "text": "fields."}, {"source_name": "lecture7", "index": 76, "time": "00:12:43.000 --> 00:12:45.909", "speaker": "Alex Wojtowicz", "text": "Yeah, it's organized in a specific way."}, {"source_name": "lecture7", "index": 77, "time": "00:12:46.280 --> 00:12:47.000", "speaker": "Alexander Vasserman", "text": "Right?"}, {"source_name": "lecture7", "index": 78, "time": "00:12:48.290 --> 00:12:49.490", "speaker": "Alexander Vasserman", "text": "Exactly."}, {"source_name": "lecture7", "index": 79, "time": "00:12:50.410 --> 00:12:52.359", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture7", "index": 80, "time": "00:12:52.450 --> 00:12:53.520", "speaker": "Alexander Vasserman", "text": "search"}, {"source_name": "lecture7", "index": 81, "time": "00:12:55.270 --> 00:12:56.680", "speaker": "Alexander Vasserman", "text": "unstructured."}, {"source_name": "lecture7", "index": 82, "time": "00:12:58.260 --> 00:12:59.080", "speaker": "Alexander Vasserman", "text": "Yes."}, {"source_name": "lecture7", "index": 83, "time": "00:12:59.730 --> 00:13:00.520", "speaker": "Alexander Vasserman", "text": "Okay?"}, {"source_name": "lecture7", "index": 84, "time": "00:13:01.370 --> 00:13:02.280", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 85, "time": "00:13:02.440 --> 00:13:03.490", "speaker": "Alexander Vasserman", "text": "what else?"}, {"source_name": "lecture7", "index": 86, "time": "00:13:04.530 --> 00:13:05.760", "speaker": "Alexander Vasserman", "text": "Oh, no."}, {"source_name": "lecture7", "index": 87, "time": "00:13:06.910 --> 00:13:14.270", "speaker": "Rafal \"Ralph\" Jasielec", "text": "I didn't put this in my answer. But now it came. It's a database would be. You know what you're searching for. You just try to find it."}, {"source_name": "lecture7", "index": 88, "time": "00:13:14.310 --> 00:13:16.980", "speaker": "Rafal \"Ralph\" Jasielec", "text": "and"}, {"source_name": "lecture7", "index": 89, "time": "00:13:18.210 --> 00:13:33.539", "speaker": "Rafal \"Ralph\" Jasielec", "text": "and then for the Doc for a search engine. It's you kinda don't know what you're searching for. You Just try to. You have a general idea. But you don't know the parameters. You don't You're not look yeah, you're basically just casting a big net."}, {"source_name": "lecture7", "index": 90, "time": "00:13:33.910 --> 00:13:34.730", "speaker": "Alexander Vasserman", "text": "Right?"}, {"source_name": "lecture7", "index": 91, "time": "00:13:34.900 --> 00:13:37.699", "speaker": "Alexander Vasserman", "text": "So i'll say precise."}, {"source_name": "lecture7", "index": 92, "time": "00:13:39.460 --> 00:13:40.510", "speaker": "Alexander Vasserman", "text": "really."}, {"source_name": "lecture7", "index": 93, "time": "00:13:40.870 --> 00:13:46.089", "speaker": "Alexander Vasserman", "text": "So you You know exactly what what it is you're looking for and"}, {"source_name": "lecture7", "index": 94, "time": "00:13:46.780 --> 00:13:48.409", "speaker": "Alexander Vasserman", "text": "versus"}, {"source_name": "lecture7", "index": 95, "time": "00:13:48.500 --> 00:13:50.479", "speaker": "Alexander Vasserman", "text": "search right now."}, {"source_name": "lecture7", "index": 96, "time": "00:13:50.690 --> 00:13:51.640", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 97, "time": "00:13:52.980 --> 00:13:54.640", "speaker": "Alexander Vasserman", "text": "I would say a"}, {"source_name": "lecture7", "index": 98, "time": "00:13:55.400 --> 00:13:58.139", "speaker": "Alexander Vasserman", "text": "topic, so you"}, {"source_name": "lecture7", "index": 99, "time": "00:13:58.450 --> 00:13:59.320", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 100, "time": "00:14:00.770 --> 00:14:07.680", "speaker": "Alexander Vasserman", "text": "you have some idea what you're looking for, and you expressing that as a query. But you it's not a precise query."}, {"source_name": "lecture7", "index": 101, "time": "00:14:07.800 --> 00:14:10.009", "speaker": "Alexander Vasserman", "text": "and I I guess I can spell."}, {"source_name": "lecture7", "index": 102, "time": "00:14:11.350 --> 00:14:13.480", "speaker": "Alexander Vasserman", "text": "Anyway, i'll fix it later."}, {"source_name": "lecture7", "index": 103, "time": "00:14:15.480 --> 00:14:16.620", "speaker": "Alexander Vasserman", "text": "Louise."}, {"source_name": "lecture7", "index": 104, "time": "00:14:19.020 --> 00:14:30.199", "speaker": "Luis Gonzalez", "text": "I said. Search engines give people access to websites that are almost entirely free to the public, while databases have resources that are often licensed or copyrighted."}, {"source_name": "lecture7", "index": 105, "time": "00:14:30.630 --> 00:14:31.530", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture7", "index": 106, "time": "00:14:31.870 --> 00:14:33.080", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 107, "time": "00:14:33.290 --> 00:14:36.660", "speaker": "Alexander Vasserman", "text": "database. So okay, I mean"}, {"source_name": "lecture7", "index": 108, "time": "00:14:36.920 --> 00:14:39.389", "speaker": "Alexander Vasserman", "text": "It's: I would say that"}, {"source_name": "lecture7", "index": 109, "time": "00:14:39.490 --> 00:14:50.400", "speaker": "Alexander Vasserman", "text": "that's typically like, you know, when we talk about search engine sometimes to talk about web, search engine, and then it's kind of public. But remember, there are multiple"}, {"source_name": "lecture7", "index": 110, "time": "00:14:50.460 --> 00:14:56.450", "speaker": "Alexander Vasserman", "text": "different search engines we might be using. So while you know this is a"}, {"source_name": "lecture7", "index": 111, "time": "00:14:56.650 --> 00:15:00.050", "speaker": "Alexander Vasserman", "text": "a reasonable kind of idea."}, {"source_name": "lecture7", "index": 112, "time": "00:15:00.190 --> 00:15:06.729", "speaker": "Alexander Vasserman", "text": "I wouldn't necessarily say that that's like the principal difference. You can open up"}, {"source_name": "lecture7", "index": 113, "time": "00:15:06.820 --> 00:15:08.900", "speaker": "Alexander Vasserman", "text": "a database to"}, {"source_name": "lecture7", "index": 114, "time": "00:15:08.930 --> 00:15:21.010", "speaker": "Alexander Vasserman", "text": "public, so there are public datasets that you can create, and the also there are search engines that you can build for priorit data that's only accessible within a certain company."}, {"source_name": "lecture7", "index": 115, "time": "00:15:21.320 --> 00:15:22.230", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 116, "time": "00:15:22.780 --> 00:15:30.400", "speaker": "Alexander Vasserman", "text": "that's a good idea and good thinking. But I wouldn't say that that's necessarily a difference."}, {"source_name": "lecture7", "index": 117, "time": "00:15:31.880 --> 00:15:33.230", "speaker": "Alexander Vasserman", "text": "Louise."}, {"source_name": "lecture7", "index": 118, "time": "00:15:36.580 --> 00:15:39.740", "speaker": "Alexander Vasserman", "text": "Oh, sorry it. Yeah."}, {"source_name": "lecture7", "index": 119, "time": "00:15:40.160 --> 00:15:42.350", "speaker": "Alexander Vasserman", "text": "okay."}, {"source_name": "lecture7", "index": 120, "time": "00:15:42.650 --> 00:15:43.470", "speaker": "Alexander Vasserman", "text": "Ilin."}, {"source_name": "lecture7", "index": 121, "time": "00:15:43.960 --> 00:15:47.349", "speaker": "Alexander Vasserman", "text": "Yeah. So I said that"}, {"source_name": "lecture7", "index": 122, "time": "00:15:48.050 --> 00:16:01.960", "speaker": "Aimun Anwer", "text": "for a document it's they can have like a rankings, or for, like you know, documents and search engines they have like a ranking system, whereas with a databases, the fa, the file either matches or does not match"}, {"source_name": "lecture7", "index": 123, "time": "00:16:02.020 --> 00:16:02.790", "speaker": "Alexander Vasserman", "text": "Great"}, {"source_name": "lecture7", "index": 124, "time": "00:16:02.890 --> 00:16:04.900", "speaker": "Alexander Vasserman", "text": "Great! That's"}, {"source_name": "lecture7", "index": 125, "time": "00:16:04.950 --> 00:16:08.409", "speaker": "Alexander Vasserman", "text": "so. I'll call it the record."}, {"source_name": "lecture7", "index": 126, "time": "00:16:08.850 --> 00:16:09.590", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 127, "time": "00:16:09.880 --> 00:16:10.840", "speaker": "Alexander Vasserman", "text": "hi! There"}, {"source_name": "lecture7", "index": 128, "time": "00:16:11.240 --> 00:16:12.490", "speaker": "Alexander Vasserman", "text": "matches"}, {"source_name": "lecture7", "index": 129, "time": "00:16:12.820 --> 00:16:13.580", "speaker": "Alexander Vasserman", "text": "or"}, {"source_name": "lecture7", "index": 130, "time": "00:16:13.660 --> 00:16:14.690", "speaker": "Alexander Vasserman", "text": "doesn't"}, {"source_name": "lecture7", "index": 131, "time": "00:16:15.950 --> 00:16:18.090", "speaker": "Alexander Vasserman", "text": "and for"}, {"source_name": "lecture7", "index": 132, "time": "00:16:18.160 --> 00:16:19.330", "speaker": "Alexander Vasserman", "text": "search."}, {"source_name": "lecture7", "index": 133, "time": "00:16:19.710 --> 00:16:20.600", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 134, "time": "00:16:22.850 --> 00:16:25.170", "speaker": "Alexander Vasserman", "text": "relevance is so"}, {"source_name": "lecture7", "index": 135, "time": "00:16:25.740 --> 00:16:27.430", "speaker": "Alexander Vasserman", "text": "more."}, {"source_name": "lecture7", "index": 136, "time": "00:16:27.940 --> 00:16:28.930", "speaker": "Alexander Vasserman", "text": "What's"}, {"source_name": "lecture7", "index": 137, "time": "00:16:29.750 --> 00:16:30.460", "speaker": "Alexander Vasserman", "text": "let's see."}, {"source_name": "lecture7", "index": 138, "time": "00:16:34.500 --> 00:16:35.470", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 139, "time": "00:16:40.560 --> 00:16:42.160", "speaker": "Alexander Vasserman", "text": "let's see more week."}, {"source_name": "lecture7", "index": 140, "time": "00:16:45.200 --> 00:16:47.329", "speaker": "Alexander Vasserman", "text": "All right. Great. So"}, {"source_name": "lecture7", "index": 141, "time": "00:16:47.580 --> 00:16:48.490", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 142, "time": "00:16:49.200 --> 00:16:49.760", "speaker": "Alexander Vasserman", "text": "yeah."}, {"source_name": "lecture7", "index": 143, "time": "00:16:50.710 --> 00:16:52.109", "speaker": "Alexander Vasserman", "text": "that's"}, {"source_name": "lecture7", "index": 144, "time": "00:16:55.120 --> 00:16:55.930", "speaker": "Alexander Vasserman", "text": "all"}, {"source_name": "lecture7", "index": 145, "time": "00:16:56.070 --> 00:16:57.230", "speaker": "Alexander Vasserman", "text": "good stuff."}, {"source_name": "lecture7", "index": 146, "time": "00:16:58.500 --> 00:16:59.630", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 147, "time": "00:17:06.540 --> 00:17:10.079", "speaker": "Alexander Vasserman", "text": "So that's a part. A. Let's do part B."}, {"source_name": "lecture7", "index": 148, "time": "00:17:12.710 --> 00:17:14.519", "speaker": "Alexander Vasserman", "text": "What is"}, {"source_name": "lecture7", "index": 149, "time": "00:17:17.660 --> 00:17:21.450", "speaker": "Alexander Vasserman", "text": "what is user relevance as opposed to"}, {"source_name": "lecture7", "index": 150, "time": "00:17:22.680 --> 00:17:24.710", "speaker": "Alexander Vasserman", "text": "as opposed to"}, {"source_name": "lecture7", "index": 151, "time": "00:17:25.089 --> 00:17:26.520", "speaker": "Alexander Vasserman", "text": "topic or other ones."}, {"source_name": "lecture7", "index": 152, "time": "00:17:27.339 --> 00:17:30.370", "speaker": "Alexander Vasserman", "text": "So this is the this was kind of"}, {"source_name": "lecture7", "index": 153, "time": "00:17:30.450 --> 00:17:31.700", "speaker": "Alexander Vasserman", "text": "one for"}, {"source_name": "lecture7", "index": 154, "time": "00:17:31.970 --> 00:17:33.729", "speaker": "Alexander Vasserman", "text": "portion of"}, {"source_name": "lecture7", "index": 155, "time": "00:17:33.850 --> 00:17:35.200", "speaker": "Alexander Vasserman", "text": "first lecture."}, {"source_name": "lecture7", "index": 156, "time": "00:17:35.270 --> 00:17:44.080", "speaker": "Alexander Vasserman", "text": "So you all have the lecture shared with you. If you especially if you opened it up, it should be available in your search."}, {"source_name": "lecture7", "index": 157, "time": "00:17:44.140 --> 00:17:45.810", "speaker": "Alexander Vasserman", "text": "so I could just"}, {"source_name": "lecture7", "index": 158, "time": "00:17:46.290 --> 00:17:47.989", "speaker": "Alexander Vasserman", "text": "search in drive"}, {"source_name": "lecture7", "index": 159, "time": "00:17:48.080 --> 00:17:48.880", "speaker": "Alexander Vasserman", "text": "for"}, {"source_name": "lecture7", "index": 160, "time": "00:17:49.190 --> 00:17:50.870", "speaker": "Alexander Vasserman", "text": "user"}, {"source_name": "lecture7", "index": 161, "time": "00:17:53.600 --> 00:17:54.780", "speaker": "Alexander Vasserman", "text": "relevance."}, {"source_name": "lecture7", "index": 162, "time": "00:17:55.210 --> 00:17:56.030", "speaker": "Alexander Vasserman", "text": "right?"}, {"source_name": "lecture7", "index": 163, "time": "00:17:56.730 --> 00:17:58.920", "speaker": "Alexander Vasserman", "text": "And just to pull up."}, {"source_name": "lecture7", "index": 164, "time": "00:17:59.050 --> 00:18:05.100", "speaker": "Alexander Vasserman", "text": "Where did we talk about it. So. A lecture one. We look at it"}, {"source_name": "lecture7", "index": 165, "time": "00:18:05.490 --> 00:18:06.900", "speaker": "Alexander Vasserman", "text": "right. So let's"}, {"source_name": "lecture7", "index": 166, "time": "00:18:07.120 --> 00:18:08.200", "speaker": "Alexander Vasserman", "text": "look at it."}, {"source_name": "lecture7", "index": 167, "time": "00:18:08.270 --> 00:18:10.090", "speaker": "Alexander Vasserman", "text": "and here I can do"}, {"source_name": "lecture7", "index": 168, "time": "00:18:10.660 --> 00:18:11.709", "speaker": "Alexander Vasserman", "text": "and throw off"}, {"source_name": "lecture7", "index": 169, "time": "00:18:12.230 --> 00:18:13.370", "speaker": "Alexander Vasserman", "text": "for the same."}, {"source_name": "lecture7", "index": 170, "time": "00:18:14.190 --> 00:18:15.459", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture7", "index": 171, "time": "00:18:15.670 --> 00:18:16.380", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture7", "index": 172, "time": "00:18:18.630 --> 00:18:21.269", "speaker": "Alexander Vasserman", "text": "No, it's Hasn't loaded yet. Sorry."}, {"source_name": "lecture7", "index": 173, "time": "00:18:23.730 --> 00:18:27.199", "speaker": "Alexander Vasserman", "text": "So that's kind of just if you"}, {"source_name": "lecture7", "index": 174, "time": "00:18:27.300 --> 00:18:29.510", "speaker": "Alexander Vasserman", "text": "our troubles"}, {"source_name": "lecture7", "index": 175, "time": "00:18:29.650 --> 00:18:33.650", "speaker": "Alexander Vasserman", "text": "looking at like looking for it. That's how I would"}, {"source_name": "lecture7", "index": 176, "time": "00:18:33.830 --> 00:18:36.339", "speaker": "Alexander Vasserman", "text": "approach it if you didn't remember"}, {"source_name": "lecture7", "index": 177, "time": "00:18:36.420 --> 00:18:38.159", "speaker": "Alexander Vasserman", "text": "well, for somebody in it's"}, {"source_name": "lecture7", "index": 178, "time": "00:18:38.700 --> 00:18:40.759", "speaker": "Alexander Vasserman", "text": "not happening right now"}, {"source_name": "lecture7", "index": 179, "time": "00:18:42.900 --> 00:18:43.760", "speaker": "Alexander Vasserman", "text": "that's needed."}, {"source_name": "lecture7", "index": 180, "time": "00:18:44.280 --> 00:18:47.299", "speaker": "Alexander Vasserman", "text": "I just tried it before the past, and it worked"}, {"source_name": "lecture7", "index": 181, "time": "00:18:48.110 --> 00:18:50.550", "speaker": "Alexander Vasserman", "text": "anyways. So what"}, {"source_name": "lecture7", "index": 182, "time": "00:18:50.840 --> 00:18:54.180", "speaker": "Alexander Vasserman", "text": "what did some people say about"}, {"source_name": "lecture7", "index": 183, "time": "00:18:56.870 --> 00:19:02.959", "speaker": "Alexander Vasserman", "text": "what is what are some of the examples of data that's used to turning us around?"}, {"source_name": "lecture7", "index": 184, "time": "00:19:03.960 --> 00:19:04.950", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 185, "time": "00:19:05.690 --> 00:19:06.950", "speaker": "Alexander Vasserman", "text": "here, let me just"}, {"source_name": "lecture7", "index": 186, "time": "00:19:07.800 --> 00:19:16.910", "speaker": "Alexander Vasserman", "text": "go over it again quickly. Basically the topical relevance was, how good the topic of the we. This is the topic of the document."}, {"source_name": "lecture7", "index": 187, "time": "00:19:16.970 --> 00:19:19.260", "speaker": "Alexander Vasserman", "text": "So it's basically text based."}, {"source_name": "lecture7", "index": 188, "time": "00:19:19.310 --> 00:19:21.729", "speaker": "Alexander Vasserman", "text": "or is the text the same."}, {"source_name": "lecture7", "index": 189, "time": "00:19:21.890 --> 00:19:22.580", "speaker": "Alexander Vasserman", "text": "or"}, {"source_name": "lecture7", "index": 190, "time": "00:19:22.700 --> 00:19:24.400", "speaker": "Alexander Vasserman", "text": "see if a similar meeting, but"}, {"source_name": "lecture7", "index": 191, "time": "00:19:24.440 --> 00:19:26.790", "speaker": "Alexander Vasserman", "text": "for the query and the document"}, {"source_name": "lecture7", "index": 192, "time": "00:19:26.850 --> 00:19:32.609", "speaker": "Alexander Vasserman", "text": "where his user relevance is other aspects. That's our user dependent."}, {"source_name": "lecture7", "index": 193, "time": "00:19:32.730 --> 00:19:40.129", "speaker": "Alexander Vasserman", "text": "That's not based on the query. So, for example, user location would be one of them, or"}, {"source_name": "lecture7", "index": 194, "time": "00:19:40.780 --> 00:19:41.920", "speaker": "Alexander Vasserman", "text": "history"}, {"source_name": "lecture7", "index": 195, "time": "00:19:42.170 --> 00:19:46.490", "speaker": "Alexander Vasserman", "text": "search history or any other behavioral data."}, {"source_name": "lecture7", "index": 196, "time": "00:19:46.600 --> 00:19:47.620", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 197, "time": "00:19:47.690 --> 00:19:51.409", "speaker": "Alexander Vasserman", "text": "oh, let me just here for"}, {"source_name": "lecture7", "index": 198, "time": "00:19:51.640 --> 00:19:52.350", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 199, "time": "00:19:52.590 --> 00:19:53.330", "speaker": "Alexander Vasserman", "text": "you want"}, {"source_name": "lecture7", "index": 200, "time": "00:19:54.300 --> 00:19:55.270", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture7", "index": 201, "time": "00:19:56.130 --> 00:19:57.189", "speaker": "Alexander Vasserman", "text": "let's say"}, {"source_name": "lecture7", "index": 202, "time": "00:19:57.780 --> 00:19:58.900", "speaker": "Alexander Vasserman", "text": "example."}, {"source_name": "lecture7", "index": 203, "time": "00:19:59.070 --> 00:19:59.650", "speaker": "Alexander Vasserman", "text": "Hmm."}, {"source_name": "lecture7", "index": 204, "time": "00:20:02.070 --> 00:20:03.350", "speaker": "Alexander Vasserman", "text": "Behavioral data."}, {"source_name": "lecture7", "index": 205, "time": "00:20:08.270 --> 00:20:09.030", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture7", "index": 206, "time": "00:20:09.110 --> 00:20:10.659", "speaker": "Alexander Vasserman", "text": "So let's"}, {"source_name": "lecture7", "index": 207, "time": "00:20:11.010 --> 00:20:12.430", "speaker": "Alexander Vasserman", "text": "any questions here."}, {"source_name": "lecture7", "index": 208, "time": "00:20:16.360 --> 00:20:19.860", "speaker": "Alexander Vasserman", "text": "So basically, I would accept anything that's kind of"}, {"source_name": "lecture7", "index": 209, "time": "00:20:19.970 --> 00:20:32.150", "speaker": "Alexander Vasserman", "text": "related, or like you know, kind of these all were a little exercises to kind of Just have you think again, a little bit about the general concepts that we talked about."}, {"source_name": "lecture7", "index": 210, "time": "00:20:32.450 --> 00:20:35.879", "speaker": "Alexander Vasserman", "text": "So now let's jump into"}, {"source_name": "lecture7", "index": 211, "time": "00:20:35.900 --> 00:20:39.730", "speaker": "Alexander Vasserman", "text": "some recording. So for question 2,"}, {"source_name": "lecture7", "index": 212, "time": "00:20:39.820 --> 00:20:42.469", "speaker": "Alexander Vasserman", "text": "we had to"}, {"source_name": "lecture7", "index": 213, "time": "00:20:42.580 --> 00:20:44.830", "speaker": "Alexander Vasserman", "text": "do a bunch of functions."}, {"source_name": "lecture7", "index": 214, "time": "00:20:45.040 --> 00:20:46.870", "speaker": "Alexander Vasserman", "text": "So for a"}, {"source_name": "lecture7", "index": 215, "time": "00:20:47.030 --> 00:20:48.749", "speaker": "Alexander Vasserman", "text": "he said"}, {"source_name": "lecture7", "index": 216, "time": "00:20:49.850 --> 00:20:52.440", "speaker": "Alexander Vasserman", "text": "it should be 2 sets"}, {"source_name": "lecture7", "index": 217, "time": "00:20:52.780 --> 00:20:56.579", "speaker": "Alexander Vasserman", "text": "of streams, and they want to return"}, {"source_name": "lecture7", "index": 218, "time": "00:20:56.700 --> 00:21:02.369", "speaker": "Alexander Vasserman", "text": "a new set containing all the events of the first, that they are not in the second."}, {"source_name": "lecture7", "index": 219, "time": "00:21:02.430 --> 00:21:04.540", "speaker": "Alexander Vasserman", "text": "So that's a set difference"}, {"source_name": "lecture7", "index": 220, "time": "00:21:06.030 --> 00:21:06.800", "speaker": "Alexander Vasserman", "text": "right?"}, {"source_name": "lecture7", "index": 221, "time": "00:21:07.250 --> 00:21:09.750", "speaker": "Alexander Vasserman", "text": "So we have"}, {"source_name": "lecture7", "index": 222, "time": "00:21:10.820 --> 00:21:14.860", "speaker": "Alexander Vasserman", "text": "to parameters all. Let's say a"}, {"source_name": "lecture7", "index": 223, "time": "00:21:15.530 --> 00:21:16.630", "speaker": "Alexander Vasserman", "text": "so let's"}, {"source_name": "lecture7", "index": 224, "time": "00:21:21.060 --> 00:21:24.370", "speaker": "Alexander Vasserman", "text": "just so that I can. So we we said"}, {"source_name": "lecture7", "index": 225, "time": "00:21:25.600 --> 00:21:26.420", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture7", "index": 226, "time": "00:21:29.050 --> 00:21:31.110", "speaker": "Alexander Vasserman", "text": "2 parameters are set of string"}, {"source_name": "lecture7", "index": 227, "time": "00:21:31.750 --> 00:21:32.450", "speaker": "Alexander Vasserman", "text": "right?"}, {"source_name": "lecture7", "index": 228, "time": "00:21:32.780 --> 00:21:36.540", "speaker": "Alexander Vasserman", "text": "So we have a and B"}, {"source_name": "lecture7", "index": 229, "time": "00:21:37.170 --> 00:21:37.930", "speaker": "Alexander Vasserman", "text": "rain."}, {"source_name": "lecture7", "index": 230, "time": "00:21:42.250 --> 00:21:43.630", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture7", "index": 231, "time": "00:21:49.350 --> 00:21:50.760", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture7", "index": 232, "time": "00:21:51.000 --> 00:21:52.660", "speaker": "Alexander Vasserman", "text": "they are going to"}, {"source_name": "lecture7", "index": 233, "time": "00:21:53.050 --> 00:21:53.920", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 234, "time": "00:21:54.490 --> 00:21:57.939", "speaker": "Alexander Vasserman", "text": "return also a set of strings."}, {"source_name": "lecture7", "index": 235, "time": "00:21:59.250 --> 00:22:00.050", "speaker": "Alexander Vasserman", "text": "Alright."}, {"source_name": "lecture7", "index": 236, "time": "00:22:00.610 --> 00:22:01.810", "speaker": "Alexander Vasserman", "text": "So that's"}, {"source_name": "lecture7", "index": 237, "time": "00:22:01.950 --> 00:22:04.270", "speaker": "Alexander Vasserman", "text": "our function signature"}, {"source_name": "lecture7", "index": 238, "time": "00:22:04.690 --> 00:22:13.249", "speaker": "Alexander Vasserman", "text": "for for this one. Maybe we didn't have to like. Write it all out like that. But I just wanted to kind of give this to you, or"}, {"source_name": "lecture7", "index": 239, "time": "00:22:13.410 --> 00:22:17.020", "speaker": "Alexander Vasserman", "text": "right now. And basically all we're doing is return"}, {"source_name": "lecture7", "index": 240, "time": "00:22:17.050 --> 00:22:20.380", "speaker": "Alexander Vasserman", "text": "a minus B, which is the set difference"}, {"source_name": "lecture7", "index": 241, "time": "00:22:20.840 --> 00:22:21.560", "speaker": "Alexander Vasserman", "text": "right."}, {"source_name": "lecture7", "index": 242, "time": "00:22:23.010 --> 00:22:23.980", "speaker": "Alexander Vasserman", "text": "So."}, {"source_name": "lecture7", "index": 243, "time": "00:22:24.140 --> 00:22:25.360", "speaker": "Alexander Vasserman", "text": "for example."}, {"source_name": "lecture7", "index": 244, "time": "00:22:25.560 --> 00:22:27.730", "speaker": "Alexander Vasserman", "text": "if we say"}, {"source_name": "lecture7", "index": 245, "time": "00:22:32.100 --> 00:22:34.170", "speaker": "Alexander Vasserman", "text": "set difference between"}, {"source_name": "lecture7", "index": 246, "time": "00:22:34.680 --> 00:22:35.540", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 247, "time": "00:22:38.190 --> 00:22:39.840", "speaker": "Alexander Vasserman", "text": "let's just see."}, {"source_name": "lecture7", "index": 248, "time": "00:22:42.460 --> 00:22:43.880", "speaker": "Alexander Vasserman", "text": "ABC."}, {"source_name": "lecture7", "index": 249, "time": "00:22:44.280 --> 00:22:45.120", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 250, "time": "00:22:45.190 --> 00:22:46.709", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture7", "index": 251, "time": "00:22:49.560 --> 00:22:50.500", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 252, "time": "00:22:55.170 --> 00:22:56.800", "speaker": "Alexander Vasserman", "text": "actually"}, {"source_name": "lecture7", "index": 253, "time": "00:22:57.190 --> 00:22:57.840", "speaker": "Alexander Vasserman", "text": "sorry"}, {"source_name": "lecture7", "index": 254, "time": "00:23:00.880 --> 00:23:04.100", "speaker": "Alexander Vasserman", "text": "That's so that there is no confusion."}, {"source_name": "lecture7", "index": 255, "time": "00:23:04.200 --> 00:23:04.940", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 256, "time": "00:23:05.190 --> 00:23:07.220", "speaker": "Alexander Vasserman", "text": "what do the shortcuts?"}, {"source_name": "lecture7", "index": 257, "time": "00:23:09.710 --> 00:23:10.770", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 258, "time": "00:23:11.690 --> 00:23:19.870", "speaker": "Alexander Vasserman", "text": "we have. Let's say, set of these things, and let's say, the second one is a"}, {"source_name": "lecture7", "index": 259, "time": "00:23:21.080 --> 00:23:23.059", "speaker": "Alexander Vasserman", "text": "stream all set of"}, {"source_name": "lecture7", "index": 260, "time": "00:23:23.190 --> 00:23:26.020", "speaker": "Alexander Vasserman", "text": "cnd. Then what we expect"}, {"source_name": "lecture7", "index": 261, "time": "00:23:26.100 --> 00:23:35.200", "speaker": "Alexander Vasserman", "text": "to happen is that the set differences? Everything is first set that's not in the second set, so it's just a and B."}, {"source_name": "lecture7", "index": 262, "time": "00:23:36.080 --> 00:23:37.929", "speaker": "Alexander Vasserman", "text": "Alex. Do you have a question?"}, {"source_name": "lecture7", "index": 263, "time": "00:23:39.280 --> 00:23:44.860", "speaker": "Alex Wojtowicz", "text": "Did we have to use that logic, or could we have done like a for loop and constructed, and you set to return?"}, {"source_name": "lecture7", "index": 264, "time": "00:23:45.540 --> 00:23:50.829", "speaker": "Alexander Vasserman", "text": "Yes, you could have done a for loop for for this homework."}, {"source_name": "lecture7", "index": 265, "time": "00:23:51.010 --> 00:23:53.050", "speaker": "Alexander Vasserman", "text": "But kind of"}, {"source_name": "lecture7", "index": 266, "time": "00:23:53.190 --> 00:23:54.590", "speaker": "Alexander Vasserman", "text": "one of the"}, {"source_name": "lecture7", "index": 267, "time": "00:23:54.830 --> 00:24:04.749", "speaker": "Alexander Vasserman", "text": "thoughts was that, you know, kind of remind you about the set operations. So yeah, so Certainly that would be correct"}, {"source_name": "lecture7", "index": 268, "time": "00:24:05.040 --> 00:24:12.239", "speaker": "Alexander Vasserman", "text": "the response to the correct function. And you'll you'll get the all the points. But"}, {"source_name": "lecture7", "index": 269, "time": "00:24:13.680 --> 00:24:21.669", "speaker": "Alexander Vasserman", "text": "we are going to use set operations for the so I kind of wanted you to get the sense of celebrations."}, {"source_name": "lecture7", "index": 270, "time": "00:24:21.950 --> 00:24:22.560", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture7", "index": 271, "time": "00:24:24.610 --> 00:24:26.259", "speaker": "Alexander Vasserman", "text": "all right. So"}, {"source_name": "lecture7", "index": 272, "time": "00:24:28.980 --> 00:24:30.090", "speaker": "Alexander Vasserman", "text": "for the"}, {"source_name": "lecture7", "index": 273, "time": "00:24:30.340 --> 00:24:31.900", "speaker": "Alexander Vasserman", "text": "was"}, {"source_name": "lecture7", "index": 274, "time": "00:24:33.920 --> 00:24:42.160", "speaker": "Alexander Vasserman", "text": "the again right to phone all right. The function takes 2 sets of things that in turn new set, containing all the events"}, {"source_name": "lecture7", "index": 275, "time": "00:24:42.180 --> 00:24:45.499", "speaker": "Alexander Vasserman", "text": "in the first set that are also in the second set."}, {"source_name": "lecture7", "index": 276, "time": "00:24:45.530 --> 00:24:47.420", "speaker": "Alexander Vasserman", "text": "So that's"}, {"source_name": "lecture7", "index": 277, "time": "00:24:47.580 --> 00:24:48.550", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 278, "time": "00:24:50.790 --> 00:24:52.240", "speaker": "Alexander Vasserman", "text": "second section."}, {"source_name": "lecture7", "index": 279, "time": "00:24:53.140 --> 00:24:54.600", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture7", "index": 280, "time": "00:24:55.270 --> 00:24:56.330", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture7", "index": 281, "time": "00:25:02.660 --> 00:25:03.580", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 282, "time": "00:25:05.220 --> 00:25:06.120", "speaker": "Alexander Vasserman", "text": "that's"}, {"source_name": "lecture7", "index": 283, "time": "00:25:06.740 --> 00:25:07.680", "speaker": "Alexander Vasserman", "text": "good evening."}, {"source_name": "lecture7", "index": 284, "time": "00:25:08.140 --> 00:25:08.990", "speaker": "Alexander Vasserman", "text": "All"}, {"source_name": "lecture7", "index": 285, "time": "00:25:09.200 --> 00:25:13.910", "speaker": "Alexander Vasserman", "text": "we had to do. You could also say a dot"}, {"source_name": "lecture7", "index": 286, "time": "00:25:13.940 --> 00:25:15.550", "speaker": "Alexander Vasserman", "text": "intersection."}, {"source_name": "lecture7", "index": 287, "time": "00:25:16.330 --> 00:25:17.050", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 288, "time": "00:25:21.940 --> 00:25:23.640", "speaker": "Alexander Vasserman", "text": "that that also works."}, {"source_name": "lecture7", "index": 289, "time": "00:25:24.860 --> 00:25:26.890", "speaker": "Alexander Vasserman", "text": "and of course again"}, {"source_name": "lecture7", "index": 290, "time": "00:25:26.940 --> 00:25:36.130", "speaker": "Alexander Vasserman", "text": "full created for using loops and stuff. But kind of next time, when you're thinking about"}, {"source_name": "lecture7", "index": 291, "time": "00:25:37.110 --> 00:25:39.150", "speaker": "Alexander Vasserman", "text": "doing these types of operations"}, {"source_name": "lecture7", "index": 292, "time": "00:25:39.280 --> 00:25:47.459", "speaker": "Alexander Vasserman", "text": "hopefully, sets come to mind and set operations. Come to mind, then that's a way you think about things."}, {"source_name": "lecture7", "index": 293, "time": "00:25:50.150 --> 00:25:51.140", "speaker": "Alexander Vasserman", "text": "So."}, {"source_name": "lecture7", "index": 294, "time": "00:25:52.020 --> 00:25:52.870", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 295, "time": "00:25:57.480 --> 00:25:58.560", "speaker": "Alexander Vasserman", "text": "let's see"}, {"source_name": "lecture7", "index": 296, "time": "00:25:58.740 --> 00:25:59.780", "speaker": "Alexander Vasserman", "text": "all, for"}, {"source_name": "lecture7", "index": 297, "time": "00:25:59.820 --> 00:26:01.050", "speaker": "Alexander Vasserman", "text": "see."}, {"source_name": "lecture7", "index": 298, "time": "00:26:01.300 --> 00:26:03.409", "speaker": "Alexander Vasserman", "text": "we wanted to"}, {"source_name": "lecture7", "index": 299, "time": "00:26:03.710 --> 00:26:10.150", "speaker": "Alexander Vasserman", "text": "right the function with 2 sets of streams returns through, if all elements in the"}, {"source_name": "lecture7", "index": 300, "time": "00:26:10.260 --> 00:26:13.439", "speaker": "Alexander Vasserman", "text": "of the first set are also in the second set."}, {"source_name": "lecture7", "index": 301, "time": "00:26:14.510 --> 00:26:15.500", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 302, "time": "00:26:15.810 --> 00:26:17.740", "speaker": "Alexander Vasserman", "text": "here the"}, {"source_name": "lecture7", "index": 303, "time": "00:26:18.740 --> 00:26:19.650", "speaker": "Alexander Vasserman", "text": "oh"}, {"source_name": "lecture7", "index": 304, "time": "00:26:19.670 --> 00:26:20.950", "speaker": "Alexander Vasserman", "text": "first set"}, {"source_name": "lecture7", "index": 305, "time": "00:26:21.020 --> 00:26:24.070", "speaker": "Alexander Vasserman", "text": "all the elements of the first set are also in. The second set"}, {"source_name": "lecture7", "index": 306, "time": "00:26:24.190 --> 00:26:27.990", "speaker": "Alexander Vasserman", "text": "means that first set is a subset"}, {"source_name": "lecture7", "index": 307, "time": "00:26:29.340 --> 00:26:30.970", "speaker": "Alexander Vasserman", "text": "of the second set."}, {"source_name": "lecture7", "index": 308, "time": "00:26:31.740 --> 00:26:33.370", "speaker": "Alexander Vasserman", "text": "Right. So"}, {"source_name": "lecture7", "index": 309, "time": "00:26:40.580 --> 00:26:41.440", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 310, "time": "00:26:41.620 --> 00:26:45.189", "speaker": "Alexander Vasserman", "text": "and so here again we we just say."}, {"source_name": "lecture7", "index": 311, "time": "00:26:45.280 --> 00:26:46.060", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 312, "time": "00:26:52.010 --> 00:26:57.819", "speaker": "Alexander Vasserman", "text": "so in some sense all these exercises are kind of like. We are just generating"}, {"source_name": "lecture7", "index": 313, "time": "00:26:58.770 --> 00:27:00.870", "speaker": "Alexander Vasserman", "text": "set functions which"}, {"source_name": "lecture7", "index": 314, "time": "00:27:01.360 --> 00:27:02.750", "speaker": "Alexander Vasserman", "text": "oh, not"}, {"source_name": "lecture7", "index": 315, "time": "00:27:02.970 --> 00:27:11.260", "speaker": "Alexander Vasserman", "text": "that interesting in itself. I. The the main point of the exercise is kind of translating the descriptions"}, {"source_name": "lecture7", "index": 316, "time": "00:27:11.620 --> 00:27:17.149", "speaker": "Alexander Vasserman", "text": "like that into kind of understanding of the set separations, and"}, {"source_name": "lecture7", "index": 317, "time": "00:27:17.220 --> 00:27:19.349", "speaker": "Alexander Vasserman", "text": "or writing it out like that"}, {"source_name": "lecture7", "index": 318, "time": "00:27:21.140 --> 00:27:22.270", "speaker": "Alexander Vasserman", "text": "make sense."}, {"source_name": "lecture7", "index": 319, "time": "00:27:26.640 --> 00:27:27.670", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 320, "time": "00:27:28.380 --> 00:27:29.240", "speaker": "Alexander Vasserman", "text": "for"}, {"source_name": "lecture7", "index": 321, "time": "00:27:29.780 --> 00:27:30.730", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture7", "index": 322, "time": "00:27:31.260 --> 00:27:35.740", "speaker": "Alexander Vasserman", "text": "rate of functions given list and a set returns a new list."}, {"source_name": "lecture7", "index": 323, "time": "00:27:35.770 --> 00:27:39.559", "speaker": "Alexander Vasserman", "text": "These all elements from the initial is that they are also in the set."}, {"source_name": "lecture7", "index": 324, "time": "00:27:39.880 --> 00:27:42.139", "speaker": "Alexander Vasserman", "text": "And then I go into"}, {"source_name": "lecture7", "index": 325, "time": "00:27:42.200 --> 00:27:43.000", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 326, "time": "00:27:44.860 --> 00:27:51.489", "speaker": "Alexander Vasserman", "text": "a little bit more explanation. But basically this is a filtering operation. So if"}, {"source_name": "lecture7", "index": 327, "time": "00:27:53.760 --> 00:27:55.720", "speaker": "Alexander Vasserman", "text": "oh, I have."}, {"source_name": "lecture7", "index": 328, "time": "00:27:56.750 --> 00:27:57.670", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 329, "time": "00:27:58.940 --> 00:27:59.890", "speaker": "Alexander Vasserman", "text": "let's see."}, {"source_name": "lecture7", "index": 330, "time": "00:28:00.230 --> 00:28:01.249", "speaker": "Alexander Vasserman", "text": "at least."}, {"source_name": "lecture7", "index": 331, "time": "00:28:02.050 --> 00:28:03.480", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture7", "index": 332, "time": "00:28:05.400 --> 00:28:06.370", "speaker": "Alexander Vasserman", "text": "a set"}, {"source_name": "lecture7", "index": 333, "time": "00:28:08.800 --> 00:28:13.999", "speaker": "Alexander Vasserman", "text": "just the main variables where they can return, is"}, {"source_name": "lecture7", "index": 334, "time": "00:28:15.600 --> 00:28:16.640", "speaker": "Alexander Vasserman", "text": "all the"}, {"source_name": "lecture7", "index": 335, "time": "00:28:17.100 --> 00:28:18.240", "speaker": "Alexander Vasserman", "text": "elements"}, {"source_name": "lecture7", "index": 336, "time": "00:28:19.000 --> 00:28:20.769", "speaker": "Alexander Vasserman", "text": "for"}, {"source_name": "lecture7", "index": 337, "time": "00:28:22.780 --> 00:28:24.379", "speaker": "Alexander Vasserman", "text": "elements in the"}, {"source_name": "lecture7", "index": 338, "time": "00:28:25.060 --> 00:28:25.950", "speaker": "Alexander Vasserman", "text": "list"}, {"source_name": "lecture7", "index": 339, "time": "00:28:28.350 --> 00:28:32.220", "speaker": "Alexander Vasserman", "text": "if that element is also in the set."}, {"source_name": "lecture7", "index": 340, "time": "00:28:38.840 --> 00:28:42.190", "speaker": "Alexander Vasserman", "text": "Okay. So this is kind of a"}, {"source_name": "lecture7", "index": 341, "time": "00:28:43.000 --> 00:28:45.699", "speaker": "Alexander Vasserman", "text": "just a reminder of the"}, {"source_name": "lecture7", "index": 342, "time": "00:28:46.330 --> 00:28:47.800", "speaker": "Alexander Vasserman", "text": "this comprehension."}, {"source_name": "lecture7", "index": 343, "time": "00:28:48.300 --> 00:28:50.099", "speaker": "Alexander Vasserman", "text": "right? Of course"}, {"source_name": "lecture7", "index": 344, "time": "00:28:52.110 --> 00:28:55.620", "speaker": "Alexander Vasserman", "text": "you could have written it out. As"}, {"source_name": "lecture7", "index": 345, "time": "00:28:57.850 --> 00:29:00.120", "speaker": "Alexander Vasserman", "text": "you know, we can create"}, {"source_name": "lecture7", "index": 346, "time": "00:29:00.330 --> 00:29:01.720", "speaker": "Alexander Vasserman", "text": "output list"}, {"source_name": "lecture7", "index": 347, "time": "00:29:02.170 --> 00:29:03.180", "speaker": "Alexander Vasserman", "text": "and then"}, {"source_name": "lecture7", "index": 348, "time": "00:29:03.530 --> 00:29:05.400", "speaker": "Alexander Vasserman", "text": "go for"}, {"source_name": "lecture7", "index": 349, "time": "00:29:05.980 --> 00:29:07.100", "speaker": "Alexander Vasserman", "text": "element"}, {"source_name": "lecture7", "index": 350, "time": "00:29:37.440 --> 00:29:38.190", "speaker": "Alexander Vasserman", "text": "great."}, {"source_name": "lecture7", "index": 351, "time": "00:29:38.630 --> 00:29:39.630", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 352, "time": "00:29:40.050 --> 00:29:44.779", "speaker": "Alexander Vasserman", "text": "let's play around with this one as well, and give some examples."}, {"source_name": "lecture7", "index": 353, "time": "00:29:44.980 --> 00:29:46.759", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture7", "index": 354, "time": "00:29:47.360 --> 00:29:50.290", "speaker": "Alexander Vasserman", "text": "so if we want to filter"}, {"source_name": "lecture7", "index": 355, "time": "00:29:51.750 --> 00:29:52.510", "speaker": "Alexander Vasserman", "text": "wrong"}, {"source_name": "lecture7", "index": 356, "time": "00:29:53.270 --> 00:29:54.150", "speaker": "Alexander Vasserman", "text": "a"}, {"source_name": "lecture7", "index": 357, "time": "00:29:55.170 --> 00:29:56.110", "speaker": "Alexander Vasserman", "text": "he"}, {"source_name": "lecture7", "index": 358, "time": "00:30:00.430 --> 00:30:01.300", "speaker": "Alexander Vasserman", "text": "hey"}, {"source_name": "lecture7", "index": 359, "time": "00:30:01.530 --> 00:30:02.560", "speaker": "Alexander Vasserman", "text": "see?"}, {"source_name": "lecture7", "index": 360, "time": "00:30:02.750 --> 00:30:04.960", "speaker": "Alexander Vasserman", "text": "And let's say"}, {"source_name": "lecture7", "index": 361, "time": "00:30:05.040 --> 00:30:06.689", "speaker": "Alexander Vasserman", "text": "the what"}, {"source_name": "lecture7", "index": 362, "time": "00:30:07.050 --> 00:30:09.440", "speaker": "Alexander Vasserman", "text": "we want to filter to is just"}, {"source_name": "lecture7", "index": 363, "time": "00:30:09.500 --> 00:30:10.350", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 364, "time": "00:30:12.270 --> 00:30:13.289", "speaker": "Alexander Vasserman", "text": "let's say"}, {"source_name": "lecture7", "index": 365, "time": "00:30:13.320 --> 00:30:14.870", "speaker": "Alexander Vasserman", "text": "A and C."}, {"source_name": "lecture7", "index": 366, "time": "00:30:16.130 --> 00:30:17.000", "speaker": "Alexander Vasserman", "text": "Then"}, {"source_name": "lecture7", "index": 367, "time": "00:30:17.510 --> 00:30:18.360", "speaker": "Alexander Vasserman", "text": "what"}, {"source_name": "lecture7", "index": 368, "time": "00:30:18.460 --> 00:30:23.499", "speaker": "Alexander Vasserman", "text": "is returned? Everything like keeping the elements that were not in the set."}, {"source_name": "lecture7", "index": 369, "time": "00:30:27.230 --> 00:30:33.039", "speaker": "Alexander Vasserman", "text": "So in general kind of when i'm asking you to write some code. It's good"}, {"source_name": "lecture7", "index": 370, "time": "00:30:33.080 --> 00:30:35.530", "speaker": "Alexander Vasserman", "text": "idea to try it out"}, {"source_name": "lecture7", "index": 371, "time": "00:30:35.550 --> 00:30:37.659", "speaker": "Alexander Vasserman", "text": "ether like this interactivity"}, {"source_name": "lecture7", "index": 372, "time": "00:30:38.790 --> 00:30:52.750", "speaker": "Alexander Vasserman", "text": "in notebook, or you know, in by charm, you can use python console, and the way they've done it, or more explicitly right tests right? So that's always an option for you. That's"}, {"source_name": "lecture7", "index": 373, "time": "00:30:52.980 --> 00:30:54.300", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture7", "index": 374, "time": "00:30:54.450 --> 00:30:58.630", "speaker": "Alexander Vasserman", "text": "I I've seen a few homeworks where people clearly did not run the test"}, {"source_name": "lecture7", "index": 375, "time": "00:30:58.710 --> 00:31:01.049", "speaker": "Alexander Vasserman", "text": "or on the code that they've written."}, {"source_name": "lecture7", "index": 376, "time": "00:31:01.080 --> 00:31:02.479", "speaker": "Alexander Vasserman", "text": "Generally"}, {"source_name": "lecture7", "index": 377, "time": "00:31:03.520 --> 00:31:05.620", "speaker": "Alexander Vasserman", "text": "it's hard to write perfect code."}, {"source_name": "lecture7", "index": 378, "time": "00:31:05.720 --> 00:31:07.190", "speaker": "Alexander Vasserman", "text": "this out"}, {"source_name": "lecture7", "index": 379, "time": "00:31:07.600 --> 00:31:08.570", "speaker": "Alexander Vasserman", "text": "trying it"}, {"source_name": "lecture7", "index": 380, "time": "00:31:08.590 --> 00:31:11.200", "speaker": "Alexander Vasserman", "text": "so you will have mistakes in your code."}, {"source_name": "lecture7", "index": 381, "time": "00:31:11.510 --> 00:31:16.510", "speaker": "Alexander Vasserman", "text": "Always try to run it. See if it does what you think it does."}, {"source_name": "lecture7", "index": 382, "time": "00:31:19.840 --> 00:31:20.650", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture7", "index": 383, "time": "00:31:20.890 --> 00:31:21.920", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 384, "time": "00:31:22.340 --> 00:31:24.420", "speaker": "Alexander Vasserman", "text": "now let's let's finish that up"}, {"source_name": "lecture7", "index": 385, "time": "00:31:24.460 --> 00:31:26.450", "speaker": "Alexander Vasserman", "text": "obvious part. E:"}, {"source_name": "lecture7", "index": 386, "time": "00:31:29.150 --> 00:31:31.430", "speaker": "Alexander Vasserman", "text": "So here we wanted to define"}, {"source_name": "lecture7", "index": 387, "time": "00:31:32.750 --> 00:31:33.750", "speaker": "Alexander Vasserman", "text": "Count."}, {"source_name": "lecture7", "index": 388, "time": "00:31:34.330 --> 00:31:35.180", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 389, "time": "00:31:38.150 --> 00:31:39.560", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture7", "index": 390, "time": "00:31:39.960 --> 00:31:41.070", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 391, "time": "00:31:42.110 --> 00:31:43.070", "speaker": "Alexander Vasserman", "text": "oh!"}, {"source_name": "lecture7", "index": 392, "time": "00:31:43.210 --> 00:31:44.470", "speaker": "Alexander Vasserman", "text": "In"}, {"source_name": "lecture7", "index": 393, "time": "00:31:45.940 --> 00:31:46.990", "speaker": "Alexander Vasserman", "text": "in text."}, {"source_name": "lecture7", "index": 394, "time": "00:31:48.810 --> 00:31:50.379", "speaker": "Alexander Vasserman", "text": "And so"}, {"source_name": "lecture7", "index": 395, "time": "00:31:50.560 --> 00:31:55.559", "speaker": "Alexander Vasserman", "text": "here we want it to return just an integer, right. So number of"}, {"source_name": "lecture7", "index": 396, "time": "00:31:55.590 --> 00:31:58.279", "speaker": "Alexander Vasserman", "text": "both. And"}, {"source_name": "lecture7", "index": 397, "time": "00:32:01.650 --> 00:32:03.970", "speaker": "Alexander Vasserman", "text": "you know we could have gone"}, {"source_name": "lecture7", "index": 398, "time": "00:32:04.420 --> 00:32:08.360", "speaker": "Alexander Vasserman", "text": "in a lot of different ways. We"}, {"source_name": "lecture7", "index": 399, "time": "00:32:08.580 --> 00:32:11.039", "speaker": "Alexander Vasserman", "text": "just can define a"}, {"source_name": "lecture7", "index": 400, "time": "00:32:11.060 --> 00:32:12.380", "speaker": "Alexander Vasserman", "text": "a set of"}, {"source_name": "lecture7", "index": 401, "time": "00:32:12.550 --> 00:32:13.360", "speaker": "Alexander Vasserman", "text": "all"}, {"source_name": "lecture7", "index": 402, "time": "00:32:15.840 --> 00:32:16.940", "speaker": "Alexander Vasserman", "text": "balls."}, {"source_name": "lecture7", "index": 403, "time": "00:32:17.600 --> 00:32:20.530", "speaker": "Alexander Vasserman", "text": "which is, you know, a"}, {"source_name": "lecture7", "index": 404, "time": "00:32:21.620 --> 00:32:22.570", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture7", "index": 405, "time": "00:32:23.920 --> 00:32:24.620", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 406, "time": "00:32:31.010 --> 00:32:32.030", "speaker": "Alexander Vasserman", "text": "hopefully."}, {"source_name": "lecture7", "index": 407, "time": "00:32:32.090 --> 00:32:36.060", "speaker": "Alexander Vasserman", "text": "that part wasn't hard for people."}, {"source_name": "lecture7", "index": 408, "time": "00:32:36.550 --> 00:32:39.510", "speaker": "Alexander Vasserman", "text": "and then we"}, {"source_name": "lecture7", "index": 409, "time": "00:32:39.690 --> 00:32:40.970", "speaker": "Alexander Vasserman", "text": "can."}, {"source_name": "lecture7", "index": 410, "time": "00:32:42.780 --> 00:32:43.680", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 411, "time": "00:32:44.120 --> 00:32:45.500", "speaker": "Alexander Vasserman", "text": "one way to"}, {"source_name": "lecture7", "index": 412, "time": "00:32:46.080 --> 00:32:54.650", "speaker": "Alexander Vasserman", "text": "to say it could be again through list comprehension. You could have done it many other ways. But"}, {"source_name": "lecture7", "index": 413, "time": "00:32:55.110 --> 00:32:59.409", "speaker": "Alexander Vasserman", "text": "if I create a list of characters, see"}, {"source_name": "lecture7", "index": 414, "time": "00:32:59.810 --> 00:33:00.690", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 415, "time": "00:33:00.770 --> 00:33:01.610", "speaker": "Alexander Vasserman", "text": "for"}, {"source_name": "lecture7", "index": 416, "time": "00:33:03.180 --> 00:33:05.210", "speaker": "Alexander Vasserman", "text": "see in text."}, {"source_name": "lecture7", "index": 417, "time": "00:33:13.390 --> 00:33:14.520", "speaker": "Alexander Vasserman", "text": "or actually"}, {"source_name": "lecture7", "index": 418, "time": "00:33:14.760 --> 00:33:16.720", "speaker": "Alexander Vasserman", "text": "and let's do it."}, {"source_name": "lecture7", "index": 419, "time": "00:33:16.830 --> 00:33:19.200", "speaker": "Alexander Vasserman", "text": "Oh, lowercase."}, {"source_name": "lecture7", "index": 420, "time": "00:33:19.630 --> 00:33:20.410", "speaker": "Alexander Vasserman", "text": "if"}, {"source_name": "lecture7", "index": 421, "time": "00:33:21.120 --> 00:33:22.530", "speaker": "Alexander Vasserman", "text": "see the"}, {"source_name": "lecture7", "index": 422, "time": "00:33:24.770 --> 00:33:25.760", "speaker": "Alexander Vasserman", "text": "well"}, {"source_name": "lecture7", "index": 423, "time": "00:33:28.090 --> 00:33:29.840", "speaker": "Alexander Vasserman", "text": "and I can Just"}, {"source_name": "lecture7", "index": 424, "time": "00:33:32.280 --> 00:33:33.279", "speaker": "Alexander Vasserman", "text": "It turned out"}, {"source_name": "lecture7", "index": 425, "time": "00:33:42.910 --> 00:33:43.480", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture7", "index": 426, "time": "00:33:44.140 --> 00:33:44.800", "speaker": "Alexander Vasserman", "text": "it should."}, {"source_name": "lecture7", "index": 427, "time": "00:33:46.780 --> 00:33:48.120", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture7", "index": 428, "time": "00:33:49.010 --> 00:33:49.950", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture7", "index": 429, "time": "00:33:50.620 --> 00:34:07.139", "speaker": "Alexander Vasserman", "text": "that's one way to do it again. Loop is fine or any other way. Just the counter here. I'm kind of being a little bit lazy and a little obscure, so maybe, instead, just writing a loop. Would we actually better in this case"}, {"source_name": "lecture7", "index": 430, "time": "00:34:08.460 --> 00:34:12.450", "speaker": "Alexander Vasserman", "text": "a little bit more clear? So let me actually"}, {"source_name": "lecture7", "index": 431, "time": "00:34:12.590 --> 00:34:13.259", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 432, "time": "00:34:15.040 --> 00:34:16.869", "speaker": "Alexander Vasserman", "text": "oh, do that"}, {"source_name": "lecture7", "index": 433, "time": "00:34:16.960 --> 00:34:18.029", "speaker": "Alexander Vasserman", "text": "so!"}, {"source_name": "lecture7", "index": 434, "time": "00:34:22.070 --> 00:34:23.000", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 435, "time": "00:34:23.530 --> 00:34:26.819", "speaker": "Alexander Vasserman", "text": "but the the loop structure is is the same"}, {"source_name": "lecture7", "index": 436, "time": "00:34:26.840 --> 00:34:27.609", "speaker": "Alexander Vasserman", "text": "right?"}, {"source_name": "lecture7", "index": 437, "time": "00:34:58.760 --> 00:34:59.759", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 438, "time": "00:34:59.890 --> 00:35:02.160", "speaker": "Alexander Vasserman", "text": "if we want to count"}, {"source_name": "lecture7", "index": 439, "time": "00:35:04.190 --> 00:35:05.279", "speaker": "Alexander Vasserman", "text": "well."}, {"source_name": "lecture7", "index": 440, "time": "00:35:05.650 --> 00:35:06.549", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture7", "index": 441, "time": "00:35:13.300 --> 00:35:14.560", "speaker": "Alexander Vasserman", "text": "there"}, {"source_name": "lecture7", "index": 442, "time": "00:35:14.680 --> 00:35:16.329", "speaker": "Alexander Vasserman", "text": "2 walls a and e."}, {"source_name": "lecture7", "index": 443, "time": "00:35:16.420 --> 00:35:18.359", "speaker": "Alexander Vasserman", "text": "and of course we could."}, {"source_name": "lecture7", "index": 444, "time": "00:35:18.480 --> 00:35:19.899", "speaker": "Alexander Vasserman", "text": "Oh, all soon"}, {"source_name": "lecture7", "index": 445, "time": "00:35:21.390 --> 00:35:22.420", "speaker": "Alexander Vasserman", "text": "we did it"}, {"source_name": "lecture7", "index": 446, "time": "00:35:23.120 --> 00:35:26.509", "speaker": "Alexander Vasserman", "text": "so, even if"}, {"source_name": "lecture7", "index": 447, "time": "00:35:26.590 --> 00:35:27.819", "speaker": "Alexander Vasserman", "text": "oh, one of them"}, {"source_name": "lecture7", "index": 448, "time": "00:35:27.970 --> 00:35:30.169", "speaker": "Alexander Vasserman", "text": "almost capitalized that still works"}, {"source_name": "lecture7", "index": 449, "time": "00:35:31.380 --> 00:35:33.460", "speaker": "Alexander Vasserman", "text": "any questions."}, {"source_name": "lecture7", "index": 450, "time": "00:35:39.930 --> 00:35:43.260", "speaker": "Alexander Vasserman", "text": "Just a show of hands."}, {"source_name": "lecture7", "index": 451, "time": "00:35:43.300 --> 00:35:47.580", "speaker": "Alexander Vasserman", "text": "How many of you felt like this kind of stuff was difficult."}, {"source_name": "lecture7", "index": 452, "time": "00:35:50.680 --> 00:35:52.380", "speaker": "Alexander Vasserman", "text": "and Don't be"}, {"source_name": "lecture7", "index": 453, "time": "00:35:52.700 --> 00:36:00.669", "speaker": "Alexander Vasserman", "text": "okay. How? How many of you thought that this stuff was easy? Let me any phrase that maybe people are a little more willing to say"}, {"source_name": "lecture7", "index": 454, "time": "00:36:01.330 --> 00:36:03.049", "speaker": "Alexander Vasserman", "text": "awesome"}, {"source_name": "lecture7", "index": 455, "time": "00:36:06.120 --> 00:36:07.729", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture7", "index": 456, "time": "00:36:10.690 --> 00:36:11.569", "speaker": "Alexander Vasserman", "text": "okay."}, {"source_name": "lecture7", "index": 457, "time": "00:36:11.700 --> 00:36:13.320", "speaker": "Alexander Vasserman", "text": "And now."}, {"source_name": "lecture7", "index": 458, "time": "00:36:13.450 --> 00:36:14.720", "speaker": "Alexander Vasserman", "text": "just to get"}, {"source_name": "lecture7", "index": 459, "time": "00:36:14.770 --> 00:36:18.749", "speaker": "Alexander Vasserman", "text": "everyone. If you're listening, raise your hand"}, {"source_name": "lecture7", "index": 460, "time": "00:36:18.770 --> 00:36:22.449", "speaker": "Alexander Vasserman", "text": "so that I know out of how many they did. This was"}, {"source_name": "lecture7", "index": 461, "time": "00:36:29.680 --> 00:36:30.479", "speaker": "Alexander Vasserman", "text": "all right."}, {"source_name": "lecture7", "index": 462, "time": "00:36:30.910 --> 00:36:35.580", "speaker": "Alexander Vasserman", "text": "Okay. So for for for most people it was pretty easy. That's great."}, {"source_name": "lecture7", "index": 463, "time": "00:36:39.600 --> 00:36:40.700", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 464, "time": "00:36:42.130 --> 00:36:43.330", "speaker": "Alexander Vasserman", "text": "hopefully, then."}, {"source_name": "lecture7", "index": 465, "time": "00:36:43.570 --> 00:36:46.049", "speaker": "Alexander Vasserman", "text": "question 3 was easy as well."}, {"source_name": "lecture7", "index": 466, "time": "00:36:46.230 --> 00:36:49.990", "speaker": "Alexander Vasserman", "text": "even though it is a little bit"}, {"source_name": "lecture7", "index": 467, "time": "00:36:50.020 --> 00:36:51.520", "speaker": "Alexander Vasserman", "text": "more complicated."}, {"source_name": "lecture7", "index": 468, "time": "00:36:51.590 --> 00:36:53.729", "speaker": "Alexander Vasserman", "text": "So first of all."}, {"source_name": "lecture7", "index": 469, "time": "00:36:54.040 --> 00:36:54.870", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 470, "time": "00:36:54.960 --> 00:36:56.840", "speaker": "Alexander Vasserman", "text": "we had some code from"}, {"source_name": "lecture7", "index": 471, "time": "00:36:57.000 --> 00:36:58.479", "speaker": "Alexander Vasserman", "text": "from the lecture."}, {"source_name": "lecture7", "index": 472, "time": "00:37:31.610 --> 00:37:32.689", "speaker": "Alexander Vasserman", "text": "I guess."}, {"source_name": "lecture7", "index": 473, "time": "00:37:33.150 --> 00:37:33.720", "speaker": "Alexander Vasserman", "text": "Hmm."}, {"source_name": "lecture7", "index": 474, "time": "00:37:33.850 --> 00:37:36.430", "speaker": "Alexander Vasserman", "text": "Copy base doesn't really work? Well."}, {"source_name": "lecture7", "index": 475, "time": "00:37:36.910 --> 00:37:38.490", "speaker": "Alexander Vasserman", "text": "for some reason"}, {"source_name": "lecture7", "index": 476, "time": "00:37:44.710 --> 00:37:45.509", "speaker": "Alexander Vasserman", "text": "she's"}, {"source_name": "lecture7", "index": 477, "time": "00:37:54.320 --> 00:37:55.120", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture7", "index": 478, "time": "00:37:55.560 --> 00:37:57.830", "speaker": "Alexander Vasserman", "text": "So yeah, that's"}, {"source_name": "lecture7", "index": 479, "time": "00:37:59.540 --> 00:38:00.660", "speaker": "Alexander Vasserman", "text": "unfortunate."}, {"source_name": "lecture7", "index": 480, "time": "00:38:04.410 --> 00:38:05.760", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 481, "time": "00:38:06.560 --> 00:38:11.990", "speaker": "Alexander Vasserman", "text": "let me actually try to copy paste it from the"}, {"source_name": "lecture7", "index": 482, "time": "00:38:16.700 --> 00:38:17.580", "speaker": "Alexander Vasserman", "text": "code"}, {"source_name": "lecture7", "index": 483, "time": "00:38:18.050 --> 00:38:20.080", "speaker": "Alexander Vasserman", "text": "that the"}, {"source_name": "lecture7", "index": 484, "time": "00:38:20.320 --> 00:38:24.699", "speaker": "Alexander Vasserman", "text": "worked on in the class instead of from the"}, {"source_name": "lecture7", "index": 485, "time": "00:38:34.310 --> 00:38:36.620", "speaker": "Alexander Vasserman", "text": "Oh, so"}, {"source_name": "lecture7", "index": 486, "time": "00:38:53.550 --> 00:38:55.789", "speaker": "Alexander Vasserman", "text": "anybody section is sorry for."}, {"source_name": "lecture7", "index": 487, "time": "00:39:32.230 --> 00:39:32.930", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 488, "time": "00:39:33.360 --> 00:39:35.550", "speaker": "Alexander Vasserman", "text": "I see. So space is actually"}, {"source_name": "lecture7", "index": 489, "time": "00:39:36.950 --> 00:39:38.069", "speaker": "Alexander Vasserman", "text": "some call."}, {"source_name": "lecture7", "index": 490, "time": "00:39:41.690 --> 00:39:43.470", "speaker": "Alexander Vasserman", "text": "not"}, {"source_name": "lecture7", "index": 491, "time": "00:39:43.970 --> 00:39:45.149", "speaker": "Alexander Vasserman", "text": "spaces"}, {"source_name": "lecture7", "index": 492, "time": "00:39:46.420 --> 00:39:47.290", "speaker": "Alexander Vasserman", "text": "when"}, {"source_name": "lecture7", "index": 493, "time": "00:39:48.930 --> 00:39:55.660", "speaker": "Alexander Vasserman", "text": "some editors are too smart, and so like the I guess they they think that composes the homework"}, {"source_name": "lecture7", "index": 494, "time": "00:39:55.920 --> 00:39:58.350", "speaker": "Alexander Vasserman", "text": "in"}, {"source_name": "lecture7", "index": 495, "time": "00:39:58.910 --> 00:40:01.200", "speaker": "Alexander Vasserman", "text": "substitutes so"}, {"source_name": "lecture7", "index": 496, "time": "00:40:01.800 --> 00:40:04.009", "speaker": "Alexander Vasserman", "text": "other character for spaces."}, {"source_name": "lecture7", "index": 497, "time": "00:40:04.740 --> 00:40:05.859", "speaker": "Alexander Vasserman", "text": "So when"}, {"source_name": "lecture7", "index": 498, "time": "00:40:06.470 --> 00:40:12.350", "speaker": "Alexander Vasserman", "text": "we copied and pasted it. It's some strange characters that"}, {"source_name": "lecture7", "index": 499, "time": "00:40:15.930 --> 00:40:16.599", "speaker": "Alexander Vasserman", "text": "let me see if it"}, {"source_name": "lecture7", "index": 500, "time": "00:40:17.930 --> 00:40:19.180", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture7", "index": 501, "time": "00:40:19.900 --> 00:40:21.660", "speaker": "Alexander Vasserman", "text": "ended up being there."}, {"source_name": "lecture7", "index": 502, "time": "00:40:25.720 --> 00:40:26.310", "speaker": "Alexander Vasserman", "text": "It's"}, {"source_name": "lecture7", "index": 503, "time": "00:41:02.260 --> 00:41:03.299", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture7", "index": 504, "time": "00:41:07.670 --> 00:41:11.970", "speaker": "Alexander Vasserman", "text": "hopefully you did not have this kind of troubles."}, {"source_name": "lecture7", "index": 505, "time": "00:41:12.020 --> 00:41:16.200", "speaker": "Alexander Vasserman", "text": "and I don't know if if I was working in an editor, maybe that would be"}, {"source_name": "lecture7", "index": 506, "time": "00:41:16.330 --> 00:41:17.979", "speaker": "Alexander Vasserman", "text": "better."}, {"source_name": "lecture7", "index": 507, "time": "00:41:30.460 --> 00:41:31.080", "speaker": "Alexander Vasserman", "text": "That"}, {"source_name": "lecture7", "index": 508, "time": "00:41:36.020 --> 00:41:37.089", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 509, "time": "00:41:37.270 --> 00:41:38.970", "speaker": "Alexander Vasserman", "text": "once we've defined"}, {"source_name": "lecture7", "index": 510, "time": "00:41:39.060 --> 00:41:40.779", "speaker": "Alexander Vasserman", "text": "all the different things."}, {"source_name": "lecture7", "index": 511, "time": "00:41:40.860 --> 00:41:42.240", "speaker": "Alexander Vasserman", "text": "The"}, {"source_name": "lecture7", "index": 512, "time": "00:41:42.600 --> 00:41:47.230", "speaker": "Alexander Vasserman", "text": "question was basically to you write a function that"}, {"source_name": "lecture7", "index": 513, "time": "00:41:47.360 --> 00:41:49.600", "speaker": "Alexander Vasserman", "text": "given the text"}, {"source_name": "lecture7", "index": 514, "time": "00:41:49.640 --> 00:41:53.920", "speaker": "Alexander Vasserman", "text": "outputs a Dick mapping boards to script responding spans."}, {"source_name": "lecture7", "index": 515, "time": "00:41:54.240 --> 00:41:55.020", "speaker": "Alexander Vasserman", "text": "Right?"}, {"source_name": "lecture7", "index": 516, "time": "00:41:55.980 --> 00:41:56.959", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 517, "time": "00:41:57.400 --> 00:41:58.259", "speaker": "Alexander Vasserman", "text": "well."}, {"source_name": "lecture7", "index": 518, "time": "00:42:02.790 --> 00:42:03.919", "speaker": "Alexander Vasserman", "text": "let's see."}, {"source_name": "lecture7", "index": 519, "time": "00:42:04.370 --> 00:42:05.140", "speaker": "Alexander Vasserman", "text": "Get"}, {"source_name": "lecture7", "index": 520, "time": "00:42:07.630 --> 00:42:08.709", "speaker": "Alexander Vasserman", "text": "spans"}, {"source_name": "lecture7", "index": 521, "time": "00:42:08.770 --> 00:42:09.419", "speaker": "Alexander Vasserman", "text": "Jake."}, {"source_name": "lecture7", "index": 522, "time": "00:42:10.920 --> 00:42:14.319", "speaker": "Alexander Vasserman", "text": "That takes just the text"}, {"source_name": "lecture7", "index": 523, "time": "00:42:15.780 --> 00:42:16.529", "speaker": "Alexander Vasserman", "text": "right?"}, {"source_name": "lecture7", "index": 524, "time": "00:42:17.120 --> 00:42:18.599", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture7", "index": 525, "time": "00:42:20.120 --> 00:42:21.029", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture7", "index": 526, "time": "00:42:21.090 --> 00:42:22.080", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture7", "index": 527, "time": "00:42:22.760 --> 00:42:35.300", "speaker": "Alexander Vasserman", "text": "best way to do things like that oftentimes is to actually call the the existing functions right? So we we always want to reuse stuff as much as possible."}, {"source_name": "lecture7", "index": 528, "time": "00:42:35.420 --> 00:42:36.430", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 529, "time": "00:42:36.500 --> 00:42:38.810", "speaker": "Alexander Vasserman", "text": "let's say, spans"}, {"source_name": "lecture7", "index": 530, "time": "00:42:38.880 --> 00:42:39.700", "speaker": "Alexander Vasserman", "text": "all"}, {"source_name": "lecture7", "index": 531, "time": "00:42:39.870 --> 00:42:40.899", "speaker": "Alexander Vasserman", "text": "he's"}, {"source_name": "lecture7", "index": 532, "time": "00:42:43.090 --> 00:42:44.930", "speaker": "Alexander Vasserman", "text": "just"}, {"source_name": "lecture7", "index": 533, "time": "00:42:50.860 --> 00:42:51.740", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 534, "time": "00:43:06.770 --> 00:43:08.359", "speaker": "Alexander Vasserman", "text": "right, so"}, {"source_name": "lecture7", "index": 535, "time": "00:43:09.930 --> 00:43:10.790", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 536, "time": "00:43:11.260 --> 00:43:19.859", "speaker": "Alexander Vasserman", "text": "so this way. We can start this list of all spans, and we don't have to do very much of our text processing"}, {"source_name": "lecture7", "index": 537, "time": "00:43:20.060 --> 00:43:21.399", "speaker": "Alexander Vasserman", "text": "any more."}, {"source_name": "lecture7", "index": 538, "time": "00:43:21.580 --> 00:43:23.109", "speaker": "Alexander Vasserman", "text": "And then"}, {"source_name": "lecture7", "index": 539, "time": "00:43:24.210 --> 00:43:25.470", "speaker": "Alexander Vasserman", "text": "the output"}, {"source_name": "lecture7", "index": 540, "time": "00:43:25.800 --> 00:43:28.249", "speaker": "Alexander Vasserman", "text": "is going to be a dictionary."}, {"source_name": "lecture7", "index": 541, "time": "00:43:28.620 --> 00:43:30.089", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture7", "index": 542, "time": "00:43:31.390 --> 00:43:33.380", "speaker": "Alexander Vasserman", "text": "right so we can just"}, {"source_name": "lecture7", "index": 543, "time": "00:43:33.430 --> 00:43:36.100", "speaker": "Alexander Vasserman", "text": "go over all spans"}, {"source_name": "lecture7", "index": 544, "time": "00:43:38.940 --> 00:43:40.370", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture7", "index": 545, "time": "00:43:42.340 --> 00:43:43.279", "speaker": "Alexander Vasserman", "text": "all."}, {"source_name": "lecture7", "index": 546, "time": "00:43:44.330 --> 00:43:45.290", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 547, "time": "00:43:46.170 --> 00:43:46.930", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture7", "index": 548, "time": "00:43:48.500 --> 00:43:52.549", "speaker": "Alexander Vasserman", "text": "word is the way we define it is."}, {"source_name": "lecture7", "index": 549, "time": "00:43:54.520 --> 00:43:55.450", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 550, "time": "00:43:57.370 --> 00:44:04.910", "speaker": "Alexander Vasserman", "text": "we have get upstream functions. So that's the text. And so that's kind of going to be the key. Maybe they should actually"}, {"source_name": "lecture7", "index": 551, "time": "00:44:05.250 --> 00:44:08.270", "speaker": "Alexander Vasserman", "text": "say the key is, is that right?"}, {"source_name": "lecture7", "index": 552, "time": "00:44:08.340 --> 00:44:09.279", "speaker": "Alexander Vasserman", "text": "And then."}, {"source_name": "lecture7", "index": 553, "time": "00:44:14.590 --> 00:44:15.629", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 554, "time": "00:44:15.970 --> 00:44:18.659", "speaker": "Alexander Vasserman", "text": "if you already have an M. 3"}, {"source_name": "lecture7", "index": 555, "time": "00:44:18.710 --> 00:44:22.699", "speaker": "Alexander Vasserman", "text": "for our key in our dictionary."}, {"source_name": "lecture7", "index": 556, "time": "00:44:23.540 --> 00:44:27.099", "speaker": "Alexander Vasserman", "text": "then all we need to do is to say."}, {"source_name": "lecture7", "index": 557, "time": "00:44:27.340 --> 00:44:28.760", "speaker": "Alexander Vasserman", "text": "Oh, get"}, {"source_name": "lecture7", "index": 558, "time": "00:44:29.780 --> 00:44:30.529", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture7", "index": 559, "time": "00:44:31.130 --> 00:44:32.320", "speaker": "Alexander Vasserman", "text": "that n 3,"}, {"source_name": "lecture7", "index": 560, "time": "00:44:32.510 --> 00:44:33.359", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture7", "index": 561, "time": "00:44:34.120 --> 00:44:34.950", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 562, "time": "00:44:36.160 --> 00:44:37.319", "speaker": "Alexander Vasserman", "text": "up! And"}, {"source_name": "lecture7", "index": 563, "time": "00:44:37.830 --> 00:44:39.170", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture7", "index": 564, "time": "00:44:39.640 --> 00:44:41.299", "speaker": "Alexander Vasserman", "text": "span"}, {"source_name": "lecture7", "index": 565, "time": "00:44:41.770 --> 00:44:45.070", "speaker": "Alexander Vasserman", "text": "to the list that already exists."}, {"source_name": "lecture7", "index": 566, "time": "00:44:45.680 --> 00:44:47.629", "speaker": "Alexander Vasserman", "text": "and otherwise"}, {"source_name": "lecture7", "index": 567, "time": "00:44:47.720 --> 00:44:49.480", "speaker": "Alexander Vasserman", "text": "we we want to"}, {"source_name": "lecture7", "index": 568, "time": "00:44:49.970 --> 00:44:51.449", "speaker": "Alexander Vasserman", "text": "add the new one"}, {"source_name": "lecture7", "index": 569, "time": "00:44:51.550 --> 00:44:53.029", "speaker": "Alexander Vasserman", "text": "great, so we can"}, {"source_name": "lecture7", "index": 570, "time": "00:44:53.620 --> 00:44:54.790", "speaker": "Alexander Vasserman", "text": "say that"}, {"source_name": "lecture7", "index": 571, "time": "00:44:56.560 --> 00:45:01.080", "speaker": "Alexander Vasserman", "text": "the new one is the least containing, just as"}, {"source_name": "lecture7", "index": 572, "time": "00:45:01.960 --> 00:45:03.569", "speaker": "Alexander Vasserman", "text": "and then you can"}, {"source_name": "lecture7", "index": 573, "time": "00:45:04.000 --> 00:45:06.009", "speaker": "Alexander Vasserman", "text": "return the output."}, {"source_name": "lecture7", "index": 574, "time": "00:45:09.630 --> 00:45:11.560", "speaker": "Alexander Vasserman", "text": "Any questions about this?"}, {"source_name": "lecture7", "index": 575, "time": "00:45:17.880 --> 00:45:21.619", "speaker": "Alexander Vasserman", "text": "How many of you thought that this was easy."}, {"source_name": "lecture7", "index": 576, "time": "00:45:30.620 --> 00:45:31.509", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture7", "index": 577, "time": "00:45:31.590 --> 00:45:36.879", "speaker": "Alexander Vasserman", "text": "not so easy, but hopefully makes sense now."}, {"source_name": "lecture7", "index": 578, "time": "00:45:36.900 --> 00:45:42.260", "speaker": "Alexander Vasserman", "text": "So you could certainly have, you know, modified"}, {"source_name": "lecture7", "index": 579, "time": "00:45:42.320 --> 00:45:45.290", "speaker": "Alexander Vasserman", "text": "the get word spans function"}, {"source_name": "lecture7", "index": 580, "time": "00:45:45.320 --> 00:45:50.959", "speaker": "Alexander Vasserman", "text": "to kind of do some of this manipulations, and I've seen people do that."}, {"source_name": "lecture7", "index": 581, "time": "00:45:51.030 --> 00:45:58.039", "speaker": "Alexander Vasserman", "text": "That's fine. But in general, when we are coding we want to reuse as much as possible. So"}, {"source_name": "lecture7", "index": 582, "time": "00:45:58.530 --> 00:45:59.540", "speaker": "Alexander Vasserman", "text": "this"}, {"source_name": "lecture7", "index": 583, "time": "00:45:59.560 --> 00:46:00.950", "speaker": "Alexander Vasserman", "text": "all kind of"}, {"source_name": "lecture7", "index": 584, "time": "00:46:01.690 --> 00:46:17.740", "speaker": "Alexander Vasserman", "text": "let's use function that we've defined before. If that gets us part of the wait there, that's something always you want to think about. Is there something that we you can use to get part of the way there, so that we only need"}, {"source_name": "lecture7", "index": 585, "time": "00:46:17.840 --> 00:46:20.200", "speaker": "Alexander Vasserman", "text": "to do all"}, {"source_name": "lecture7", "index": 586, "time": "00:46:20.270 --> 00:46:22.339", "speaker": "Alexander Vasserman", "text": "he, you know, smaller"}, {"source_name": "lecture7", "index": 587, "time": "00:46:23.360 --> 00:46:24.450", "speaker": "Alexander Vasserman", "text": "subtes."}, {"source_name": "lecture7", "index": 588, "time": "00:46:28.680 --> 00:46:31.680", "speaker": "Alexander Vasserman", "text": "Another thing that I wanted to to show you"}, {"source_name": "lecture7", "index": 589, "time": "00:46:32.140 --> 00:46:33.430", "speaker": "Alexander Vasserman", "text": "actually here"}, {"source_name": "lecture7", "index": 590, "time": "00:46:33.490 --> 00:46:35.029", "speaker": "Alexander Vasserman", "text": "is"}, {"source_name": "lecture7", "index": 591, "time": "00:46:36.670 --> 00:46:38.779", "speaker": "Alexander Vasserman", "text": "slightly different way of"}, {"source_name": "lecture7", "index": 592, "time": "00:46:39.060 --> 00:46:39.879", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 593, "time": "00:46:40.610 --> 00:46:41.740", "speaker": "Alexander Vasserman", "text": "doing it."}, {"source_name": "lecture7", "index": 594, "time": "00:46:42.370 --> 00:46:43.220", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 595, "time": "00:46:46.770 --> 00:46:47.810", "speaker": "Alexander Vasserman", "text": "there is."}, {"source_name": "lecture7", "index": 596, "time": "00:46:49.190 --> 00:46:51.289", "speaker": "Alexander Vasserman", "text": "or something called the full dict"}, {"source_name": "lecture7", "index": 597, "time": "00:46:51.450 --> 00:46:52.750", "speaker": "Alexander Vasserman", "text": "in all"}, {"source_name": "lecture7", "index": 598, "time": "00:46:55.240 --> 00:46:56.290", "speaker": "Alexander Vasserman", "text": "in Python."}, {"source_name": "lecture7", "index": 599, "time": "00:46:57.680 --> 00:46:58.779", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 600, "time": "00:46:58.990 --> 00:47:00.779", "speaker": "Alexander Vasserman", "text": "it is in"}, {"source_name": "lecture7", "index": 601, "time": "00:47:01.950 --> 00:47:03.990", "speaker": "Alexander Vasserman", "text": "collections, so library."}, {"source_name": "lecture7", "index": 602, "time": "00:47:08.770 --> 00:47:14.820", "speaker": "Alexander Vasserman", "text": "and the way that works is essentially to simplify"}, {"source_name": "lecture7", "index": 603, "time": "00:47:15.550 --> 00:47:17.080", "speaker": "Alexander Vasserman", "text": "kind of code like that."}, {"source_name": "lecture7", "index": 604, "time": "00:47:17.190 --> 00:47:18.169", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 605, "time": "00:47:18.290 --> 00:47:19.290", "speaker": "Alexander Vasserman", "text": "we can"}, {"source_name": "lecture7", "index": 606, "time": "00:47:19.440 --> 00:47:21.089", "speaker": "Alexander Vasserman", "text": "say that output"}, {"source_name": "lecture7", "index": 607, "time": "00:47:21.230 --> 00:47:23.100", "speaker": "Alexander Vasserman", "text": "is the"}, {"source_name": "lecture7", "index": 608, "time": "00:47:23.290 --> 00:47:24.330", "speaker": "Alexander Vasserman", "text": "oh"}, {"source_name": "lecture7", "index": 609, "time": "00:47:26.840 --> 00:47:28.059", "speaker": "Alexander Vasserman", "text": "default, date."}, {"source_name": "lecture7", "index": 610, "time": "00:47:28.590 --> 00:47:29.889", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture7", "index": 611, "time": "00:47:30.410 --> 00:47:32.190", "speaker": "Alexander Vasserman", "text": "the default dictates"}, {"source_name": "lecture7", "index": 612, "time": "00:47:33.550 --> 00:47:38.759", "speaker": "Alexander Vasserman", "text": "the kind of what type of elements are created by default."}, {"source_name": "lecture7", "index": 613, "time": "00:47:39.770 --> 00:47:41.089", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture7", "index": 614, "time": "00:47:41.870 --> 00:47:43.540", "speaker": "Alexander Vasserman", "text": "what it does is."}, {"source_name": "lecture7", "index": 615, "time": "00:47:43.620 --> 00:47:53.709", "speaker": "Alexander Vasserman", "text": "instead of being giving you an error for the cases when the key is not in the dictionary, it automatically creates."}, {"source_name": "lecture7", "index": 616, "time": "00:47:53.770 --> 00:47:57.359", "speaker": "Alexander Vasserman", "text": "or the default element."}, {"source_name": "lecture7", "index": 617, "time": "00:47:57.470 --> 00:48:02.399", "speaker": "Alexander Vasserman", "text": "So in this particular case we given it the list. So by default it will"}, {"source_name": "lecture7", "index": 618, "time": "00:48:02.460 --> 00:48:04.349", "speaker": "Alexander Vasserman", "text": "create a least."}, {"source_name": "lecture7", "index": 619, "time": "00:48:04.680 --> 00:48:06.620", "speaker": "Alexander Vasserman", "text": "And so"}, {"source_name": "lecture7", "index": 620, "time": "00:48:08.000 --> 00:48:08.950", "speaker": "Alexander Vasserman", "text": "we can"}, {"source_name": "lecture7", "index": 621, "time": "00:48:10.910 --> 00:48:15.220", "speaker": "Alexander Vasserman", "text": "now simplify the function and just"}, {"source_name": "lecture7", "index": 622, "time": "00:48:15.620 --> 00:48:17.359", "speaker": "Alexander Vasserman", "text": "have it like that."}, {"source_name": "lecture7", "index": 623, "time": "00:48:17.790 --> 00:48:21.370", "speaker": "Alexander Vasserman", "text": "So basically in after least, this created"}, {"source_name": "lecture7", "index": 624, "time": "00:48:21.760 --> 00:48:24.780", "speaker": "Alexander Vasserman", "text": "right here, if it wasn't"}, {"source_name": "lecture7", "index": 625, "time": "00:48:25.070 --> 00:48:26.350", "speaker": "Alexander Vasserman", "text": "already there."}, {"source_name": "lecture7", "index": 626, "time": "00:48:27.050 --> 00:48:29.119", "speaker": "Alexander Vasserman", "text": "And that just makes it a little"}, {"source_name": "lecture7", "index": 627, "time": "00:48:29.290 --> 00:48:30.689", "speaker": "Alexander Vasserman", "text": "simpler."}, {"source_name": "lecture7", "index": 628, "time": "00:48:31.280 --> 00:48:34.160", "speaker": "Alexander Vasserman", "text": "so kind of just something"}, {"source_name": "lecture7", "index": 629, "time": "00:48:34.190 --> 00:48:35.569", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture7", "index": 630, "time": "00:48:36.170 --> 00:48:38.129", "speaker": "Alexander Vasserman", "text": "they will use."}, {"source_name": "lecture7", "index": 631, "time": "00:48:38.190 --> 00:48:46.770", "speaker": "Alexander Vasserman", "text": "probably a few more times in this course. It's kind of a nice little collection kind of"}, {"source_name": "lecture7", "index": 632, "time": "00:48:47.000 --> 00:48:49.970", "speaker": "Alexander Vasserman", "text": "a little bit of a simplification of the logic."}, {"source_name": "lecture7", "index": 633, "time": "00:48:50.040 --> 00:48:50.850", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 634, "time": "00:48:50.980 --> 00:48:52.969", "speaker": "Alexander Vasserman", "text": "so just something"}, {"source_name": "lecture7", "index": 635, "time": "00:48:53.590 --> 00:48:55.020", "speaker": "Alexander Vasserman", "text": "you don't have to."}, {"source_name": "lecture7", "index": 636, "time": "00:48:57.420 --> 00:48:58.129", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 637, "time": "00:49:02.560 --> 00:49:03.290", "speaker": "Alexander Vasserman", "text": "interesting."}, {"source_name": "lecture7", "index": 638, "time": "00:49:11.030 --> 00:49:11.779", "speaker": "Alexander Vasserman", "text": "It's"}, {"source_name": "lecture7", "index": 639, "time": "00:49:12.270 --> 00:49:14.270", "speaker": "Alexander Vasserman", "text": "It's strange."}, {"source_name": "lecture7", "index": 640, "time": "00:49:14.290 --> 00:49:15.640", "speaker": "Alexander Vasserman", "text": "Okay, maybe."}, {"source_name": "lecture7", "index": 641, "time": "00:49:17.010 --> 00:49:19.130", "speaker": "Alexander Vasserman", "text": "Shouldn't have"}, {"source_name": "lecture7", "index": 642, "time": "00:49:21.220 --> 00:49:22.270", "speaker": "Alexander Vasserman", "text": "used"}, {"source_name": "lecture7", "index": 643, "time": "00:49:25.790 --> 00:49:27.690", "speaker": "Alexander Vasserman", "text": "the editor afterward."}, {"source_name": "lecture7", "index": 644, "time": "00:49:27.770 --> 00:49:30.089", "speaker": "Alexander Vasserman", "text": "after all, because"}, {"source_name": "lecture7", "index": 645, "time": "00:49:30.840 --> 00:49:32.109", "speaker": "Alexander Vasserman", "text": "somehow"}, {"source_name": "lecture7", "index": 646, "time": "00:49:34.010 --> 00:49:34.970", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 647, "time": "00:49:37.170 --> 00:49:39.560", "speaker": "Alexander Vasserman", "text": "collections is not"}, {"source_name": "lecture7", "index": 648, "time": "00:49:40.170 --> 00:49:42.320", "speaker": "Alexander Vasserman", "text": "even though it's a standard library."}, {"source_name": "lecture7", "index": 649, "time": "00:49:45.310 --> 00:49:49.110", "speaker": "Alexander Vasserman", "text": "It's some call not automatically there"}, {"source_name": "lecture7", "index": 650, "time": "00:49:49.220 --> 00:49:50.450", "speaker": "Alexander Vasserman", "text": "in there."}, {"source_name": "lecture7", "index": 651, "time": "00:49:54.390 --> 00:49:55.299", "speaker": "Alexander Vasserman", "text": "Call out"}, {"source_name": "lecture7", "index": 652, "time": "00:49:55.440 --> 00:49:57.479", "speaker": "Alexander Vasserman", "text": "anyways."}, {"source_name": "lecture7", "index": 653, "time": "00:49:58.710 --> 00:50:07.710", "speaker": "Alexander Vasserman", "text": "you know. I'll just leave it here for now the the the previous way works. I just wanted to to show you something different."}, {"source_name": "lecture7", "index": 654, "time": "00:50:07.770 --> 00:50:14.649", "speaker": "Alexander Vasserman", "text": "Doesn't quite work here, but would work if we were doing this in the"}, {"source_name": "lecture7", "index": 655, "time": "00:50:14.800 --> 00:50:15.660", "speaker": "Alexander Vasserman", "text": "bye. Charm?"}, {"source_name": "lecture7", "index": 656, "time": "00:50:19.830 --> 00:50:20.629", "speaker": "Alexander Vasserman", "text": "All right."}, {"source_name": "lecture7", "index": 657, "time": "00:50:20.710 --> 00:50:22.560", "speaker": "Alexander Vasserman", "text": "Any questions."}, {"source_name": "lecture7", "index": 658, "time": "00:50:31.300 --> 00:50:34.050", "speaker": "Alexander Vasserman", "text": "Okay. No questions. There, then"}, {"source_name": "lecture7", "index": 659, "time": "00:50:34.510 --> 00:50:35.419", "speaker": "Alexander Vasserman", "text": "let's"}, {"source_name": "lecture7", "index": 660, "time": "00:50:36.650 --> 00:50:40.049", "speaker": "Alexander Vasserman", "text": "actually do you?"}, {"source_name": "lecture7", "index": 661, "time": "00:50:45.150 --> 00:50:46.779", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture7", "index": 662, "time": "00:50:47.270 --> 00:50:48.720", "speaker": "Alexander Vasserman", "text": "so what we"}, {"source_name": "lecture7", "index": 663, "time": "00:50:52.420 --> 00:50:53.750", "speaker": "Alexander Vasserman", "text": "pointed to"}, {"source_name": "lecture7", "index": 664, "time": "00:50:54.480 --> 00:50:55.839", "speaker": "Alexander Vasserman", "text": "do for?"}, {"source_name": "lecture7", "index": 665, "time": "00:50:56.740 --> 00:50:57.590", "speaker": "Alexander Vasserman", "text": "Oh, oh."}, {"source_name": "lecture7", "index": 666, "time": "00:51:04.130 --> 00:51:13.070", "speaker": "Alexander Vasserman", "text": "What we wanted to do here is to change the matching would in turn match function"}, {"source_name": "lecture7", "index": 667, "time": "00:51:13.150 --> 00:51:14.910", "speaker": "Alexander Vasserman", "text": "to use that operations"}, {"source_name": "lecture7", "index": 668, "time": "00:51:15.310 --> 00:51:16.109", "speaker": "Alexander Vasserman", "text": "right?"}, {"source_name": "lecture7", "index": 669, "time": "00:51:16.270 --> 00:51:17.299", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 670, "time": "00:51:18.230 --> 00:51:19.899", "speaker": "Alexander Vasserman", "text": "this is our"}, {"source_name": "lecture7", "index": 671, "time": "00:51:20.670 --> 00:51:22.339", "speaker": "Alexander Vasserman", "text": "code from"}, {"source_name": "lecture7", "index": 672, "time": "00:51:22.440 --> 00:51:28.390", "speaker": "Alexander Vasserman", "text": "the class that we could download. And the bull in term. Marriage is right here."}, {"source_name": "lecture7", "index": 673, "time": "00:51:28.600 --> 00:51:29.879", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture7", "index": 674, "time": "00:51:31.150 --> 00:51:38.119", "speaker": "Alexander Vasserman", "text": "basically, what we wanted to do is to make these things sets."}, {"source_name": "lecture7", "index": 675, "time": "00:51:38.250 --> 00:51:45.239", "speaker": "Alexander Vasserman", "text": "Remember this actually doesn't do anything. This is just type annotations. They are optional to what."}, {"source_name": "lecture7", "index": 676, "time": "00:51:45.760 --> 00:51:51.920", "speaker": "Alexander Vasserman", "text": "But you can see. Once I change the type of notation. The editor tells me that something is wrong."}, {"source_name": "lecture7", "index": 677, "time": "00:51:51.990 --> 00:51:52.770", "speaker": "Alexander Vasserman", "text": "Right?"}, {"source_name": "lecture7", "index": 678, "time": "00:51:52.860 --> 00:51:57.220", "speaker": "Alexander Vasserman", "text": "I expect the type is set, and the actual type is least."}, {"source_name": "lecture7", "index": 679, "time": "00:51:57.310 --> 00:51:58.600", "speaker": "Alexander Vasserman", "text": "Oh, so"}, {"source_name": "lecture7", "index": 680, "time": "00:51:58.720 --> 00:52:01.910", "speaker": "Alexander Vasserman", "text": "what actually changes it to to set"}, {"source_name": "lecture7", "index": 681, "time": "00:52:02.220 --> 00:52:03.129", "speaker": "Alexander Vasserman", "text": "it is"}, {"source_name": "lecture7", "index": 682, "time": "00:52:03.320 --> 00:52:05.659", "speaker": "Alexander Vasserman", "text": "explicit conversion to set."}, {"source_name": "lecture7", "index": 683, "time": "00:52:09.910 --> 00:52:11.319", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture7", "index": 684, "time": "00:52:11.510 --> 00:52:13.620", "speaker": "Alexander Vasserman", "text": "no the"}, {"source_name": "lecture7", "index": 685, "time": "00:52:13.910 --> 00:52:17.099", "speaker": "Alexander Vasserman", "text": "If you read actually what we"}, {"source_name": "lecture7", "index": 686, "time": "00:52:17.390 --> 00:52:19.409", "speaker": "Alexander Vasserman", "text": "I need to return here."}, {"source_name": "lecture7", "index": 687, "time": "00:52:19.720 --> 00:52:20.509", "speaker": "Alexander Vasserman", "text": "I mean"}, {"source_name": "lecture7", "index": 688, "time": "00:52:21.080 --> 00:52:23.769", "speaker": "Alexander Vasserman", "text": "it. Basically, They say, if"}, {"source_name": "lecture7", "index": 689, "time": "00:52:24.520 --> 00:52:29.450", "speaker": "Alexander Vasserman", "text": "we want to return. If all the elements in the equity set"}, {"source_name": "lecture7", "index": 690, "time": "00:52:29.490 --> 00:52:33.529", "speaker": "Alexander Vasserman", "text": "or in equity terms are also in document terms."}, {"source_name": "lecture7", "index": 691, "time": "00:52:34.080 --> 00:52:35.860", "speaker": "Alexander Vasserman", "text": "we've actually done that"}, {"source_name": "lecture7", "index": 692, "time": "00:52:35.940 --> 00:52:37.609", "speaker": "Alexander Vasserman", "text": "in exercise, too."}, {"source_name": "lecture7", "index": 693, "time": "00:52:38.130 --> 00:52:40.929", "speaker": "Alexander Vasserman", "text": "Right? That's exactly"}, {"source_name": "lecture7", "index": 694, "time": "00:52:41.640 --> 00:52:47.249", "speaker": "Alexander Vasserman", "text": "what they did in an exercise to Number C."}, {"source_name": "lecture7", "index": 695, "time": "00:52:50.290 --> 00:52:52.899", "speaker": "Alexander Vasserman", "text": "It is is subset"}, {"source_name": "lecture7", "index": 696, "time": "00:52:52.960 --> 00:52:55.430", "speaker": "Alexander Vasserman", "text": "right? So here I could."}, {"source_name": "lecture7", "index": 697, "time": "00:52:55.670 --> 00:52:58.160", "speaker": "Alexander Vasserman", "text": "or replace this. All"}, {"source_name": "lecture7", "index": 698, "time": "00:52:59.290 --> 00:53:00.330", "speaker": "Alexander Vasserman", "text": "we"}, {"source_name": "lecture7", "index": 699, "time": "00:53:00.750 --> 00:53:01.589", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 700, "time": "00:53:03.110 --> 00:53:04.520", "speaker": "Alexander Vasserman", "text": "created terms"}, {"source_name": "lecture7", "index": 701, "time": "00:53:05.670 --> 00:53:07.550", "speaker": "Alexander Vasserman", "text": "is subset."}, {"source_name": "lecture7", "index": 702, "time": "00:53:07.670 --> 00:53:08.979", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 703, "time": "00:53:10.180 --> 00:53:11.649", "speaker": "Alexander Vasserman", "text": "document in terms."}, {"source_name": "lecture7", "index": 704, "time": "00:53:12.950 --> 00:53:13.960", "speaker": "Alexander Vasserman", "text": "and just"}, {"source_name": "lecture7", "index": 705, "time": "00:53:15.500 --> 00:53:16.609", "speaker": "Alexander Vasserman", "text": "you that."}, {"source_name": "lecture7", "index": 706, "time": "00:53:17.630 --> 00:53:18.960", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture7", "index": 707, "time": "00:53:24.750 --> 00:53:29.659", "speaker": "Alexander Vasserman", "text": "what we'd want to do here also just go to our testing."}, {"source_name": "lecture7", "index": 708, "time": "00:53:29.750 --> 00:53:32.550", "speaker": "Alexander Vasserman", "text": "which was also part of the the homework."}, {"source_name": "lecture7", "index": 709, "time": "00:53:32.580 --> 00:53:34.909", "speaker": "Alexander Vasserman", "text": "But even this the"}, {"source_name": "lecture7", "index": 710, "time": "00:53:35.920 --> 00:53:44.999", "speaker": "Alexander Vasserman", "text": "Oh, yeah, I guess I don't have that right now. But when you actually finish the call work with the tasks."}, {"source_name": "lecture7", "index": 711, "time": "00:53:45.150 --> 00:53:51.649", "speaker": "Alexander Vasserman", "text": "What one thing that you might have wanted to do is after the modifications like this or on the tests."}, {"source_name": "lecture7", "index": 712, "time": "00:53:56.040 --> 00:53:59.520", "speaker": "Alexander Vasserman", "text": "All right, let's get back to the homework."}, {"source_name": "lecture7", "index": 713, "time": "00:53:59.780 --> 00:54:01.189", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 714, "time": "00:54:02.330 --> 00:54:03.670", "speaker": "Alexander Vasserman", "text": "actually, first"}, {"source_name": "lecture7", "index": 715, "time": "00:54:03.910 --> 00:54:06.560", "speaker": "Alexander Vasserman", "text": "for question for any questions there."}, {"source_name": "lecture7", "index": 716, "time": "00:54:14.770 --> 00:54:17.210", "speaker": "Alexander Vasserman", "text": "So basically here, like"}, {"source_name": "lecture7", "index": 717, "time": "00:54:18.070 --> 00:54:26.829", "speaker": "Alexander Vasserman", "text": "like I said, some of the things that you're going to do for for the for writing the search right? It's"}, {"source_name": "lecture7", "index": 718, "time": "00:54:28.820 --> 00:54:29.910", "speaker": "Alexander Vasserman", "text": "this is not"}, {"source_name": "lecture7", "index": 719, "time": "00:54:34.750 --> 00:54:38.960", "speaker": "Alexander Vasserman", "text": "Yeah. So this is the again, the implementation right to"}, {"source_name": "lecture7", "index": 720, "time": "00:54:39.080 --> 00:54:47.259", "speaker": "Alexander Vasserman", "text": "some of the set. Operations are kind of useful, and so like, you know, kind of that's one of the reasons I wanted you to to"}, {"source_name": "lecture7", "index": 721, "time": "00:54:47.320 --> 00:54:49.519", "speaker": "Alexander Vasserman", "text": "or think about celebrations."}, {"source_name": "lecture7", "index": 722, "time": "00:54:54.380 --> 00:54:56.140", "speaker": "Alexander Vasserman", "text": "So for question 5"}, {"source_name": "lecture7", "index": 723, "time": "00:54:56.220 --> 00:55:02.940", "speaker": "Alexander Vasserman", "text": "basically we were comparing the the 2 implementations of the"}, {"source_name": "lecture7", "index": 724, "time": "00:55:03.120 --> 00:55:06.209", "speaker": "Alexander Vasserman", "text": "string may, or or the machine function."}, {"source_name": "lecture7", "index": 725, "time": "00:55:06.240 --> 00:55:07.899", "speaker": "Alexander Vasserman", "text": "Right? So"}, {"source_name": "lecture7", "index": 726, "time": "00:55:08.190 --> 00:55:10.640", "speaker": "Alexander Vasserman", "text": "for the bullying logic."}, {"source_name": "lecture7", "index": 727, "time": "00:55:10.760 --> 00:55:12.910", "speaker": "Alexander Vasserman", "text": "we want to make sure that"}, {"source_name": "lecture7", "index": 728, "time": "00:55:12.990 --> 00:55:14.719", "speaker": "Alexander Vasserman", "text": "documents contain"}, {"source_name": "lecture7", "index": 729, "time": "00:55:14.870 --> 00:55:16.130", "speaker": "Alexander Vasserman", "text": "terms"}, {"source_name": "lecture7", "index": 730, "time": "00:55:16.680 --> 00:55:21.370", "speaker": "Alexander Vasserman", "text": "all the terms in the greatest. So there are 2 terms in this, really all, and H."}, {"source_name": "lecture7", "index": 731, "time": "00:55:21.810 --> 00:55:23.910", "speaker": "Alexander Vasserman", "text": "All right. So"}, {"source_name": "lecture7", "index": 732, "time": "00:55:24.000 --> 00:55:24.759", "speaker": "Alexander Vasserman", "text": "first"}, {"source_name": "lecture7", "index": 733, "time": "00:55:24.950 --> 00:55:28.099", "speaker": "Alexander Vasserman", "text": "document does not contain those terms."}, {"source_name": "lecture7", "index": 734, "time": "00:55:29.540 --> 00:55:30.660", "speaker": "Alexander Vasserman", "text": "Second."}, {"source_name": "lecture7", "index": 735, "time": "00:55:30.940 --> 00:55:31.830", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 736, "time": "00:55:32.070 --> 00:55:33.200", "speaker": "Alexander Vasserman", "text": "documents"}, {"source_name": "lecture7", "index": 737, "time": "00:55:33.430 --> 00:55:36.680", "speaker": "Alexander Vasserman", "text": "have that exact stream here, so it does."}, {"source_name": "lecture7", "index": 738, "time": "00:55:36.820 --> 00:55:39.410", "speaker": "Alexander Vasserman", "text": "Third. One has both of those"}, {"source_name": "lecture7", "index": 739, "time": "00:55:40.380 --> 00:55:41.410", "speaker": "Alexander Vasserman", "text": "terms."}, {"source_name": "lecture7", "index": 740, "time": "00:55:41.820 --> 00:55:48.150", "speaker": "Alexander Vasserman", "text": "not next to each other, but still contains them. So, according to bullying logic. That's also going to be"}, {"source_name": "lecture7", "index": 741, "time": "00:55:48.300 --> 00:55:52.310", "speaker": "Alexander Vasserman", "text": "a match. So for bulletin logic. 2 and 3"}, {"source_name": "lecture7", "index": 742, "time": "00:55:52.490 --> 00:55:54.540", "speaker": "Alexander Vasserman", "text": "are making documents"}, {"source_name": "lecture7", "index": 743, "time": "00:55:55.460 --> 00:55:57.669", "speaker": "Alexander Vasserman", "text": "now for Part B,"}, {"source_name": "lecture7", "index": 744, "time": "00:55:57.710 --> 00:56:02.589", "speaker": "Alexander Vasserman", "text": "using the strings or in operator, or like"}, {"source_name": "lecture7", "index": 745, "time": "00:56:02.730 --> 00:56:06.909", "speaker": "Alexander Vasserman", "text": "the the function that we've defined string match, right?"}, {"source_name": "lecture7", "index": 746, "time": "00:56:07.840 --> 00:56:10.660", "speaker": "Alexander Vasserman", "text": "Which ones would work"}, {"source_name": "lecture7", "index": 747, "time": "00:56:10.680 --> 00:56:11.990", "speaker": "Alexander Vasserman", "text": "well. So"}, {"source_name": "lecture7", "index": 748, "time": "00:56:12.920 --> 00:56:15.700", "speaker": "Alexander Vasserman", "text": "number One actually has this upstream"}, {"source_name": "lecture7", "index": 749, "time": "00:56:15.780 --> 00:56:20.360", "speaker": "Alexander Vasserman", "text": "right there. So, according to stream matching"}, {"source_name": "lecture7", "index": 8, "time": "00:56:20.630 --> 00:56:21.580", "speaker": "Alexander Vasserman", "text": "right there. So, according to stream matching"}, {"source_name": "lecture7", "index": 751, "time": "00:56:21.680 --> 00:56:23.029", "speaker": "Alexander Vasserman", "text": "is a match."}, {"source_name": "lecture7", "index": 752, "time": "00:56:24.930 --> 00:56:34.840", "speaker": "Alexander Vasserman", "text": "and the number 2 is also a match. But number 3 is not because there is not an exact string like that contained in the document."}, {"source_name": "lecture7", "index": 753, "time": "00:56:36.870 --> 00:56:37.939", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 754, "time": "00:56:39.010 --> 00:56:40.059", "speaker": "Alexander Vasserman", "text": "does that"}, {"source_name": "lecture7", "index": 755, "time": "00:56:40.920 --> 00:56:42.420", "speaker": "Alexander Vasserman", "text": "make sense to everyone?"}, {"source_name": "lecture7", "index": 756, "time": "00:56:45.040 --> 00:56:45.919", "speaker": "Alexander Vasserman", "text": "Okay?"}, {"source_name": "lecture7", "index": 757, "time": "00:56:48.310 --> 00:56:49.259", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 758, "time": "00:56:50.460 --> 00:56:51.319", "speaker": "Alexander Vasserman", "text": "all right."}, {"source_name": "lecture7", "index": 759, "time": "00:56:51.710 --> 00:56:55.389", "speaker": "Alexander Vasserman", "text": "Let's see. So now the unit testing"}, {"source_name": "lecture7", "index": 760, "time": "00:56:57.710 --> 00:56:58.890", "speaker": "Alexander Vasserman", "text": "there was."}, {"source_name": "lecture7", "index": 761, "time": "00:56:59.710 --> 00:57:00.520", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 762, "time": "00:57:02.170 --> 00:57:07.520", "speaker": "Alexander Vasserman", "text": "Let's see. There were a lot of questions before about this part of the"}, {"source_name": "lecture7", "index": 763, "time": "00:57:09.460 --> 00:57:11.770", "speaker": "Alexander Vasserman", "text": "exercise, and"}, {"source_name": "lecture7", "index": 764, "time": "00:57:12.640 --> 00:57:17.089", "speaker": "Alexander Vasserman", "text": "i'll just give a few more examples here."}, {"source_name": "lecture7", "index": 765, "time": "00:57:17.160 --> 00:57:21.840", "speaker": "Alexander Vasserman", "text": "I'm not going to do all, all of them. But."}, {"source_name": "lecture7", "index": 766, "time": "00:57:22.950 --> 00:57:24.519", "speaker": "Alexander Vasserman", "text": "for example."}, {"source_name": "lecture7", "index": 767, "time": "00:57:24.800 --> 00:57:27.950", "speaker": "Alexander Vasserman", "text": "some of the things that we wanted"}, {"source_name": "lecture7", "index": 768, "time": "00:57:28.030 --> 00:57:29.229", "speaker": "Alexander Vasserman", "text": "actually let's"}, {"source_name": "lecture7", "index": 769, "time": "00:57:29.270 --> 00:57:31.050", "speaker": "Alexander Vasserman", "text": "or do they the"}, {"source_name": "lecture7", "index": 770, "time": "00:57:32.530 --> 00:57:34.089", "speaker": "Alexander Vasserman", "text": "Oh, so"}, {"source_name": "lecture7", "index": 771, "time": "00:57:34.480 --> 00:57:37.410", "speaker": "Alexander Vasserman", "text": "for testing search."}, {"source_name": "lecture7", "index": 772, "time": "00:57:37.430 --> 00:57:38.669", "speaker": "Alexander Vasserman", "text": "let's say."}, {"source_name": "lecture7", "index": 773, "time": "00:57:38.740 --> 00:57:39.990", "speaker": "Alexander Vasserman", "text": "is"}, {"source_name": "lecture7", "index": 774, "time": "00:57:43.540 --> 00:57:44.779", "speaker": "Alexander Vasserman", "text": "oh, all right."}, {"source_name": "lecture7", "index": 775, "time": "00:57:44.960 --> 00:57:46.000", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 776, "time": "00:57:46.570 --> 00:57:47.589", "speaker": "Alexander Vasserman", "text": "if the"}, {"source_name": "lecture7", "index": 777, "time": "00:57:50.510 --> 00:57:52.040", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture7", "index": 778, "time": "00:57:53.970 --> 00:57:56.659", "speaker": "Alexander Vasserman", "text": "what actually turns out"}, {"source_name": "lecture7", "index": 779, "time": "00:57:56.710 --> 00:57:57.520", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture7", "index": 780, "time": "00:57:57.760 --> 00:58:02.489", "speaker": "Alexander Vasserman", "text": "because our definition is that all terms"}, {"source_name": "lecture7", "index": 781, "time": "00:58:02.640 --> 00:58:09.009", "speaker": "Alexander Vasserman", "text": "or in the query are in the document, and all terms is nothing really. So it's"}, {"source_name": "lecture7", "index": 782, "time": "00:58:09.440 --> 00:58:11.520", "speaker": "Alexander Vasserman", "text": "basically they are, no matter what"}, {"source_name": "lecture7", "index": 783, "time": "00:58:11.720 --> 00:58:15.720", "speaker": "Alexander Vasserman", "text": "right. So really, the output"}, {"source_name": "lecture7", "index": 784, "time": "00:58:15.760 --> 00:58:21.120", "speaker": "Alexander Vasserman", "text": "in this case is going to be the list of documents that"}, {"source_name": "lecture7", "index": 785, "time": "00:58:21.340 --> 00:58:22.930", "speaker": "Alexander Vasserman", "text": "he's"}, {"source_name": "lecture7", "index": 786, "time": "00:58:23.230 --> 00:58:24.399", "speaker": "Alexander Vasserman", "text": "all supply"}, {"source_name": "lecture7", "index": 787, "time": "00:58:24.740 --> 00:58:25.930", "speaker": "Alexander Vasserman", "text": "to the search"}, {"source_name": "lecture7", "index": 788, "time": "00:58:26.460 --> 00:58:28.069", "speaker": "Alexander Vasserman", "text": "you need, and"}, {"source_name": "lecture7", "index": 789, "time": "00:58:28.770 --> 00:58:29.720", "speaker": "Alexander Vasserman", "text": "he can"}, {"source_name": "lecture7", "index": 790, "time": "00:58:29.970 --> 00:58:30.750", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 791, "time": "00:58:30.930 --> 00:58:32.189", "speaker": "Alexander Vasserman", "text": "around the test."}, {"source_name": "lecture7", "index": 792, "time": "00:58:32.370 --> 00:58:33.479", "speaker": "Alexander Vasserman", "text": "sure."}, {"source_name": "lecture7", "index": 793, "time": "00:58:34.130 --> 00:58:36.780", "speaker": "Alexander Vasserman", "text": "and it runs. Okay, so"}, {"source_name": "lecture7", "index": 794, "time": "00:58:36.960 --> 00:58:39.539", "speaker": "Alexander Vasserman", "text": "you know we'll we'll know that's what it is."}, {"source_name": "lecture7", "index": 795, "time": "00:58:39.710 --> 00:58:45.060", "speaker": "Alexander Vasserman", "text": "This is a little controversial, and maybe that's on not how"}, {"source_name": "lecture7", "index": 796, "time": "00:58:45.110 --> 00:58:47.220", "speaker": "Alexander Vasserman", "text": "our our function should be defined."}, {"source_name": "lecture7", "index": 797, "time": "00:58:47.380 --> 00:58:58.269", "speaker": "Alexander Vasserman", "text": "Maybe you'd expect to get like an empty list of documents, or get some kind of an error or"}, {"source_name": "lecture7", "index": 798, "time": "00:58:58.300 --> 00:59:00.850", "speaker": "Alexander Vasserman", "text": "something like that. And"}, {"source_name": "lecture7", "index": 799, "time": "00:59:01.020 --> 00:59:07.489", "speaker": "Alexander Vasserman", "text": "that's kind of one of the reasons that are helpful. Sometimes they help us understand"}, {"source_name": "lecture7", "index": 800, "time": "00:59:07.550 --> 00:59:11.029", "speaker": "Alexander Vasserman", "text": "some of the problems with our code."}, {"source_name": "lecture7", "index": 801, "time": "00:59:11.220 --> 00:59:13.980", "speaker": "Alexander Vasserman", "text": "so we could have potentially changed our functions."}, {"source_name": "lecture7", "index": 802, "time": "00:59:14.000 --> 00:59:15.940", "speaker": "Alexander Vasserman", "text": "our our function to"}, {"source_name": "lecture7", "index": 803, "time": "00:59:15.960 --> 00:59:18.410", "speaker": "Alexander Vasserman", "text": "kind of special case."}, {"source_name": "lecture7", "index": 804, "time": "00:59:21.080 --> 00:59:25.099", "speaker": "Alexander Vasserman", "text": "But for the homework. This was fine."}, {"source_name": "lecture7", "index": 805, "time": "00:59:25.260 --> 00:59:26.590", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture7", "index": 806, "time": "00:59:27.670 --> 00:59:30.000", "speaker": "Alexander Vasserman", "text": "of course, if the"}, {"source_name": "lecture7", "index": 807, "time": "00:59:30.430 --> 00:59:31.290", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 808, "time": "00:59:31.530 --> 00:59:32.509", "speaker": "Alexander Vasserman", "text": "try"}, {"source_name": "lecture7", "index": 809, "time": "00:59:32.720 --> 00:59:34.029", "speaker": "Alexander Vasserman", "text": "these the"}, {"source_name": "lecture7", "index": 810, "time": "00:59:34.250 --> 00:59:35.470", "speaker": "Alexander Vasserman", "text": "it"}, {"source_name": "lecture7", "index": 811, "time": "00:59:35.920 --> 00:59:36.759", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 812, "time": "00:59:37.520 --> 00:59:39.140", "speaker": "Alexander Vasserman", "text": "document collection."}, {"source_name": "lecture7", "index": 813, "time": "00:59:39.350 --> 00:59:40.399", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 814, "time": "00:59:40.970 --> 00:59:41.890", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 815, "time": "00:59:43.950 --> 00:59:47.060", "speaker": "Alexander Vasserman", "text": "it doesn't matter what the query is."}, {"source_name": "lecture7", "index": 816, "time": "00:59:47.260 --> 00:59:48.129", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 817, "time": "00:59:49.340 --> 00:59:52.130", "speaker": "Alexander Vasserman", "text": "if the documents that you're supplying"}, {"source_name": "lecture7", "index": 818, "time": "00:59:52.230 --> 00:59:57.450", "speaker": "Alexander Vasserman", "text": "or is in the the return will be in actually right. So that's"}, {"source_name": "lecture7", "index": 819, "time": "00:59:57.550 --> 00:59:58.780", "speaker": "Alexander Vasserman", "text": "kind of"}, {"source_name": "lecture7", "index": 820, "time": "00:59:59.500 --> 01:00:00.899", "speaker": "Alexander Vasserman", "text": "in the other"}, {"source_name": "lecture7", "index": 821, "time": "01:00:01.070 --> 01:00:02.290", "speaker": "Alexander Vasserman", "text": "useful"}, {"source_name": "lecture7", "index": 822, "time": "01:00:02.350 --> 01:00:12.730", "speaker": "Alexander Vasserman", "text": "special case to test in this particular case. It's not that interesting in some sense, because if they're searching in."}, {"source_name": "lecture7", "index": 823, "time": "01:00:12.800 --> 01:00:14.960", "speaker": "Alexander Vasserman", "text": "you know, inside of an empty."}, {"source_name": "lecture7", "index": 824, "time": "01:00:14.990 --> 01:00:16.140", "speaker": "Alexander Vasserman", "text": "or at least"}, {"source_name": "lecture7", "index": 825, "time": "01:00:16.160 --> 01:00:18.240", "speaker": "Alexander Vasserman", "text": "they're not going to find anything. So"}, {"source_name": "lecture7", "index": 826, "time": "01:00:18.340 --> 01:00:18.899", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture7", "index": 827, "time": "01:00:19.100 --> 01:00:27.049", "speaker": "Alexander Vasserman", "text": "doesn't really matter, but for complete use of testing. That's a a a useful test case."}, {"source_name": "lecture7", "index": 828, "time": "01:00:27.200 --> 01:00:28.399", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture7", "index": 829, "time": "01:00:29.920 --> 01:00:32.020", "speaker": "Alexander Vasserman", "text": "so for"}, {"source_name": "lecture7", "index": 830, "time": "01:00:32.880 --> 01:00:34.200", "speaker": "Alexander Vasserman", "text": "for matching"}, {"source_name": "lecture7", "index": 831, "time": "01:00:37.880 --> 01:00:40.999", "speaker": "Alexander Vasserman", "text": "again. Kind of the empty"}, {"source_name": "lecture7", "index": 832, "time": "01:00:41.280 --> 01:00:42.220", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 833, "time": "01:00:44.540 --> 01:00:46.949", "speaker": "Alexander Vasserman", "text": "one would be, you know."}, {"source_name": "lecture7", "index": 834, "time": "01:00:48.100 --> 01:00:50.909", "speaker": "Alexander Vasserman", "text": "Let's say, empty. Oh."}, {"source_name": "lecture7", "index": 835, "time": "01:00:53.310 --> 01:00:54.299", "speaker": "Alexander Vasserman", "text": "with me!"}, {"source_name": "lecture7", "index": 836, "time": "01:00:58.150 --> 01:00:59.459", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture7", "index": 837, "time": "01:01:00.140 --> 01:01:01.089", "speaker": "Alexander Vasserman", "text": "again."}, {"source_name": "lecture7", "index": 838, "time": "01:01:01.470 --> 01:01:05.440", "speaker": "Alexander Vasserman", "text": "or the way you're defining it. I haven't to me it will match anything."}, {"source_name": "lecture7", "index": 839, "time": "01:01:05.850 --> 01:01:07.200", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 840, "time": "01:01:07.280 --> 01:01:17.500", "speaker": "Alexander Vasserman", "text": "yeah, maybe not what we want. Then maybe you should go and change the definition of a string match function, or like the implementation thing match function."}, {"source_name": "lecture7", "index": 841, "time": "01:01:17.750 --> 01:01:23.460", "speaker": "Alexander Vasserman", "text": "But for now this is what it is. And so that's kind of document."}, {"source_name": "lecture7", "index": 842, "time": "01:01:23.510 --> 01:01:26.640", "speaker": "Alexander Vasserman", "text": "this behavior for us."}, {"source_name": "lecture7", "index": 843, "time": "01:01:31.600 --> 01:01:32.669", "speaker": "Alexander Vasserman", "text": "Hopefully."}, {"source_name": "lecture7", "index": 844, "time": "01:01:32.800 --> 01:01:35.180", "speaker": "Alexander Vasserman", "text": "this makes sense."}, {"source_name": "lecture7", "index": 845, "time": "01:01:36.750 --> 01:01:39.719", "speaker": "Alexander Vasserman", "text": "I asked you to also all right."}, {"source_name": "lecture7", "index": 846, "time": "01:01:40.070 --> 01:01:45.809", "speaker": "Alexander Vasserman", "text": "all the the same tasks for the bull in our case."}, {"source_name": "lecture7", "index": 847, "time": "01:01:46.010 --> 01:01:47.060", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 848, "time": "01:01:47.600 --> 01:01:48.870", "speaker": "Alexander Vasserman", "text": "let's say."}, {"source_name": "lecture7", "index": 849, "time": "01:01:56.830 --> 01:02:00.000", "speaker": "Alexander Vasserman", "text": "and what that meant is, of course, just"}, {"source_name": "lecture7", "index": 850, "time": "01:02:00.340 --> 01:02:02.959", "speaker": "Alexander Vasserman", "text": "instead of searching marriage, using"}, {"source_name": "lecture7", "index": 851, "time": "01:02:04.080 --> 01:02:07.929", "speaker": "Alexander Vasserman", "text": "bull in term match here, and for this particular case."}, {"source_name": "lecture7", "index": 852, "time": "01:02:08.400 --> 01:02:13.410", "speaker": "Alexander Vasserman", "text": "it would be the same outcome. So we still asserting true"}, {"source_name": "lecture7", "index": 853, "time": "01:02:13.950 --> 01:02:14.660", "speaker": "Alexander Vasserman", "text": "right."}, {"source_name": "lecture7", "index": 854, "time": "01:02:14.740 --> 01:02:19.489", "speaker": "Alexander Vasserman", "text": "By the way. I think there was some confusion about how"}, {"source_name": "lecture7", "index": 855, "time": "01:02:19.870 --> 01:02:23.700", "speaker": "Alexander Vasserman", "text": "tasks actually what that's supposed to be."}, {"source_name": "lecture7", "index": 856, "time": "01:02:24.500 --> 01:02:28.289", "speaker": "Alexander Vasserman", "text": "So we always want tasks to pass"}, {"source_name": "lecture7", "index": 857, "time": "01:02:28.480 --> 01:02:33.070", "speaker": "Alexander Vasserman", "text": "right. So what we are asserting is the expected behavior."}, {"source_name": "lecture7", "index": 858, "time": "01:02:34.940 --> 01:02:38.349", "speaker": "Alexander Vasserman", "text": "and we expect all this test to pass."}, {"source_name": "lecture7", "index": 859, "time": "01:02:38.530 --> 01:02:45.910", "speaker": "Alexander Vasserman", "text": "Zoom. This is kind of our check that functions or or our code works the way it should be"}, {"source_name": "lecture7", "index": 860, "time": "01:02:46.090 --> 01:02:46.839", "speaker": "Alexander Vasserman", "text": "right."}, {"source_name": "lecture7", "index": 861, "time": "01:02:46.870 --> 01:02:48.020", "speaker": "Alexander Vasserman", "text": "It's"}, {"source_name": "lecture7", "index": 862, "time": "01:02:48.300 --> 01:02:53.990", "speaker": "Alexander Vasserman", "text": "not the same as kind of writing some examples where sometimes you want."}, {"source_name": "lecture7", "index": 863, "time": "01:02:54.020 --> 01:02:54.859", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 864, "time": "01:02:55.240 --> 01:03:06.299", "speaker": "Alexander Vasserman", "text": "maybe different things to happen here. We know exactly what we want to happen, and these assert functions are a way for us to."}, {"source_name": "lecture7", "index": 865, "time": "01:03:06.440 --> 01:03:08.440", "speaker": "Alexander Vasserman", "text": "I have a lot of these"}, {"source_name": "lecture7", "index": 866, "time": "01:03:08.490 --> 01:03:13.899", "speaker": "Alexander Vasserman", "text": "assertions a lot of these test cases and run them all"}, {"source_name": "lecture7", "index": 867, "time": "01:03:14.140 --> 01:03:15.629", "speaker": "Alexander Vasserman", "text": "this like one click."}, {"source_name": "lecture7", "index": 868, "time": "01:03:15.660 --> 01:03:20.599", "speaker": "Alexander Vasserman", "text": "Let's say right, so I can run everything in this class, and"}, {"source_name": "lecture7", "index": 869, "time": "01:03:20.670 --> 01:03:24.610", "speaker": "Alexander Vasserman", "text": "you know everything passes, so everything is good."}, {"source_name": "lecture7", "index": 870, "time": "01:03:26.500 --> 01:03:30.270", "speaker": "Alexander Vasserman", "text": "That's kind of the the use case. Why, we're using unit tests."}, {"source_name": "lecture7", "index": 871, "time": "01:03:30.420 --> 01:03:31.430", "speaker": "Alexander Vasserman", "text": "If"}, {"source_name": "lecture7", "index": 872, "time": "01:03:31.860 --> 01:03:33.709", "speaker": "Alexander Vasserman", "text": "you start saying."}, {"source_name": "lecture7", "index": 873, "time": "01:03:34.180 --> 01:03:35.339", "speaker": "Alexander Vasserman", "text": "you know kind of"}, {"source_name": "lecture7", "index": 874, "time": "01:03:37.060 --> 01:03:39.829", "speaker": "Alexander Vasserman", "text": "yeah, they so basically, did."}, {"source_name": "lecture7", "index": 875, "time": "01:03:40.150 --> 01:03:41.029", "speaker": "Alexander Vasserman", "text": "If"}, {"source_name": "lecture7", "index": 876, "time": "01:03:42.200 --> 01:03:48.769", "speaker": "Alexander Vasserman", "text": "something is wrong. We want to see only if something is wrong, right? If everything is right, we just want to see."}, {"source_name": "lecture7", "index": 877, "time": "01:03:48.840 --> 01:03:50.270", "speaker": "Alexander Vasserman", "text": "Okay as well."}, {"source_name": "lecture7", "index": 878, "time": "01:03:52.100 --> 01:03:53.140", "speaker": "Alexander Vasserman", "text": "Does that"}, {"source_name": "lecture7", "index": 879, "time": "01:03:54.530 --> 01:03:56.409", "speaker": "Alexander Vasserman", "text": "make sense to everyone."}, {"source_name": "lecture7", "index": 880, "time": "01:03:58.030 --> 01:04:01.649", "speaker": "Alexander Vasserman", "text": "So the idea of unit testing, or"}, {"source_name": "lecture7", "index": 881, "time": "01:04:01.720 --> 01:04:03.659", "speaker": "Alexander Vasserman", "text": "might be a little confusing."}, {"source_name": "lecture7", "index": 882, "time": "01:04:05.820 --> 01:04:07.310", "speaker": "Alexander Vasserman", "text": "Let me just"}, {"source_name": "lecture7", "index": 883, "time": "01:04:07.680 --> 01:04:08.600", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 884, "time": "01:04:11.590 --> 01:04:14.489", "speaker": "Alexander Vasserman", "text": "or do the also the"}, {"source_name": "lecture7", "index": 885, "time": "01:04:15.750 --> 01:04:18.010", "speaker": "Alexander Vasserman", "text": "upstream kind of use case."}, {"source_name": "lecture7", "index": 886, "time": "01:04:18.100 --> 01:04:19.490", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture7", "index": 887, "time": "01:04:20.040 --> 01:04:22.250", "speaker": "Alexander Vasserman", "text": "if the document is"}, {"source_name": "lecture7", "index": 888, "time": "01:04:27.880 --> 01:04:28.669", "speaker": "Alexander Vasserman", "text": "right."}, {"source_name": "lecture7", "index": 889, "time": "01:04:28.960 --> 01:04:30.009", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture7", "index": 890, "time": "01:04:30.850 --> 01:04:31.870", "speaker": "Alexander Vasserman", "text": "here"}, {"source_name": "lecture7", "index": 891, "time": "01:04:32.770 --> 01:04:33.950", "speaker": "Alexander Vasserman", "text": "for the"}, {"source_name": "lecture7", "index": 892, "time": "01:04:34.130 --> 01:04:35.449", "speaker": "Alexander Vasserman", "text": "Buddha in turn."}, {"source_name": "lecture7", "index": 893, "time": "01:04:35.670 --> 01:04:36.930", "speaker": "Alexander Vasserman", "text": "it's."}, {"source_name": "lecture7", "index": 894, "time": "01:04:38.100 --> 01:04:41.960", "speaker": "Alexander Vasserman", "text": "We expect it not to match, and so they'll say"}, {"source_name": "lecture7", "index": 895, "time": "01:04:42.200 --> 01:04:43.580", "speaker": "Alexander Vasserman", "text": "I started false"}, {"source_name": "lecture7", "index": 896, "time": "01:04:43.810 --> 01:04:54.789", "speaker": "Alexander Vasserman", "text": "right? So that is one of the cases where the 2 functions return something different, right? And that's one of the things that explain"}, {"source_name": "lecture7", "index": 897, "time": "01:04:54.820 --> 01:04:57.169", "speaker": "Alexander Vasserman", "text": "the difference between the functions."}, {"source_name": "lecture7", "index": 898, "time": "01:04:59.080 --> 01:05:05.380", "speaker": "Alexander Vasserman", "text": "I also asked, though for potentially multiple terms to maybe"}, {"source_name": "lecture7", "index": 899, "time": "01:05:05.850 --> 01:05:06.709", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 900, "time": "01:05:07.250 --> 01:05:08.430", "speaker": "Alexander Vasserman", "text": "something like"}, {"source_name": "lecture7", "index": 901, "time": "01:05:09.010 --> 01:05:09.879", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 902, "time": "01:05:20.530 --> 01:05:21.740", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture7", "index": 903, "time": "01:05:32.960 --> 01:05:34.509", "speaker": "Alexander Vasserman", "text": "oh! So that"}, {"source_name": "lecture7", "index": 904, "time": "01:05:34.610 --> 01:05:35.589", "speaker": "Alexander Vasserman", "text": "a shoot"}, {"source_name": "lecture7", "index": 905, "time": "01:05:36.400 --> 01:05:37.259", "speaker": "Alexander Vasserman", "text": "Well."}, {"source_name": "lecture7", "index": 906, "time": "01:05:37.470 --> 01:05:38.470", "speaker": "Alexander Vasserman", "text": "knowledge."}, {"source_name": "lecture7", "index": 907, "time": "01:05:39.050 --> 01:05:39.879", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 908, "time": "01:05:43.930 --> 01:05:45.160", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture7", "index": 909, "time": "01:05:50.190 --> 01:05:52.660", "speaker": "Alexander Vasserman", "text": "but we might want to also."}, {"source_name": "lecture7", "index": 910, "time": "01:05:52.720 --> 01:05:54.610", "speaker": "Alexander Vasserman", "text": "Oh, that's the case when"}, {"source_name": "lecture7", "index": 911, "time": "01:05:54.720 --> 01:05:55.919", "speaker": "Alexander Vasserman", "text": "one"}, {"source_name": "lecture7", "index": 912, "time": "01:05:56.790 --> 01:05:57.549", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 913, "time": "01:06:00.460 --> 01:06:01.379", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 914, "time": "01:06:06.970 --> 01:06:11.769", "speaker": "Alexander Vasserman", "text": "one term matches and one doesn't so if we create for"}, {"source_name": "lecture7", "index": 915, "time": "01:06:12.900 --> 01:06:13.970", "speaker": "Alexander Vasserman", "text": "for green."}, {"source_name": "lecture7", "index": 916, "time": "01:06:14.790 --> 01:06:16.300", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture7", "index": 917, "time": "01:06:16.470 --> 01:06:17.370", "speaker": "Alexander Vasserman", "text": "that's"}, {"source_name": "lecture7", "index": 918, "time": "01:06:17.730 --> 01:06:20.090", "speaker": "Alexander Vasserman", "text": "where it could be."}, {"source_name": "lecture7", "index": 919, "time": "01:06:21.460 --> 01:06:23.639", "speaker": "Alexander Vasserman", "text": "So. All of these are, you know, good"}, {"source_name": "lecture7", "index": 920, "time": "01:06:23.680 --> 01:06:25.670", "speaker": "Alexander Vasserman", "text": "kind of test cases to have."}, {"source_name": "lecture7", "index": 921, "time": "01:06:25.710 --> 01:06:28.709", "speaker": "Alexander Vasserman", "text": "and in particular."}, {"source_name": "lecture7", "index": 922, "time": "01:06:29.770 --> 01:06:32.710", "speaker": "Alexander Vasserman", "text": "if we are on all the tests."}, {"source_name": "lecture7", "index": 923, "time": "01:06:33.080 --> 01:06:34.909", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture7", "index": 924, "time": "01:06:35.310 --> 01:06:37.049", "speaker": "Alexander Vasserman", "text": "they also"}, {"source_name": "lecture7", "index": 925, "time": "01:06:37.550 --> 01:06:40.309", "speaker": "Alexander Vasserman", "text": "justify that when we change"}, {"source_name": "lecture7", "index": 926, "time": "01:06:40.450 --> 01:06:44.660", "speaker": "Alexander Vasserman", "text": "our implementation of bull and match, or"}, {"source_name": "lecture7", "index": 927, "time": "01:06:44.810 --> 01:06:45.899", "speaker": "Alexander Vasserman", "text": "all right."}, {"source_name": "lecture7", "index": 928, "time": "01:06:46.030 --> 01:06:49.630", "speaker": "Alexander Vasserman", "text": "we actually did not mess anything up."}, {"source_name": "lecture7", "index": 929, "time": "01:06:49.860 --> 01:06:57.649", "speaker": "Alexander Vasserman", "text": "So that's kind of one of the point of unit testing. So when we did this change for bulletin term match."}, {"source_name": "lecture7", "index": 930, "time": "01:06:58.820 --> 01:07:01.750", "speaker": "Alexander Vasserman", "text": "everything still works the same, I mean."}, {"source_name": "lecture7", "index": 931, "time": "01:07:01.770 --> 01:07:16.579", "speaker": "Alexander Vasserman", "text": "So maybe I should have actually done the exercises, not visit order, and ask you to do the tests first. This way you would actually be able to run the test to confirm that logic did not change."}, {"source_name": "lecture7", "index": 932, "time": "01:07:18.640 --> 01:07:19.410", "speaker": "Alexander Vasserman", "text": "All right."}, {"source_name": "lecture7", "index": 933, "time": "01:07:19.430 --> 01:07:21.340", "speaker": "Alexander Vasserman", "text": "Hopefully, all of this makes sense."}, {"source_name": "lecture7", "index": 934, "time": "01:07:23.590 --> 01:07:25.799", "speaker": "Alexander Vasserman", "text": "Any questions about homework on."}, {"source_name": "lecture7", "index": 935, "time": "01:07:31.160 --> 01:07:39.709", "speaker": "Alexander Vasserman", "text": "Yeah, if something is still not clear or like, you know, kind of doesn't make sense, and you feel like you wouldn't"}, {"source_name": "lecture7", "index": 936, "time": "01:07:39.930 --> 01:07:41.909", "speaker": "Alexander Vasserman", "text": "being able to"}, {"source_name": "lecture7", "index": 937, "time": "01:07:42.000 --> 01:07:43.459", "speaker": "Alexander Vasserman", "text": "do it."}, {"source_name": "lecture7", "index": 938, "time": "01:07:43.710 --> 01:07:45.220", "speaker": "Alexander Vasserman", "text": "you know. Now."}, {"source_name": "lecture7", "index": 939, "time": "01:07:45.330 --> 01:07:54.910", "speaker": "Alexander Vasserman", "text": "right so please reach out to me, and you know kind of. We can either set up office hours or something."}, {"source_name": "lecture7", "index": 940, "time": "01:07:56.390 --> 01:08:00.079", "speaker": "Alexander Vasserman", "text": "I know that kind of. I reviewed it fairly quickly."}, {"source_name": "lecture7", "index": 941, "time": "01:08:00.150 --> 01:08:09.979", "speaker": "Alexander Vasserman", "text": "so it You might still have questions, and maybe, or maybe not quite understanding everything. Please reach out if if that's the case."}, {"source_name": "lecture7", "index": 942, "time": "01:08:12.320 --> 01:08:13.149", "speaker": "Alexander Vasserman", "text": "all right."}, {"source_name": "lecture7", "index": 943, "time": "01:08:14.040 --> 01:08:17.229", "speaker": "Alexander Vasserman", "text": "So if there are no questions right now."}, {"source_name": "lecture7", "index": 944, "time": "01:08:17.330 --> 01:08:18.979", "speaker": "Alexander Vasserman", "text": "let's switch"}, {"source_name": "lecture7", "index": 945, "time": "01:08:19.050 --> 01:08:19.990", "speaker": "Alexander Vasserman", "text": "back"}, {"source_name": "lecture7", "index": 946, "time": "01:08:20.270 --> 01:08:21.290", "speaker": "Alexander Vasserman", "text": "to"}, {"source_name": "lecture7", "index": 947, "time": "01:08:21.310 --> 01:08:22.269", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture7", "index": 948, "time": "01:08:22.790 --> 01:08:23.599", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 949, "time": "01:08:23.920 --> 01:08:24.700", "speaker": "Alexander Vasserman", "text": "our"}, {"source_name": "lecture7", "index": 950, "time": "01:08:25.260 --> 01:08:26.139", "speaker": "Alexander Vasserman", "text": "search!"}, {"source_name": "lecture7", "index": 951, "time": "01:08:27.380 --> 01:08:28.330", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 952, "time": "01:08:29.500 --> 01:08:32.950", "speaker": "Alexander Vasserman", "text": "right. So search implementation! And"}, {"source_name": "lecture7", "index": 953, "time": "01:08:34.689 --> 01:08:38.469", "speaker": "Alexander Vasserman", "text": "oh, first let's remind ourselves."}, {"source_name": "lecture7", "index": 954, "time": "01:08:38.670 --> 01:08:39.559", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 955, "time": "01:08:42.520 --> 01:08:43.980", "speaker": "Alexander Vasserman", "text": "what you were doing"}, {"source_name": "lecture7", "index": 956, "time": "01:08:44.319 --> 01:08:45.490", "speaker": "Alexander Vasserman", "text": "so."}, {"source_name": "lecture7", "index": 957, "time": "01:08:49.399 --> 01:08:50.330", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 958, "time": "01:08:50.390 --> 01:08:54.270", "speaker": "Alexander Vasserman", "text": "we're! We're implementing the indexing process. Right? So we had"}, {"source_name": "lecture7", "index": 959, "time": "01:08:54.370 --> 01:09:02.110", "speaker": "Alexander Vasserman", "text": "3 parts to it: text acquisition, which is kind of reading the data in"}, {"source_name": "lecture7", "index": 960, "time": "01:09:02.340 --> 01:09:04.250", "speaker": "Alexander Vasserman", "text": "text transformation."}, {"source_name": "lecture7", "index": 961, "time": "01:09:04.279 --> 01:09:09.969", "speaker": "Alexander Vasserman", "text": "so that kind of converts and normalizes the text."}, {"source_name": "lecture7", "index": 962, "time": "01:09:12.250 --> 01:09:13.250", "speaker": "Alexander Vasserman", "text": "Now"}, {"source_name": "lecture7", "index": 963, "time": "01:09:13.439 --> 01:09:19.839", "speaker": "Alexander Vasserman", "text": "it and potentially space it into or individual tokens, right? So basically"}, {"source_name": "lecture7", "index": 964, "time": "01:09:19.870 --> 01:09:21.750", "speaker": "Alexander Vasserman", "text": "what the"}, {"source_name": "lecture7", "index": 965, "time": "01:09:21.870 --> 01:09:23.729", "speaker": "Alexander Vasserman", "text": "All are doing"}, {"source_name": "lecture7", "index": 966, "time": "01:09:23.960 --> 01:09:26.389", "speaker": "Alexander Vasserman", "text": "in bullying."}, {"source_name": "lecture7", "index": 967, "time": "01:09:26.460 --> 01:09:28.799", "speaker": "Alexander Vasserman", "text": "bullying, match logic"}, {"source_name": "lecture7", "index": 968, "time": "01:09:30.529 --> 01:09:31.630", "speaker": "Alexander Vasserman", "text": "and then"}, {"source_name": "lecture7", "index": 969, "time": "01:09:31.729 --> 01:09:33.179", "speaker": "Alexander Vasserman", "text": "index creation"}, {"source_name": "lecture7", "index": 970, "time": "01:09:33.420 --> 01:09:35.869", "speaker": "Alexander Vasserman", "text": "basically is"}, {"source_name": "lecture7", "index": 971, "time": "01:09:36.090 --> 01:09:41.220", "speaker": "Alexander Vasserman", "text": "converting the documents to some structure that"}, {"source_name": "lecture7", "index": 972, "time": "01:09:42.859 --> 01:09:44.919", "speaker": "Alexander Vasserman", "text": "helps us search quickly."}, {"source_name": "lecture7", "index": 973, "time": "01:09:45.729 --> 01:09:48.969", "speaker": "Alexander Vasserman", "text": "And this was kind of the"}, {"source_name": "lecture7", "index": 974, "time": "01:09:49.290 --> 01:09:50.439", "speaker": "Alexander Vasserman", "text": "illustration."}, {"source_name": "lecture7", "index": 975, "time": "01:09:50.950 --> 01:09:58.739", "speaker": "Alexander Vasserman", "text": "And in particular, what we talked about is that the there are 2 outputs, document"}, {"source_name": "lecture7", "index": 976, "time": "01:09:58.830 --> 01:10:01.459", "speaker": "Alexander Vasserman", "text": "data, store and index"}, {"source_name": "lecture7", "index": 977, "time": "01:10:02.370 --> 01:10:04.109", "speaker": "Alexander Vasserman", "text": "great. And so"}, {"source_name": "lecture7", "index": 978, "time": "01:10:04.290 --> 01:10:08.180", "speaker": "Alexander Vasserman", "text": "document data store is just kind of a way to"}, {"source_name": "lecture7", "index": 979, "time": "01:10:08.230 --> 01:10:10.620", "speaker": "Alexander Vasserman", "text": "all store things of the text acquisition"}, {"source_name": "lecture7", "index": 980, "time": "01:10:10.770 --> 01:10:17.429", "speaker": "Alexander Vasserman", "text": "kind of a standardized place for us to have all of our"}, {"source_name": "lecture7", "index": 981, "time": "01:10:17.960 --> 01:10:19.710", "speaker": "Alexander Vasserman", "text": "data in one place."}, {"source_name": "lecture7", "index": 982, "time": "01:10:19.750 --> 01:10:22.960", "speaker": "Alexander Vasserman", "text": "And then the index is what allows us to search."}, {"source_name": "lecture7", "index": 983, "time": "01:10:22.980 --> 01:10:24.820", "speaker": "Alexander Vasserman", "text": "and then kind of just a"}, {"source_name": "lecture7", "index": 984, "time": "01:10:24.840 --> 01:10:29.409", "speaker": "Alexander Vasserman", "text": "review for the query process. Those those 2 things are the"}, {"source_name": "lecture7", "index": 985, "time": "01:10:29.460 --> 01:10:32.130", "speaker": "Alexander Vasserman", "text": "inputs that you're using during the query"}, {"source_name": "lecture7", "index": 986, "time": "01:10:32.480 --> 01:10:33.780", "speaker": "Alexander Vasserman", "text": "for"}, {"source_name": "lecture7", "index": 987, "time": "01:10:33.880 --> 01:10:34.719", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 988, "time": "01:10:35.040 --> 01:10:37.620", "speaker": "Alexander Vasserman", "text": "for ranking or or"}, {"source_name": "lecture7", "index": 989, "time": "01:10:37.670 --> 01:10:42.289", "speaker": "Alexander Vasserman", "text": "we we are using the index. So this is how we get the"}, {"source_name": "lecture7", "index": 990, "time": "01:10:42.370 --> 01:10:50.559", "speaker": "Alexander Vasserman", "text": "which documents all should be returned, and the document data store is part of the presentation for the user"}, {"source_name": "lecture7", "index": 991, "time": "01:10:53.200 --> 01:10:54.500", "speaker": "Alexander Vasserman", "text": "Well."}, {"source_name": "lecture7", "index": 992, "time": "01:10:55.210 --> 01:10:56.150", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture7", "index": 993, "time": "01:10:57.550 --> 01:10:58.899", "speaker": "Alexander Vasserman", "text": "what you've done"}, {"source_name": "lecture7", "index": 994, "time": "01:11:00.210 --> 01:11:01.290", "speaker": "Alexander Vasserman", "text": "so far"}, {"source_name": "lecture7", "index": 995, "time": "01:11:01.770 --> 01:11:04.139", "speaker": "Alexander Vasserman", "text": "was basically outline"}, {"source_name": "lecture7", "index": 996, "time": "01:11:05.380 --> 01:11:07.090", "speaker": "Alexander Vasserman", "text": "this in"}, {"source_name": "lecture7", "index": 997, "time": "01:11:09.080 --> 01:11:10.700", "speaker": "Alexander Vasserman", "text": "in terms of functions."}, {"source_name": "lecture7", "index": 998, "time": "01:11:11.380 --> 01:11:12.969", "speaker": "Alexander Vasserman", "text": "We said that"}, {"source_name": "lecture7", "index": 999, "time": "01:11:14.640 --> 01:11:15.519", "speaker": "Alexander Vasserman", "text": "oh"}, {"source_name": "lecture7", "index": 1000, "time": "01:11:15.580 --> 01:11:16.610", "speaker": "Alexander Vasserman", "text": "class"}, {"source_name": "lecture7", "index": 1001, "time": "01:11:17.180 --> 01:11:18.519", "speaker": "Alexander Vasserman", "text": "source"}, {"source_name": "lecture7", "index": 1002, "time": "01:11:18.590 --> 01:11:22.650", "speaker": "Alexander Vasserman", "text": "which we will use to read documents."}, {"source_name": "lecture7", "index": 1003, "time": "01:11:22.880 --> 01:11:24.510", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 1004, "time": "01:11:26.620 --> 01:11:27.460", "speaker": "Alexander Vasserman", "text": "all"}, {"source_name": "lecture7", "index": 1005, "time": "01:11:27.990 --> 01:11:28.880", "speaker": "Alexander Vasserman", "text": "then"}, {"source_name": "lecture7", "index": 1006, "time": "01:11:29.340 --> 01:11:32.910", "speaker": "Alexander Vasserman", "text": "we'll have a function that transforms documents"}, {"source_name": "lecture7", "index": 1007, "time": "01:11:33.030 --> 01:11:35.390", "speaker": "Alexander Vasserman", "text": "and the function that paid index."}, {"source_name": "lecture7", "index": 1008, "time": "01:11:35.440 --> 01:11:42.849", "speaker": "Alexander Vasserman", "text": "and then the output of the indexing process will be the document collection that we paid, and the"}, {"source_name": "lecture7", "index": 1009, "time": "01:11:42.980 --> 01:11:44.760", "speaker": "Alexander Vasserman", "text": "and me for. I created"}, {"source_name": "lecture7", "index": 1010, "time": "01:11:44.780 --> 01:11:45.889", "speaker": "Alexander Vasserman", "text": "several"}, {"source_name": "lecture7", "index": 1011, "time": "01:11:46.330 --> 01:11:47.770", "speaker": "Alexander Vasserman", "text": "kind of dummy"}, {"source_name": "lecture7", "index": 1012, "time": "01:11:47.920 --> 01:11:50.689", "speaker": "Alexander Vasserman", "text": "our classes and the functions."}, {"source_name": "lecture7", "index": 1013, "time": "01:11:50.850 --> 01:11:51.559", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 1014, "time": "01:11:52.010 --> 01:11:54.470", "speaker": "Alexander Vasserman", "text": "that we will need to implement"}, {"source_name": "lecture7", "index": 1015, "time": "01:11:54.900 --> 01:11:57.380", "speaker": "Alexander Vasserman", "text": "to get this to work"}, {"source_name": "lecture7", "index": 1016, "time": "01:11:58.740 --> 01:11:59.500", "speaker": "Alexander Vasserman", "text": "right."}, {"source_name": "lecture7", "index": 1017, "time": "01:11:59.800 --> 01:12:00.760", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 1018, "time": "01:12:01.400 --> 01:12:02.349", "speaker": "Alexander Vasserman", "text": "let's"}, {"source_name": "lecture7", "index": 1019, "time": "01:12:03.410 --> 01:12:05.650", "speaker": "Alexander Vasserman", "text": "get into that."}, {"source_name": "lecture7", "index": 1020, "time": "01:12:06.210 --> 01:12:07.639", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture7", "index": 1021, "time": "01:12:10.000 --> 01:12:10.880", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 1022, "time": "01:12:10.940 --> 01:12:11.900", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture7", "index": 1023, "time": "01:12:18.580 --> 01:12:19.460", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 1024, "time": "01:12:22.530 --> 01:12:25.110", "speaker": "Alexander Vasserman", "text": "so for document collection."}, {"source_name": "lecture7", "index": 1025, "time": "01:12:25.350 --> 01:12:29.209", "speaker": "Alexander Vasserman", "text": "What we want to do is as we read"}, {"source_name": "lecture7", "index": 1026, "time": "01:12:29.910 --> 01:12:36.009", "speaker": "Alexander Vasserman", "text": "in documents from the source. We add them to document collection, so maybe"}, {"source_name": "lecture7", "index": 1027, "time": "01:12:39.030 --> 01:12:39.889", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 1028, "time": "01:12:41.840 --> 01:12:44.340", "speaker": "Alexander Vasserman", "text": "maybe they'll. They'll need to have a function"}, {"source_name": "lecture7", "index": 1029, "time": "01:12:45.350 --> 01:12:46.230", "speaker": "Alexander Vasserman", "text": "that's"}, {"source_name": "lecture7", "index": 1030, "time": "01:12:46.270 --> 01:12:47.080", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 1031, "time": "01:12:47.610 --> 01:12:50.249", "speaker": "Alexander Vasserman", "text": "is at document"}, {"source_name": "lecture7", "index": 1032, "time": "01:12:50.780 --> 01:12:52.230", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture7", "index": 1033, "time": "01:12:54.490 --> 01:12:55.800", "speaker": "Alexander Vasserman", "text": "has a document."}, {"source_name": "lecture7", "index": 1034, "time": "01:12:55.910 --> 01:13:02.060", "speaker": "Alexander Vasserman", "text": "and well, how do we store it? So maybe we we will need the place to store it"}, {"source_name": "lecture7", "index": 1035, "time": "01:13:02.170 --> 01:13:03.170", "speaker": "Alexander Vasserman", "text": "so."}, {"source_name": "lecture7", "index": 1036, "time": "01:13:03.220 --> 01:13:08.380", "speaker": "Alexander Vasserman", "text": "or in the initialization of the document collection. Let's say we'll have dogs"}, {"source_name": "lecture7", "index": 1037, "time": "01:13:08.400 --> 01:13:09.899", "speaker": "Alexander Vasserman", "text": "as the least"}, {"source_name": "lecture7", "index": 1038, "time": "01:13:09.990 --> 01:13:10.639", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture7", "index": 1039, "time": "01:13:14.210 --> 01:13:14.950", "speaker": "Alexander Vasserman", "text": "once."}, {"source_name": "lecture7", "index": 1040, "time": "01:13:15.860 --> 01:13:19.600", "speaker": "Alexander Vasserman", "text": "and the then a document is just"}, {"source_name": "lecture7", "index": 1041, "time": "01:13:20.200 --> 01:13:21.460", "speaker": "Alexander Vasserman", "text": "so."}, {"source_name": "lecture7", "index": 1042, "time": "01:13:22.120 --> 01:13:23.400", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture7", "index": 1043, "time": "01:13:27.710 --> 01:13:28.580", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 1044, "time": "01:13:29.560 --> 01:13:30.880", "speaker": "Alexander Vasserman", "text": "is everyone"}, {"source_name": "lecture7", "index": 1045, "time": "01:13:31.040 --> 01:13:35.110", "speaker": "Alexander Vasserman", "text": "familiar with the syntax here? So"}, {"source_name": "lecture7", "index": 1046, "time": "01:13:35.230 --> 01:13:38.269", "speaker": "Alexander Vasserman", "text": "again, kind of using classes"}, {"source_name": "lecture7", "index": 1047, "time": "01:13:38.300 --> 01:13:42.609", "speaker": "Alexander Vasserman", "text": "the this special in need function that is called"}, {"source_name": "lecture7", "index": 1048, "time": "01:13:42.720 --> 01:13:44.459", "speaker": "Alexander Vasserman", "text": "of and all"}, {"source_name": "lecture7", "index": 1049, "time": "01:13:45.120 --> 01:13:46.019", "speaker": "Alexander Vasserman", "text": "on"}, {"source_name": "lecture7", "index": 1050, "time": "01:13:47.290 --> 01:13:49.270", "speaker": "Alexander Vasserman", "text": "yeah, new classes in shaded."}, {"source_name": "lecture7", "index": 1051, "time": "01:13:49.730 --> 01:13:50.690", "speaker": "Alexander Vasserman", "text": "I mean already."}, {"source_name": "lecture7", "index": 1052, "time": "01:13:50.780 --> 01:13:53.049", "speaker": "Amirali DJalilvand", "text": "Can you go over how the in it"}, {"source_name": "lecture7", "index": 1053, "time": "01:13:53.160 --> 01:13:54.920", "speaker": "Amirali DJalilvand", "text": "function works again?"}, {"source_name": "lecture7", "index": 1054, "time": "01:13:55.240 --> 01:13:57.160", "speaker": "Alexander Vasserman", "text": "Yes. So"}, {"source_name": "lecture7", "index": 1055, "time": "01:13:57.840 --> 01:14:02.440", "speaker": "Alexander Vasserman", "text": "basically, when we are creating a document collection, we can say."}, {"source_name": "lecture7", "index": 1056, "time": "01:14:02.520 --> 01:14:03.340", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 1057, "time": "01:14:08.880 --> 01:14:16.699", "speaker": "Alexander Vasserman", "text": "so that's how you create an object, right? So you just say the name of the object. And"}, {"source_name": "lecture7", "index": 1058, "time": "01:14:17.130 --> 01:14:18.829", "speaker": "Alexander Vasserman", "text": "in parentheses"}, {"source_name": "lecture7", "index": 1059, "time": "01:14:18.900 --> 01:14:20.330", "speaker": "Alexander Vasserman", "text": "Oh, basically the"}, {"source_name": "lecture7", "index": 1060, "time": "01:14:20.740 --> 01:14:25.780", "speaker": "Alexander Vasserman", "text": "you can have either arguments or in this particular case. There is no arguments"}, {"source_name": "lecture7", "index": 1061, "time": "01:14:26.000 --> 01:14:27.600", "speaker": "Alexander Vasserman", "text": "to the constructor."}, {"source_name": "lecture7", "index": 1062, "time": "01:14:27.900 --> 01:14:32.159", "speaker": "Alexander Vasserman", "text": "So this in it function is called constructor."}, {"source_name": "lecture7", "index": 1063, "time": "01:14:32.220 --> 01:14:37.870", "speaker": "Alexander Vasserman", "text": "and that's the function that is actually executed when you say something like this."}, {"source_name": "lecture7", "index": 1064, "time": "01:14:38.040 --> 01:14:40.480", "speaker": "Alexander Vasserman", "text": "right? So this is"}, {"source_name": "lecture7", "index": 1065, "time": "01:14:40.750 --> 01:14:41.670", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 1066, "time": "01:14:42.010 --> 01:14:45.009", "speaker": "Alexander Vasserman", "text": "essentially populating the South object."}, {"source_name": "lecture7", "index": 1067, "time": "01:14:45.810 --> 01:14:48.120", "speaker": "Alexander Vasserman", "text": "obviously initialized"}, {"source_name": "lecture7", "index": 1068, "time": "01:14:48.210 --> 01:14:49.130", "speaker": "Alexander Vasserman", "text": "data."}, {"source_name": "lecture7", "index": 1069, "time": "01:14:49.350 --> 01:14:53.810", "speaker": "Alexander Vasserman", "text": "And so anything that we want to"}, {"source_name": "lecture7", "index": 1070, "time": "01:14:53.910 --> 01:14:56.999", "speaker": "Alexander Vasserman", "text": "or use in the class and"}, {"source_name": "lecture7", "index": 1071, "time": "01:14:57.070 --> 01:15:01.569", "speaker": "Alexander Vasserman", "text": "in the class we want to be part of the"}, {"source_name": "lecture7", "index": 1072, "time": "01:15:01.650 --> 01:15:03.770", "speaker": "Alexander Vasserman", "text": "or in it function."}, {"source_name": "lecture7", "index": 1073, "time": "01:15:03.880 --> 01:15:06.110", "speaker": "Alexander Vasserman", "text": "and then we can use"}, {"source_name": "lecture7", "index": 1074, "time": "01:15:06.230 --> 01:15:13.649", "speaker": "Alexander Vasserman", "text": "any of those fields that we're initialized in other functions in our class through this South."}, {"source_name": "lecture7", "index": 1075, "time": "01:15:13.720 --> 01:15:14.519", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 1076, "time": "01:15:14.720 --> 01:15:15.740", "speaker": "Alexander Vasserman", "text": "reference!"}, {"source_name": "lecture7", "index": 1077, "time": "01:15:16.410 --> 01:15:18.709", "speaker": "Alexander Vasserman", "text": "So the way we are doing it here."}, {"source_name": "lecture7", "index": 1078, "time": "01:15:22.900 --> 01:15:24.660", "speaker": "Alexander Vasserman", "text": "any other questions."}, {"source_name": "lecture7", "index": 1079, "time": "01:15:30.660 --> 01:15:33.330", "speaker": "Alexander Vasserman", "text": "So began kind of fairly"}, {"source_name": "lecture7", "index": 1080, "time": "01:15:33.480 --> 01:15:52.729", "speaker": "Alexander Vasserman", "text": "simple like, you know, they're not really doing anything, but they're starting to build up very simple things, and they'll be iterating to make things more interesting and more complicated. But you know kind of starting with the"}, {"source_name": "lecture7", "index": 1081, "time": "01:15:53.840 --> 01:15:55.010", "speaker": "Alexander Vasserman", "text": "a simple"}, {"source_name": "lecture7", "index": 1082, "time": "01:15:55.110 --> 01:15:55.920", "speaker": "Alexander Vasserman", "text": "stuff."}, {"source_name": "lecture7", "index": 1083, "time": "01:15:55.940 --> 01:15:56.920", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 1084, "time": "01:15:57.150 --> 01:15:59.420", "speaker": "Alexander Vasserman", "text": "for reading documents."}, {"source_name": "lecture7", "index": 1085, "time": "01:15:59.680 --> 01:16:00.929", "speaker": "Alexander Vasserman", "text": "maybe"}, {"source_name": "lecture7", "index": 1086, "time": "01:16:03.450 --> 01:16:05.849", "speaker": "Alexander Vasserman", "text": "what we want is."}, {"source_name": "lecture7", "index": 1087, "time": "01:16:06.230 --> 01:16:11.779", "speaker": "Alexander Vasserman", "text": "So we looked at. We keep small Wikipedia corpus before"}, {"source_name": "lecture7", "index": 1088, "time": "01:16:11.830 --> 01:16:13.540", "speaker": "Alexander Vasserman", "text": "right, and"}, {"source_name": "lecture7", "index": 1089, "time": "01:16:14.050 --> 01:16:16.329", "speaker": "Alexander Vasserman", "text": "so maybe we will implement"}, {"source_name": "lecture7", "index": 8, "time": "01:16:16.440 --> 01:16:17.170", "speaker": "Alexander Vasserman", "text": "so maybe we will implement"}, {"source_name": "lecture7", "index": 1091, "time": "01:16:17.300 --> 01:16:18.679", "speaker": "Alexander Vasserman", "text": "here."}, {"source_name": "lecture7", "index": 1092, "time": "01:16:19.460 --> 01:16:21.330", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture7", "index": 1093, "time": "01:16:21.520 --> 01:16:23.940", "speaker": "Alexander Vasserman", "text": "our source will have"}, {"source_name": "lecture7", "index": 1094, "time": "01:16:24.030 --> 01:16:24.969", "speaker": "Alexander Vasserman", "text": "a"}, {"source_name": "lecture7", "index": 1095, "time": "01:16:25.030 --> 01:16:25.889", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 1096, "time": "01:16:26.840 --> 01:16:28.460", "speaker": "Alexander Vasserman", "text": "let's actually call it"}, {"source_name": "lecture7", "index": 1097, "time": "01:16:29.220 --> 01:16:30.710", "speaker": "Alexander Vasserman", "text": "Okay, specific."}, {"source_name": "lecture7", "index": 1098, "time": "01:16:31.220 --> 01:16:32.090", "speaker": "Alexander Vasserman", "text": "plus."}, {"source_name": "lecture7", "index": 1099, "time": "01:16:32.150 --> 01:16:35.870", "speaker": "Alexander Vasserman", "text": "let's call it Vicki Source. And"}, {"source_name": "lecture7", "index": 1100, "time": "01:16:36.100 --> 01:16:37.030", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 1101, "time": "01:16:39.950 --> 01:16:41.530", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture7", "index": 1102, "time": "01:16:42.390 --> 01:16:45.220", "speaker": "Alexander Vasserman", "text": "or it will read"}, {"source_name": "lecture7", "index": 1103, "time": "01:16:45.370 --> 01:16:47.809", "speaker": "Alexander Vasserman", "text": "documents from"}, {"source_name": "lecture7", "index": 1104, "time": "01:16:47.910 --> 01:16:48.769", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture7", "index": 1105, "time": "01:16:49.210 --> 01:16:52.950", "speaker": "Alexander Vasserman", "text": "stream that refers to, or the"}, {"source_name": "lecture7", "index": 1106, "time": "01:16:53.350 --> 01:16:55.409", "speaker": "Alexander Vasserman", "text": "path where all"}, {"source_name": "lecture7", "index": 1107, "time": "01:16:56.730 --> 01:16:58.299", "speaker": "Alexander Vasserman", "text": "our documents leave"}, {"source_name": "lecture7", "index": 1108, "time": "01:16:58.590 --> 01:16:59.910", "speaker": "Alexander Vasserman", "text": "just to."}, {"source_name": "lecture7", "index": 1109, "time": "01:17:00.280 --> 01:17:02.209", "speaker": "Alexander Vasserman", "text": "Oh, remind you."}, {"source_name": "lecture7", "index": 1110, "time": "01:17:02.710 --> 01:17:03.969", "speaker": "Alexander Vasserman", "text": "Oh, kindness."}, {"source_name": "lecture7", "index": 1111, "time": "01:17:04.770 --> 01:17:07.049", "speaker": "Alexander Vasserman", "text": "this is how it looked."}, {"source_name": "lecture7", "index": 1112, "time": "01:17:07.280 --> 01:17:08.290", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 1113, "time": "01:17:08.380 --> 01:17:11.200", "speaker": "Alexander Vasserman", "text": "basically it's a. Json"}, {"source_name": "lecture7", "index": 1114, "time": "01:17:11.260 --> 01:17:12.369", "speaker": "Alexander Vasserman", "text": "at least."}, {"source_name": "lecture7", "index": 1115, "time": "01:17:12.540 --> 01:17:13.490", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture7", "index": 1116, "time": "01:17:13.860 --> 01:17:14.830", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 1117, "time": "01:17:15.780 --> 01:17:22.200", "speaker": "Alexander Vasserman", "text": "had multiple fields, and in particular in the text, was one of the fields where"}, {"source_name": "lecture7", "index": 1118, "time": "01:17:22.310 --> 01:17:25.250", "speaker": "Alexander Vasserman", "text": "that we want to to search over."}, {"source_name": "lecture7", "index": 1119, "time": "01:17:25.520 --> 01:17:27.410", "speaker": "Alexander Vasserman", "text": "Oh, primarily so."}, {"source_name": "lecture7", "index": 1120, "time": "01:17:27.480 --> 01:17:28.740", "speaker": "Alexander Vasserman", "text": "Oh, that's"}, {"source_name": "lecture7", "index": 1121, "time": "01:17:28.870 --> 01:17:29.690", "speaker": "Alexander Vasserman", "text": "what"}, {"source_name": "lecture7", "index": 1122, "time": "01:17:29.790 --> 01:17:31.510", "speaker": "Alexander Vasserman", "text": "we want to do."}, {"source_name": "lecture7", "index": 1123, "time": "01:17:31.830 --> 01:17:33.119", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture7", "index": 1124, "time": "01:17:35.030 --> 01:17:36.179", "speaker": "Alexander Vasserman", "text": "also"}, {"source_name": "lecture7", "index": 1125, "time": "01:17:36.640 --> 01:17:37.550", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 1126, "time": "01:17:37.650 --> 01:17:38.280", "speaker": "Alexander Vasserman", "text": "yeah."}, {"source_name": "lecture7", "index": 1127, "time": "01:17:40.890 --> 01:17:41.900", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 1128, "time": "01:17:42.560 --> 01:17:47.480", "speaker": "Alexander Vasserman", "text": "one other thing that I might want to do."}, {"source_name": "lecture7", "index": 1129, "time": "01:17:54.720 --> 01:17:56.189", "speaker": "Alexander Vasserman", "text": "I I might."}, {"source_name": "lecture7", "index": 1130, "time": "01:17:56.560 --> 01:17:59.030", "speaker": "Alexander Vasserman", "text": "I have a default"}, {"source_name": "lecture7", "index": 1131, "time": "01:18:00.240 --> 01:18:04.199", "speaker": "Alexander Vasserman", "text": "just because you know, most of the time."}, {"source_name": "lecture7", "index": 1132, "time": "01:18:06.700 --> 01:18:07.650", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 1133, "time": "01:18:11.040 --> 01:18:18.240", "speaker": "Alexander Vasserman", "text": "most of the time i'm going to or read it from the same place, so I might as well make it easy for myself"}, {"source_name": "lecture7", "index": 1134, "time": "01:18:18.450 --> 01:18:21.070", "speaker": "Alexander Vasserman", "text": "and that path in."}, {"source_name": "lecture7", "index": 1135, "time": "01:18:21.200 --> 01:18:22.460", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture7", "index": 1136, "time": "01:18:31.090 --> 01:18:32.170", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture7", "index": 1137, "time": "01:18:41.690 --> 01:18:47.719", "speaker": "Alexander Vasserman", "text": "one of the way to specify default. Arguments in Python is to say this"}, {"source_name": "lecture7", "index": 1138, "time": "01:18:47.770 --> 01:18:48.590", "speaker": "Alexander Vasserman", "text": "all"}, {"source_name": "lecture7", "index": 1139, "time": "01:18:48.730 --> 01:18:49.710", "speaker": "Alexander Vasserman", "text": "equal."}, {"source_name": "lecture7", "index": 1140, "time": "01:18:50.090 --> 01:18:52.980", "speaker": "Alexander Vasserman", "text": "either after the type or"}, {"source_name": "lecture7", "index": 1141, "time": "01:18:53.090 --> 01:18:55.219", "speaker": "Alexander Vasserman", "text": "or even without the type."}, {"source_name": "lecture7", "index": 1142, "time": "01:18:55.650 --> 01:19:00.509", "speaker": "Alexander Vasserman", "text": "So whether or not the specifying the type is, of course, optional. So it might"}, {"source_name": "lecture7", "index": 1143, "time": "01:19:00.660 --> 01:19:02.269", "speaker": "Alexander Vasserman", "text": "look like this"}, {"source_name": "lecture7", "index": 1144, "time": "01:19:02.500 --> 01:19:03.780", "speaker": "Alexander Vasserman", "text": "all right"}, {"source_name": "lecture7", "index": 1145, "time": "01:19:04.070 --> 01:19:05.600", "speaker": "Alexander Vasserman", "text": "or or"}, {"source_name": "lecture7", "index": 1146, "time": "01:19:06.520 --> 01:19:07.330", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 1147, "time": "01:19:07.500 --> 01:19:08.389", "speaker": "Alexander Vasserman", "text": "like that."}, {"source_name": "lecture7", "index": 1148, "time": "01:19:08.540 --> 01:19:12.969", "speaker": "Alexander Vasserman", "text": "But basically if the file is not given."}, {"source_name": "lecture7", "index": 1149, "time": "01:19:13.100 --> 01:19:13.990", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture7", "index": 1150, "time": "01:19:14.080 --> 01:19:16.179", "speaker": "Alexander Vasserman", "text": "this function in school."}, {"source_name": "lecture7", "index": 1151, "time": "01:19:16.460 --> 01:19:19.240", "speaker": "Alexander Vasserman", "text": "the default path will be used."}, {"source_name": "lecture7", "index": 1152, "time": "01:19:20.630 --> 01:19:21.590", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 1153, "time": "01:19:22.530 --> 01:19:23.969", "speaker": "Alexander Vasserman", "text": "let's"}, {"source_name": "lecture7", "index": 1154, "time": "01:19:24.100 --> 01:19:25.580", "speaker": "Alexander Vasserman", "text": "if you how."}, {"source_name": "lecture7", "index": 1155, "time": "01:19:25.610 --> 01:19:28.220", "speaker": "Alexander Vasserman", "text": "if you've done it this before, but that"}, {"source_name": "lecture7", "index": 1156, "time": "01:19:28.300 --> 01:19:29.390", "speaker": "Alexander Vasserman", "text": "it might be"}, {"source_name": "lecture7", "index": 1157, "time": "01:19:29.470 --> 01:19:35.630", "speaker": "Alexander Vasserman", "text": "Oh, something you don't quite remember, but we use the Json"}, {"source_name": "lecture7", "index": 1158, "time": "01:19:35.960 --> 01:19:39.889", "speaker": "Alexander Vasserman", "text": "our library, to read this file."}, {"source_name": "lecture7", "index": 1159, "time": "01:19:40.160 --> 01:19:42.539", "speaker": "Alexander Vasserman", "text": "so we said."}, {"source_name": "lecture7", "index": 1160, "time": "01:19:58.540 --> 01:20:00.099", "speaker": "Alexander Vasserman", "text": "Oh, so"}, {"source_name": "lecture7", "index": 1161, "time": "01:20:00.720 --> 01:20:02.520", "speaker": "Alexander Vasserman", "text": "we would open the file"}, {"source_name": "lecture7", "index": 1162, "time": "01:20:05.410 --> 01:20:06.330", "speaker": "Alexander Vasserman", "text": "all right."}, {"source_name": "lecture7", "index": 1163, "time": "01:20:06.360 --> 01:20:09.319", "speaker": "Alexander Vasserman", "text": "and then they would say."}, {"source_name": "lecture7", "index": 1164, "time": "01:20:19.520 --> 01:20:20.530", "speaker": "Alexander Vasserman", "text": "Let's say"}, {"source_name": "lecture7", "index": 1165, "time": "01:20:37.240 --> 01:20:39.549", "speaker": "Alexander Vasserman", "text": "so. We imported it."}, {"source_name": "lecture7", "index": 1166, "time": "01:20:39.930 --> 01:20:42.609", "speaker": "Alexander Vasserman", "text": "I just import the Json Library"}, {"source_name": "lecture7", "index": 1167, "time": "01:20:42.800 --> 01:20:44.389", "speaker": "Alexander Vasserman", "text": "all right. So it I."}, {"source_name": "lecture7", "index": 1168, "time": "01:20:44.740 --> 01:20:54.289", "speaker": "Alexander Vasserman", "text": "The editor, allows me to kind of just leak and knows, you know where to import things from. So, but kind of basically this import."}, {"source_name": "lecture7", "index": 1169, "time": "01:20:54.320 --> 01:20:55.900", "speaker": "Alexander Vasserman", "text": "our statement will set it."}, {"source_name": "lecture7", "index": 1170, "time": "01:20:56.280 --> 01:20:57.660", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture7", "index": 1171, "time": "01:21:02.180 --> 01:21:03.150", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture7", "index": 1172, "time": "01:21:03.680 --> 01:21:05.849", "speaker": "Alexander Vasserman", "text": "these the"}, {"source_name": "lecture7", "index": 1173, "time": "01:21:10.000 --> 01:21:11.659", "speaker": "Alexander Vasserman", "text": "Yeah. So"}, {"source_name": "lecture7", "index": 1174, "time": "01:21:11.750 --> 01:21:12.620", "speaker": "Alexander Vasserman", "text": "load"}, {"source_name": "lecture7", "index": 1175, "time": "01:21:12.710 --> 01:21:14.510", "speaker": "Alexander Vasserman", "text": "kind of outloads that"}, {"source_name": "lecture7", "index": 1176, "time": "01:21:14.550 --> 01:21:16.430", "speaker": "Alexander Vasserman", "text": "or data in."}, {"source_name": "lecture7", "index": 1177, "time": "01:21:16.680 --> 01:21:18.929", "speaker": "Alexander Vasserman", "text": "So let's actually."}, {"source_name": "lecture7", "index": 1178, "time": "01:21:19.240 --> 01:21:20.160", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 1179, "time": "01:21:20.830 --> 01:21:22.089", "speaker": "Alexander Vasserman", "text": "try it out."}, {"source_name": "lecture7", "index": 1180, "time": "01:21:22.600 --> 01:21:23.940", "speaker": "Alexander Vasserman", "text": "How would this"}, {"source_name": "lecture7", "index": 1181, "time": "01:21:24.230 --> 01:21:25.350", "speaker": "Alexander Vasserman", "text": "all work?"}, {"source_name": "lecture7", "index": 1182, "time": "01:21:26.250 --> 01:21:27.230", "speaker": "Alexander Vasserman", "text": "Oops"}, {"source_name": "lecture7", "index": 1183, "time": "01:21:29.100 --> 01:21:29.760", "speaker": "Alexander Vasserman", "text": "awesome?"}, {"source_name": "lecture7", "index": 1184, "time": "01:21:29.780 --> 01:21:30.599", "speaker": "Alexander Vasserman", "text": "And so"}, {"source_name": "lecture7", "index": 1185, "time": "01:21:33.270 --> 01:21:34.090", "speaker": "Alexander Vasserman", "text": "it's"}, {"source_name": "lecture7", "index": 1186, "time": "01:21:35.480 --> 01:21:36.400", "speaker": "Alexander Vasserman", "text": "started"}, {"source_name": "lecture7", "index": 1187, "time": "01:21:39.920 --> 01:21:40.940", "speaker": "Alexander Vasserman", "text": "so."}, {"source_name": "lecture7", "index": 1188, "time": "01:21:41.750 --> 01:21:42.580", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 1189, "time": "01:21:43.280 --> 01:21:44.670", "speaker": "Alexander Vasserman", "text": "the way the"}, {"source_name": "lecture7", "index": 1190, "time": "01:21:44.990 --> 01:21:51.420", "speaker": "Alexander Vasserman", "text": "try things out! And by some python console right, we can say in port."}, {"source_name": "lecture7", "index": 1191, "time": "01:21:51.570 --> 01:21:52.440", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 1192, "time": "01:21:53.850 --> 01:21:55.420", "speaker": "Alexander Vasserman", "text": "indexing process."}, {"source_name": "lecture7", "index": 1193, "time": "01:22:02.900 --> 01:22:04.589", "speaker": "Alexander Vasserman", "text": "Okay, right. So"}, {"source_name": "lecture7", "index": 1194, "time": "01:22:05.410 --> 01:22:06.360", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture7", "index": 1195, "time": "01:22:07.730 --> 01:22:11.500", "speaker": "Alexander Vasserman", "text": "change the name of the file of the class, but not"}, {"source_name": "lecture7", "index": 1196, "time": "01:22:11.710 --> 01:22:12.900", "speaker": "Alexander Vasserman", "text": "here soon."}, {"source_name": "lecture7", "index": 1197, "time": "01:22:13.070 --> 01:22:14.030", "speaker": "Alexander Vasserman", "text": "That's"}, {"source_name": "lecture7", "index": 1198, "time": "01:22:15.760 --> 01:22:16.840", "speaker": "Alexander Vasserman", "text": "try again."}, {"source_name": "lecture7", "index": 1199, "time": "01:22:17.100 --> 01:22:20.999", "speaker": "Alexander Vasserman", "text": "Okay. So it will be important that. And now just"}, {"source_name": "lecture7", "index": 1200, "time": "01:22:21.080 --> 01:22:23.320", "speaker": "Alexander Vasserman", "text": "let's"}, {"source_name": "lecture7", "index": 1201, "time": "01:22:25.510 --> 01:22:26.459", "speaker": "Alexander Vasserman", "text": "so he."}, {"source_name": "lecture7", "index": 1202, "time": "01:22:34.040 --> 01:22:34.660", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 1203, "time": "01:22:36.390 --> 01:22:37.650", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture7", "index": 1204, "time": "01:22:41.180 --> 01:22:43.520", "speaker": "Alexander Vasserman", "text": "so let's create that plus."}, {"source_name": "lecture7", "index": 1205, "time": "01:22:43.670 --> 01:22:46.180", "speaker": "Alexander Vasserman", "text": "even though we don't really"}, {"source_name": "lecture7", "index": 1206, "time": "01:22:46.480 --> 01:22:47.660", "speaker": "Alexander Vasserman", "text": "need"}, {"source_name": "lecture7", "index": 1207, "time": "01:22:47.750 --> 01:22:52.220", "speaker": "Alexander Vasserman", "text": "in in some of the class like, you know, kind of we are not the the function"}, {"source_name": "lecture7", "index": 1208, "time": "01:22:54.150 --> 01:22:54.929", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture7", "index": 1209, "time": "01:22:55.520 --> 01:22:57.710", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 1210, "time": "01:22:58.280 --> 01:22:58.900", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture7", "index": 1211, "time": "01:23:03.600 --> 01:23:05.420", "speaker": "Alexander Vasserman", "text": "Oh, for now let's"}, {"source_name": "lecture7", "index": 1212, "time": "01:23:05.830 --> 01:23:07.230", "speaker": "Alexander Vasserman", "text": "Oh, yeah."}, {"source_name": "lecture7", "index": 1213, "time": "01:23:09.290 --> 01:23:10.400", "speaker": "Alexander Vasserman", "text": "so."}, {"source_name": "lecture7", "index": 1214, "time": "01:23:10.450 --> 01:23:13.720", "speaker": "Alexander Vasserman", "text": "But we can still define this"}, {"source_name": "lecture7", "index": 1215, "time": "01:23:13.780 --> 01:23:15.280", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture7", "index": 1216, "time": "01:23:15.630 --> 01:23:16.530", "speaker": "Alexander Vasserman", "text": "see"}, {"source_name": "lecture7", "index": 1217, "time": "01:23:35.530 --> 01:23:36.170", "speaker": "Alexander Vasserman", "text": "no"}, {"source_name": "lecture7", "index": 1218, "time": "01:23:36.330 --> 01:23:37.160", "speaker": "Alexander Vasserman", "text": "sorry"}, {"source_name": "lecture7", "index": 1219, "time": "01:23:43.460 --> 01:23:48.630", "speaker": "Alexander Vasserman", "text": "when I modified it. I forgot to re-import it."}, {"source_name": "lecture7", "index": 1220, "time": "01:23:48.760 --> 01:23:49.870", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 1221, "time": "01:23:50.210 --> 01:23:52.630", "speaker": "Alexander Vasserman", "text": "just a reminder"}, {"source_name": "lecture7", "index": 1222, "time": "01:23:53.410 --> 01:23:54.269", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture7", "index": 1223, "time": "01:23:55.620 --> 01:23:56.429", "speaker": "Alexander Vasserman", "text": "this"}, {"source_name": "lecture7", "index": 1224, "time": "01:23:56.600 --> 01:23:57.770", "speaker": "Alexander Vasserman", "text": "you load"}, {"source_name": "lecture7", "index": 1225, "time": "01:23:59.120 --> 01:24:00.280", "speaker": "Alexander Vasserman", "text": "trick."}, {"source_name": "lecture7", "index": 1226, "time": "01:24:00.790 --> 01:24:01.740", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 1227, "time": "01:24:01.960 --> 01:24:03.090", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture7", "index": 1228, "time": "01:24:03.200 --> 01:24:04.480", "speaker": "Alexander Vasserman", "text": "if we"}, {"source_name": "lecture7", "index": 1229, "time": "01:24:05.400 --> 01:24:07.189", "speaker": "Alexander Vasserman", "text": "or change the file."}, {"source_name": "lecture7", "index": 1230, "time": "01:24:07.340 --> 01:24:10.150", "speaker": "Alexander Vasserman", "text": "and we want to continue working with it"}, {"source_name": "lecture7", "index": 1231, "time": "01:24:10.230 --> 01:24:15.320", "speaker": "Alexander Vasserman", "text": "in the python console. We need to reload it"}, {"source_name": "lecture7", "index": 1232, "time": "01:24:17.300 --> 01:24:18.330", "speaker": "Alexander Vasserman", "text": "soon."}, {"source_name": "lecture7", "index": 1233, "time": "01:24:18.730 --> 01:24:19.639", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 1234, "time": "01:24:19.790 --> 01:24:20.860", "speaker": "Alexander Vasserman", "text": "no."}, {"source_name": "lecture7", "index": 1235, "time": "01:24:22.760 --> 01:24:27.029", "speaker": "Alexander Vasserman", "text": "that's degree the source, and"}, {"source_name": "lecture7", "index": 1236, "time": "01:24:27.670 --> 01:24:29.049", "speaker": "Alexander Vasserman", "text": "you need the docs."}, {"source_name": "lecture7", "index": 1237, "time": "01:24:29.330 --> 01:24:30.689", "speaker": "Alexander Vasserman", "text": "And so"}, {"source_name": "lecture7", "index": 1238, "time": "01:24:32.690 --> 01:24:36.030", "speaker": "Alexander Vasserman", "text": "Docs is now a list of"}, {"source_name": "lecture7", "index": 1239, "time": "01:24:36.160 --> 01:24:43.609", "speaker": "Alexander Vasserman", "text": "records. Jason records or dictionaries, now convert dictionaries, so we can say"}, {"source_name": "lecture7", "index": 1240, "time": "01:24:43.640 --> 01:24:44.490", "speaker": "Alexander Vasserman", "text": "all"}, {"source_name": "lecture7", "index": 1241, "time": "01:24:45.140 --> 01:24:47.970", "speaker": "Alexander Vasserman", "text": "docs of 0 is"}, {"source_name": "lecture7", "index": 1242, "time": "01:24:48.210 --> 01:24:49.080", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture7", "index": 1243, "time": "01:24:49.530 --> 01:24:51.080", "speaker": "Alexander Vasserman", "text": "first"}, {"source_name": "lecture7", "index": 1244, "time": "01:24:51.190 --> 01:24:52.219", "speaker": "Alexander Vasserman", "text": "a record"}, {"source_name": "lecture7", "index": 1245, "time": "01:24:52.280 --> 01:24:53.030", "speaker": "Alexander Vasserman", "text": "in"}, {"source_name": "lecture7", "index": 1246, "time": "01:24:53.300 --> 01:24:58.259", "speaker": "Alexander Vasserman", "text": "there, and I can ask in in the dictionary, for"}, {"source_name": "lecture7", "index": 1247, "time": "01:24:58.340 --> 01:24:59.679", "speaker": "Alexander Vasserman", "text": "let's say title."}, {"source_name": "lecture7", "index": 1248, "time": "01:25:00.070 --> 01:25:05.370", "speaker": "Alexander Vasserman", "text": "and that's the title of the first article, right? So kind of just the"}, {"source_name": "lecture7", "index": 1249, "time": "01:25:05.480 --> 01:25:10.469", "speaker": "Alexander Vasserman", "text": "a reminder how that looks right. So these are the fields that we can access."}, {"source_name": "lecture7", "index": 1250, "time": "01:25:10.660 --> 01:25:12.219", "speaker": "Alexander Vasserman", "text": "but in particular we"}, {"source_name": "lecture7", "index": 1251, "time": "01:25:12.330 --> 01:25:14.550", "speaker": "Alexander Vasserman", "text": "I want the in your text."}, {"source_name": "lecture7", "index": 1252, "time": "01:25:14.690 --> 01:25:18.969", "speaker": "Alexander Vasserman", "text": "That kind of that's what we are going to be using"}, {"source_name": "lecture7", "index": 1253, "time": "01:25:19.120 --> 01:25:20.429", "speaker": "Alexander Vasserman", "text": "for the search."}, {"source_name": "lecture7", "index": 1254, "time": "01:25:22.290 --> 01:25:23.330", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 1255, "time": "01:25:23.430 --> 01:25:25.369", "speaker": "Alexander Vasserman", "text": "the same way I can say"}, {"source_name": "lecture7", "index": 1256, "time": "01:25:25.410 --> 01:25:26.290", "speaker": "Alexander Vasserman", "text": "here."}, {"source_name": "lecture7", "index": 1257, "time": "01:25:28.400 --> 01:25:32.830", "speaker": "Alexander Vasserman", "text": "you need text, and of course the text is going to be returned."}, {"source_name": "lecture7", "index": 1258, "time": "01:25:33.410 --> 01:25:34.870", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 1259, "time": "01:25:35.690 --> 01:25:36.510", "speaker": "Alexander Vasserman", "text": "what"}, {"source_name": "lecture7", "index": 1260, "time": "01:25:36.780 --> 01:25:39.150", "speaker": "Alexander Vasserman", "text": "i'm doing right now is kind of"}, {"source_name": "lecture7", "index": 1261, "time": "01:25:39.270 --> 01:25:40.110", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 1262, "time": "01:25:43.090 --> 01:25:43.809", "speaker": "Alexander Vasserman", "text": "just"}, {"source_name": "lecture7", "index": 1263, "time": "01:25:44.720 --> 01:25:46.110", "speaker": "Alexander Vasserman", "text": "e exploding"}, {"source_name": "lecture7", "index": 1264, "time": "01:25:46.360 --> 01:25:56.730", "speaker": "Alexander Vasserman", "text": "kind of and showing for you how the Json load works for reviewing that we actually would want to do a little bit more in red Documents function."}, {"source_name": "lecture7", "index": 1265, "time": "01:25:57.540 --> 01:25:58.349", "speaker": "Alexander Vasserman", "text": "Well."}, {"source_name": "lecture7", "index": 1266, "time": "01:25:58.450 --> 01:25:59.989", "speaker": "Alexander Vasserman", "text": "but I do have a question."}, {"source_name": "lecture7", "index": 1267, "time": "01:26:00.280 --> 01:26:08.690", "speaker": "Rana Hani", "text": "Yeah. So in this function you're only allowed to read the document correct. You can't modify it. I'm guessing we do that in the transform documents. One"}, {"source_name": "lecture7", "index": 1268, "time": "01:26:09.170 --> 01:26:10.090", "speaker": "Alexander Vasserman", "text": "right?"}, {"source_name": "lecture7", "index": 1269, "time": "01:26:10.540 --> 01:26:16.569", "speaker": "Alexander Vasserman", "text": "Yes. So basically. The purpose of the source is just to read"}, {"source_name": "lecture7", "index": 1270, "time": "01:26:16.650 --> 01:26:19.400", "speaker": "Alexander Vasserman", "text": "documents and extract"}, {"source_name": "lecture7", "index": 1271, "time": "01:26:19.740 --> 01:26:21.029", "speaker": "Alexander Vasserman", "text": "potentially the"}, {"source_name": "lecture7", "index": 1272, "time": "01:26:21.060 --> 01:26:22.900", "speaker": "Alexander Vasserman", "text": "our stuff that we want."}, {"source_name": "lecture7", "index": 1273, "time": "01:26:23.180 --> 01:26:26.759", "speaker": "Alexander Vasserman", "text": "And then you know something else."}, {"source_name": "lecture7", "index": 1274, "time": "01:26:26.940 --> 01:26:27.700", "speaker": "Alexander Vasserman", "text": "or"}, {"source_name": "lecture7", "index": 1275, "time": "01:26:27.920 --> 01:26:28.800", "speaker": "Alexander Vasserman", "text": "on"}, {"source_name": "lecture7", "index": 1276, "time": "01:26:28.840 --> 01:26:32.539", "speaker": "Alexander Vasserman", "text": "Really, the transform documents is going to be modifying them. Right?"}, {"source_name": "lecture7", "index": 1277, "time": "01:26:33.200 --> 01:26:34.139", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 1278, "time": "01:26:37.120 --> 01:26:54.370", "speaker": "Alexander Vasserman", "text": "So yeah, basically, what we'll want to do is actually, instead of returning the entire records, we might want to have something a little bit more standard representation, so that this via source is kind of recording everything that's specific"}, {"source_name": "lecture7", "index": 1279, "time": "01:26:54.420 --> 01:26:57.500", "speaker": "Alexander Vasserman", "text": "to this particular file format."}, {"source_name": "lecture7", "index": 1280, "time": "01:26:57.670 --> 01:27:02.410", "speaker": "Alexander Vasserman", "text": "and in later classes will have other"}, {"source_name": "lecture7", "index": 1281, "time": "01:27:02.440 --> 01:27:03.260", "speaker": "Alexander Vasserman", "text": "all"}, {"source_name": "lecture7", "index": 1282, "time": "01:27:03.440 --> 01:27:08.240", "speaker": "Alexander Vasserman", "text": "file formats or other sources, and we will want to"}, {"source_name": "lecture7", "index": 1283, "time": "01:27:08.560 --> 01:27:14.209", "speaker": "Alexander Vasserman", "text": "just change that class implementation and everything else to be staying the same."}, {"source_name": "lecture7", "index": 1284, "time": "01:27:14.740 --> 01:27:17.740", "speaker": "Alexander Vasserman", "text": "So that's kind of the idea of the source."}, {"source_name": "lecture7", "index": 1285, "time": "01:27:18.170 --> 01:27:19.820", "speaker": "Alexander Vasserman", "text": "Ralph, do you have a question"}, {"source_name": "lecture7", "index": 1286, "time": "01:27:21.860 --> 01:27:25.800", "speaker": "Rafal \"Ralph\" Jasielec", "text": "from like a perspective of a a search engine."}, {"source_name": "lecture7", "index": 1287, "time": "01:27:26.140 --> 01:27:32.189", "speaker": "Rafal \"Ralph\" Jasielec", "text": "What would you when and why would you wanna like transfer and transform documents?"}, {"source_name": "lecture7", "index": 1288, "time": "01:27:32.670 --> 01:27:41.710", "speaker": "Rafal \"Ralph\" Jasielec", "text": "Whether I don't know if it if transform and documents would be in the context of the actual content of whatever document it is, or"}, {"source_name": "lecture7", "index": 1289, "time": "01:27:42.070 --> 01:27:43.920", "speaker": "Rafal \"Ralph\" Jasielec", "text": "it's size or"}, {"source_name": "lecture7", "index": 1290, "time": "01:27:44.710 --> 01:27:46.900", "speaker": "Alexander Vasserman", "text": "yes, so"}, {"source_name": "lecture7", "index": 1291, "time": "01:27:47.370 --> 01:27:48.200", "speaker": "Alexander Vasserman", "text": "well."}, {"source_name": "lecture7", "index": 1292, "time": "01:27:48.560 --> 01:28:02.430", "speaker": "Alexander Vasserman", "text": "So in the search engine we'll like, you know, in the web search engine. You might be transforming a lot of different things, like, you know. Maybe you sleeping HTML or and things like that. But in our case."}, {"source_name": "lecture7", "index": 1293, "time": "01:28:02.540 --> 01:28:04.669", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 1294, "time": "01:28:04.840 --> 01:28:06.170", "speaker": "Alexander Vasserman", "text": "that's actually it."}, {"source_name": "lecture7", "index": 1295, "time": "01:28:07.040 --> 01:28:08.739", "speaker": "Alexander Vasserman", "text": "I was going to"}, {"source_name": "lecture7", "index": 1296, "time": "01:28:09.060 --> 01:28:09.889", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 1297, "time": "01:28:11.120 --> 01:28:13.989", "speaker": "Alexander Vasserman", "text": "to that was going to do that a little later. But"}, {"source_name": "lecture7", "index": 1298, "time": "01:28:14.070 --> 01:28:15.580", "speaker": "Alexander Vasserman", "text": "since here."}, {"source_name": "lecture7", "index": 1299, "time": "01:28:15.820 --> 01:28:17.390", "speaker": "Alexander Vasserman", "text": "talking about it."}, {"source_name": "lecture7", "index": 1300, "time": "01:28:21.960 --> 01:28:27.620", "speaker": "Alexander Vasserman", "text": "let's define a function that just takes a"}, {"source_name": "lecture7", "index": 1301, "time": "01:28:30.370 --> 01:28:32.170", "speaker": "Alexander Vasserman", "text": "let's say document, text."}, {"source_name": "lecture7", "index": 1302, "time": "01:28:32.850 --> 01:28:35.579", "speaker": "Alexander Vasserman", "text": "right? And what are we going to?"}, {"source_name": "lecture7", "index": 1303, "time": "01:28:35.650 --> 01:28:36.469", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 1304, "time": "01:28:38.820 --> 01:28:41.389", "speaker": "Alexander Vasserman", "text": "or do you do you?"}, {"source_name": "lecture7", "index": 1305, "time": "01:28:41.640 --> 01:28:49.830", "speaker": "Alexander Vasserman", "text": "Or is that? Well, so some of the things that we've done is is maybe what we're going to do is return something like"}, {"source_name": "lecture7", "index": 1306, "time": "01:28:50.040 --> 01:28:52.710", "speaker": "Alexander Vasserman", "text": "document text that"}, {"source_name": "lecture7", "index": 1307, "time": "01:28:54.740 --> 01:28:55.620", "speaker": "Alexander Vasserman", "text": "or"}, {"source_name": "lecture7", "index": 1308, "time": "01:28:56.670 --> 01:28:57.500", "speaker": "Alexander Vasserman", "text": "split"}, {"source_name": "lecture7", "index": 1309, "time": "01:28:57.630 --> 01:28:59.349", "speaker": "Alexander Vasserman", "text": "right? So"}, {"source_name": "lecture7", "index": 1310, "time": "01:28:59.630 --> 01:29:09.249", "speaker": "Alexander Vasserman", "text": "you know, this is kind of the transformations that we did inside of the matching or ranking functions"}, {"source_name": "lecture7", "index": 1311, "time": "01:29:09.360 --> 01:29:10.219", "speaker": "Alexander Vasserman", "text": "right"}, {"source_name": "lecture7", "index": 1312, "time": "01:29:10.290 --> 01:29:11.940", "speaker": "Alexander Vasserman", "text": "to."}, {"source_name": "lecture7", "index": 1313, "time": "01:29:12.720 --> 01:29:19.530", "speaker": "Alexander Vasserman", "text": "We might want to do this on not do it every time we are running really"}, {"source_name": "lecture7", "index": 1314, "time": "01:29:19.630 --> 01:29:25.040", "speaker": "Alexander Vasserman", "text": "right. So that's kind of the one example of document transformation"}, {"source_name": "lecture7", "index": 1315, "time": "01:29:25.160 --> 01:29:26.120", "speaker": "Alexander Vasserman", "text": "that that"}, {"source_name": "lecture7", "index": 1316, "time": "01:29:26.220 --> 01:29:27.190", "speaker": "Alexander Vasserman", "text": "view."}, {"source_name": "lecture7", "index": 1317, "time": "01:29:27.300 --> 01:29:33.460", "speaker": "Alexander Vasserman", "text": "Oh, J. Right. And I defined it as a separate function because they they"}, {"source_name": "lecture7", "index": 1318, "time": "01:29:33.730 --> 01:29:35.730", "speaker": "Alexander Vasserman", "text": "function to do it on"}, {"source_name": "lecture7", "index": 1319, "time": "01:29:36.260 --> 01:29:43.940", "speaker": "Alexander Vasserman", "text": "the way we've written out. The indexing process is that we wanted to transform documents to"}, {"source_name": "lecture7", "index": 1320, "time": "01:29:44.010 --> 01:29:49.730", "speaker": "Alexander Vasserman", "text": "take the call document, collection, and return all the transform documents, so that"}, {"source_name": "lecture7", "index": 1321, "time": "01:29:49.890 --> 01:29:50.660", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture7", "index": 1322, "time": "01:29:50.950 --> 01:29:53.580", "speaker": "Alexander Vasserman", "text": "function needs to be still written."}, {"source_name": "lecture7", "index": 1323, "time": "01:29:53.700 --> 01:29:55.429", "speaker": "Alexander Vasserman", "text": "But it can."}, {"source_name": "lecture7", "index": 1324, "time": "01:29:55.910 --> 01:29:57.169", "speaker": "Alexander Vasserman", "text": "It will use"}, {"source_name": "lecture7", "index": 1325, "time": "01:29:57.230 --> 01:30:03.720", "speaker": "Alexander Vasserman", "text": "this function as a part of the implementation right? So given the piece of text."}, {"source_name": "lecture7", "index": 1326, "time": "01:30:03.890 --> 01:30:06.479", "speaker": "Alexander Vasserman", "text": "right? This"}, {"source_name": "lecture7", "index": 1327, "time": "01:30:06.790 --> 01:30:07.760", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 1328, "time": "01:30:10.850 --> 01:30:13.200", "speaker": "Alexander Vasserman", "text": "outputs any"}, {"source_name": "lecture7", "index": 1329, "time": "01:30:14.900 --> 01:30:20.740", "speaker": "Alexander Vasserman", "text": "list of things that will be a part of the"}, {"source_name": "lecture7", "index": 1330, "time": "01:30:22.290 --> 01:30:23.179", "speaker": "Alexander Vasserman", "text": "on"}, {"source_name": "lecture7", "index": 1331, "time": "01:30:25.450 --> 01:30:28.219", "speaker": "Alexander Vasserman", "text": "of the transfer transform document."}, {"source_name": "lecture7", "index": 1332, "time": "01:30:33.190 --> 01:30:34.019", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 1333, "time": "01:30:34.330 --> 01:30:35.240", "speaker": "Alexander Vasserman", "text": "does that"}, {"source_name": "lecture7", "index": 1334, "time": "01:30:35.410 --> 01:30:36.480", "speaker": "Alexander Vasserman", "text": "make sense?"}, {"source_name": "lecture7", "index": 1335, "time": "01:30:37.800 --> 01:30:38.800", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 1336, "time": "01:30:38.950 --> 01:30:40.450", "speaker": "Alexander Vasserman", "text": "So actually."}, {"source_name": "lecture7", "index": 1337, "time": "01:30:42.110 --> 01:30:42.910", "speaker": "Alexander Vasserman", "text": "what"}, {"source_name": "lecture7", "index": 1338, "time": "01:30:43.010 --> 01:30:43.940", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture7", "index": 1339, "time": "01:30:44.710 --> 01:30:49.009", "speaker": "Alexander Vasserman", "text": "need to start defining is, what are those documents"}, {"source_name": "lecture7", "index": 1340, "time": "01:30:49.050 --> 01:30:52.800", "speaker": "Alexander Vasserman", "text": "going to look like, and what document collections are going to look like."}, {"source_name": "lecture7", "index": 1341, "time": "01:30:53.200 --> 01:30:57.829", "speaker": "Alexander Vasserman", "text": "And though let's start, maybe with the document plus"}, {"source_name": "lecture7", "index": 1342, "time": "01:31:05.380 --> 01:31:06.240", "speaker": "Alexander Vasserman", "text": "right."}, {"source_name": "lecture7", "index": 1343, "time": "01:31:06.540 --> 01:31:08.119", "speaker": "Alexander Vasserman", "text": "Oh, and"}, {"source_name": "lecture7", "index": 1344, "time": "01:31:09.170 --> 01:31:10.219", "speaker": "Alexander Vasserman", "text": "if you"}, {"source_name": "lecture7", "index": 1345, "time": "01:31:12.270 --> 01:31:15.340", "speaker": "Alexander Vasserman", "text": "your main number name couples"}, {"source_name": "lecture7", "index": 1346, "time": "01:31:15.700 --> 01:31:16.540", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 1347, "time": "01:31:17.120 --> 01:31:22.959", "speaker": "Alexander Vasserman", "text": "let's say you know a document is a pretty dumb plus. It's gonna just contain some data"}, {"source_name": "lecture7", "index": 1348, "time": "01:31:23.180 --> 01:31:25.440", "speaker": "Alexander Vasserman", "text": "and the data"}, {"source_name": "lecture7", "index": 1349, "time": "01:31:25.470 --> 01:31:32.600", "speaker": "Alexander Vasserman", "text": "that it's going to contain. Let's say that there is some kind of an Id that we're going to use to refer to this document"}, {"source_name": "lecture7", "index": 1350, "time": "01:31:32.950 --> 01:31:34.309", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture7", "index": 1351, "time": "01:31:34.670 --> 01:31:35.760", "speaker": "Alexander Vasserman", "text": "and text"}, {"source_name": "lecture7", "index": 1352, "time": "01:31:37.230 --> 01:31:37.960", "speaker": "Alexander Vasserman", "text": "Right?"}, {"source_name": "lecture7", "index": 1353, "time": "01:31:38.930 --> 01:31:40.289", "speaker": "Alexander Vasserman", "text": "Oh, so"}, {"source_name": "lecture7", "index": 1354, "time": "01:31:40.640 --> 01:31:41.769", "speaker": "Alexander Vasserman", "text": "remember."}, {"source_name": "lecture7", "index": 1355, "time": "01:31:42.090 --> 01:31:45.339", "speaker": "Alexander Vasserman", "text": "name, Topple allows us to kind of"}, {"source_name": "lecture7", "index": 1356, "time": "01:31:45.370 --> 01:31:51.069", "speaker": "Alexander Vasserman", "text": "define the class with these 2 fields, and it basically"}, {"source_name": "lecture7", "index": 1357, "time": "01:31:51.340 --> 01:31:54.120", "speaker": "Alexander Vasserman", "text": "kind of just interprets for pairs of"}, {"source_name": "lecture7", "index": 1358, "time": "01:31:54.210 --> 01:31:55.960", "speaker": "Alexander Vasserman", "text": "or strings"}, {"source_name": "lecture7", "index": 1359, "time": "01:31:56.080 --> 01:31:59.939", "speaker": "Alexander Vasserman", "text": "as a document. And the allows us to kind of"}, {"source_name": "lecture7", "index": 1360, "time": "01:32:00.010 --> 01:32:02.299", "speaker": "Alexander Vasserman", "text": "when you manipulate this type."}, {"source_name": "lecture7", "index": 1361, "time": "01:32:02.360 --> 01:32:03.170", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 1362, "time": "01:32:03.250 --> 01:32:06.900", "speaker": "Alexander Vasserman", "text": "this kind of basic stuff predefined for us already."}, {"source_name": "lecture7", "index": 1363, "time": "01:32:07.790 --> 01:32:13.140", "speaker": "Alexander Vasserman", "text": "So we looked at spans before as an example of named couple."}, {"source_name": "lecture7", "index": 1364, "time": "01:32:13.370 --> 01:32:15.900", "speaker": "Alexander Vasserman", "text": "So this is another one that"}, {"source_name": "lecture7", "index": 1365, "time": "01:32:15.920 --> 01:32:19.429", "speaker": "Alexander Vasserman", "text": "they're going to use in our search engine, hey?"}, {"source_name": "lecture7", "index": 1366, "time": "01:32:20.510 --> 01:32:21.799", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture7", "index": 1367, "time": "01:32:22.840 --> 01:32:23.900", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture7", "index": 1368, "time": "01:32:23.990 --> 01:32:27.349", "speaker": "Alexander Vasserman", "text": "maybe what we want to do."}, {"source_name": "lecture7", "index": 1369, "time": "01:32:27.610 --> 01:32:28.469", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 1370, "time": "01:32:28.600 --> 01:32:30.200", "speaker": "Alexander Vasserman", "text": "here is"}, {"source_name": "lecture7", "index": 1371, "time": "01:32:30.350 --> 01:32:32.910", "speaker": "Alexander Vasserman", "text": "actually for eating the documents."}, {"source_name": "lecture7", "index": 1372, "time": "01:32:35.970 --> 01:32:39.640", "speaker": "Alexander Vasserman", "text": "instead of returning to the whole records."}, {"source_name": "lecture7", "index": 1373, "time": "01:32:40.200 --> 01:32:44.339", "speaker": "Alexander Vasserman", "text": "What we might want to do is to convert"}, {"source_name": "lecture7", "index": 1374, "time": "01:32:44.410 --> 01:32:45.550", "speaker": "Alexander Vasserman", "text": "them"}, {"source_name": "lecture7", "index": 1375, "time": "01:32:45.650 --> 01:32:47.090", "speaker": "Alexander Vasserman", "text": "to"}, {"source_name": "lecture7", "index": 1376, "time": "01:32:47.160 --> 01:32:48.389", "speaker": "Alexander Vasserman", "text": "documents."}, {"source_name": "lecture7", "index": 1377, "time": "01:32:49.010 --> 01:32:55.790", "speaker": "Alexander Vasserman", "text": "and the also the already defined document collection. So"}, {"source_name": "lecture7", "index": 1378, "time": "01:32:56.100 --> 01:32:59.620", "speaker": "Alexander Vasserman", "text": "the city documents should return"}, {"source_name": "lecture7", "index": 1379, "time": "01:33:00.580 --> 01:33:02.119", "speaker": "Alexander Vasserman", "text": "document collection."}, {"source_name": "lecture7", "index": 1380, "time": "01:33:02.380 --> 01:33:05.399", "speaker": "Alexander Vasserman", "text": "So let's get that done."}, {"source_name": "lecture7", "index": 1381, "time": "01:33:05.570 --> 01:33:08.620", "speaker": "Alexander Vasserman", "text": "I think. Now we have all the pieces to get that done."}, {"source_name": "lecture7", "index": 1382, "time": "01:33:11.060 --> 01:33:12.000", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 1383, "time": "01:33:12.370 --> 01:33:13.420", "speaker": "Alexander Vasserman", "text": "you've read"}, {"source_name": "lecture7", "index": 1384, "time": "01:33:13.960 --> 01:33:15.580", "speaker": "Alexander Vasserman", "text": "the or"}, {"source_name": "lecture7", "index": 1385, "time": "01:33:16.380 --> 01:33:18.150", "speaker": "Alexander Vasserman", "text": "records right?"}, {"source_name": "lecture7", "index": 1386, "time": "01:33:18.430 --> 01:33:19.500", "speaker": "Alexander Vasserman", "text": "No."}, {"source_name": "lecture7", "index": 1387, "time": "01:33:19.530 --> 01:33:20.920", "speaker": "Alexander Vasserman", "text": "we want to."}, {"source_name": "lecture7", "index": 1388, "time": "01:33:21.150 --> 01:33:22.019", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 1389, "time": "01:33:22.910 --> 01:33:25.240", "speaker": "Alexander Vasserman", "text": "records, remember. Easy list."}, {"source_name": "lecture7", "index": 1390, "time": "01:33:25.300 --> 01:33:26.030", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 1391, "time": "01:33:26.240 --> 01:33:29.609", "speaker": "Alexander Vasserman", "text": "dog Records is a list of records to"}, {"source_name": "lecture7", "index": 1392, "time": "01:33:32.340 --> 01:33:33.160", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 1393, "time": "01:33:33.550 --> 01:33:38.790", "speaker": "Alexander Vasserman", "text": "we'll want to have a look like that somewhere that populates the"}, {"source_name": "lecture7", "index": 1394, "time": "01:33:38.820 --> 01:33:41.980", "speaker": "Alexander Vasserman", "text": "A deep collection, right? So that's actually"}, {"source_name": "lecture7", "index": 1395, "time": "01:33:42.260 --> 01:33:43.649", "speaker": "Alexander Vasserman", "text": "Oh, create that"}, {"source_name": "lecture7", "index": 1396, "time": "01:33:44.490 --> 01:33:45.240", "speaker": "Alexander Vasserman", "text": "doc"}, {"source_name": "lecture7", "index": 1397, "time": "01:33:45.750 --> 01:33:46.910", "speaker": "Alexander Vasserman", "text": "election"}, {"source_name": "lecture7", "index": 1398, "time": "01:33:47.340 --> 01:33:48.219", "speaker": "Alexander Vasserman", "text": "here."}, {"source_name": "lecture7", "index": 1399, "time": "01:33:50.680 --> 01:33:52.779", "speaker": "Alexander Vasserman", "text": "And as you saw this is."}, {"source_name": "lecture7", "index": 1400, "time": "01:33:52.870 --> 01:33:54.989", "speaker": "Alexander Vasserman", "text": "it may be called the constructor."}, {"source_name": "lecture7", "index": 1401, "time": "01:33:55.120 --> 01:33:57.219", "speaker": "Alexander Vasserman", "text": "Right? So now"}, {"source_name": "lecture7", "index": 1402, "time": "01:33:57.610 --> 01:33:58.860", "speaker": "Alexander Vasserman", "text": "for"}, {"source_name": "lecture7", "index": 1403, "time": "01:33:59.370 --> 01:34:04.549", "speaker": "Alexander Vasserman", "text": "each record you want to add a document to the collection."}, {"source_name": "lecture7", "index": 1404, "time": "01:34:05.080 --> 01:34:09.510", "speaker": "Alexander Vasserman", "text": "right? So that's a document. And now here we"}, {"source_name": "lecture7", "index": 1405, "time": "01:34:09.650 --> 01:34:11.600", "speaker": "Alexander Vasserman", "text": "1, 2"}, {"source_name": "lecture7", "index": 1406, "time": "01:34:12.090 --> 01:34:13.889", "speaker": "Alexander Vasserman", "text": "specify"}, {"source_name": "lecture7", "index": 1407, "time": "01:34:14.420 --> 01:34:17.049", "speaker": "Alexander Vasserman", "text": "some document that we're going to be added right"}, {"source_name": "lecture7", "index": 1408, "time": "01:34:19.620 --> 01:34:21.650", "speaker": "Alexander Vasserman", "text": "to document"}, {"source_name": "lecture7", "index": 1409, "time": "01:34:21.950 --> 01:34:22.820", "speaker": "Alexander Vasserman", "text": "has"}, {"source_name": "lecture7", "index": 1410, "time": "01:34:23.020 --> 01:34:24.250", "speaker": "Alexander Vasserman", "text": "do things"}, {"source_name": "lecture7", "index": 1411, "time": "01:34:24.420 --> 01:34:25.219", "speaker": "Alexander Vasserman", "text": "I mean"}, {"source_name": "lecture7", "index": 1412, "time": "01:34:28.450 --> 01:34:30.300", "speaker": "Alexander Vasserman", "text": "dock Id and text."}, {"source_name": "lecture7", "index": 1413, "time": "01:34:30.460 --> 01:34:35.799", "speaker": "Alexander Vasserman", "text": "So we need to kind of figure out what those are going to be."}, {"source_name": "lecture7", "index": 1414, "time": "01:34:36.680 --> 01:34:37.559", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 1415, "time": "01:34:37.780 --> 01:34:39.139", "speaker": "Alexander Vasserman", "text": "well, to"}, {"source_name": "lecture7", "index": 1416, "time": "01:34:39.210 --> 01:34:44.599", "speaker": "Alexander Vasserman", "text": "the records have, Id Field and the text will just use those"}, {"source_name": "lecture7", "index": 1417, "time": "01:34:44.660 --> 01:34:45.820", "speaker": "Alexander Vasserman", "text": "all fields"}, {"source_name": "lecture7", "index": 1418, "time": "01:34:45.880 --> 01:34:47.679", "speaker": "Alexander Vasserman", "text": "to create our document."}, {"source_name": "lecture7", "index": 1419, "time": "01:34:48.340 --> 01:34:49.889", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 1420, "time": "01:34:52.530 --> 01:34:54.440", "speaker": "Alexander Vasserman", "text": "so, Doc, Id will be."}, {"source_name": "lecture7", "index": 1421, "time": "01:34:54.750 --> 01:34:55.599", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 1422, "time": "01:35:01.850 --> 01:35:07.539", "speaker": "Alexander Vasserman", "text": "the Id field of the dictionary so record"}, {"source_name": "lecture7", "index": 1423, "time": "01:35:08.100 --> 01:35:11.280", "speaker": "Alexander Vasserman", "text": "represented in Python as a dictionary, right?"}, {"source_name": "lecture7", "index": 1424, "time": "01:35:11.330 --> 01:35:13.720", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture7", "index": 1425, "time": "01:35:13.850 --> 01:35:14.849", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture7", "index": 1426, "time": "01:35:16.910 --> 01:35:18.889", "speaker": "Alexander Vasserman", "text": "Yes, we'll be."}, {"source_name": "lecture7", "index": 1427, "time": "01:35:30.680 --> 01:35:31.929", "speaker": "Alexander Vasserman", "text": "and so"}, {"source_name": "lecture7", "index": 1428, "time": "01:35:32.240 --> 01:35:36.600", "speaker": "Alexander Vasserman", "text": "No. You can then return actual document collection."}, {"source_name": "lecture7", "index": 1429, "time": "01:35:40.540 --> 01:35:41.400", "speaker": "Alexander Vasserman", "text": "Hello!"}, {"source_name": "lecture7", "index": 1430, "time": "01:35:53.220 --> 01:35:54.389", "speaker": "Alexander Vasserman", "text": "Does this"}, {"source_name": "lecture7", "index": 1431, "time": "01:35:54.530 --> 01:35:55.410", "speaker": "Alexander Vasserman", "text": "me"}, {"source_name": "lecture7", "index": 1432, "time": "01:35:55.440 --> 01:35:56.690", "speaker": "Alexander Vasserman", "text": "sense?"}, {"source_name": "lecture7", "index": 1433, "time": "01:35:59.260 --> 01:36:00.120", "speaker": "Alexander Vasserman", "text": "Right?"}, {"source_name": "lecture7", "index": 1434, "time": "01:36:01.160 --> 01:36:02.190", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture7", "index": 1435, "time": "01:36:02.710 --> 01:36:03.660", "speaker": "Alexander Vasserman", "text": "you can"}, {"source_name": "lecture7", "index": 1436, "time": "01:36:03.700 --> 01:36:04.840", "speaker": "Alexander Vasserman", "text": "kind of"}, {"source_name": "lecture7", "index": 1437, "time": "01:36:05.000 --> 01:36:20.340", "speaker": "Alexander Vasserman", "text": "we're not really doing very much. We are kind of just reading, file and manipulating fields, but what we've created is standard representation that is independent of the particular file format."}, {"source_name": "lecture7", "index": 1438, "time": "01:36:20.440 --> 01:36:24.060", "speaker": "Alexander Vasserman", "text": "And now the rest of our"}, {"source_name": "lecture7", "index": 1439, "time": "01:36:24.490 --> 01:36:25.340", "speaker": "Alexander Vasserman", "text": "cool"}, {"source_name": "lecture7", "index": 1440, "time": "01:36:25.430 --> 01:36:28.969", "speaker": "Alexander Vasserman", "text": "can work with these standard documents."}, {"source_name": "lecture7", "index": 1441, "time": "01:36:29.420 --> 01:36:32.399", "speaker": "Alexander Vasserman", "text": "and for a different source"}, {"source_name": "lecture7", "index": 1442, "time": "01:36:32.440 --> 01:36:35.309", "speaker": "Alexander Vasserman", "text": "we'll define a different source class."}, {"source_name": "lecture7", "index": 1443, "time": "01:36:35.460 --> 01:36:40.259", "speaker": "Alexander Vasserman", "text": "But the kind of idea of document collection will be the same."}, {"source_name": "lecture7", "index": 1444, "time": "01:36:41.270 --> 01:36:43.849", "speaker": "Alexander Vasserman", "text": "So that's what we've achieved so far."}, {"source_name": "lecture7", "index": 1445, "time": "01:36:44.400 --> 01:36:45.689", "speaker": "Alexander Vasserman", "text": "any questions."}, {"source_name": "lecture7", "index": 1446, "time": "01:36:51.900 --> 01:36:53.770", "speaker": "Alexander Vasserman", "text": "So we'll continue this this"}, {"source_name": "lecture7", "index": 1447, "time": "01:36:54.830 --> 01:36:56.139", "speaker": "Alexander Vasserman", "text": "on Thursday."}, {"source_name": "lecture7", "index": 1448, "time": "01:36:56.440 --> 01:36:57.380", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture7", "index": 1449, "time": "01:36:58.540 --> 01:37:04.070", "speaker": "Alexander Vasserman", "text": "hopefully. On Thursday we will get to kind of finish our"}, {"source_name": "lecture7", "index": 1450, "time": "01:37:04.180 --> 01:37:05.660", "speaker": "Alexander Vasserman", "text": "naive"}, {"source_name": "lecture7", "index": 1451, "time": "01:37:05.690 --> 01:37:08.410", "speaker": "Alexander Vasserman", "text": "search implementation that you already had"}, {"source_name": "lecture7", "index": 1452, "time": "01:37:08.540 --> 01:37:12.909", "speaker": "Alexander Vasserman", "text": "but split up in these pieces."}, {"source_name": "lecture7", "index": 1453, "time": "01:37:13.130 --> 01:37:21.690", "speaker": "Alexander Vasserman", "text": "so we have. They will have again the full implementation, but it will be ready to kind of iterate over"}, {"source_name": "lecture7", "index": 1454, "time": "01:37:23.600 --> 01:37:25.010", "speaker": "Alexander Vasserman", "text": "otherwise."}, {"source_name": "lecture7", "index": 1455, "time": "01:37:25.210 --> 01:37:28.939", "speaker": "Alexander Vasserman", "text": "I guess we are done for today. So"}, {"source_name": "lecture7", "index": 1456, "time": "01:37:29.120 --> 01:37:30.090", "speaker": "Alexander Vasserman", "text": "if you"}, {"source_name": "lecture7", "index": 1457, "time": "01:37:30.350 --> 01:37:36.530", "speaker": "Alexander Vasserman", "text": "have any questions that you want to ask me, and if after class I'm happy to stay"}, {"source_name": "lecture7", "index": 1458, "time": "01:37:36.860 --> 01:37:40.319", "speaker": "Alexander Vasserman", "text": "on the call, otherwise i'll see you guys on Thursday."}, {"source_name": "lecture7", "index": 1459, "time": "01:37:45.890 --> 01:37:47.220", "speaker": "Luis Gonzalez", "text": "Thank you. Have a good one."}, {"source_name": "lecture7", "index": 1460, "time": "01:37:47.260 --> 01:37:48.940", "speaker": "Luis Gonzalez", "text": "Thank you."}, {"source_name": "lecture7", "index": 1461, "time": "01:37:57.730 --> 01:38:01.400", "speaker": "Rana Hani", "text": "Will you post this python file to d 12."}, {"source_name": "lecture8", "index": 1, "time": "00:11:18.290 --> 00:11:19.330", "speaker": "Alexander Vasserman", "text": "All right."}, {"source_name": "lecture8", "index": 2, "time": "00:11:19.710 --> 00:11:21.200", "speaker": "Alexander Vasserman", "text": "Good afternoon, everyone."}, {"source_name": "lecture8", "index": 3, "time": "00:11:21.510 --> 00:11:22.830", "speaker": "Alexander Vasserman", "text": "How's everyone doing?"}, {"source_name": "lecture8", "index": 4, "time": "00:11:29.440 --> 00:11:30.550", "speaker": "Alexander Vasserman", "text": "Let's."}, {"source_name": "lecture8", "index": 5, "time": "00:11:32.670 --> 00:11:33.470", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 6, "time": "00:11:35.010 --> 00:11:43.300", "speaker": "Alexander Vasserman", "text": "I guess let's get going today. We are going to continue is what we've"}, {"source_name": "lecture8", "index": 7, "time": "00:11:43.640 --> 00:11:44.920", "speaker": "Alexander Vasserman", "text": "started."}, {"source_name": "lecture8", "index": 8, "time": "00:11:44.960 --> 00:11:46.310", "speaker": "Alexander Vasserman", "text": "Oh, last time."}, {"source_name": "lecture8", "index": 9, "time": "00:11:47.040 --> 00:11:47.770", "speaker": "Alexander Vasserman", "text": "or"}, {"source_name": "lecture8", "index": 10, "time": "00:11:47.950 --> 00:11:49.310", "speaker": "Alexander Vasserman", "text": "if you"}, {"source_name": "lecture8", "index": 11, "time": "00:11:49.400 --> 00:11:50.610", "speaker": "Alexander Vasserman", "text": "lectures ago"}, {"source_name": "lecture8", "index": 12, "time": "00:11:50.730 --> 00:11:54.180", "speaker": "Alexander Vasserman", "text": "and keep working on our"}, {"source_name": "lecture8", "index": 13, "time": "00:11:55.220 --> 00:11:56.260", "speaker": "Alexander Vasserman", "text": "indexing"}, {"source_name": "lecture8", "index": 14, "time": "00:11:57.300 --> 00:11:58.120", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 15, "time": "00:11:58.160 --> 00:11:59.490", "speaker": "Alexander Vasserman", "text": "indexing process"}, {"source_name": "lecture8", "index": 16, "time": "00:12:13.540 --> 00:12:14.990", "speaker": "Alexander Vasserman", "text": "just second setting."}, {"source_name": "lecture8", "index": 17, "time": "00:12:21.680 --> 00:12:22.640", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture8", "index": 18, "time": "00:12:23.550 --> 00:12:26.899", "speaker": "Alexander Vasserman", "text": "okay. So basically, last time"}, {"source_name": "lecture8", "index": 19, "time": "00:12:27.340 --> 00:12:28.480", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture8", "index": 20, "time": "00:12:28.950 --> 00:12:30.669", "speaker": "Alexander Vasserman", "text": "looked at"}, {"source_name": "lecture8", "index": 21, "time": "00:12:30.940 --> 00:12:31.710", "speaker": "Alexander Vasserman", "text": "all."}, {"source_name": "lecture8", "index": 22, "time": "00:12:32.580 --> 00:12:36.039", "speaker": "Alexander Vasserman", "text": "creating a very simple document collection class."}, {"source_name": "lecture8", "index": 23, "time": "00:12:36.680 --> 00:12:40.330", "speaker": "Alexander Vasserman", "text": "right? And a document class."}, {"source_name": "lecture8", "index": 24, "time": "00:12:41.630 --> 00:12:46.189", "speaker": "Alexander Vasserman", "text": "And then we also looked at reading a"}, {"source_name": "lecture8", "index": 25, "time": "00:12:46.260 --> 00:12:50.649", "speaker": "Alexander Vasserman", "text": "Oh, Bikipedia file. So with several documents that"}, {"source_name": "lecture8", "index": 26, "time": "00:12:50.950 --> 00:12:54.980", "speaker": "Alexander Vasserman", "text": "basically outputs this document collection."}, {"source_name": "lecture8", "index": 27, "time": "00:12:55.260 --> 00:12:57.030", "speaker": "Alexander Vasserman", "text": "So this"}, {"source_name": "lecture8", "index": 28, "time": "00:12:57.090 --> 00:13:01.949", "speaker": "Alexander Vasserman", "text": "V key source or in general document, source abstraction"}, {"source_name": "lecture8", "index": 29, "time": "00:13:02.470 --> 00:13:05.929", "speaker": "Alexander Vasserman", "text": "that we will be using to"}, {"source_name": "lecture8", "index": 30, "time": "00:13:05.990 --> 00:13:06.900", "speaker": "Alexander Vasserman", "text": "yeah"}, {"source_name": "lecture8", "index": 31, "time": "00:13:07.170 --> 00:13:09.619", "speaker": "Alexander Vasserman", "text": "data into our search engine."}, {"source_name": "lecture8", "index": 32, "time": "00:13:10.670 --> 00:13:11.430", "speaker": "Alexander Vasserman", "text": "Right?"}, {"source_name": "lecture8", "index": 33, "time": "00:13:11.760 --> 00:13:12.850", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture8", "index": 34, "time": "00:13:14.360 --> 00:13:23.229", "speaker": "Alexander Vasserman", "text": "this is the document acquisition phase of our indexing pipeline. If you remember, there were"}, {"source_name": "lecture8", "index": 35, "time": "00:13:24.340 --> 00:13:32.109", "speaker": "Alexander Vasserman", "text": "several stages to the pipeline to the document acquisition stage which we"}, {"source_name": "lecture8", "index": 36, "time": "00:13:32.390 --> 00:13:38.609", "speaker": "Alexander Vasserman", "text": "set is going to be implemented by using this document, source."}, {"source_name": "lecture8", "index": 37, "time": "00:13:38.770 --> 00:13:40.020", "speaker": "Alexander Vasserman", "text": "concept."}, {"source_name": "lecture8", "index": 38, "time": "00:13:40.060 --> 00:13:42.140", "speaker": "Alexander Vasserman", "text": "and any documents."}, {"source_name": "lecture8", "index": 39, "time": "00:13:42.580 --> 00:13:45.590", "speaker": "Alexander Vasserman", "text": "And then we said, we'll have"}, {"source_name": "lecture8", "index": 40, "time": "00:13:45.860 --> 00:13:47.140", "speaker": "Alexander Vasserman", "text": "a stage"}, {"source_name": "lecture8", "index": 41, "time": "00:13:47.160 --> 00:13:50.270", "speaker": "Alexander Vasserman", "text": "are called the document transformation."}, {"source_name": "lecture8", "index": 42, "time": "00:13:51.930 --> 00:13:55.310", "speaker": "Alexander Vasserman", "text": "and finally, we will have our index creation."}, {"source_name": "lecture8", "index": 43, "time": "00:13:56.370 --> 00:13:57.870", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture8", "index": 44, "time": "00:13:57.930 --> 00:14:02.970", "speaker": "Alexander Vasserman", "text": "we also talked about the fact that this process"}, {"source_name": "lecture8", "index": 45, "time": "00:14:03.200 --> 00:14:04.460", "speaker": "Alexander Vasserman", "text": "out boots"}, {"source_name": "lecture8", "index": 46, "time": "00:14:04.580 --> 00:14:10.709", "speaker": "Alexander Vasserman", "text": "has to outputs the the document collection and the index that will be used to"}, {"source_name": "lecture8", "index": 47, "time": "00:14:10.750 --> 00:14:12.730", "speaker": "Alexander Vasserman", "text": "due to the query Time."}, {"source_name": "lecture8", "index": 48, "time": "00:14:15.000 --> 00:14:20.030", "speaker": "Alexander Vasserman", "text": "Do you have any questions about that or anything else that we did last time."}, {"source_name": "lecture8", "index": 49, "time": "00:14:26.940 --> 00:14:29.190", "speaker": "Alexander Vasserman", "text": "Okay, No questions."}, {"source_name": "lecture8", "index": 50, "time": "00:14:31.820 --> 00:14:33.169", "speaker": "Alexander Vasserman", "text": "Everything was clear"}, {"source_name": "lecture8", "index": 51, "time": "00:14:35.840 --> 00:14:36.460", "speaker": "Alexander Vasserman", "text": "right."}, {"source_name": "lecture8", "index": 52, "time": "00:14:37.580 --> 00:14:39.920", "speaker": "Alexander Vasserman", "text": "You would be able to, you know."}, {"source_name": "lecture8", "index": 53, "time": "00:14:40.100 --> 00:14:40.950", "speaker": "Alexander Vasserman", "text": "have"}, {"source_name": "lecture8", "index": 54, "time": "00:14:41.020 --> 00:14:43.259", "speaker": "Alexander Vasserman", "text": "something like that created on your own."}, {"source_name": "lecture8", "index": 55, "time": "00:14:45.780 --> 00:14:47.180", "speaker": "Alexander Vasserman", "text": "All right, great."}, {"source_name": "lecture8", "index": 56, "time": "00:14:51.260 --> 00:14:52.119", "speaker": "Alexander Vasserman", "text": "all right."}, {"source_name": "lecture8", "index": 57, "time": "00:14:52.320 --> 00:14:53.170", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture8", "index": 58, "time": "00:14:53.480 --> 00:15:07.450", "speaker": "Fahad Khan", "text": "you have a question great. Well, for me it was definitely confusing, because i'm just trying to really understand what we did in the read documents. So if you could like kind of just lightly go over again what we did in that."}, {"source_name": "lecture8", "index": 59, "time": "00:15:07.880 --> 00:15:08.880", "speaker": "Fahad Khan", "text": "Okay."}, {"source_name": "lecture8", "index": 60, "time": "00:15:09.030 --> 00:15:12.320", "speaker": "Alexander Vasserman", "text": "yes, absolutely. Thank you for the question."}, {"source_name": "lecture8", "index": 61, "time": "00:15:12.550 --> 00:15:18.439", "speaker": "Alexander Vasserman", "text": "So remember Basically, what is the data that you're looking at?"}, {"source_name": "lecture8", "index": 62, "time": "00:15:19.050 --> 00:15:21.389", "speaker": "Alexander Vasserman", "text": "It is a"}, {"source_name": "lecture8", "index": 63, "time": "00:15:21.730 --> 00:15:23.339", "speaker": "Alexander Vasserman", "text": "a file that"}, {"source_name": "lecture8", "index": 64, "time": "00:15:23.370 --> 00:15:24.620", "speaker": "Alexander Vasserman", "text": "contains"}, {"source_name": "lecture8", "index": 65, "time": "00:15:24.640 --> 00:15:26.580", "speaker": "Alexander Vasserman", "text": "this essentially"}, {"source_name": "lecture8", "index": 66, "time": "00:15:26.790 --> 00:15:33.889", "speaker": "Alexander Vasserman", "text": "Json object, right? So Json is just the text representation of the data in a particular format."}, {"source_name": "lecture8", "index": 67, "time": "00:15:34.440 --> 00:15:35.140", "speaker": "Alexander Vasserman", "text": "That"}, {"source_name": "lecture8", "index": 68, "time": "00:15:35.180 --> 00:15:36.850", "speaker": "Alexander Vasserman", "text": "kind of looks like"}, {"source_name": "lecture8", "index": 69, "time": "00:15:37.010 --> 00:15:38.010", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture8", "index": 70, "time": "00:15:38.280 --> 00:15:42.860", "speaker": "Alexander Vasserman", "text": "python data structures, right? So in this particular case"}, {"source_name": "lecture8", "index": 71, "time": "00:15:42.930 --> 00:15:48.600", "speaker": "Alexander Vasserman", "text": "we have a list. Right? So the this issue the school. It starts with the square bracket."}, {"source_name": "lecture8", "index": 72, "time": "00:15:48.640 --> 00:15:51.159", "speaker": "Alexander Vasserman", "text": "So it's a a list"}, {"source_name": "lecture8", "index": 73, "time": "00:15:51.330 --> 00:15:54.060", "speaker": "Alexander Vasserman", "text": "and off"}, {"source_name": "lecture8", "index": 74, "time": "00:15:54.180 --> 00:15:55.810", "speaker": "Alexander Vasserman", "text": "dictionaries right?"}, {"source_name": "lecture8", "index": 75, "time": "00:15:55.960 --> 00:15:59.379", "speaker": "Alexander Vasserman", "text": "So the the first thing in there is a dictionary"}, {"source_name": "lecture8", "index": 76, "time": "00:16:00.420 --> 00:16:02.419", "speaker": "Alexander Vasserman", "text": "Actually, let me"}, {"source_name": "lecture8", "index": 77, "time": "00:16:02.830 --> 00:16:07.749", "speaker": "Alexander Vasserman", "text": "open it up in the editor. I think that it will be"}, {"source_name": "lecture8", "index": 78, "time": "00:16:07.860 --> 00:16:09.600", "speaker": "Alexander Vasserman", "text": "a little bit easier."}, {"source_name": "lecture8", "index": 79, "time": "00:16:17.560 --> 00:16:18.480", "speaker": "Alexander Vasserman", "text": "Yes."}, {"source_name": "lecture8", "index": 80, "time": "00:16:18.650 --> 00:16:20.120", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture8", "index": 81, "time": "00:16:21.420 --> 00:16:26.009", "speaker": "Alexander Vasserman", "text": "so yes. So you see that it's a list. It has"}, {"source_name": "lecture8", "index": 82, "time": "00:16:26.100 --> 00:16:27.590", "speaker": "Alexander Vasserman", "text": "multiple"}, {"source_name": "lecture8", "index": 83, "time": "00:16:27.640 --> 00:16:29.709", "speaker": "Alexander Vasserman", "text": "dictionaries inside the list."}, {"source_name": "lecture8", "index": 84, "time": "00:16:29.990 --> 00:16:33.510", "speaker": "Alexander Vasserman", "text": "Alright, so Editor allows me to collapse different"}, {"source_name": "lecture8", "index": 85, "time": "00:16:33.730 --> 00:16:40.119", "speaker": "Alexander Vasserman", "text": "portions of this file of this text file, because it understands Jason format"}, {"source_name": "lecture8", "index": 86, "time": "00:16:40.310 --> 00:16:42.270", "speaker": "Alexander Vasserman", "text": "right? And each record"}, {"source_name": "lecture8", "index": 87, "time": "00:16:42.930 --> 00:16:45.030", "speaker": "Alexander Vasserman", "text": "or dictionary kind of"}, {"source_name": "lecture8", "index": 88, "time": "00:16:45.130 --> 00:16:53.610", "speaker": "Alexander Vasserman", "text": "has multiple fields. So the fields are the keys of the dictionary. Right? So we have Id URL title."}, {"source_name": "lecture8", "index": 89, "time": "00:16:53.660 --> 00:16:54.960", "speaker": "Alexander Vasserman", "text": "You need text."}, {"source_name": "lecture8", "index": 90, "time": "00:16:55.560 --> 00:16:56.970", "speaker": "Alexander Vasserman", "text": "You need to."}, {"source_name": "lecture8", "index": 91, "time": "00:16:57.570 --> 00:16:59.949", "speaker": "Alexander Vasserman", "text": "I think that's basically it."}, {"source_name": "lecture8", "index": 92, "time": "00:17:01.580 --> 00:17:02.470", "speaker": "Alexander Vasserman", "text": "Yes."}, {"source_name": "lecture8", "index": 93, "time": "00:17:02.520 --> 00:17:05.460", "speaker": "Alexander Vasserman", "text": "So these are the fields, and the"}, {"source_name": "lecture8", "index": 94, "time": "00:17:05.690 --> 00:17:10.660", "speaker": "Alexander Vasserman", "text": "values are either text values or in case of any tokens."}, {"source_name": "lecture8", "index": 95, "time": "00:17:10.750 --> 00:17:12.649", "speaker": "Alexander Vasserman", "text": "it's another list."}, {"source_name": "lecture8", "index": 96, "time": "00:17:14.480 --> 00:17:18.159", "speaker": "Alexander Vasserman", "text": "for now all we care about is the in text"}, {"source_name": "lecture8", "index": 97, "time": "00:17:18.619 --> 00:17:20.589", "speaker": "Alexander Vasserman", "text": "and the the id."}, {"source_name": "lecture8", "index": 98, "time": "00:17:21.010 --> 00:17:28.669", "speaker": "Alexander Vasserman", "text": "So those are the 2 things. So Id we want to be able to identify this document. So each"}, {"source_name": "lecture8", "index": 99, "time": "00:17:28.920 --> 00:17:31.370", "speaker": "Alexander Vasserman", "text": "kind of record has a different Id."}, {"source_name": "lecture8", "index": 100, "time": "00:17:31.900 --> 00:17:35.440", "speaker": "Alexander Vasserman", "text": "and the text is really what you're going to be working with."}, {"source_name": "lecture8", "index": 101, "time": "00:17:36.420 --> 00:17:37.000", "speaker": "Alexander Vasserman", "text": "Right."}, {"source_name": "lecture8", "index": 102, "time": "00:17:37.180 --> 00:17:38.090", "speaker": "Alexander Vasserman", "text": "Alex."}, {"source_name": "lecture8", "index": 103, "time": "00:17:38.310 --> 00:17:39.440", "speaker": "Alexander Vasserman", "text": "You have a question."}, {"source_name": "lecture8", "index": 104, "time": "00:17:39.770 --> 00:17:45.659", "speaker": "Alex Wojtowicz", "text": "Yeah. So can you describe what exactly goes into the doc collection when we have a document"}, {"source_name": "lecture8", "index": 105, "time": "00:17:46.390 --> 00:17:48.979", "speaker": "Alex Wojtowicz", "text": "collection type"}, {"source_name": "lecture8", "index": 106, "time": "00:17:49.320 --> 00:17:51.830", "speaker": "Alex Wojtowicz", "text": "as like a dictionary list, and what we add in there."}, {"source_name": "lecture8", "index": 107, "time": "00:17:53.230 --> 00:18:03.139", "speaker": "Alexander Vasserman", "text": "Yes, so let me get to this. I just want to make sure first, that we understand what is the data that we're looking at? And"}, {"source_name": "lecture8", "index": 108, "time": "00:18:03.450 --> 00:18:05.700", "speaker": "Alexander Vasserman", "text": "well, this is basically what is going to"}, {"source_name": "lecture8", "index": 109, "time": "00:18:05.890 --> 00:18:08.549", "speaker": "Alexander Vasserman", "text": "be going into the document collection."}, {"source_name": "lecture8", "index": 110, "time": "00:18:08.570 --> 00:18:09.280", "speaker": "Alexander Vasserman", "text": "right?"}, {"source_name": "lecture8", "index": 111, "time": "00:18:09.300 --> 00:18:14.759", "speaker": "Alexander Vasserman", "text": "The so this is the starting data in the file that we are going to be reading"}, {"source_name": "lecture8", "index": 112, "time": "00:18:14.820 --> 00:18:15.670", "speaker": "Alexander Vasserman", "text": "to"}, {"source_name": "lecture8", "index": 113, "time": "00:18:16.110 --> 00:18:18.360", "speaker": "Alexander Vasserman", "text": "create our document collection"}, {"source_name": "lecture8", "index": 114, "time": "00:18:18.460 --> 00:18:19.519", "speaker": "Alexander Vasserman", "text": "in Python."}, {"source_name": "lecture8", "index": 115, "time": "00:18:20.210 --> 00:18:25.830", "speaker": "Alex Wojtowicz", "text": "So is it the entire Json file that goes into the document collection, or is it the Id? Is it?"}, {"source_name": "lecture8", "index": 116, "time": "00:18:26.050 --> 00:18:29.650", "speaker": "Alex Wojtowicz", "text": "E? And the initial in it? Text is a value."}, {"source_name": "lecture8", "index": 117, "time": "00:18:30.650 --> 00:18:31.670", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture8", "index": 118, "time": "00:18:32.520 --> 00:18:33.210", "speaker": "Alexander Vasserman", "text": "it"}, {"source_name": "lecture8", "index": 119, "time": "00:18:34.050 --> 00:18:35.180", "speaker": "Alexander Vasserman", "text": "is."}, {"source_name": "lecture8", "index": 120, "time": "00:18:35.860 --> 00:18:39.569", "speaker": "Alexander Vasserman", "text": "It's the documents that we create from"}, {"source_name": "lecture8", "index": 121, "time": "00:18:39.600 --> 00:18:41.350", "speaker": "Alexander Vasserman", "text": "this the entire file."}, {"source_name": "lecture8", "index": 122, "time": "00:18:41.510 --> 00:18:42.290", "speaker": "Alexander Vasserman", "text": "Right?"}, {"source_name": "lecture8", "index": 123, "time": "00:18:42.450 --> 00:18:43.570", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture8", "index": 124, "time": "00:18:44.070 --> 00:18:50.300", "speaker": "Alexander Vasserman", "text": "now let's kind of go back to the our indexing process and the document collection over"}, {"source_name": "lecture8", "index": 125, "time": "00:18:50.590 --> 00:18:51.790", "speaker": "Alexander Vasserman", "text": "the the source"}, {"source_name": "lecture8", "index": 126, "time": "00:18:51.890 --> 00:18:55.430", "speaker": "Alexander Vasserman", "text": "implementation, right? So"}, {"source_name": "lecture8", "index": 127, "time": "00:18:55.740 --> 00:18:57.809", "speaker": "Alexander Vasserman", "text": "what we are seeing is"}, {"source_name": "lecture8", "index": 128, "time": "00:18:58.460 --> 00:18:59.899", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture8", "index": 129, "time": "00:19:00.930 --> 00:19:06.919", "speaker": "Alexander Vasserman", "text": "basically did. The first thing that they're doing is we are opening that file right? So that's the"}, {"source_name": "lecture8", "index": 130, "time": "00:19:07.120 --> 00:19:13.239", "speaker": "Alexander Vasserman", "text": "pass up on my computer to that file on your computer. You might have to change it"}, {"source_name": "lecture8", "index": 131, "time": "00:19:13.270 --> 00:19:15.729", "speaker": "Alexander Vasserman", "text": "wherever you downloaded that file to."}, {"source_name": "lecture8", "index": 132, "time": "00:19:15.780 --> 00:19:19.990", "speaker": "Alexander Vasserman", "text": "so that that file is available in the Content."}, {"source_name": "lecture8", "index": 133, "time": "00:19:20.120 --> 00:19:24.790", "speaker": "Alexander Vasserman", "text": "A section of the. And I think I've posted."}, {"source_name": "lecture8", "index": 134, "time": "00:19:24.860 --> 00:19:26.409", "speaker": "Alexander Vasserman", "text": "we understood before."}, {"source_name": "lecture8", "index": 135, "time": "00:19:26.810 --> 00:19:27.750", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture8", "index": 136, "time": "00:19:28.390 --> 00:19:29.270", "speaker": "Alexander Vasserman", "text": "here."}, {"source_name": "lecture8", "index": 137, "time": "00:19:29.840 --> 00:19:32.070", "speaker": "Alexander Vasserman", "text": "basically opening that file and"}, {"source_name": "lecture8", "index": 138, "time": "00:19:32.380 --> 00:19:35.550", "speaker": "Alexander Vasserman", "text": "this load function in Json Library"}, {"source_name": "lecture8", "index": 139, "time": "00:19:35.960 --> 00:19:37.670", "speaker": "Alexander Vasserman", "text": "converts the"}, {"source_name": "lecture8", "index": 140, "time": "00:19:38.150 --> 00:19:39.080", "speaker": "Alexander Vasserman", "text": "next"}, {"source_name": "lecture8", "index": 141, "time": "00:19:39.520 --> 00:19:40.320", "speaker": "Alexander Vasserman", "text": "in the"}, {"source_name": "lecture8", "index": 142, "time": "00:19:40.560 --> 00:19:43.040", "speaker": "Alexander Vasserman", "text": "essentially text file that we looked at"}, {"source_name": "lecture8", "index": 143, "time": "00:19:43.200 --> 00:19:45.500", "speaker": "Alexander Vasserman", "text": "into a python"}, {"source_name": "lecture8", "index": 144, "time": "00:19:46.000 --> 00:19:47.729", "speaker": "Alexander Vasserman", "text": "corresponding python structure."}, {"source_name": "lecture8", "index": 145, "time": "00:19:47.970 --> 00:19:53.849", "speaker": "Alexander Vasserman", "text": "Right? So Doc records now he's at least with of dictionaries."}, {"source_name": "lecture8", "index": 146, "time": "00:19:54.670 --> 00:19:58.970", "speaker": "Alexander Vasserman", "text": "Right? So we went from the text representation of it"}, {"source_name": "lecture8", "index": 147, "time": "00:19:59.300 --> 00:20:01.249", "speaker": "Alexander Vasserman", "text": "that was in the file here"}, {"source_name": "lecture8", "index": 148, "time": "00:20:01.850 --> 00:20:03.320", "speaker": "Alexander Vasserman", "text": "to a"}, {"source_name": "lecture8", "index": 149, "time": "00:20:03.400 --> 00:20:05.820", "speaker": "Alexander Vasserman", "text": "an actual python object"}, {"source_name": "lecture8", "index": 150, "time": "00:20:06.560 --> 00:20:09.459", "speaker": "Alexander Vasserman", "text": "that we're dealing with that has all the same data."}, {"source_name": "lecture8", "index": 151, "time": "00:20:11.230 --> 00:20:12.310", "speaker": "Alexander Vasserman", "text": "No."}, {"source_name": "lecture8", "index": 152, "time": "00:20:12.840 --> 00:20:15.519", "speaker": "Alexander Vasserman", "text": "What we want to do is"}, {"source_name": "lecture8", "index": 153, "time": "00:20:16.980 --> 00:20:23.259", "speaker": "Alexander Vasserman", "text": "to represent that data in some standard form. So the rest of our process"}, {"source_name": "lecture8", "index": 154, "time": "00:20:23.400 --> 00:20:26.740", "speaker": "Alexander Vasserman", "text": "doesn't have to know where that data came from."}, {"source_name": "lecture8", "index": 155, "time": "00:20:27.420 --> 00:20:30.490", "speaker": "Alexander Vasserman", "text": "right? And as that standard."}, {"source_name": "lecture8", "index": 156, "time": "00:20:31.400 --> 00:20:35.349", "speaker": "Alexander Vasserman", "text": "Or if we've decided that we're going to be using document collection as that standard."}, {"source_name": "lecture8", "index": 157, "time": "00:20:35.610 --> 00:20:36.280", "speaker": "Alexander Vasserman", "text": "Right?"}, {"source_name": "lecture8", "index": 158, "time": "00:20:36.540 --> 00:20:38.540", "speaker": "Alexander Vasserman", "text": "So basically"}, {"source_name": "lecture8", "index": 159, "time": "00:20:38.740 --> 00:20:40.030", "speaker": "Alexander Vasserman", "text": "for each"}, {"source_name": "lecture8", "index": 160, "time": "00:20:40.330 --> 00:20:42.360", "speaker": "Alexander Vasserman", "text": "record that you've read."}, {"source_name": "lecture8", "index": 161, "time": "00:20:42.540 --> 00:20:44.540", "speaker": "Alexander Vasserman", "text": "we creating a document"}, {"source_name": "lecture8", "index": 162, "time": "00:20:44.850 --> 00:20:49.879", "speaker": "Alexander Vasserman", "text": "corresponding to that record, right? Be taking just the Id and the text."}, {"source_name": "lecture8", "index": 163, "time": "00:20:50.310 --> 00:20:53.250", "speaker": "Alexander Vasserman", "text": "because those are the fields that we're interested in."}, {"source_name": "lecture8", "index": 164, "time": "00:20:53.430 --> 00:20:55.489", "speaker": "Alexander Vasserman", "text": "and creating a document out of that."}, {"source_name": "lecture8", "index": 165, "time": "00:20:55.650 --> 00:21:03.360", "speaker": "Alexander Vasserman", "text": "and add that document into the document collection, right? I put, maybe for a little bit more clarity."}, {"source_name": "lecture8", "index": 166, "time": "00:21:03.440 --> 00:21:05.999", "speaker": "Alexander Vasserman", "text": "Separate this out, and say that"}, {"source_name": "lecture8", "index": 167, "time": "00:21:06.430 --> 00:21:08.889", "speaker": "Alexander Vasserman", "text": "we first create a talk."}, {"source_name": "lecture8", "index": 168, "time": "00:21:09.480 --> 00:21:10.370", "speaker": "Alexander Vasserman", "text": "and then"}, {"source_name": "lecture8", "index": 169, "time": "00:21:10.450 --> 00:21:11.860", "speaker": "Alexander Vasserman", "text": "let's add that, though"}, {"source_name": "lecture8", "index": 170, "time": "00:21:12.100 --> 00:21:14.509", "speaker": "Alexander Vasserman", "text": "right, so this is the same thing. I just"}, {"source_name": "lecture8", "index": 171, "time": "00:21:14.880 --> 00:21:17.570", "speaker": "Alexander Vasserman", "text": "for a little bit better the ability to that out."}, {"source_name": "lecture8", "index": 172, "time": "00:21:18.790 --> 00:21:22.819", "speaker": "Alexander Vasserman", "text": "And so that's the the all. This document collection is is"}, {"source_name": "lecture8", "index": 173, "time": "00:21:23.160 --> 00:21:28.440", "speaker": "Alexander Vasserman", "text": "basically any class that represents a list of those documents"}, {"source_name": "lecture8", "index": 174, "time": "00:21:28.780 --> 00:21:29.870", "speaker": "Alexander Vasserman", "text": "that me Friday."}, {"source_name": "lecture8", "index": 175, "time": "00:21:31.860 --> 00:21:32.840", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture8", "index": 176, "time": "00:21:32.990 --> 00:21:39.240", "speaker": "Alexander Vasserman", "text": "you know, this is just reading in the data and extracting the parts of the data that we need."}, {"source_name": "lecture8", "index": 177, "time": "00:21:41.350 --> 00:21:43.490", "speaker": "Alexander Vasserman", "text": "Alex. Does that answer your question?"}, {"source_name": "lecture8", "index": 178, "time": "00:21:44.290 --> 00:21:50.460", "speaker": "Alex Wojtowicz", "text": "Mostly I just have like one quick, clarifying question. So basically the document collection is a list of"}, {"source_name": "lecture8", "index": 179, "time": "00:21:51.030 --> 00:21:54.619", "speaker": "Alex Wojtowicz", "text": "document object, and that object is just Doc. Id in text."}, {"source_name": "lecture8", "index": 180, "time": "00:21:55.110 --> 00:21:59.049", "speaker": "Alexander Vasserman", "text": "That's exactly right. So yes, so we have document collection"}, {"source_name": "lecture8", "index": 181, "time": "00:21:59.390 --> 00:22:02.420", "speaker": "Alexander Vasserman", "text": "for at least right now. That's all"}, {"source_name": "lecture8", "index": 182, "time": "00:22:02.670 --> 00:22:04.900", "speaker": "Alexander Vasserman", "text": "that's in. There is a list"}, {"source_name": "lecture8", "index": 183, "time": "00:22:05.180 --> 00:22:06.860", "speaker": "Alexander Vasserman", "text": "of documents."}, {"source_name": "lecture8", "index": 184, "time": "00:22:07.410 --> 00:22:09.370", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture8", "index": 185, "time": "00:22:09.580 --> 00:22:13.139", "speaker": "Alexander Vasserman", "text": "each document is of this document type."}, {"source_name": "lecture8", "index": 186, "time": "00:22:13.420 --> 00:22:15.190", "speaker": "Alexander Vasserman", "text": "And really yes, I should"}, {"source_name": "lecture8", "index": 187, "time": "00:22:15.370 --> 00:22:17.250", "speaker": "Alexander Vasserman", "text": "follow my own."}, {"source_name": "lecture8", "index": 188, "time": "00:22:17.480 --> 00:22:18.320", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 189, "time": "00:22:18.550 --> 00:22:20.129", "speaker": "Alexander Vasserman", "text": "rules and say."}, {"source_name": "lecture8", "index": 190, "time": "00:22:21.170 --> 00:22:24.059", "speaker": "Alexander Vasserman", "text": "and do the annotation sale need to reorder"}, {"source_name": "lecture8", "index": 191, "time": "00:22:24.500 --> 00:22:26.650", "speaker": "Alexander Vasserman", "text": "things a little bit, so that"}, {"source_name": "lecture8", "index": 192, "time": "00:22:27.130 --> 00:22:30.429", "speaker": "Alexander Vasserman", "text": "document collection knows what document is"}, {"source_name": "lecture8", "index": 193, "time": "00:22:30.710 --> 00:22:31.750", "speaker": "Alexander Vasserman", "text": "so."}, {"source_name": "lecture8", "index": 194, "time": "00:22:32.220 --> 00:22:33.359", "speaker": "Alexander Vasserman", "text": "and let me"}, {"source_name": "lecture8", "index": 195, "time": "00:22:33.950 --> 00:22:34.780", "speaker": "Alexander Vasserman", "text": "doing."}, {"source_name": "lecture8", "index": 196, "time": "00:22:34.850 --> 00:22:38.749", "speaker": "Alexander Vasserman", "text": "Do the annotation here as well, so that it's absolutely clear."}, {"source_name": "lecture8", "index": 197, "time": "00:22:40.340 --> 00:22:42.710", "speaker": "Alexander Vasserman", "text": "Again, the other patients are"}, {"source_name": "lecture8", "index": 198, "time": "00:22:42.780 --> 00:22:44.220", "speaker": "Alexander Vasserman", "text": "optional."}, {"source_name": "lecture8", "index": 199, "time": "00:22:44.630 --> 00:22:48.420", "speaker": "Alexander Vasserman", "text": "So we are basically deciding where to put annotations"}, {"source_name": "lecture8", "index": 200, "time": "00:22:48.490 --> 00:22:51.379", "speaker": "Alexander Vasserman", "text": "just for better readability. Right?"}, {"source_name": "lecture8", "index": 201, "time": "00:22:51.630 --> 00:22:55.019", "speaker": "Alexander Vasserman", "text": "So now it's hopefully clear what"}, {"source_name": "lecture8", "index": 202, "time": "00:22:55.170 --> 00:23:03.740", "speaker": "Alexander Vasserman", "text": "that document collection is just contains just list of documents, and the way we've created that list is by calling"}, {"source_name": "lecture8", "index": 203, "time": "00:23:03.930 --> 00:23:05.170", "speaker": "Alexander Vasserman", "text": "a document."}, {"source_name": "lecture8", "index": 204, "time": "00:23:05.380 --> 00:23:06.140", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 205, "time": "00:23:06.400 --> 00:23:12.209", "speaker": "Alexander Vasserman", "text": "function repeatedly to extend or depend things to that list."}, {"source_name": "lecture8", "index": 206, "time": "00:23:13.320 --> 00:23:13.940", "speaker": "Alex Wojtowicz", "text": "Yeah, okay."}, {"source_name": "lecture8", "index": 207, "time": "00:23:13.970 --> 00:23:14.770", "speaker": "Alex Wojtowicz", "text": "Thank you."}, {"source_name": "lecture8", "index": 208, "time": "00:23:15.230 --> 00:23:15.940", "speaker": "Alexander Vasserman", "text": "All right."}, {"source_name": "lecture8", "index": 209, "time": "00:23:16.500 --> 00:23:17.250", "speaker": "Alexander Vasserman", "text": "Great."}, {"source_name": "lecture8", "index": 210, "time": "00:23:19.160 --> 00:23:20.020", "speaker": "Alexander Vasserman", "text": "All right."}, {"source_name": "lecture8", "index": 211, "time": "00:23:20.600 --> 00:23:22.069", "speaker": "Alexander Vasserman", "text": "Did that make it"}, {"source_name": "lecture8", "index": 212, "time": "00:23:22.880 --> 00:23:25.030", "speaker": "Alexander Vasserman", "text": "kind of less confusing?"}, {"source_name": "lecture8", "index": 213, "time": "00:23:25.500 --> 00:23:26.680", "speaker": "Fahad Khan", "text": "Yeah, for sure."}, {"source_name": "lecture8", "index": 214, "time": "00:23:27.050 --> 00:23:28.849", "speaker": "Alexander Vasserman", "text": "Awesome, all right."}, {"source_name": "lecture8", "index": 215, "time": "00:23:29.370 --> 00:23:34.559", "speaker": "Alexander Vasserman", "text": "So thank you for those questions definitely. A lot of help, because, you know, from"}, {"source_name": "lecture8", "index": 216, "time": "00:23:34.620 --> 00:23:37.880", "speaker": "Alexander Vasserman", "text": "last time I know it could have been like, you know"}, {"source_name": "lecture8", "index": 217, "time": "00:23:37.960 --> 00:23:40.290", "speaker": "Alexander Vasserman", "text": "something's kind of"}, {"source_name": "lecture8", "index": 218, "time": "00:23:40.800 --> 00:23:45.499", "speaker": "Alexander Vasserman", "text": "been lost, and we also stopped kind of in the middle. So this is definitely been"}, {"source_name": "lecture8", "index": 219, "time": "00:23:45.560 --> 00:23:48.869", "speaker": "Alexander Vasserman", "text": "a good review, probably for everyone."}, {"source_name": "lecture8", "index": 220, "time": "00:23:49.840 --> 00:23:51.690", "speaker": "Alexander Vasserman", "text": "even for me. So."}, {"source_name": "lecture8", "index": 221, "time": "00:23:53.320 --> 00:23:54.410", "speaker": "Alexander Vasserman", "text": "So let's"}, {"source_name": "lecture8", "index": 222, "time": "00:23:55.050 --> 00:23:55.970", "speaker": "Alexander Vasserman", "text": "keep going."}, {"source_name": "lecture8", "index": 223, "time": "00:23:58.450 --> 00:24:01.989", "speaker": "Alexander Vasserman", "text": "So what they did, the next thing that we want to do is"}, {"source_name": "lecture8", "index": 224, "time": "00:24:02.380 --> 00:24:04.040", "speaker": "Alexander Vasserman", "text": "have"}, {"source_name": "lecture8", "index": 225, "time": "00:24:05.090 --> 00:24:07.220", "speaker": "Alexander Vasserman", "text": "transformed documents."}, {"source_name": "lecture8", "index": 226, "time": "00:24:08.060 --> 00:24:09.440", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture8", "index": 227, "time": "00:24:12.550 --> 00:24:19.260", "speaker": "Alexander Vasserman", "text": "here, in in the document transformation. What we want is do normally"}, {"source_name": "lecture8", "index": 228, "time": "00:24:19.720 --> 00:24:21.650", "speaker": "Alexander Vasserman", "text": "normalize the"}, {"source_name": "lecture8", "index": 229, "time": "00:24:24.910 --> 00:24:27.000", "speaker": "Alexander Vasserman", "text": "the Dog Day text"}, {"source_name": "lecture8", "index": 230, "time": "00:24:27.120 --> 00:24:28.530", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture8", "index": 231, "time": "00:24:28.630 --> 00:24:33.780", "speaker": "Alexander Vasserman", "text": "also split it into the terms into tokens that will be"}, {"source_name": "lecture8", "index": 232, "time": "00:24:33.930 --> 00:24:36.010", "speaker": "Alexander Vasserman", "text": "using to"}, {"source_name": "lecture8", "index": 233, "time": "00:24:36.280 --> 00:24:39.700", "speaker": "Alexander Vasserman", "text": "do our matching or ranking with right. So"}, {"source_name": "lecture8", "index": 234, "time": "00:24:39.750 --> 00:24:46.150", "speaker": "Alexander Vasserman", "text": "if you remember again what you're trying to do here is kind of implement"}, {"source_name": "lecture8", "index": 235, "time": "00:24:46.300 --> 00:24:47.310", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture8", "index": 236, "time": "00:24:47.670 --> 00:24:53.130", "speaker": "Alexander Vasserman", "text": "search, the naive search that we did in ranking the py."}, {"source_name": "lecture8", "index": 237, "time": "00:24:53.610 --> 00:24:54.940", "speaker": "Alexander Vasserman", "text": "and there."}, {"source_name": "lecture8", "index": 238, "time": "00:24:55.500 --> 00:24:58.330", "speaker": "Alexander Vasserman", "text": "in order to do matching."}, {"source_name": "lecture8", "index": 239, "time": "00:24:58.380 --> 00:25:01.739", "speaker": "Alexander Vasserman", "text": "we needed to split the query terms."}, {"source_name": "lecture8", "index": 240, "time": "00:25:03.040 --> 00:25:12.339", "speaker": "Alexander Vasserman", "text": "We split the query into query terms, and do a little bit of normalization here as well. So this lowercasing everything and the same is document terms."}, {"source_name": "lecture8", "index": 241, "time": "00:25:12.440 --> 00:25:13.690", "speaker": "Alexander Vasserman", "text": "So basically"}, {"source_name": "lecture8", "index": 242, "time": "00:25:14.190 --> 00:25:14.990", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture8", "index": 243, "time": "00:25:15.200 --> 00:25:19.749", "speaker": "Alexander Vasserman", "text": "this is the part that you're trying to reproduce now as a separate section."}, {"source_name": "lecture8", "index": 244, "time": "00:25:19.810 --> 00:25:21.289", "speaker": "Alexander Vasserman", "text": "so that we can"}, {"source_name": "lecture8", "index": 245, "time": "00:25:21.550 --> 00:25:22.540", "speaker": "Alexander Vasserman", "text": "make it"}, {"source_name": "lecture8", "index": 246, "time": "00:25:23.010 --> 00:25:24.700", "speaker": "Alexander Vasserman", "text": "more"}, {"source_name": "lecture8", "index": 247, "time": "00:25:24.920 --> 00:25:25.630", "speaker": "Alexander Vasserman", "text": "well."}, {"source_name": "lecture8", "index": 248, "time": "00:25:26.410 --> 00:25:29.130", "speaker": "Alexander Vasserman", "text": "So this is a very simplistic implementation"}, {"source_name": "lecture8", "index": 249, "time": "00:25:30.250 --> 00:25:35.740", "speaker": "Alexander Vasserman", "text": "will work on better implementation in the fall following our lessons."}, {"source_name": "lecture8", "index": 250, "time": "00:25:35.800 --> 00:25:37.549", "speaker": "Alexander Vasserman", "text": "But if you split it up"}, {"source_name": "lecture8", "index": 251, "time": "00:25:37.730 --> 00:25:40.460", "speaker": "Alexander Vasserman", "text": "in this, chunks like we're doing"}, {"source_name": "lecture8", "index": 252, "time": "00:25:40.580 --> 00:25:43.700", "speaker": "Alexander Vasserman", "text": "in the indexing process it makes it easier"}, {"source_name": "lecture8", "index": 253, "time": "00:25:43.730 --> 00:25:47.170", "speaker": "Alexander Vasserman", "text": "to modify those kind of well-defined"}, {"source_name": "lecture8", "index": 254, "time": "00:25:47.250 --> 00:25:49.000", "speaker": "Alexander Vasserman", "text": "pieces separately."}, {"source_name": "lecture8", "index": 255, "time": "00:25:51.490 --> 00:25:55.080", "speaker": "Alexander Vasserman", "text": "Does that make sense where we are and what we're trying to do?"}, {"source_name": "lecture8", "index": 256, "time": "00:25:56.430 --> 00:25:57.510", "speaker": "Alexander Vasserman", "text": "Yes."}, {"source_name": "lecture8", "index": 257, "time": "00:25:57.930 --> 00:26:02.079", "speaker": "Fahad Khan", "text": "Yeah. Why do we have to transform document functions?"}, {"source_name": "lecture8", "index": 258, "time": "00:26:02.650 --> 00:26:07.559", "speaker": "Alexander Vasserman", "text": "Yes, so we have transform document"}, {"source_name": "lecture8", "index": 259, "time": "00:26:08.800 --> 00:26:09.970", "speaker": "Alexander Vasserman", "text": "of each"}, {"source_name": "lecture8", "index": 260, "time": "00:26:10.030 --> 00:26:13.210", "speaker": "Alexander Vasserman", "text": "takes a single text, object."}, {"source_name": "lecture8", "index": 261, "time": "00:26:13.630 --> 00:26:18.589", "speaker": "Alexander Vasserman", "text": "single thing, object and outputs, tokens, and really"}, {"source_name": "lecture8", "index": 262, "time": "00:26:18.690 --> 00:26:20.780", "speaker": "Alexander Vasserman", "text": "I should probably."}, {"source_name": "lecture8", "index": 263, "time": "00:26:21.390 --> 00:26:22.260", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 264, "time": "00:26:22.860 --> 00:26:25.330", "speaker": "Alexander Vasserman", "text": "maybe it's something slightly different."}, {"source_name": "lecture8", "index": 265, "time": "00:26:25.410 --> 00:26:29.090", "speaker": "Alexander Vasserman", "text": "But so. And and then we had the"}, {"source_name": "lecture8", "index": 266, "time": "00:26:29.170 --> 00:26:36.700", "speaker": "Alexander Vasserman", "text": "transform documents Luro, which takes whole document, collection, and bill"}, {"source_name": "lecture8", "index": 267, "time": "00:26:37.120 --> 00:26:39.289", "speaker": "Alexander Vasserman", "text": "run the transformation on each document."}, {"source_name": "lecture8", "index": 268, "time": "00:26:40.210 --> 00:26:42.909", "speaker": "Alexander Vasserman", "text": "Right? So that's kind of the next step. Death here."}, {"source_name": "lecture8", "index": 269, "time": "00:26:43.240 --> 00:26:44.690", "speaker": "Alexander Vasserman", "text": "all going to do right now"}, {"source_name": "lecture8", "index": 270, "time": "00:26:46.390 --> 00:26:48.329", "speaker": "Alexander Vasserman", "text": "Let me actually the name."}, {"source_name": "lecture8", "index": 271, "time": "00:26:48.490 --> 00:26:53.299", "speaker": "Alexander Vasserman", "text": "Yes, so it's a little bit, confusing it less confusing and let's pull it"}, {"source_name": "lecture8", "index": 272, "time": "00:26:54.020 --> 00:26:55.240", "speaker": "Alexander Vasserman", "text": "talking nice."}, {"source_name": "lecture8", "index": 273, "time": "00:26:56.020 --> 00:26:57.749", "speaker": "Alexander Vasserman", "text": "So if you"}, {"source_name": "lecture8", "index": 274, "time": "00:26:58.750 --> 00:27:00.010", "speaker": "Alexander Vasserman", "text": "recall"}, {"source_name": "lecture8", "index": 275, "time": "00:27:00.630 --> 00:27:02.110", "speaker": "Alexander Vasserman", "text": "oh, the"}, {"source_name": "lecture8", "index": 276, "time": "00:27:04.920 --> 00:27:09.810", "speaker": "Alexander Vasserman", "text": "normalization of text and splitting it into tokens or terms"}, {"source_name": "lecture8", "index": 277, "time": "00:27:09.850 --> 00:27:11.819", "speaker": "Alexander Vasserman", "text": "is called the organization."}, {"source_name": "lecture8", "index": 278, "time": "00:27:11.940 --> 00:27:15.499", "speaker": "Alexander Vasserman", "text": "So Basically, the idea is"}, {"source_name": "lecture8", "index": 279, "time": "00:27:15.520 --> 00:27:16.550", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture8", "index": 280, "time": "00:27:17.330 --> 00:27:22.290", "speaker": "Alexander Vasserman", "text": "we want to have a representation"}, {"source_name": "lecture8", "index": 281, "time": "00:27:22.660 --> 00:27:23.700", "speaker": "Alexander Vasserman", "text": "Where?"}, {"source_name": "lecture8", "index": 282, "time": "00:27:25.010 --> 00:27:25.770", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 283, "time": "00:27:26.210 --> 00:27:26.900", "speaker": "Alexander Vasserman", "text": "okay."}, {"source_name": "lecture8", "index": 284, "time": "00:27:27.840 --> 00:27:31.539", "speaker": "Alexander Vasserman", "text": "independently, how words occur in the text"}, {"source_name": "lecture8", "index": 285, "time": "00:27:32.460 --> 00:27:33.809", "speaker": "Alexander Vasserman", "text": "they"}, {"source_name": "lecture8", "index": 286, "time": "00:27:34.230 --> 00:27:36.220", "speaker": "Alexander Vasserman", "text": "represented by the same"}, {"source_name": "lecture8", "index": 287, "time": "00:27:36.350 --> 00:27:37.370", "speaker": "Alexander Vasserman", "text": "stream"}, {"source_name": "lecture8", "index": 288, "time": "00:27:37.480 --> 00:27:39.069", "speaker": "Alexander Vasserman", "text": "or the same to them."}, {"source_name": "lecture8", "index": 289, "time": "00:27:40.680 --> 00:27:44.100", "speaker": "Alexander Vasserman", "text": "So we talked about words as terms"}, {"source_name": "lecture8", "index": 290, "time": "00:27:44.180 --> 00:27:45.330", "speaker": "Alexander Vasserman", "text": "tokens."}, {"source_name": "lecture8", "index": 291, "time": "00:27:45.460 --> 00:27:49.349", "speaker": "Alexander Vasserman", "text": "That is that they're basically all synonyms of each other."}, {"source_name": "lecture8", "index": 292, "time": "00:27:49.740 --> 00:27:54.129", "speaker": "Alexander Vasserman", "text": "They're used in slightly different contexts, but"}, {"source_name": "lecture8", "index": 293, "time": "00:27:54.310 --> 00:28:01.620", "speaker": "Alexander Vasserman", "text": "tokens and terms are more technical terms, and boards is just kind of well"}, {"source_name": "lecture8", "index": 294, "time": "00:28:01.660 --> 00:28:08.219", "speaker": "Alexander Vasserman", "text": "what they correspond to. They don't have to correspond to actual boards. We'll look into the"}, {"source_name": "lecture8", "index": 295, "time": "00:28:09.370 --> 00:28:10.260", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture8", "index": 296, "time": "00:28:10.780 --> 00:28:13.289", "speaker": "Alexander Vasserman", "text": "doing a little bit more organization later."}, {"source_name": "lecture8", "index": 297, "time": "00:28:13.450 --> 00:28:14.950", "speaker": "Alexander Vasserman", "text": "So for now"}, {"source_name": "lecture8", "index": 298, "time": "00:28:15.160 --> 00:28:18.230", "speaker": "Alexander Vasserman", "text": "let's just so. Tokenize is really"}, {"source_name": "lecture8", "index": 299, "time": "00:28:18.260 --> 00:28:19.710", "speaker": "Alexander Vasserman", "text": "well, for now"}, {"source_name": "lecture8", "index": 300, "time": "00:28:19.760 --> 00:28:23.649", "speaker": "Alexander Vasserman", "text": "just this right? So we we're just normalizing text, and it's it's it"}, {"source_name": "lecture8", "index": 301, "time": "00:28:23.790 --> 00:28:25.399", "speaker": "Alexander Vasserman", "text": "on white spaces."}, {"source_name": "lecture8", "index": 302, "time": "00:28:25.790 --> 00:28:28.050", "speaker": "Alexander Vasserman", "text": "So we'll get."}, {"source_name": "lecture8", "index": 303, "time": "00:28:28.920 --> 00:28:31.289", "speaker": "Alexander Vasserman", "text": "you know, into the idea of the organization."}, {"source_name": "lecture8", "index": 304, "time": "00:28:32.850 --> 00:28:37.160", "speaker": "Alexander Vasserman", "text": "Next after we kind of done this with our outline. But let's"}, {"source_name": "lecture8", "index": 305, "time": "00:28:37.250 --> 00:28:38.290", "speaker": "Alexander Vasserman", "text": "use"}, {"source_name": "lecture8", "index": 306, "time": "00:28:39.650 --> 00:28:43.210", "speaker": "Alexander Vasserman", "text": "the terms that they're going to use, and"}, {"source_name": "lecture8", "index": 307, "time": "00:28:43.660 --> 00:28:45.640", "speaker": "Alexander Vasserman", "text": "I don't know if that makes it"}, {"source_name": "lecture8", "index": 308, "time": "00:28:45.720 --> 00:28:48.569", "speaker": "Alexander Vasserman", "text": "less confusing, little more confusing. But"}, {"source_name": "lecture8", "index": 309, "time": "00:28:50.620 --> 00:28:52.710", "speaker": "Alexander Vasserman", "text": "anyways, that's kind of"}, {"source_name": "lecture8", "index": 310, "time": "00:28:53.880 --> 00:28:54.909", "speaker": "Alexander Vasserman", "text": "where we are."}, {"source_name": "lecture8", "index": 311, "time": "00:28:55.960 --> 00:28:57.099", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture8", "index": 312, "time": "00:28:57.930 --> 00:28:59.000", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture8", "index": 313, "time": "00:28:59.020 --> 00:28:59.920", "speaker": "Alexander Vasserman", "text": "let's"}, {"source_name": "lecture8", "index": 314, "time": "00:29:01.070 --> 00:29:03.370", "speaker": "Alexander Vasserman", "text": "jump into all"}, {"source_name": "lecture8", "index": 315, "time": "00:29:04.260 --> 00:29:05.170", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture8", "index": 316, "time": "00:29:07.150 --> 00:29:09.400", "speaker": "Alexander Vasserman", "text": "oh, transform documents."}, {"source_name": "lecture8", "index": 317, "time": "00:29:09.920 --> 00:29:10.940", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture8", "index": 318, "time": "00:29:11.990 --> 00:29:12.950", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture8", "index": 319, "time": "00:29:14.110 --> 00:29:15.880", "speaker": "Alexander Vasserman", "text": "very simplistic"}, {"source_name": "lecture8", "index": 320, "time": "00:29:16.340 --> 00:29:20.460", "speaker": "Alexander Vasserman", "text": "kind of implementation here. What we want is."}, {"source_name": "lecture8", "index": 321, "time": "00:29:20.560 --> 00:29:21.830", "speaker": "Alexander Vasserman", "text": "do you have?"}, {"source_name": "lecture8", "index": 322, "time": "00:29:22.350 --> 00:29:23.240", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 323, "time": "00:29:23.620 --> 00:29:24.870", "speaker": "Alexander Vasserman", "text": "well, to"}, {"source_name": "lecture8", "index": 324, "time": "00:29:24.900 --> 00:29:28.519", "speaker": "Alexander Vasserman", "text": "the the document collection that we have Here is the list of documents"}, {"source_name": "lecture8", "index": 325, "time": "00:29:28.940 --> 00:29:30.030", "speaker": "Alexander Vasserman", "text": "and the"}, {"source_name": "lecture8", "index": 326, "time": "00:29:30.140 --> 00:29:31.720", "speaker": "Alexander Vasserman", "text": "kind of want to create"}, {"source_name": "lecture8", "index": 327, "time": "00:29:31.830 --> 00:29:34.890", "speaker": "Alexander Vasserman", "text": "another collection of transformed documents."}, {"source_name": "lecture8", "index": 328, "time": "00:29:35.130 --> 00:29:36.860", "speaker": "Alexander Vasserman", "text": "So let's actually first"}, {"source_name": "lecture8", "index": 329, "time": "00:29:37.170 --> 00:29:42.019", "speaker": "Alexander Vasserman", "text": "define that class that that obstruction again very simple"}, {"source_name": "lecture8", "index": 330, "time": "00:29:42.080 --> 00:29:43.590", "speaker": "Alexander Vasserman", "text": "obstruction"}, {"source_name": "lecture8", "index": 331, "time": "00:29:43.770 --> 00:29:44.730", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture8", "index": 332, "time": "00:29:44.960 --> 00:29:47.960", "speaker": "Alexander Vasserman", "text": "very similar to documents."}, {"source_name": "lecture8", "index": 333, "time": "00:29:48.030 --> 00:29:53.990", "speaker": "Alexander Vasserman", "text": "But the representation here is going to be a little bit different. So let's define this classes."}, {"source_name": "lecture8", "index": 334, "time": "00:29:54.090 --> 00:29:55.540", "speaker": "Alexander Vasserman", "text": "So let's define"}, {"source_name": "lecture8", "index": 335, "time": "00:29:57.970 --> 00:29:59.170", "speaker": "Alexander Vasserman", "text": "transformed"}, {"source_name": "lecture8", "index": 336, "time": "00:30:00.900 --> 00:30:01.980", "speaker": "Alexander Vasserman", "text": "documents."}, {"source_name": "lecture8", "index": 337, "time": "00:30:02.690 --> 00:30:03.879", "speaker": "Alexander Vasserman", "text": "Really."}, {"source_name": "lecture8", "index": 338, "time": "00:30:04.270 --> 00:30:06.090", "speaker": "Alexander Vasserman", "text": "you can use"}, {"source_name": "lecture8", "index": 339, "time": "00:30:07.200 --> 00:30:08.530", "speaker": "Alexander Vasserman", "text": "name couples."}, {"source_name": "lecture8", "index": 340, "time": "00:30:09.530 --> 00:30:12.770", "speaker": "Alexander Vasserman", "text": "So again, kind of very simplistic class."}, {"source_name": "lecture8", "index": 341, "time": "00:30:12.950 --> 00:30:16.100", "speaker": "Alexander Vasserman", "text": "and what it's going to have is"}, {"source_name": "lecture8", "index": 342, "time": "00:30:17.880 --> 00:30:19.050", "speaker": "Alexander Vasserman", "text": "talk. Id"}, {"source_name": "lecture8", "index": 343, "time": "00:30:19.580 --> 00:30:21.299", "speaker": "Alexander Vasserman", "text": "So that's kind of"}, {"source_name": "lecture8", "index": 344, "time": "00:30:21.460 --> 00:30:23.229", "speaker": "Alexander Vasserman", "text": "how we keep track of"}, {"source_name": "lecture8", "index": 345, "time": "00:30:23.330 --> 00:30:32.519", "speaker": "Alexander Vasserman", "text": "what is this document we're talking about? Where they did this come from. They're going to keep track of this book. I did throw out the process, so it's kind of lineage."}, {"source_name": "lecture8", "index": 346, "time": "00:30:33.170 --> 00:30:37.299", "speaker": "Alexander Vasserman", "text": "and then the other thing is, we're going to have"}, {"source_name": "lecture8", "index": 347, "time": "00:30:37.390 --> 00:30:38.190", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture8", "index": 348, "time": "00:30:40.310 --> 00:30:45.740", "speaker": "Alexander Vasserman", "text": "tokens or words or terms, let's call them tokens, which is a"}, {"source_name": "lecture8", "index": 349, "time": "00:30:50.140 --> 00:30:51.540", "speaker": "Alexander Vasserman", "text": "least of"}, {"source_name": "lecture8", "index": 350, "time": "00:30:51.650 --> 00:30:52.990", "speaker": "Alexander Vasserman", "text": "settings right."}, {"source_name": "lecture8", "index": 351, "time": "00:30:55.340 --> 00:30:56.620", "speaker": "Alexander Vasserman", "text": "So hopefully"}, {"source_name": "lecture8", "index": 352, "time": "00:30:57.900 --> 00:31:01.409", "speaker": "Alexander Vasserman", "text": "does this make sense what what we're trying to represent here."}, {"source_name": "lecture8", "index": 353, "time": "00:31:02.320 --> 00:31:09.330", "speaker": "Alexander Vasserman", "text": "We are basically trying to represent the output of this organized function or the output of transformation"}, {"source_name": "lecture8", "index": 354, "time": "00:31:09.350 --> 00:31:10.650", "speaker": "Alexander Vasserman", "text": "more January."}, {"source_name": "lecture8", "index": 355, "time": "00:31:13.660 --> 00:31:17.480", "speaker": "Alexander Vasserman", "text": "But while keeping track of where this came from."}, {"source_name": "lecture8", "index": 356, "time": "00:31:19.260 --> 00:31:23.830", "speaker": "Fahad Khan", "text": "Can you explain what name Tuple is doing? Typing that name? Tuple?"}, {"source_name": "lecture8", "index": 357, "time": "00:31:24.140 --> 00:31:25.080", "speaker": "Alexander Vasserman", "text": "Yes."}, {"source_name": "lecture8", "index": 358, "time": "00:31:25.180 --> 00:31:26.280", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture8", "index": 359, "time": "00:31:26.380 --> 00:31:29.150", "speaker": "Alexander Vasserman", "text": "what we are doing here is creating a class right"}, {"source_name": "lecture8", "index": 360, "time": "00:31:29.430 --> 00:31:30.750", "speaker": "Alexander Vasserman", "text": "and class"}, {"source_name": "lecture8", "index": 361, "time": "00:31:30.900 --> 00:31:36.349", "speaker": "Alexander Vasserman", "text": "of when the cating plus we need some standard functions like constructor, for example."}, {"source_name": "lecture8", "index": 362, "time": "00:31:37.790 --> 00:31:40.010", "speaker": "Alexander Vasserman", "text": "So normally I would have to"}, {"source_name": "lecture8", "index": 363, "time": "00:31:41.180 --> 00:31:44.020", "speaker": "Alexander Vasserman", "text": "like if I did not have this"}, {"source_name": "lecture8", "index": 364, "time": "00:31:44.760 --> 00:31:45.530", "speaker": "Alexander Vasserman", "text": "right."}, {"source_name": "lecture8", "index": 365, "time": "00:31:47.200 --> 00:31:50.710", "speaker": "Alexander Vasserman", "text": "What I would have to do is"}, {"source_name": "lecture8", "index": 366, "time": "00:31:50.770 --> 00:31:53.120", "speaker": "Alexander Vasserman", "text": "right, something like define"}, {"source_name": "lecture8", "index": 367, "time": "00:31:53.620 --> 00:31:54.809", "speaker": "Alexander Vasserman", "text": "in it"}, {"source_name": "lecture8", "index": 368, "time": "00:31:55.100 --> 00:31:57.480", "speaker": "Alexander Vasserman", "text": "that basically"}, {"source_name": "lecture8", "index": 369, "time": "00:31:57.910 --> 00:31:58.960", "speaker": "Alexander Vasserman", "text": "thanks."}, {"source_name": "lecture8", "index": 370, "time": "00:32:00.540 --> 00:32:03.589", "speaker": "Alexander Vasserman", "text": "dog, Id. And"}, {"source_name": "lecture8", "index": 371, "time": "00:32:06.080 --> 00:32:07.670", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture8", "index": 372, "time": "00:32:07.850 --> 00:32:10.839", "speaker": "Alexander Vasserman", "text": "it has something like."}, {"source_name": "lecture8", "index": 373, "time": "00:32:11.350 --> 00:32:14.870", "speaker": "Alexander Vasserman", "text": "Okay, D: it goes to Doc, Id."}, {"source_name": "lecture8", "index": 374, "time": "00:32:15.300 --> 00:32:16.710", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture8", "index": 375, "time": "00:32:18.110 --> 00:32:19.340", "speaker": "Alexander Vasserman", "text": "so Dot"}, {"source_name": "lecture8", "index": 376, "time": "00:32:21.980 --> 00:32:23.430", "speaker": "Alexander Vasserman", "text": "is equal to one"}, {"source_name": "lecture8", "index": 377, "time": "00:32:23.770 --> 00:32:24.880", "speaker": "Alexander Vasserman", "text": "dolphins."}, {"source_name": "lecture8", "index": 378, "time": "00:32:25.080 --> 00:32:28.059", "speaker": "Alexander Vasserman", "text": "Right? So I would have to have this."}, {"source_name": "lecture8", "index": 379, "time": "00:32:28.310 --> 00:32:29.869", "speaker": "Alexander Vasserman", "text": "I would have to"}, {"source_name": "lecture8", "index": 380, "time": "00:32:30.110 --> 00:32:31.970", "speaker": "Alexander Vasserman", "text": "potentially have"}, {"source_name": "lecture8", "index": 381, "time": "00:32:32.090 --> 00:32:34.710", "speaker": "Alexander Vasserman", "text": "other standard functions like"}, {"source_name": "lecture8", "index": 382, "time": "00:32:37.600 --> 00:32:38.370", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 383, "time": "00:32:38.980 --> 00:32:39.680", "speaker": "Alexander Vasserman", "text": "no."}, {"source_name": "lecture8", "index": 384, "time": "00:32:39.770 --> 00:32:45.439", "speaker": "Alexander Vasserman", "text": "Remember exactly what are the different functions that are automatically"}, {"source_name": "lecture8", "index": 385, "time": "00:32:45.540 --> 00:32:48.070", "speaker": "Alexander Vasserman", "text": "implemented. But I think"}, {"source_name": "lecture8", "index": 386, "time": "00:32:48.150 --> 00:33:00.910", "speaker": "Alexander Vasserman", "text": "something like string is automatically implemented. So it's basically, it says, like, if I have this structure in a string context, here is how to put it into a stream"}, {"source_name": "lecture8", "index": 387, "time": "00:33:01.010 --> 00:33:06.060", "speaker": "Alexander Vasserman", "text": "right? So I don't know that would be something like."}, {"source_name": "lecture8", "index": 388, "time": "00:33:06.260 --> 00:33:07.140", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture8", "index": 389, "time": "00:33:11.240 --> 00:33:13.290", "speaker": "Alexander Vasserman", "text": "something like"}, {"source_name": "lecture8", "index": 390, "time": "00:33:14.430 --> 00:33:15.640", "speaker": "Alexander Vasserman", "text": "you turn."}, {"source_name": "lecture8", "index": 391, "time": "00:33:18.130 --> 00:33:19.240", "speaker": "Alexander Vasserman", "text": "Maybe"}, {"source_name": "lecture8", "index": 392, "time": "00:33:19.490 --> 00:33:21.000", "speaker": "Alexander Vasserman", "text": "it would look like."}, {"source_name": "lecture8", "index": 393, "time": "00:33:23.080 --> 00:33:24.720", "speaker": "Alexander Vasserman", "text": "okay, d"}, {"source_name": "lecture8", "index": 394, "time": "00:33:40.670 --> 00:33:44.539", "speaker": "Alexander Vasserman", "text": "something like that, or right. So basically Python"}, {"source_name": "lecture8", "index": 395, "time": "00:33:44.610 --> 00:33:48.700", "speaker": "Alexander Vasserman", "text": "class requires, for, you know."}, {"source_name": "lecture8", "index": 396, "time": "00:33:48.860 --> 00:33:52.339", "speaker": "Alexander Vasserman", "text": "a bunch of this functions to kind of"}, {"source_name": "lecture8", "index": 397, "time": "00:33:52.900 --> 00:33:54.459", "speaker": "Alexander Vasserman", "text": "function properly."}, {"source_name": "lecture8", "index": 398, "time": "00:33:55.320 --> 00:33:58.910", "speaker": "Alexander Vasserman", "text": "So it's a lot of boilerplate and python makes it"}, {"source_name": "lecture8", "index": 399, "time": "00:33:59.210 --> 00:34:00.830", "speaker": "Alexander Vasserman", "text": "easier for us."}, {"source_name": "lecture8", "index": 400, "time": "00:34:00.850 --> 00:34:02.950", "speaker": "Alexander Vasserman", "text": "you know just you know, kind of"}, {"source_name": "lecture8", "index": 401, "time": "00:34:03.150 --> 00:34:04.850", "speaker": "Alexander Vasserman", "text": "remove all of that"}, {"source_name": "lecture8", "index": 402, "time": "00:34:04.900 --> 00:34:08.819", "speaker": "Alexander Vasserman", "text": "and say, Well, we'll have a"}, {"source_name": "lecture8", "index": 403, "time": "00:34:10.280 --> 00:34:11.790", "speaker": "Alexander Vasserman", "text": "names topple."}, {"source_name": "lecture8", "index": 404, "time": "00:34:12.270 --> 00:34:13.069", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 405, "time": "00:34:13.239 --> 00:34:14.120", "speaker": "Alexander Vasserman", "text": "plus"}, {"source_name": "lecture8", "index": 406, "time": "00:34:15.030 --> 00:34:16.620", "speaker": "Alexander Vasserman", "text": "the reason why"}, {"source_name": "lecture8", "index": 407, "time": "00:34:17.330 --> 00:34:20.520", "speaker": "Alexander Vasserman", "text": "this is called Dean Topple is because"}, {"source_name": "lecture8", "index": 408, "time": "00:34:20.739 --> 00:34:28.359", "speaker": "Alexander Vasserman", "text": "Python actually represents it as a topple, or in this particular case, as a prayer, right? So it's just"}, {"source_name": "lecture8", "index": 409, "time": "00:34:28.580 --> 00:34:29.600", "speaker": "Alexander Vasserman", "text": "to"}, {"source_name": "lecture8", "index": 410, "time": "00:34:29.800 --> 00:34:30.779", "speaker": "Alexander Vasserman", "text": "things."}, {"source_name": "lecture8", "index": 411, "time": "00:34:31.540 --> 00:34:37.980", "speaker": "Alexander Vasserman", "text": "Kind of comma separated so like, you know, Another way to to think about the way it's represented inside is"}, {"source_name": "lecture8", "index": 412, "time": "00:34:38.050 --> 00:34:41.349", "speaker": "Alexander Vasserman", "text": "dog id, and"}, {"source_name": "lecture8", "index": 413, "time": "00:34:42.120 --> 00:34:45.389", "speaker": "Alexander Vasserman", "text": "tokens so a parent like that."}, {"source_name": "lecture8", "index": 414, "time": "00:34:46.230 --> 00:34:46.959", "speaker": "Alexander Vasserman", "text": "all right."}, {"source_name": "lecture8", "index": 415, "time": "00:34:47.010 --> 00:34:49.319", "speaker": "Alexander Vasserman", "text": "but by assigning"}, {"source_name": "lecture8", "index": 416, "time": "00:34:49.900 --> 00:34:53.339", "speaker": "Alexander Vasserman", "text": "by saying that this pair is of this type"}, {"source_name": "lecture8", "index": 417, "time": "00:34:53.469 --> 00:34:55.810", "speaker": "Alexander Vasserman", "text": "we kind of creating"}, {"source_name": "lecture8", "index": 418, "time": "00:34:56.210 --> 00:34:59.379", "speaker": "Alexander Vasserman", "text": "the way to more easily."}, {"source_name": "lecture8", "index": 419, "time": "00:34:59.720 --> 00:35:00.609", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 420, "time": "00:35:00.710 --> 00:35:09.230", "speaker": "Alexander Vasserman", "text": "operate, is it? And know what's inside that double right, because otherwise, when we're dealing with the top, it's kind of hard to know"}, {"source_name": "lecture8", "index": 421, "time": "00:35:09.400 --> 00:35:11.549", "speaker": "Alexander Vasserman", "text": "what what's inside"}, {"source_name": "lecture8", "index": 422, "time": "00:35:12.090 --> 00:35:14.329", "speaker": "Alexander Vasserman", "text": "it's apparent. We don't know what's that?"}, {"source_name": "lecture8", "index": 423, "time": "00:35:14.350 --> 00:35:15.919", "speaker": "Alexander Vasserman", "text": "It's hard to assign meeting"}, {"source_name": "lecture8", "index": 424, "time": "00:35:16.810 --> 00:35:21.730", "speaker": "Alexander Vasserman", "text": "right? So this is again just kind of a way to make code clear"}, {"source_name": "lecture8", "index": 425, "time": "00:35:22.930 --> 00:35:23.859", "speaker": "Alexander Vasserman", "text": "while"}, {"source_name": "lecture8", "index": 426, "time": "00:35:24.340 --> 00:35:25.310", "speaker": "Alexander Vasserman", "text": "using"}, {"source_name": "lecture8", "index": 427, "time": "00:35:25.600 --> 00:35:27.320", "speaker": "Alexander Vasserman", "text": "doubles or purse."}, {"source_name": "lecture8", "index": 428, "time": "00:35:27.370 --> 00:35:28.229", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture8", "index": 429, "time": "00:35:28.650 --> 00:35:29.899", "speaker": "Alexander Vasserman", "text": "yeah, so"}, {"source_name": "lecture8", "index": 430, "time": "00:35:30.240 --> 00:35:33.729", "speaker": "Alexander Vasserman", "text": "we have a bunch of convenient methods"}, {"source_name": "lecture8", "index": 431, "time": "00:35:33.870 --> 00:35:36.130", "speaker": "Alexander Vasserman", "text": "that make make it clear"}, {"source_name": "lecture8", "index": 432, "time": "00:35:36.220 --> 00:35:38.440", "speaker": "Alexander Vasserman", "text": "how to operate on that top."}, {"source_name": "lecture8", "index": 433, "time": "00:35:38.650 --> 00:35:39.330", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture8", "index": 434, "time": "00:35:39.420 --> 00:35:42.179", "speaker": "Alexander Vasserman", "text": "really, this is kind of a"}, {"source_name": "lecture8", "index": 435, "time": "00:35:42.580 --> 00:35:43.419", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 436, "time": "00:35:44.600 --> 00:35:47.239", "speaker": "Alexander Vasserman", "text": "another way to look at this is a kind of"}, {"source_name": "lecture8", "index": 437, "time": "00:35:47.400 --> 00:35:55.040", "speaker": "Alexander Vasserman", "text": "a class that just stores data and kind of dumb right? So it doesn't kind of much in terms of functionality."}, {"source_name": "lecture8", "index": 438, "time": "00:35:55.240 --> 00:35:58.120", "speaker": "Alexander Vasserman", "text": "It just the container that stores data."}, {"source_name": "lecture8", "index": 439, "time": "00:35:58.680 --> 00:36:07.049", "speaker": "Alexander Vasserman", "text": "So there are many way different ways to look at. What named couple really is like. You know, kind of. On one hand, it's a shorthand or not."}, {"source_name": "lecture8", "index": 440, "time": "00:36:07.290 --> 00:36:09.660", "speaker": "Alexander Vasserman", "text": "It's also like oh, well."}, {"source_name": "lecture8", "index": 441, "time": "00:36:10.140 --> 00:36:10.890", "speaker": "Alexander Vasserman", "text": "it's"}, {"source_name": "lecture8", "index": 442, "time": "00:36:11.380 --> 00:36:14.700", "speaker": "Alexander Vasserman", "text": "really under all. Underneath is is just the"}, {"source_name": "lecture8", "index": 443, "time": "00:36:14.770 --> 00:36:19.340", "speaker": "Alexander Vasserman", "text": "regular python tople, but kind of it's clear."}, {"source_name": "lecture8", "index": 444, "time": "00:36:19.900 --> 00:36:22.579", "speaker": "Alexander Vasserman", "text": "It's easier to or write code around it."}, {"source_name": "lecture8", "index": 445, "time": "00:36:25.390 --> 00:36:30.589", "speaker": "Alexander Vasserman", "text": "So I've been talking a lot. It sounds like we have a bunch of questions. Yes, so, Alex."}, {"source_name": "lecture8", "index": 446, "time": "00:36:32.580 --> 00:36:40.260", "speaker": "Alex Wojtowicz", "text": "So what is the name couple as a data structure. Is it kind of like a dictionary? And if so, why not?"}, {"source_name": "lecture8", "index": 447, "time": "00:36:40.890 --> 00:36:51.480", "speaker": "Alexander Vasserman", "text": "No, it's it's really just a couple right? So remember we in there, Python Overview, we said, like couple is just kind of like at least"}, {"source_name": "lecture8", "index": 448, "time": "00:36:51.670 --> 00:36:55.789", "speaker": "Alexander Vasserman", "text": "so it just bunch of different things. I would."}, {"source_name": "lecture8", "index": 449, "time": "00:36:55.920 --> 00:37:04.209", "speaker": "Alexander Vasserman", "text": "So here I was kind of referring to variables, but you know what I would have is some kind of Id here. Let's say"}, {"source_name": "lecture8", "index": 450, "time": "00:37:04.300 --> 00:37:06.109", "speaker": "Alexander Vasserman", "text": "well, and"}, {"source_name": "lecture8", "index": 451, "time": "00:37:06.980 --> 00:37:09.699", "speaker": "Alexander Vasserman", "text": "the tokens would be something like."}, {"source_name": "lecture8", "index": 452, "time": "00:37:11.140 --> 00:37:13.309", "speaker": "Alexander Vasserman", "text": "you know, at least of"}, {"source_name": "lecture8", "index": 453, "time": "00:37:13.380 --> 00:37:14.259", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture8", "index": 454, "time": "00:37:15.590 --> 00:37:16.390", "speaker": "Alexander Vasserman", "text": "some"}, {"source_name": "lecture8", "index": 455, "time": "00:37:20.380 --> 00:37:32.220", "speaker": "Alexander Vasserman", "text": "some tokens. And then maybe there would be something else like I don't know if we had like number of tokens there might be like a 2 right. So so it's just the list of elements."}, {"source_name": "lecture8", "index": 456, "time": "00:37:32.260 --> 00:37:40.329", "speaker": "Alexander Vasserman", "text": "But remember, tuples as opposed to list are not mutable, but that's really the only difference or the main difference between them."}, {"source_name": "lecture8", "index": 457, "time": "00:37:40.540 --> 00:37:45.640", "speaker": "Alexander Vasserman", "text": "Otherwise it just the container, a collection of"}, {"source_name": "lecture8", "index": 458, "time": "00:37:45.860 --> 00:37:46.700", "speaker": "Alexander Vasserman", "text": "stuff."}, {"source_name": "lecture8", "index": 459, "time": "00:37:47.500 --> 00:37:49.410", "speaker": "Alexander Vasserman", "text": "Usually we're doing this"}, {"source_name": "lecture8", "index": 460, "time": "00:37:49.750 --> 00:37:52.240", "speaker": "Alexander Vasserman", "text": "for things that are of the same type"}, {"source_name": "lecture8", "index": 461, "time": "00:37:52.330 --> 00:37:59.140", "speaker": "Alexander Vasserman", "text": "and topples for the things that potentially are different types. So like, you know, I wouldn't want to have this in the least like that. But"}, {"source_name": "lecture8", "index": 462, "time": "00:37:59.330 --> 00:38:08.039", "speaker": "Alex Wojtowicz", "text": "so every time we create a transform document object, it'll be of tuple type and contain Doc, Id and then a list of tokens."}, {"source_name": "lecture8", "index": 463, "time": "00:38:08.360 --> 00:38:09.830", "speaker": "Alexander Vasserman", "text": "That's exactly right?"}, {"source_name": "lecture8", "index": 464, "time": "00:38:12.300 --> 00:38:16.459", "speaker": "Alexander Vasserman", "text": "So yeah, so basically named, Topple is just kind of a"}, {"source_name": "lecture8", "index": 465, "time": "00:38:16.650 --> 00:38:17.379", "speaker": "Alexander Vasserman", "text": "cool."}, {"source_name": "lecture8", "index": 466, "time": "00:38:17.740 --> 00:38:24.330", "speaker": "Alexander Vasserman", "text": "It class based on a couple. So you can think of base class is the built in"}, {"source_name": "lecture8", "index": 467, "time": "00:38:24.460 --> 00:38:25.180", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 468, "time": "00:38:25.600 --> 00:38:27.049", "speaker": "Alexander Vasserman", "text": "couple type."}, {"source_name": "lecture8", "index": 469, "time": "00:38:27.550 --> 00:38:34.459", "speaker": "Alexander Vasserman", "text": "and the name couple is a derived class from it, and we are now introducing more"}, {"source_name": "lecture8", "index": 470, "time": "00:38:34.480 --> 00:38:36.369", "speaker": "Alexander Vasserman", "text": "the right glasses."}, {"source_name": "lecture8", "index": 471, "time": "00:38:37.470 --> 00:38:41.549", "speaker": "Alexander Vasserman", "text": "Each of our named doubles like transformed document"}, {"source_name": "lecture8", "index": 472, "time": "00:38:42.080 --> 00:38:44.660", "speaker": "Alexander Vasserman", "text": "or or a regular document."}, {"source_name": "lecture8", "index": 473, "time": "00:38:44.790 --> 00:38:46.029", "speaker": "Alexander Vasserman", "text": "are just"}, {"source_name": "lecture8", "index": 474, "time": "00:38:46.120 --> 00:38:46.819", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture8", "index": 475, "time": "00:38:46.890 --> 00:38:50.990", "speaker": "Alexander Vasserman", "text": "more direct classes. So that's I think, what's happening underneath"}, {"source_name": "lecture8", "index": 476, "time": "00:38:52.510 --> 00:38:57.670", "speaker": "Alexander Vasserman", "text": "just another way to view it. But but really yes, we are just having a tuple like this."}, {"source_name": "lecture8", "index": 477, "time": "00:38:57.860 --> 00:39:02.439", "speaker": "Alexander Vasserman", "text": "and we have some convenient methods"}, {"source_name": "lecture8", "index": 478, "time": "00:39:02.540 --> 00:39:04.450", "speaker": "Alexander Vasserman", "text": "generated for us."}, {"source_name": "lecture8", "index": 479, "time": "00:39:04.590 --> 00:39:05.419", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 480, "time": "00:39:06.300 --> 00:39:11.579", "speaker": "Alexander Vasserman", "text": "you know the access by name, the constructor, the etc."}, {"source_name": "lecture8", "index": 481, "time": "00:39:14.390 --> 00:39:17.060", "speaker": "Alexander Vasserman", "text": "Does that kind of answer your question, Alex."}, {"source_name": "lecture8", "index": 482, "time": "00:39:18.570 --> 00:39:19.129", "speaker": "Alex Wojtowicz", "text": "Yeah."}, {"source_name": "lecture8", "index": 483, "time": "00:39:19.660 --> 00:39:20.259", "speaker": "Alexander Vasserman", "text": "Cool."}, {"source_name": "lecture8", "index": 484, "time": "00:39:21.180 --> 00:39:22.729", "speaker": "Alexander Vasserman", "text": "rough."}, {"source_name": "lecture8", "index": 485, "time": "00:39:23.970 --> 00:39:26.130", "speaker": "Rafal \"Ralph\" Jasielec", "text": "I just got a quick question for you, sir."}, {"source_name": "lecture8", "index": 486, "time": "00:39:26.410 --> 00:39:28.120", "speaker": "Rafal \"Ralph\" Jasielec", "text": "I'm scrolling through the"}, {"source_name": "lecture8", "index": 487, "time": "00:39:28.360 --> 00:39:30.440", "speaker": "Rafal \"Ralph\" Jasielec", "text": "indexing process"}, {"source_name": "lecture8", "index": 488, "time": "00:39:30.660 --> 00:39:31.529", "speaker": "Rafal \"Ralph\" Jasielec", "text": "file."}, {"source_name": "lecture8", "index": 489, "time": "00:39:31.740 --> 00:39:33.369", "speaker": "Rafal \"Ralph\" Jasielec", "text": "I've noticed that there's a"}, {"source_name": "lecture8", "index": 490, "time": "00:39:33.990 --> 00:39:35.359", "speaker": "Rafal \"Ralph\" Jasielec", "text": "Let me pull one up."}, {"source_name": "lecture8", "index": 491, "time": "00:39:35.940 --> 00:39:37.589", "speaker": "Rafal \"Ralph\" Jasielec", "text": "I've noticed that"}, {"source_name": "lecture8", "index": 492, "time": "00:39:37.740 --> 00:39:39.859", "speaker": "Rafal \"Ralph\" Jasielec", "text": "there is a index class."}, {"source_name": "lecture8", "index": 493, "time": "00:39:39.910 --> 00:39:42.129", "speaker": "Rafal \"Ralph\" Jasielec", "text": "and then at the bottom also there is a"}, {"source_name": "lecture8", "index": 494, "time": "00:39:42.310 --> 00:39:44.840", "speaker": "Rafal \"Ralph\" Jasielec", "text": "create index function"}, {"source_name": "lecture8", "index": 495, "time": "00:39:45.640 --> 00:39:50.249", "speaker": "Rafal \"Ralph\" Jasielec", "text": "whenever what's kinda like the difference between the 2."}, {"source_name": "lecture8", "index": 496, "time": "00:39:50.970 --> 00:39:52.060", "speaker": "Alexander Vasserman", "text": "Well, so"}, {"source_name": "lecture8", "index": 497, "time": "00:39:52.900 --> 00:39:54.609", "speaker": "Alexander Vasserman", "text": "basically"}, {"source_name": "lecture8", "index": 498, "time": "00:39:55.120 --> 00:40:04.239", "speaker": "Alexander Vasserman", "text": "the way he started creating this file, if you remember, is. We looked at the diagram, and we said, let's convert"}, {"source_name": "lecture8", "index": 499, "time": "00:40:04.280 --> 00:40:06.560", "speaker": "Alexander Vasserman", "text": "the diagram into some code."}, {"source_name": "lecture8", "index": 500, "time": "00:40:06.580 --> 00:40:09.069", "speaker": "Alexander Vasserman", "text": "and we kind of wrote out"}, {"source_name": "lecture8", "index": 501, "time": "00:40:09.360 --> 00:40:10.180", "speaker": "Alexander Vasserman", "text": "all"}, {"source_name": "lecture8", "index": 502, "time": "00:40:10.350 --> 00:40:16.200", "speaker": "Alexander Vasserman", "text": "this function, the indexing process function to say. Oh, you know it kind of corresponds to these things."}, {"source_name": "lecture8", "index": 503, "time": "00:40:16.790 --> 00:40:20.090", "speaker": "Alexander Vasserman", "text": "and we all said that. Well."}, {"source_name": "lecture8", "index": 504, "time": "00:40:21.600 --> 00:40:24.790", "speaker": "Alexander Vasserman", "text": "this is going to be an index type."}, {"source_name": "lecture8", "index": 505, "time": "00:40:25.030 --> 00:40:26.380", "speaker": "Alexander Vasserman", "text": "We don't know yet"}, {"source_name": "lecture8", "index": 506, "time": "00:40:26.650 --> 00:40:28.730", "speaker": "Alexander Vasserman", "text": "what that actually is."}, {"source_name": "lecture8", "index": 507, "time": "00:40:28.770 --> 00:40:29.790", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture8", "index": 508, "time": "00:40:31.000 --> 00:40:33.680", "speaker": "Alexander Vasserman", "text": "you know that's the type of thing"}, {"source_name": "lecture8", "index": 509, "time": "00:40:33.790 --> 00:40:35.899", "speaker": "Alexander Vasserman", "text": "that this function"}, {"source_name": "lecture8", "index": 510, "time": "00:40:36.180 --> 00:40:40.669", "speaker": "Alexander Vasserman", "text": "we'll need to return. So really the only way the reason that we have"}, {"source_name": "lecture8", "index": 511, "time": "00:40:40.700 --> 00:40:43.939", "speaker": "Alexander Vasserman", "text": "right now a kind of a shell of a class"}, {"source_name": "lecture8", "index": 512, "time": "00:40:44.040 --> 00:40:48.690", "speaker": "Alexander Vasserman", "text": "for index is, so that we can specify this function returns an index."}, {"source_name": "lecture8", "index": 513, "time": "00:40:49.290 --> 00:40:50.900", "speaker": "Alexander Vasserman", "text": "We don't know what that is, Yet"}, {"source_name": "lecture8", "index": 514, "time": "00:40:51.270 --> 00:40:52.800", "speaker": "Alexander Vasserman", "text": "you have a"}, {"source_name": "lecture8", "index": 515, "time": "00:40:53.460 --> 00:40:55.050", "speaker": "Alexander Vasserman", "text": "designed"}, {"source_name": "lecture8", "index": 516, "time": "00:40:55.100 --> 00:41:01.100", "speaker": "Alexander Vasserman", "text": "our code that much in depth. We kind of starting from the top over all"}, {"source_name": "lecture8", "index": 517, "time": "00:41:01.550 --> 00:41:05.149", "speaker": "Alexander Vasserman", "text": "kind of organization of our code, and then we're going"}, {"source_name": "lecture8", "index": 518, "time": "00:41:05.390 --> 00:41:10.720", "speaker": "Alexander Vasserman", "text": "down one method at the time. Essentially right. So we've kind of"}, {"source_name": "lecture8", "index": 519, "time": "00:41:11.360 --> 00:41:17.689", "speaker": "Alexander Vasserman", "text": "got to document collection, and now we're working on on this second part of our pipeline"}, {"source_name": "lecture8", "index": 520, "time": "00:41:18.360 --> 00:41:20.669", "speaker": "Alexander Vasserman", "text": "or our process."}, {"source_name": "lecture8", "index": 521, "time": "00:41:20.720 --> 00:41:22.459", "speaker": "Alexander Vasserman", "text": "we'll get to the index next."}, {"source_name": "lecture8", "index": 522, "time": "00:41:26.000 --> 00:41:26.939", "speaker": "Alexander Vasserman", "text": "All right."}, {"source_name": "lecture8", "index": 523, "time": "00:41:29.030 --> 00:41:38.880", "speaker": "Alexander Vasserman", "text": "any other questions. And again, I appreciate all the questions, because, you know, sometimes things like, you know, I'm very used to working with those things, and"}, {"source_name": "lecture8", "index": 524, "time": "00:41:39.030 --> 00:41:52.679", "speaker": "Alexander Vasserman", "text": "but they can be definitely confusing, like i'm realizing that even though we did a little bit of a named Tuples during the Python Review. Maybe they didn't do enough, and we're base"}, {"source_name": "lecture8", "index": 525, "time": "00:41:52.870 --> 00:41:57.509", "speaker": "Alexander Vasserman", "text": "good to review that. So so thank you for the questions."}, {"source_name": "lecture8", "index": 526, "time": "00:42:02.240 --> 00:42:04.710", "speaker": "Alexander Vasserman", "text": "All right, let me remove that"}, {"source_name": "lecture8", "index": 527, "time": "00:42:05.110 --> 00:42:06.720", "speaker": "Alexander Vasserman", "text": "so."}, {"source_name": "lecture8", "index": 528, "time": "00:42:10.140 --> 00:42:11.560", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture8", "index": 529, "time": "00:42:13.610 --> 00:42:15.859", "speaker": "Alexander Vasserman", "text": "let me also"}, {"source_name": "lecture8", "index": 530, "time": "00:42:17.540 --> 00:42:20.320", "speaker": "Alexander Vasserman", "text": "define the plus for"}, {"source_name": "lecture8", "index": 531, "time": "00:42:20.550 --> 00:42:21.419", "speaker": "Alexander Vasserman", "text": "or"}, {"source_name": "lecture8", "index": 532, "time": "00:42:25.870 --> 00:42:27.319", "speaker": "Alexander Vasserman", "text": "for transformed"}, {"source_name": "lecture8", "index": 533, "time": "00:42:28.780 --> 00:42:29.919", "speaker": "Alexander Vasserman", "text": "documents"}, {"source_name": "lecture8", "index": 534, "time": "00:42:32.400 --> 00:42:33.430", "speaker": "Alexander Vasserman", "text": "collection."}, {"source_name": "lecture8", "index": 535, "time": "00:42:38.810 --> 00:42:39.779", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture8", "index": 536, "time": "00:42:40.450 --> 00:42:45.230", "speaker": "Alexander Vasserman", "text": "these abstractions are not, necessarily, strictly speaking, necessary."}, {"source_name": "lecture8", "index": 537, "time": "00:42:45.280 --> 00:42:46.519", "speaker": "Alexander Vasserman", "text": "but it is"}, {"source_name": "lecture8", "index": 538, "time": "00:42:46.860 --> 00:42:48.160", "speaker": "Alexander Vasserman", "text": "good"}, {"source_name": "lecture8", "index": 539, "time": "00:42:48.290 --> 00:42:51.019", "speaker": "Alexander Vasserman", "text": "to define kind of"}, {"source_name": "lecture8", "index": 540, "time": "00:42:51.880 --> 00:42:56.659", "speaker": "Alexander Vasserman", "text": "collections as obstruct things rather than specifically, at least"}, {"source_name": "lecture8", "index": 541, "time": "00:42:56.910 --> 00:43:00.630", "speaker": "Alexander Vasserman", "text": "because we might want to change how we represent things."}, {"source_name": "lecture8", "index": 542, "time": "00:43:00.800 --> 00:43:04.210", "speaker": "Alexander Vasserman", "text": "and we want to kind of at the top level"}, {"source_name": "lecture8", "index": 543, "time": "00:43:04.350 --> 00:43:06.009", "speaker": "Alexander Vasserman", "text": "here"}, {"source_name": "lecture8", "index": 544, "time": "00:43:06.060 --> 00:43:07.840", "speaker": "Alexander Vasserman", "text": "in the indexing process."}, {"source_name": "lecture8", "index": 545, "time": "00:43:08.490 --> 00:43:12.910", "speaker": "Alexander Vasserman", "text": "not to care about how exactly things are"}, {"source_name": "lecture8", "index": 546, "time": "00:43:12.930 --> 00:43:14.569", "speaker": "Alexander Vasserman", "text": "or represent the underneath."}, {"source_name": "lecture8", "index": 547, "time": "00:43:14.940 --> 00:43:16.230", "speaker": "Alexander Vasserman", "text": "So kind of."}, {"source_name": "lecture8", "index": 548, "time": "00:43:16.470 --> 00:43:22.479", "speaker": "Alexander Vasserman", "text": "If you've studied classes before, the idea of a class is kind of encapsulation."}, {"source_name": "lecture8", "index": 549, "time": "00:43:22.600 --> 00:43:26.680", "speaker": "Alexander Vasserman", "text": "or obstruction. And so we're kind of obstructing a way."}, {"source_name": "lecture8", "index": 550, "time": "00:43:27.150 --> 00:43:29.379", "speaker": "Alexander Vasserman", "text": "What exactly is."}, {"source_name": "lecture8", "index": 551, "time": "00:43:29.450 --> 00:43:36.049", "speaker": "Alexander Vasserman", "text": "you know. So, for example, for the document collection here, we kind of do not necessarily care"}, {"source_name": "lecture8", "index": 552, "time": "00:43:36.070 --> 00:43:36.790", "speaker": "Alexander Vasserman", "text": "all"}, {"source_name": "lecture8", "index": 553, "time": "00:43:37.080 --> 00:43:38.709", "speaker": "Alexander Vasserman", "text": "how it is represented."}, {"source_name": "lecture8", "index": 554, "time": "00:43:39.000 --> 00:43:44.000", "speaker": "Alexander Vasserman", "text": "We just know it's some kind of document collection. We'll need to"}, {"source_name": "lecture8", "index": 555, "time": "00:43:44.040 --> 00:43:47.560", "speaker": "Alexander Vasserman", "text": "define kind of access methods on it"}, {"source_name": "lecture8", "index": 556, "time": "00:43:47.750 --> 00:43:48.629", "speaker": "Alexander Vasserman", "text": "all."}, {"source_name": "lecture8", "index": 557, "time": "00:43:48.750 --> 00:43:51.549", "speaker": "Alexander Vasserman", "text": "so that everything is done through methods."}, {"source_name": "lecture8", "index": 558, "time": "00:43:51.640 --> 00:43:53.329", "speaker": "Alexander Vasserman", "text": "And then."}, {"source_name": "lecture8", "index": 559, "time": "00:43:53.700 --> 00:43:55.100", "speaker": "Alexander Vasserman", "text": "So, for example."}, {"source_name": "lecture8", "index": 560, "time": "00:43:55.340 --> 00:43:56.520", "speaker": "Alexander Vasserman", "text": "we could."}, {"source_name": "lecture8", "index": 561, "time": "00:43:57.160 --> 00:43:58.870", "speaker": "Alexander Vasserman", "text": "And you should probably"}, {"source_name": "lecture8", "index": 562, "time": "00:43:59.330 --> 00:44:00.390", "speaker": "Alexander Vasserman", "text": "actually"}, {"source_name": "lecture8", "index": 563, "time": "00:44:00.560 --> 00:44:03.300", "speaker": "Alexander Vasserman", "text": "define a method here that"}, {"source_name": "lecture8", "index": 564, "time": "00:44:03.350 --> 00:44:04.330", "speaker": "Alexander Vasserman", "text": "says"}, {"source_name": "lecture8", "index": 565, "time": "00:44:04.460 --> 00:44:05.589", "speaker": "Alexander Vasserman", "text": "something like"}, {"source_name": "lecture8", "index": 566, "time": "00:44:06.140 --> 00:44:06.959", "speaker": "Alexander Vasserman", "text": "jet."}, {"source_name": "lecture8", "index": 567, "time": "00:44:09.690 --> 00:44:11.259", "speaker": "Alexander Vasserman", "text": "Let's say, get all"}, {"source_name": "lecture8", "index": 568, "time": "00:44:11.830 --> 00:44:12.729", "speaker": "Alexander Vasserman", "text": "docs."}, {"source_name": "lecture8", "index": 569, "time": "00:44:15.130 --> 00:44:16.519", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture8", "index": 570, "time": "00:44:17.540 --> 00:44:18.569", "speaker": "Alexander Vasserman", "text": "what that"}, {"source_name": "lecture8", "index": 571, "time": "00:44:18.660 --> 00:44:21.669", "speaker": "Alexander Vasserman", "text": "that it would return is a"}, {"source_name": "lecture8", "index": 572, "time": "00:44:22.260 --> 00:44:23.700", "speaker": "Alexander Vasserman", "text": "least of"}, {"source_name": "lecture8", "index": 573, "time": "00:44:26.670 --> 00:44:27.830", "speaker": "Alexander Vasserman", "text": "documents."}, {"source_name": "lecture8", "index": 574, "time": "00:44:28.790 --> 00:44:29.560", "speaker": "Alexander Vasserman", "text": "right?"}, {"source_name": "lecture8", "index": 575, "time": "00:44:33.080 --> 00:44:34.580", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture8", "index": 576, "time": "00:44:42.170 --> 00:44:46.149", "speaker": "Alexander Vasserman", "text": "so now, when we actually, when getting data out of it."}, {"source_name": "lecture8", "index": 577, "time": "00:44:46.330 --> 00:44:47.229", "speaker": "Alexander Vasserman", "text": "beer."}, {"source_name": "lecture8", "index": 578, "time": "00:44:47.620 --> 00:44:48.620", "speaker": "Alexander Vasserman", "text": "Don't."}, {"source_name": "lecture8", "index": 579, "time": "00:44:48.740 --> 00:44:52.170", "speaker": "Alexander Vasserman", "text": "the outside of this class doesn't care how exactly we represent it."}, {"source_name": "lecture8", "index": 580, "time": "00:44:53.530 --> 00:45:00.010", "speaker": "Alexander Vasserman", "text": "And as a matter of fact, in your homework, that's one of the things that you're going to do is change how you represent"}, {"source_name": "lecture8", "index": 581, "time": "00:45:00.100 --> 00:45:00.910", "speaker": "Alexander Vasserman", "text": "all"}, {"source_name": "lecture8", "index": 582, "time": "00:45:01.320 --> 00:45:03.120", "speaker": "Alexander Vasserman", "text": "things underneath"}, {"source_name": "lecture8", "index": 583, "time": "00:45:03.320 --> 00:45:04.850", "speaker": "Alexander Vasserman", "text": "in the document collection."}, {"source_name": "lecture8", "index": 584, "time": "00:45:06.910 --> 00:45:08.049", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture8", "index": 585, "time": "00:45:08.400 --> 00:45:09.949", "speaker": "Alexander Vasserman", "text": "we are going to"}, {"source_name": "lecture8", "index": 586, "time": "00:45:10.160 --> 00:45:11.379", "speaker": "Alexander Vasserman", "text": "do the same"}, {"source_name": "lecture8", "index": 587, "time": "00:45:11.510 --> 00:45:12.709", "speaker": "Alexander Vasserman", "text": "for the"}, {"source_name": "lecture8", "index": 588, "time": "00:45:13.060 --> 00:45:16.329", "speaker": "Alexander Vasserman", "text": "transformed documents, and let me actually put it"}, {"source_name": "lecture8", "index": 589, "time": "00:45:16.690 --> 00:45:18.419", "speaker": "Alexander Vasserman", "text": "right next to the"}, {"source_name": "lecture8", "index": 590, "time": "00:45:18.770 --> 00:45:19.589", "speaker": "Alexander Vasserman", "text": "oh"}, {"source_name": "lecture8", "index": 591, "time": "00:45:19.710 --> 00:45:23.419", "speaker": "Alexander Vasserman", "text": "document and document collections, so that we have a little bit of."}, {"source_name": "lecture8", "index": 592, "time": "00:45:23.510 --> 00:45:26.159", "speaker": "Alexander Vasserman", "text": "you know. This is where we defining our"}, {"source_name": "lecture8", "index": 593, "time": "00:45:28.980 --> 00:45:31.089", "speaker": "Alexander Vasserman", "text": "kind of day 3 presentations"}, {"source_name": "lecture8", "index": 594, "time": "00:45:31.120 --> 00:45:32.069", "speaker": "Alexander Vasserman", "text": "hold on."}, {"source_name": "lecture8", "index": 595, "time": "00:45:34.330 --> 00:45:40.150", "speaker": "Alexander Vasserman", "text": "and maybe at some point we'll even take that out into a separate file."}, {"source_name": "lecture8", "index": 596, "time": "00:45:40.720 --> 00:45:42.609", "speaker": "Alexander Vasserman", "text": "But for now let's"}, {"source_name": "lecture8", "index": 597, "time": "00:45:43.330 --> 00:45:44.359", "speaker": "Alexander Vasserman", "text": "define."}, {"source_name": "lecture8", "index": 598, "time": "00:45:44.760 --> 00:45:45.640", "speaker": "Alexander Vasserman", "text": "Yes."}, {"source_name": "lecture8", "index": 599, "time": "00:45:45.720 --> 00:45:47.060", "speaker": "Alexander Vasserman", "text": "yeah, and we won't."}, {"source_name": "lecture8", "index": 600, "time": "00:45:47.400 --> 00:45:48.549", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture8", "index": 601, "time": "00:45:48.850 --> 00:45:49.799", "speaker": "Alexander Vasserman", "text": "in it"}, {"source_name": "lecture8", "index": 602, "time": "00:45:50.150 --> 00:45:50.979", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture8", "index": 603, "time": "00:45:52.240 --> 00:45:54.000", "speaker": "Alexander Vasserman", "text": "function not me."}, {"source_name": "lecture8", "index": 604, "time": "00:45:54.780 --> 00:45:55.379", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture8", "index": 605, "time": "00:45:55.680 --> 00:45:59.420", "speaker": "Alexander Vasserman", "text": "be a little lazy, and copy and paste, and here it's going to be"}, {"source_name": "lecture8", "index": 606, "time": "00:46:00.900 --> 00:46:06.479", "speaker": "Alexander Vasserman", "text": "transform documents instead of a document, but otherwise I will start just again."}, {"source_name": "lecture8", "index": 607, "time": "00:46:06.830 --> 00:46:09.609", "speaker": "Alexander Vasserman", "text": "this this collection being just the least"}, {"source_name": "lecture8", "index": 608, "time": "00:46:10.060 --> 00:46:11.529", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture8", "index": 609, "time": "00:46:12.780 --> 00:46:14.270", "speaker": "Alexander Vasserman", "text": "well, that's"}, {"source_name": "lecture8", "index": 610, "time": "00:46:16.960 --> 00:46:17.850", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture8", "index": 611, "time": "00:46:25.810 --> 00:46:27.799", "speaker": "Alexander Vasserman", "text": "let's say we have."}, {"source_name": "lecture8", "index": 612, "time": "00:46:27.880 --> 00:46:28.799", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 613, "time": "00:46:29.070 --> 00:46:30.180", "speaker": "Alexander Vasserman", "text": "also."}, {"source_name": "lecture8", "index": 614, "time": "00:46:30.600 --> 00:46:32.220", "speaker": "Alexander Vasserman", "text": "that's it to add"}, {"source_name": "lecture8", "index": 615, "time": "00:46:32.380 --> 00:46:33.939", "speaker": "Alexander Vasserman", "text": "transformed document."}, {"source_name": "lecture8", "index": 616, "time": "00:46:35.070 --> 00:46:35.950", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 617, "time": "00:46:36.340 --> 00:46:37.270", "speaker": "Alexander Vasserman", "text": "to the"}, {"source_name": "lecture8", "index": 618, "time": "00:46:37.770 --> 00:46:38.729", "speaker": "Alexander Vasserman", "text": "collection!"}, {"source_name": "lecture8", "index": 619, "time": "00:46:39.000 --> 00:46:41.009", "speaker": "Alexander Vasserman", "text": "So it's kind of very similar to"}, {"source_name": "lecture8", "index": 620, "time": "00:46:45.010 --> 00:46:46.810", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture8", "index": 621, "time": "00:46:48.530 --> 00:46:50.649", "speaker": "Alexander Vasserman", "text": "no the"}, {"source_name": "lecture8", "index": 622, "time": "00:46:52.350 --> 00:46:53.600", "speaker": "Alexander Vasserman", "text": "we're finally"}, {"source_name": "lecture8", "index": 623, "time": "00:46:54.160 --> 00:46:55.920", "speaker": "Alexander Vasserman", "text": "get to."}, {"source_name": "lecture8", "index": 624, "time": "00:46:56.100 --> 00:46:56.910", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 625, "time": "00:46:57.000 --> 00:46:59.590", "speaker": "Alexander Vasserman", "text": "define, transform documents."}, {"source_name": "lecture8", "index": 626, "time": "00:47:00.250 --> 00:47:01.740", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture8", "index": 627, "time": "00:47:03.060 --> 00:47:04.379", "speaker": "Alexander Vasserman", "text": "we all have."}, {"source_name": "lecture8", "index": 628, "time": "00:47:15.500 --> 00:47:19.829", "speaker": "Alexander Vasserman", "text": "We'll get all the docs from the document collection, and then the iterate"}, {"source_name": "lecture8", "index": 629, "time": "00:47:25.450 --> 00:47:27.140", "speaker": "Alexander Vasserman", "text": "over all of them."}, {"source_name": "lecture8", "index": 630, "time": "00:47:27.650 --> 00:47:29.949", "speaker": "Alexander Vasserman", "text": "They'll say that"}, {"source_name": "lecture8", "index": 631, "time": "00:47:31.940 --> 00:47:33.089", "speaker": "Alexander Vasserman", "text": "something like"}, {"source_name": "lecture8", "index": 632, "time": "00:47:33.860 --> 00:47:35.109", "speaker": "Alexander Vasserman", "text": "tokens"}, {"source_name": "lecture8", "index": 633, "time": "00:47:35.340 --> 00:47:36.290", "speaker": "Alexander Vasserman", "text": "he is."}, {"source_name": "lecture8", "index": 634, "time": "00:47:42.440 --> 00:47:44.769", "speaker": "Alexander Vasserman", "text": "You'll go take the"}, {"source_name": "lecture8", "index": 635, "time": "00:47:46.150 --> 00:47:48.809", "speaker": "Alexander Vasserman", "text": "text out of the document, and we"}, {"source_name": "lecture8", "index": 636, "time": "00:47:49.050 --> 00:47:50.729", "speaker": "Alexander Vasserman", "text": "token I is that text"}, {"source_name": "lecture8", "index": 637, "time": "00:47:51.580 --> 00:47:52.430", "speaker": "Alexander Vasserman", "text": "all right."}, {"source_name": "lecture8", "index": 638, "time": "00:47:57.240 --> 00:47:58.350", "speaker": "Alexander Vasserman", "text": "and you can."}, {"source_name": "lecture8", "index": 639, "time": "00:47:59.720 --> 00:48:00.629", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 640, "time": "00:48:03.810 --> 00:48:05.209", "speaker": "Alexander Vasserman", "text": "you can create."}, {"source_name": "lecture8", "index": 641, "time": "00:48:05.340 --> 00:48:06.799", "speaker": "Alexander Vasserman", "text": "transform, Doc."}, {"source_name": "lecture8", "index": 642, "time": "00:48:07.330 --> 00:48:09.979", "speaker": "Alexander Vasserman", "text": "That is now"}, {"source_name": "lecture8", "index": 643, "time": "00:48:11.180 --> 00:48:13.330", "speaker": "Alexander Vasserman", "text": "transform document."}, {"source_name": "lecture8", "index": 644, "time": "00:48:13.370 --> 00:48:15.069", "speaker": "Alexander Vasserman", "text": "He's the"}, {"source_name": "lecture8", "index": 645, "time": "00:48:15.410 --> 00:48:19.559", "speaker": "Alexander Vasserman", "text": "do. That is the same as the"}, {"source_name": "lecture8", "index": 646, "time": "00:48:19.660 --> 00:48:21.189", "speaker": "Alexander Vasserman", "text": "input Doc Id"}, {"source_name": "lecture8", "index": 647, "time": "00:48:21.690 --> 00:48:23.020", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture8", "index": 648, "time": "00:48:28.380 --> 00:48:29.540", "speaker": "Alexander Vasserman", "text": "or the"}, {"source_name": "lecture8", "index": 649, "time": "00:48:30.450 --> 00:48:31.209", "speaker": "Alexander Vasserman", "text": "oh"}, {"source_name": "lecture8", "index": 650, "time": "00:48:31.570 --> 00:48:33.020", "speaker": "Alexander Vasserman", "text": "tokens that"}, {"source_name": "lecture8", "index": 651, "time": "00:48:33.310 --> 00:48:34.370", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture8", "index": 652, "time": "00:48:36.740 --> 00:48:38.149", "speaker": "Alexander Vasserman", "text": "just generate it."}, {"source_name": "lecture8", "index": 653, "time": "00:48:40.430 --> 00:48:41.740", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture8", "index": 654, "time": "00:48:42.310 --> 00:48:43.250", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture8", "index": 655, "time": "00:48:43.550 --> 00:48:46.459", "speaker": "Alexander Vasserman", "text": "our support is going to be the"}, {"source_name": "lecture8", "index": 656, "time": "00:48:47.500 --> 00:48:50.190", "speaker": "Alexander Vasserman", "text": "transform document collection."}, {"source_name": "lecture8", "index": 657, "time": "00:48:51.690 --> 00:48:53.129", "speaker": "Alexander Vasserman", "text": "So we just"}, {"source_name": "lecture8", "index": 658, "time": "00:48:57.710 --> 00:48:58.600", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture8", "index": 659, "time": "00:48:59.190 --> 00:49:01.729", "speaker": "Alexander Vasserman", "text": "that transformed"}, {"source_name": "lecture8", "index": 660, "time": "00:49:01.820 --> 00:49:02.609", "speaker": "Alexander Vasserman", "text": "dog"}, {"source_name": "lecture8", "index": 661, "time": "00:49:02.970 --> 00:49:04.200", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture8", "index": 662, "time": "00:49:07.880 --> 00:49:08.989", "speaker": "Alexander Vasserman", "text": "and the return of"}, {"source_name": "lecture8", "index": 663, "time": "00:49:09.830 --> 00:49:13.480", "speaker": "Alexander Vasserman", "text": "and I can't spell. So yeah."}, {"source_name": "lecture8", "index": 664, "time": "00:49:14.550 --> 00:49:15.720", "speaker": "Alexander Vasserman", "text": "it's that"}, {"source_name": "lecture8", "index": 665, "time": "00:49:19.640 --> 00:49:22.119", "speaker": "Alexander Vasserman", "text": "Okay, runner, you have a question."}, {"source_name": "lecture8", "index": 666, "time": "00:49:22.700 --> 00:49:28.539", "speaker": "Rana Hani", "text": "Yeah, what do you mean by tokenizing the text like, I'm: just confused on what the tokens are."}, {"source_name": "lecture8", "index": 667, "time": "00:49:29.200 --> 00:49:32.140", "speaker": "Alexander Vasserman", "text": "Yeah. So for now, just their boards"}, {"source_name": "lecture8", "index": 668, "time": "00:49:32.450 --> 00:49:34.459", "speaker": "Alexander Vasserman", "text": "just sitting in for words."}, {"source_name": "lecture8", "index": 669, "time": "00:49:37.260 --> 00:49:41.619", "speaker": "Alexander Vasserman", "text": "So tokenize is basically splitting towards"}, {"source_name": "lecture8", "index": 670, "time": "00:49:43.310 --> 00:49:45.280", "speaker": "Alexander Vasserman", "text": "you know what it"}, {"source_name": "lecture8", "index": 671, "time": "00:49:45.730 --> 00:49:48.029", "speaker": "Alexander Vasserman", "text": "or normalize and speaking towards"}, {"source_name": "lecture8", "index": 672, "time": "00:49:48.050 --> 00:49:50.359", "speaker": "Alexander Vasserman", "text": "right. So really like"}, {"source_name": "lecture8", "index": 673, "time": "00:49:51.160 --> 00:49:55.559", "speaker": "Alexander Vasserman", "text": "what we have here is kind of very approximate of it."}, {"source_name": "lecture8", "index": 674, "time": "00:49:55.740 --> 00:49:56.470", "speaker": "Alexander Vasserman", "text": "Right?"}, {"source_name": "lecture8", "index": 675, "time": "00:49:56.990 --> 00:50:00.129", "speaker": "Alexander Vasserman", "text": "We will look into it."}, {"source_name": "lecture8", "index": 676, "time": "00:50:00.520 --> 00:50:03.810", "speaker": "Alexander Vasserman", "text": "Why, the organization is a little bit harder than that."}, {"source_name": "lecture8", "index": 677, "time": "00:50:03.860 --> 00:50:04.899", "speaker": "Alexander Vasserman", "text": "A. In"}, {"source_name": "lecture8", "index": 678, "time": "00:50:04.960 --> 00:50:06.800", "speaker": "Alexander Vasserman", "text": "the following"}, {"source_name": "lecture8", "index": 679, "time": "00:50:06.860 --> 00:50:07.990", "speaker": "Alexander Vasserman", "text": "classes."}, {"source_name": "lecture8", "index": 680, "time": "00:50:13.380 --> 00:50:14.370", "speaker": "Alexander Vasserman", "text": "Yes."}, {"source_name": "lecture8", "index": 681, "time": "00:50:15.130 --> 00:50:16.589", "speaker": "Rafal \"Ralph\" Jasielec", "text": "just a question to"}, {"source_name": "lecture8", "index": 682, "time": "00:50:16.920 --> 00:50:18.530", "speaker": "Rafal \"Ralph\" Jasielec", "text": "to confirm. So for myself."}, {"source_name": "lecture8", "index": 683, "time": "00:50:19.840 --> 00:50:25.410", "speaker": "Rafal \"Ralph\" Jasielec", "text": "the tokenization and the transformation of documents happens before the indexing correct."}, {"source_name": "lecture8", "index": 684, "time": "00:50:25.490 --> 00:50:27.090", "speaker": "Rafal \"Ralph\" Jasielec", "text": "That's right. Okay."}, {"source_name": "lecture8", "index": 685, "time": "00:50:28.150 --> 00:50:29.839", "speaker": "Alexander Vasserman", "text": "That's right. So"}, {"source_name": "lecture8", "index": 686, "time": "00:50:30.610 --> 00:50:31.640", "speaker": "Alexander Vasserman", "text": "no. If you"}, {"source_name": "lecture8", "index": 687, "time": "00:50:32.150 --> 00:50:33.430", "speaker": "Alexander Vasserman", "text": "done this"}, {"source_name": "lecture8", "index": 688, "time": "00:50:33.840 --> 00:50:35.789", "speaker": "Alexander Vasserman", "text": "transformed document stage."}, {"source_name": "lecture8", "index": 689, "time": "00:50:36.680 --> 00:50:38.209", "speaker": "Alexander Vasserman", "text": "and they're actually"}, {"source_name": "lecture8", "index": 690, "time": "00:50:38.510 --> 00:50:41.360", "speaker": "Alexander Vasserman", "text": "ready to get into the indexing stage"}, {"source_name": "lecture8", "index": 691, "time": "00:50:42.740 --> 00:50:45.519", "speaker": "Alexander Vasserman", "text": "or painting index."}, {"source_name": "lecture8", "index": 692, "time": "00:50:49.660 --> 00:50:50.669", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 693, "time": "00:50:55.110 --> 00:50:56.430", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture8", "index": 694, "time": "00:50:58.210 --> 00:50:59.569", "speaker": "Alexander Vasserman", "text": "yes, so"}, {"source_name": "lecture8", "index": 695, "time": "00:51:00.090 --> 00:51:03.489", "speaker": "Alexander Vasserman", "text": "One thing I might want to have here is that"}, {"source_name": "lecture8", "index": 696, "time": "00:51:03.790 --> 00:51:10.419", "speaker": "Alexander Vasserman", "text": "now we actually know what kind of things we're dealing with. So the this is"}, {"source_name": "lecture8", "index": 697, "time": "00:51:10.460 --> 00:51:14.450", "speaker": "Alexander Vasserman", "text": "the input document collection, and the output is"}, {"source_name": "lecture8", "index": 698, "time": "00:51:14.700 --> 00:51:16.679", "speaker": "Alexander Vasserman", "text": "transferred talking collection."}, {"source_name": "lecture8", "index": 699, "time": "00:51:17.440 --> 00:51:18.850", "speaker": "Alexander Vasserman", "text": "So really, like"}, {"source_name": "lecture8", "index": 700, "time": "00:51:19.020 --> 00:51:24.800", "speaker": "Alexander Vasserman", "text": "you know, what we're doing here is exactly like what we did before, and our naive"}, {"source_name": "lecture8", "index": 701, "time": "00:51:24.870 --> 00:51:29.120", "speaker": "Alexander Vasserman", "text": "implementation, and we're just creating this abstractions around it."}, {"source_name": "lecture8", "index": 702, "time": "00:51:29.180 --> 00:51:34.310", "speaker": "Alexander Vasserman", "text": "and it might be kind of confusing right now by the or when doing it."}, {"source_name": "lecture8", "index": 703, "time": "00:51:34.570 --> 00:51:37.769", "speaker": "Alexander Vasserman", "text": "But it's kind of looking into the future."}, {"source_name": "lecture8", "index": 704, "time": "00:51:37.940 --> 00:51:39.529", "speaker": "Alexander Vasserman", "text": "saying, okay, Well."}, {"source_name": "lecture8", "index": 705, "time": "00:51:39.640 --> 00:51:45.409", "speaker": "Alexander Vasserman", "text": "here are kind of black boxes. We have a very simple implementation of those boxes."}, {"source_name": "lecture8", "index": 706, "time": "00:51:47.590 --> 00:51:51.059", "speaker": "Alexander Vasserman", "text": "but it's good to create abstractions so that we can"}, {"source_name": "lecture8", "index": 707, "time": "00:51:51.130 --> 00:51:53.570", "speaker": "Alexander Vasserman", "text": "improve those as the"}, {"source_name": "lecture8", "index": 708, "time": "00:51:53.700 --> 00:51:55.069", "speaker": "Alexander Vasserman", "text": "move forward."}, {"source_name": "lecture8", "index": 709, "time": "00:51:55.110 --> 00:51:56.959", "speaker": "Alexander Vasserman", "text": "Oh, this is our implementation."}, {"source_name": "lecture8", "index": 710, "time": "00:51:58.120 --> 00:51:58.919", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture8", "index": 711, "time": "00:52:00.820 --> 00:52:06.830", "speaker": "Fahad Khan", "text": "do you just go over the class transformed document collection? Can you explain exactly what that's doing."}, {"source_name": "lecture8", "index": 712, "time": "00:52:08.100 --> 00:52:12.310", "speaker": "Alexander Vasserman", "text": "Yes, it's it's really just again an abstraction"}, {"source_name": "lecture8", "index": 713, "time": "00:52:12.500 --> 00:52:15.440", "speaker": "Alexander Vasserman", "text": "over at least of transformed documents."}, {"source_name": "lecture8", "index": 714, "time": "00:52:16.590 --> 00:52:22.510", "speaker": "Alexander Vasserman", "text": "You know we can say that you know we could, instead of transform document collection."}, {"source_name": "lecture8", "index": 715, "time": "00:52:22.930 --> 00:52:24.169", "speaker": "Alexander Vasserman", "text": "just"}, {"source_name": "lecture8", "index": 716, "time": "00:52:24.290 --> 00:52:25.189", "speaker": "Alexander Vasserman", "text": "say"}, {"source_name": "lecture8", "index": 717, "time": "00:52:26.790 --> 00:52:27.649", "speaker": "Alexander Vasserman", "text": "a"}, {"source_name": "lecture8", "index": 718, "time": "00:52:28.660 --> 00:52:29.660", "speaker": "Alexander Vasserman", "text": "at least."}, {"source_name": "lecture8", "index": 719, "time": "00:52:30.790 --> 00:52:31.700", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture8", "index": 720, "time": "00:52:32.200 --> 00:52:33.390", "speaker": "Alexander Vasserman", "text": "actually that's"}, {"source_name": "lecture8", "index": 721, "time": "00:52:33.800 --> 00:52:34.970", "speaker": "Alexander Vasserman", "text": "something that"}, {"source_name": "lecture8", "index": 722, "time": "00:52:35.080 --> 00:52:38.329", "speaker": "Alexander Vasserman", "text": "I is a good question. And I wanted to"}, {"source_name": "lecture8", "index": 723, "time": "00:52:38.360 --> 00:52:42.000", "speaker": "Alexander Vasserman", "text": "go into the app. Actually so."}, {"source_name": "lecture8", "index": 724, "time": "00:52:42.060 --> 00:52:44.549", "speaker": "Alexander Vasserman", "text": "one of the things that we might want to do."}, {"source_name": "lecture8", "index": 725, "time": "00:52:44.700 --> 00:52:47.609", "speaker": "Alexander Vasserman", "text": "He's actually store"}, {"source_name": "lecture8", "index": 726, "time": "00:52:47.680 --> 00:52:49.000", "speaker": "Alexander Vasserman", "text": "intermediate"}, {"source_name": "lecture8", "index": 727, "time": "00:52:49.090 --> 00:52:51.059", "speaker": "Alexander Vasserman", "text": "data. So imagine"}, {"source_name": "lecture8", "index": 728, "time": "00:52:51.230 --> 00:52:54.299", "speaker": "Alexander Vasserman", "text": "that in actual search implementation"}, {"source_name": "lecture8", "index": 729, "time": "00:52:54.690 --> 00:52:56.479", "speaker": "Alexander Vasserman", "text": "we would want to"}, {"source_name": "lecture8", "index": 730, "time": "00:52:57.190 --> 00:53:01.029", "speaker": "Alexander Vasserman", "text": "run this code on fairly large document collections."}, {"source_name": "lecture8", "index": 731, "time": "00:53:01.550 --> 00:53:03.910", "speaker": "Alexander Vasserman", "text": "and the one with John"}, {"source_name": "lecture8", "index": 732, "time": "00:53:04.070 --> 00:53:06.549", "speaker": "Alexander Vasserman", "text": "the transformation stage."}, {"source_name": "lecture8", "index": 733, "time": "00:53:06.680 --> 00:53:09.149", "speaker": "Alexander Vasserman", "text": "You might want to save the output"}, {"source_name": "lecture8", "index": 734, "time": "00:53:09.650 --> 00:53:11.459", "speaker": "Alexander Vasserman", "text": "so that you don't have to rerun it."}, {"source_name": "lecture8", "index": 735, "time": "00:53:11.900 --> 00:53:14.560", "speaker": "Alexander Vasserman", "text": "So we might want to define."}, {"source_name": "lecture8", "index": 736, "time": "00:53:14.600 --> 00:53:15.640", "speaker": "Alexander Vasserman", "text": "Oh, other"}, {"source_name": "lecture8", "index": 737, "time": "00:53:15.770 --> 00:53:16.720", "speaker": "Alexander Vasserman", "text": "all"}, {"source_name": "lecture8", "index": 738, "time": "00:53:17.100 --> 00:53:20.709", "speaker": "Alexander Vasserman", "text": "functions here. So, for example, we want to."}, {"source_name": "lecture8", "index": 739, "time": "00:53:20.960 --> 00:53:21.790", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 740, "time": "00:53:23.110 --> 00:53:24.770", "speaker": "Alexander Vasserman", "text": "have a"}, {"source_name": "lecture8", "index": 741, "time": "00:53:24.790 --> 00:53:26.040", "speaker": "Alexander Vasserman", "text": "great function"}, {"source_name": "lecture8", "index": 742, "time": "00:53:26.100 --> 00:53:27.589", "speaker": "Alexander Vasserman", "text": "that let's say."}, {"source_name": "lecture8", "index": 743, "time": "00:53:27.820 --> 00:53:29.849", "speaker": "Alexander Vasserman", "text": "Oh, takes a"}, {"source_name": "lecture8", "index": 744, "time": "00:53:34.000 --> 00:53:34.899", "speaker": "Alexander Vasserman", "text": "fast."}, {"source_name": "lecture8", "index": 745, "time": "00:53:35.000 --> 00:53:37.200", "speaker": "Alexander Vasserman", "text": "Oh, where we want to write it out, too."}, {"source_name": "lecture8", "index": 746, "time": "00:53:37.700 --> 00:53:40.569", "speaker": "Alexander Vasserman", "text": "and we'll write out"}, {"source_name": "lecture8", "index": 747, "time": "00:53:42.680 --> 00:53:45.270", "speaker": "Alexander Vasserman", "text": "whatever we have in this collection."}, {"source_name": "lecture8", "index": 748, "time": "00:53:45.470 --> 00:53:46.180", "speaker": "Alexander Vasserman", "text": "All right."}, {"source_name": "lecture8", "index": 749, "time": "00:53:46.490 --> 00:53:47.920", "speaker": "Alexander Vasserman", "text": "So that's actually it"}, {"source_name": "lecture8", "index": 750, "time": "00:53:48.150 --> 00:53:49.339", "speaker": "Alexander Vasserman", "text": "implement that"}, {"source_name": "lecture8", "index": 751, "time": "00:53:49.730 --> 00:53:56.349", "speaker": "Alexander Vasserman", "text": "while we're still haven't gotten into the indexing part, we're still kind of fresh, and what"}, {"source_name": "lecture8", "index": 752, "time": "00:53:56.400 --> 00:53:57.950", "speaker": "Alexander Vasserman", "text": "transfer document"}, {"source_name": "lecture8", "index": 753, "time": "00:53:58.450 --> 00:54:00.620", "speaker": "Alexander Vasserman", "text": "or it from documents are"}, {"source_name": "lecture8", "index": 754, "time": "00:54:03.070 --> 00:54:05.050", "speaker": "Alexander Vasserman", "text": "Really, it's a"}, {"source_name": "lecture8", "index": 755, "time": "00:54:05.590 --> 00:54:06.470", "speaker": "Alexander Vasserman", "text": "all"}, {"source_name": "lecture8", "index": 756, "time": "00:54:09.030 --> 00:54:11.779", "speaker": "Alexander Vasserman", "text": "right, so it it's at least of"}, {"source_name": "lecture8", "index": 757, "time": "00:54:12.020 --> 00:54:12.890", "speaker": "Alexander Vasserman", "text": "oh"}, {"source_name": "lecture8", "index": 758, "time": "00:54:15.630 --> 00:54:20.200", "speaker": "Alexander Vasserman", "text": "documents! Each one of them is"}, {"source_name": "lecture8", "index": 759, "time": "00:54:20.780 --> 00:54:22.259", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture8", "index": 760, "time": "00:54:24.440 --> 00:54:25.890", "speaker": "Alexander Vasserman", "text": "what we"}, {"source_name": "lecture8", "index": 761, "time": "00:54:26.640 --> 00:54:31.140", "speaker": "Alexander Vasserman", "text": "so we now need to figure out how to represent this collection"}, {"source_name": "lecture8", "index": 762, "time": "00:54:31.290 --> 00:54:32.149", "speaker": "Alexander Vasserman", "text": "in"}, {"source_name": "lecture8", "index": 763, "time": "00:54:32.430 --> 00:54:33.500", "speaker": "Alexander Vasserman", "text": "in a file."}, {"source_name": "lecture8", "index": 764, "time": "00:54:34.270 --> 00:54:37.629", "speaker": "Alexander Vasserman", "text": "We'll use again Json representation"}, {"source_name": "lecture8", "index": 765, "time": "00:54:38.470 --> 00:54:44.460", "speaker": "Alexander Vasserman", "text": "in order to to use Json representation. We want to kind of to convert"}, {"source_name": "lecture8", "index": 766, "time": "00:54:44.980 --> 00:54:46.109", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture8", "index": 767, "time": "00:54:46.750 --> 00:54:47.540", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 768, "time": "00:54:49.110 --> 00:54:50.089", "speaker": "Alexander Vasserman", "text": "our"}, {"source_name": "lecture8", "index": 769, "time": "00:54:50.570 --> 00:54:51.629", "speaker": "Alexander Vasserman", "text": "fields"}, {"source_name": "lecture8", "index": 770, "time": "00:54:51.970 --> 00:54:55.199", "speaker": "Alexander Vasserman", "text": "into, or our classes into dictionaries."}, {"source_name": "lecture8", "index": 771, "time": "00:54:56.680 --> 00:54:58.490", "speaker": "Alexander Vasserman", "text": "So one of the things"}, {"source_name": "lecture8", "index": 772, "time": "00:54:58.680 --> 00:55:01.670", "speaker": "Alexander Vasserman", "text": "that name top will actually provide for us"}, {"source_name": "lecture8", "index": 773, "time": "00:55:01.710 --> 00:55:03.450", "speaker": "Alexander Vasserman", "text": "is this"}, {"source_name": "lecture8", "index": 774, "time": "00:55:03.570 --> 00:55:06.119", "speaker": "Alexander Vasserman", "text": "a function as dicked?"}, {"source_name": "lecture8", "index": 775, "time": "00:55:06.160 --> 00:55:09.649", "speaker": "Alexander Vasserman", "text": "So we're going to be using that function. But"}, {"source_name": "lecture8", "index": 776, "time": "00:55:14.320 --> 00:55:15.759", "speaker": "Alexander Vasserman", "text": "yes, so"}, {"source_name": "lecture8", "index": 777, "time": "00:55:15.860 --> 00:55:17.330", "speaker": "Alexander Vasserman", "text": "oh, let's say."}, {"source_name": "lecture8", "index": 778, "time": "00:55:17.680 --> 00:55:18.569", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 779, "time": "00:55:23.350 --> 00:55:24.299", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture8", "index": 780, "time": "00:55:28.190 --> 00:55:29.850", "speaker": "Alexander Vasserman", "text": "we'll create"}, {"source_name": "lecture8", "index": 781, "time": "00:55:30.090 --> 00:55:35.870", "speaker": "Alexander Vasserman", "text": "kind of the data structure that's ready to be written into Json"}, {"source_name": "lecture8", "index": 782, "time": "00:55:35.980 --> 00:55:38.819", "speaker": "Alexander Vasserman", "text": "we might want to have"}, {"source_name": "lecture8", "index": 783, "time": "00:55:38.890 --> 00:55:39.830", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 784, "time": "00:55:41.310 --> 00:55:42.680", "speaker": "Alexander Vasserman", "text": "Field."}, {"source_name": "lecture8", "index": 785, "time": "00:55:42.970 --> 00:55:44.789", "speaker": "Alexander Vasserman", "text": "let's say, called Docs."}, {"source_name": "lecture8", "index": 786, "time": "00:55:45.850 --> 00:55:47.270", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture8", "index": 787, "time": "00:55:56.140 --> 00:55:59.009", "speaker": "Alexander Vasserman", "text": "and the value is a list"}, {"source_name": "lecture8", "index": 788, "time": "00:55:59.030 --> 00:56:02.400", "speaker": "Alexander Vasserman", "text": "right? So we'll go create a list here."}, {"source_name": "lecture8", "index": 789, "time": "00:56:02.520 --> 00:56:09.420", "speaker": "Alexander Vasserman", "text": "and what will be inside of the list is representations of the transformed documents."}, {"source_name": "lecture8", "index": 790, "time": "00:56:10.490 --> 00:56:11.580", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture8", "index": 791, "time": "00:56:14.830 --> 00:56:15.720", "speaker": "Alexander Vasserman", "text": "that's"}, {"source_name": "lecture8", "index": 792, "time": "00:56:16.720 --> 00:56:20.079", "speaker": "Alexander Vasserman", "text": "call it Td. As an abbreviation"}, {"source_name": "lecture8", "index": 793, "time": "00:56:21.280 --> 00:56:22.279", "speaker": "Alexander Vasserman", "text": "to."}, {"source_name": "lecture8", "index": 794, "time": "00:56:36.160 --> 00:56:41.490", "speaker": "Alexander Vasserman", "text": "And what we want to output there is actually."}, {"source_name": "lecture8", "index": 795, "time": "00:56:42.600 --> 00:56:43.319", "speaker": "Alexander Vasserman", "text": "that's"}, {"source_name": "lecture8", "index": 796, "time": "00:56:47.440 --> 00:56:48.290", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture8", "index": 797, "time": "00:56:50.720 --> 00:56:51.529", "speaker": "Alexander Vasserman", "text": "okay."}, {"source_name": "lecture8", "index": 798, "time": "00:56:53.170 --> 00:56:54.089", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 799, "time": "00:56:55.890 --> 00:56:56.669", "speaker": "Alexander Vasserman", "text": "sorry."}, {"source_name": "lecture8", "index": 800, "time": "00:56:57.870 --> 00:56:59.190", "speaker": "Alexander Vasserman", "text": "Do you have a question?"}, {"source_name": "lecture8", "index": 801, "time": "00:56:59.590 --> 00:57:02.049", "speaker": "Fahad Khan", "text": "Oh, wait! Are you done with the right thing?"}, {"source_name": "lecture8", "index": 802, "time": "00:57:02.190 --> 00:57:03.540", "speaker": "Fahad Khan", "text": "With the"}, {"source_name": "lecture8", "index": 803, "time": "00:57:03.800 --> 00:57:08.749", "speaker": "Alexander Vasserman", "text": "not completely so what you want to do is now to basically store that"}, {"source_name": "lecture8", "index": 804, "time": "00:57:08.810 --> 00:57:09.609", "speaker": "Alexander Vasserman", "text": "or"}, {"source_name": "lecture8", "index": 805, "time": "00:57:09.730 --> 00:57:10.810", "speaker": "Alexander Vasserman", "text": "data"}, {"source_name": "lecture8", "index": 806, "time": "00:57:11.130 --> 00:57:13.050", "speaker": "Alexander Vasserman", "text": "into or"}, {"source_name": "lecture8", "index": 807, "time": "00:57:13.730 --> 00:57:15.830", "speaker": "Alexander Vasserman", "text": "into your file, right? So"}, {"source_name": "lecture8", "index": 808, "time": "00:57:15.910 --> 00:57:23.990", "speaker": "Alexander Vasserman", "text": "we can all now do our Json kind of writing thing right? So we can"}, {"source_name": "lecture8", "index": 809, "time": "00:57:26.440 --> 00:57:27.399", "speaker": "Alexander Vasserman", "text": "open"}, {"source_name": "lecture8", "index": 810, "time": "00:57:28.200 --> 00:57:30.470", "speaker": "Alexander Vasserman", "text": "for writing."}, {"source_name": "lecture8", "index": 811, "time": "00:57:32.610 --> 00:57:33.939", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture8", "index": 812, "time": "00:57:34.620 --> 00:57:36.389", "speaker": "Alexander Vasserman", "text": "you remember"}, {"source_name": "lecture8", "index": 813, "time": "00:57:36.560 --> 00:57:45.100", "speaker": "Alexander Vasserman", "text": "for reading in the source for reading Json documents. We had Json dot load."}, {"source_name": "lecture8", "index": 814, "time": "00:57:45.730 --> 00:57:48.390", "speaker": "Alexander Vasserman", "text": "There is an equivalent of that"}, {"source_name": "lecture8", "index": 815, "time": "00:57:48.600 --> 00:57:50.839", "speaker": "Alexander Vasserman", "text": "Json dot dump"}, {"source_name": "lecture8", "index": 816, "time": "00:57:51.580 --> 00:57:53.380", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture8", "index": 817, "time": "00:57:53.450 --> 00:57:54.419", "speaker": "Alexander Vasserman", "text": "dates"}, {"source_name": "lecture8", "index": 818, "time": "00:57:56.450 --> 00:58:01.620", "speaker": "Alexander Vasserman", "text": "multiple arguments, but specifically an object in the file pointer."}, {"source_name": "lecture8", "index": 819, "time": "00:58:01.750 --> 00:58:02.629", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 820, "time": "00:58:02.710 --> 00:58:03.860", "speaker": "Alexander Vasserman", "text": "so we can"}, {"source_name": "lecture8", "index": 821, "time": "00:58:04.030 --> 00:58:04.899", "speaker": "Alexander Vasserman", "text": "don't"}, {"source_name": "lecture8", "index": 822, "time": "00:58:05.050 --> 00:58:06.000", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture8", "index": 823, "time": "00:58:06.340 --> 00:58:07.209", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 824, "time": "00:58:07.640 --> 00:58:08.709", "speaker": "Alexander Vasserman", "text": "Jason"}, {"source_name": "lecture8", "index": 825, "time": "00:58:08.970 --> 00:58:09.990", "speaker": "Alexander Vasserman", "text": "data"}, {"source_name": "lecture8", "index": 826, "time": "00:58:10.410 --> 00:58:11.450", "speaker": "Alexander Vasserman", "text": "to"}, {"source_name": "lecture8", "index": 827, "time": "00:58:12.930 --> 00:58:14.270", "speaker": "Alexander Vasserman", "text": "the file, point there."}, {"source_name": "lecture8", "index": 828, "time": "00:58:15.460 --> 00:58:16.959", "speaker": "Alexander Vasserman", "text": "and actually let's"}, {"source_name": "lecture8", "index": 829, "time": "00:58:22.140 --> 00:58:26.880", "speaker": "Alexander Vasserman", "text": "make it very clear, and so that we don't"}, {"source_name": "lecture8", "index": 830, "time": "00:58:26.960 --> 00:58:29.180", "speaker": "Alexander Vasserman", "text": "have to remember the order of arguments."}, {"source_name": "lecture8", "index": 831, "time": "00:58:29.670 --> 00:58:35.179", "speaker": "Alexander Vasserman", "text": "And so that's actually going to do the writing right. So now"}, {"source_name": "lecture8", "index": 832, "time": "00:58:35.310 --> 00:58:38.749", "speaker": "Alexander Vasserman", "text": "this should be we. We should be able to output"}, {"source_name": "lecture8", "index": 833, "time": "00:58:39.240 --> 00:58:40.069", "speaker": "Alexander Vasserman", "text": "all"}, {"source_name": "lecture8", "index": 834, "time": "00:58:40.700 --> 00:58:42.819", "speaker": "Alexander Vasserman", "text": "our intermediate steps"}, {"source_name": "lecture8", "index": 835, "time": "00:58:43.330 --> 00:58:45.339", "speaker": "Alexander Vasserman", "text": "in particular."}, {"source_name": "lecture8", "index": 836, "time": "00:58:45.470 --> 00:58:49.940", "speaker": "Alexander Vasserman", "text": "for example, what we might want to do is to say, here."}, {"source_name": "lecture8", "index": 837, "time": "00:58:50.370 --> 00:58:51.229", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 838, "time": "00:58:56.420 --> 00:58:57.809", "speaker": "Alexander Vasserman", "text": "let's"}, {"source_name": "lecture8", "index": 839, "time": "00:58:57.940 --> 00:58:59.160", "speaker": "Alexander Vasserman", "text": "right out."}, {"source_name": "lecture8", "index": 840, "time": "00:58:59.270 --> 00:59:01.629", "speaker": "Alexander Vasserman", "text": "They transformed documents here"}, {"source_name": "lecture8", "index": 841, "time": "00:59:01.750 --> 00:59:03.660", "speaker": "Alexander Vasserman", "text": "so that you preserve it."}, {"source_name": "lecture8", "index": 842, "time": "00:59:03.790 --> 00:59:07.719", "speaker": "Alexander Vasserman", "text": "and if we need to later on we can just read it from there"}, {"source_name": "lecture8", "index": 843, "time": "00:59:07.800 --> 00:59:10.439", "speaker": "Alexander Vasserman", "text": "right? So we will need"}, {"source_name": "lecture8", "index": 844, "time": "00:59:10.630 --> 00:59:13.660", "speaker": "Alexander Vasserman", "text": "to to have some kind of a path here."}, {"source_name": "lecture8", "index": 845, "time": "00:59:13.700 --> 00:59:15.229", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture8", "index": 846, "time": "00:59:15.270 --> 00:59:16.069", "speaker": "Alexander Vasserman", "text": "deal"}, {"source_name": "lecture8", "index": 847, "time": "00:59:16.670 --> 00:59:18.000", "speaker": "Alexander Vasserman", "text": "add it later."}, {"source_name": "lecture8", "index": 848, "time": "00:59:18.350 --> 00:59:20.300", "speaker": "Alexander Vasserman", "text": "So you know kind of. But"}, {"source_name": "lecture8", "index": 849, "time": "00:59:25.480 --> 00:59:26.350", "speaker": "Alexander Vasserman", "text": "but"}, {"source_name": "lecture8", "index": 850, "time": "00:59:26.400 --> 00:59:28.889", "speaker": "Alexander Vasserman", "text": "oh, that's kind of where we are."}, {"source_name": "lecture8", "index": 851, "time": "00:59:29.470 --> 00:59:31.919", "speaker": "Alexander Vasserman", "text": "One way to to use this for today."}, {"source_name": "lecture8", "index": 852, "time": "00:59:36.240 --> 00:59:37.899", "speaker": "Alexander Vasserman", "text": "Okay, so"}, {"source_name": "lecture8", "index": 853, "time": "00:59:38.120 --> 00:59:39.160", "speaker": "Alexander Vasserman", "text": "that's"}, {"source_name": "lecture8", "index": 854, "time": "00:59:39.840 --> 00:59:44.359", "speaker": "Alexander Vasserman", "text": "the definition of right function will also want to"}, {"source_name": "lecture8", "index": 855, "time": "00:59:45.390 --> 00:59:46.479", "speaker": "Alexander Vasserman", "text": "define."}, {"source_name": "lecture8", "index": 856, "time": "00:59:47.320 --> 00:59:48.120", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 857, "time": "00:59:48.880 --> 00:59:50.089", "speaker": "Alexander Vasserman", "text": "read function"}, {"source_name": "lecture8", "index": 858, "time": "00:59:50.360 --> 00:59:52.370", "speaker": "Alexander Vasserman", "text": "so kind of the"}, {"source_name": "lecture8", "index": 859, "time": "00:59:52.690 --> 00:59:56.289", "speaker": "Alexander Vasserman", "text": "we've written it out so that we can reconstruct it"}, {"source_name": "lecture8", "index": 860, "time": "00:59:56.470 --> 00:59:58.020", "speaker": "Alexander Vasserman", "text": "from a file."}, {"source_name": "lecture8", "index": 861, "time": "00:59:58.950 --> 01:00:01.729", "speaker": "Alexander Vasserman", "text": "so we'll we'll do that next."}, {"source_name": "lecture8", "index": 862, "time": "01:00:02.090 --> 01:00:03.439", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture8", "index": 863, "time": "01:00:03.570 --> 01:00:04.869", "speaker": "Alexander Vasserman", "text": "before we do that."}, {"source_name": "lecture8", "index": 864, "time": "01:00:04.920 --> 01:00:07.710", "speaker": "Alexander Vasserman", "text": "what was the question you wanted to ask"}, {"source_name": "lecture8", "index": 865, "time": "01:00:08.220 --> 01:00:26.550", "speaker": "Fahad Khan", "text": "just in the in the grand scheme of things. So I know document collection is collecting documents with the with the dock Ids and the the text right? So what exactly different is the transform document doing? What exactly is it, transforming it into if it's already."}, {"source_name": "lecture8", "index": 866, "time": "01:00:26.600 --> 01:00:30.439", "speaker": "Fahad Khan", "text": "you know, in the using the Id and the the text."}, {"source_name": "lecture8", "index": 867, "time": "01:00:30.780 --> 01:00:31.899", "speaker": "Alexander Vasserman", "text": "Well, so."}, {"source_name": "lecture8", "index": 868, "time": "01:00:32.400 --> 01:00:38.709", "speaker": "Alexander Vasserman", "text": "yes, great question. So the document, the input document is Id and text."}, {"source_name": "lecture8", "index": 869, "time": "01:00:38.880 --> 01:00:47.120", "speaker": "Alexander Vasserman", "text": "But text is represented as a stream. That's the input, streaming the the way that we got it from whatever source."}, {"source_name": "lecture8", "index": 870, "time": "01:00:48.280 --> 01:00:53.669", "speaker": "Alexander Vasserman", "text": "Now the transform document is a kind of standardizing that"}, {"source_name": "lecture8", "index": 871, "time": "01:00:53.740 --> 01:00:56.729", "speaker": "Alexander Vasserman", "text": "into a list of words."}, {"source_name": "lecture8", "index": 872, "time": "01:00:58.350 --> 01:01:02.699", "speaker": "Alexander Vasserman", "text": "So a transform document, instead of just a single"}, {"source_name": "lecture8", "index": 873, "time": "01:01:02.960 --> 01:01:03.720", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 874, "time": "01:01:03.870 --> 01:01:04.919", "speaker": "Alexander Vasserman", "text": "string"}, {"source_name": "lecture8", "index": 875, "time": "01:01:06.470 --> 01:01:07.490", "speaker": "Alexander Vasserman", "text": "has"}, {"source_name": "lecture8", "index": 876, "time": "01:01:07.860 --> 01:01:08.850", "speaker": "Alexander Vasserman", "text": "now"}, {"source_name": "lecture8", "index": 877, "time": "01:01:08.910 --> 01:01:10.590", "speaker": "Alexander Vasserman", "text": "at least of words."}, {"source_name": "lecture8", "index": 878, "time": "01:01:11.290 --> 01:01:15.369", "speaker": "Alexander Vasserman", "text": "which is what we're going to be operating on. Remember that"}, {"source_name": "lecture8", "index": 879, "time": "01:01:15.420 --> 01:01:19.870", "speaker": "Alexander Vasserman", "text": "when we're doing, matching, or ranking, what we care about is"}, {"source_name": "lecture8", "index": 880, "time": "01:01:20.060 --> 01:01:25.509", "speaker": "Alexander Vasserman", "text": "matching individual tokens or terms to each other between the query and the document."}, {"source_name": "lecture8", "index": 881, "time": "01:01:26.390 --> 01:01:29.849", "speaker": "Alexander Vasserman", "text": "For that we need to understand what"}, {"source_name": "lecture8", "index": 882, "time": "01:01:29.890 --> 01:01:30.770", "speaker": "Alexander Vasserman", "text": "does."}, {"source_name": "lecture8", "index": 883, "time": "01:01:31.540 --> 01:01:32.229", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 884, "time": "01:01:32.290 --> 01:01:33.100", "speaker": "Alexander Vasserman", "text": "are"}, {"source_name": "lecture8", "index": 885, "time": "01:01:36.710 --> 01:01:42.580", "speaker": "Fahad Khan", "text": "okay, a. And one. So would it. Would it just be possible to"}, {"source_name": "lecture8", "index": 886, "time": "01:01:42.790 --> 01:01:49.099", "speaker": "Fahad Khan", "text": "like just for the document collection also include the transformed document, instead of like completely creating"}, {"source_name": "lecture8", "index": 887, "time": "01:01:49.130 --> 01:01:55.430", "speaker": "Fahad Khan", "text": "separate classes for them, just like make it one which is a document collection which is already transformed."}, {"source_name": "lecture8", "index": 888, "time": "01:01:56.490 --> 01:01:57.810", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture8", "index": 889, "time": "01:01:58.920 --> 01:02:01.389", "speaker": "Alexander Vasserman", "text": "it's possible right? We"}, {"source_name": "lecture8", "index": 890, "time": "01:02:01.780 --> 01:02:05.459", "speaker": "Alexander Vasserman", "text": "don't have to preserve essentially"}, {"source_name": "lecture8", "index": 891, "time": "01:02:05.630 --> 01:02:08.939", "speaker": "Alexander Vasserman", "text": "every step of the way. But remember that the"}, {"source_name": "lecture8", "index": 892, "time": "01:02:09.310 --> 01:02:18.580", "speaker": "Alexander Vasserman", "text": "document collection is something that we also want to output. And one of the things that we want to do is it is potentially presented to the user"}, {"source_name": "lecture8", "index": 893, "time": "01:02:18.850 --> 01:02:22.319", "speaker": "Alexander Vasserman", "text": "A as a part of the"}, {"source_name": "lecture8", "index": 894, "time": "01:02:22.870 --> 01:02:24.349", "speaker": "Alexander Vasserman", "text": "the output."}, {"source_name": "lecture8", "index": 895, "time": "01:02:24.380 --> 01:02:29.460", "speaker": "Alexander Vasserman", "text": "Maybe I need to actually let me see if I have. I did not"}, {"source_name": "lecture8", "index": 896, "time": "01:02:29.740 --> 01:02:31.349", "speaker": "Alexander Vasserman", "text": "have the slides"}, {"source_name": "lecture8", "index": 897, "time": "01:02:31.670 --> 01:02:34.109", "speaker": "Alexander Vasserman", "text": "for today because I was planning"}, {"source_name": "lecture8", "index": 898, "time": "01:02:34.570 --> 01:02:36.699", "speaker": "Alexander Vasserman", "text": "to work on"}, {"source_name": "lecture8", "index": 899, "time": "01:02:37.020 --> 01:02:39.690", "speaker": "Alexander Vasserman", "text": "basically just on the code. But I think that was"}, {"source_name": "lecture8", "index": 900, "time": "01:02:39.820 --> 01:02:40.600", "speaker": "Alexander Vasserman", "text": "e"}, {"source_name": "lecture8", "index": 901, "time": "01:02:41.720 --> 01:02:50.850", "speaker": "Alexander Vasserman", "text": "a little bit of a mistake. So let me just use slides from the last lecture. Really, that's that's what we want, and in particular"}, {"source_name": "lecture8", "index": 902, "time": "01:02:51.370 --> 01:02:52.250", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture8", "index": 903, "time": "01:02:53.860 --> 01:02:55.109", "speaker": "Alexander Vasserman", "text": "right. So"}, {"source_name": "lecture8", "index": 904, "time": "01:02:55.530 --> 01:03:00.270", "speaker": "Alexander Vasserman", "text": "remember, this is what we are implementing. But the reason why we are implementing it is"}, {"source_name": "lecture8", "index": 905, "time": "01:03:00.290 --> 01:03:01.429", "speaker": "Alexander Vasserman", "text": "for kind of"}, {"source_name": "lecture8", "index": 906, "time": "01:03:01.840 --> 01:03:03.620", "speaker": "Alexander Vasserman", "text": "this query process"}, {"source_name": "lecture8", "index": 907, "time": "01:03:03.960 --> 01:03:05.330", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture8", "index": 908, "time": "01:03:05.750 --> 01:03:08.570", "speaker": "Alexander Vasserman", "text": "this final step in the query process."}, {"source_name": "lecture8", "index": 909, "time": "01:03:08.920 --> 01:03:09.759", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 910, "time": "01:03:10.130 --> 01:03:11.910", "speaker": "Alexander Vasserman", "text": "this user interaction"}, {"source_name": "lecture8", "index": 911, "time": "01:03:12.560 --> 01:03:14.480", "speaker": "Alexander Vasserman", "text": "is displaying results."}, {"source_name": "lecture8", "index": 912, "time": "01:03:17.380 --> 01:03:18.020", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 913, "time": "01:03:20.520 --> 01:03:24.650", "speaker": "Alexander Vasserman", "text": "right? Yeah. So displaying is not really right. So"}, {"source_name": "lecture8", "index": 914, "time": "01:03:25.340 --> 01:03:29.410", "speaker": "Alexander Vasserman", "text": "when you're displaying results, you might want to"}, {"source_name": "lecture8", "index": 915, "time": "01:03:29.970 --> 01:03:36.719", "speaker": "Alexander Vasserman", "text": "show the user the document the way it was before we did all this transformations"}, {"source_name": "lecture8", "index": 916, "time": "01:03:36.940 --> 01:03:37.799", "speaker": "Alexander Vasserman", "text": "right."}, {"source_name": "lecture8", "index": 917, "time": "01:03:38.070 --> 01:03:41.490", "speaker": "Alexander Vasserman", "text": "It would be weird to kind of"}, {"source_name": "lecture8", "index": 918, "time": "01:03:42.400 --> 01:03:43.770", "speaker": "Alexander Vasserman", "text": "show them like"}, {"source_name": "lecture8", "index": 919, "time": "01:03:43.800 --> 01:03:49.040", "speaker": "Alexander Vasserman", "text": "normalized text where we split things up in a weird way or whatever else."}, {"source_name": "lecture8", "index": 920, "time": "01:03:49.060 --> 01:03:54.119", "speaker": "Alexander Vasserman", "text": "So that's kind of why they are preserving the original state of the world."}, {"source_name": "lecture8", "index": 921, "time": "01:03:55.000 --> 01:03:58.939", "speaker": "Alexander Vasserman", "text": "So we can. We can use this document data store"}, {"source_name": "lecture8", "index": 922, "time": "01:03:59.250 --> 01:04:01.840", "speaker": "Alexander Vasserman", "text": "as part of the user interaction"}, {"source_name": "lecture8", "index": 923, "time": "01:04:01.900 --> 01:04:04.100", "speaker": "Alexander Vasserman", "text": "as part of the presentation. There."}, {"source_name": "lecture8", "index": 924, "time": "01:04:08.230 --> 01:04:11.190", "speaker": "Alexander Vasserman", "text": "Does that kind of make some sense?"}, {"source_name": "lecture8", "index": 925, "time": "01:04:11.750 --> 01:04:19.620", "speaker": "Fahad Khan", "text": "Yeah, Thank you for the explanations, because this is slowly starting to make sense like the the more we like know the little pieces."}, {"source_name": "lecture8", "index": 926, "time": "01:04:19.760 --> 01:04:23.689", "speaker": "Alexander Vasserman", "text": "Yeah, no. This this is definitely like, you know. This"}, {"source_name": "lecture8", "index": 927, "time": "01:04:23.900 --> 01:04:37.030", "speaker": "Alexander Vasserman", "text": "is where we kind of trying to figure out what the different components are, and that might be like one of the harder things that we're doing in this class. Because, yeah, it's, we're going from very concrete."}, {"source_name": "lecture8", "index": 928, "time": "01:04:37.090 --> 01:04:45.830", "speaker": "Alexander Vasserman", "text": "very like small amount of code to something quite abstract and saying, okay, here is how our entire system is going to look like"}, {"source_name": "lecture8", "index": 929, "time": "01:04:46.640 --> 01:04:48.779", "speaker": "Alexander Vasserman", "text": "all right. So that's the"}, {"source_name": "lecture8", "index": 930, "time": "01:04:48.890 --> 01:04:52.089", "speaker": "Alexander Vasserman", "text": "kind of the design there are."}, {"source_name": "lecture8", "index": 931, "time": "01:04:52.990 --> 01:04:54.319", "speaker": "Alexander Vasserman", "text": "The"}, {"source_name": "lecture8", "index": 932, "time": "01:04:54.450 --> 01:05:01.070", "speaker": "Alexander Vasserman", "text": "architecture. Design is what we are doing, and that's one of the harder"}, {"source_name": "lecture8", "index": 933, "time": "01:05:01.580 --> 01:05:03.469", "speaker": "Alexander Vasserman", "text": "things in"}, {"source_name": "lecture8", "index": 934, "time": "01:05:03.500 --> 01:05:07.139", "speaker": "Alexander Vasserman", "text": "any kind of project that you are going to do"}, {"source_name": "lecture8", "index": 935, "time": "01:05:07.590 --> 01:05:11.120", "speaker": "Alexander Vasserman", "text": "so if you have a project oftentimes"}, {"source_name": "lecture8", "index": 936, "time": "01:05:12.360 --> 01:05:17.729", "speaker": "Alexander Vasserman", "text": "in it. Some companies, sometimes you even have, like a separate person who is like"}, {"source_name": "lecture8", "index": 937, "time": "01:05:17.840 --> 01:05:20.450", "speaker": "Alexander Vasserman", "text": "architect who does"}, {"source_name": "lecture8", "index": 938, "time": "01:05:20.500 --> 01:05:21.969", "speaker": "Alexander Vasserman", "text": "just the"}, {"source_name": "lecture8", "index": 939, "time": "01:05:22.520 --> 01:05:24.829", "speaker": "Alexander Vasserman", "text": "this part of the project"}, {"source_name": "lecture8", "index": 940, "time": "01:05:24.960 --> 01:05:28.920", "speaker": "Alexander Vasserman", "text": "where they are saying, okay, what? What are the different components are"}, {"source_name": "lecture8", "index": 941, "time": "01:05:29.100 --> 01:05:32.800", "speaker": "Alexander Vasserman", "text": "that's obstructed? Let's say what the different"}, {"source_name": "lecture8", "index": 942, "time": "01:05:32.950 --> 01:05:35.340", "speaker": "Alexander Vasserman", "text": "objects that we're going to be dealing with."}, {"source_name": "lecture8", "index": 943, "time": "01:05:35.820 --> 01:05:36.819", "speaker": "Alexander Vasserman", "text": "and then"}, {"source_name": "lecture8", "index": 944, "time": "01:05:37.160 --> 01:05:39.469", "speaker": "Alexander Vasserman", "text": "kind of once we are done with, that"}, {"source_name": "lecture8", "index": 945, "time": "01:05:40.270 --> 01:05:43.010", "speaker": "Alexander Vasserman", "text": "other people can implement"}, {"source_name": "lecture8", "index": 946, "time": "01:05:43.150 --> 01:05:44.729", "speaker": "Alexander Vasserman", "text": "particular components."}, {"source_name": "lecture8", "index": 947, "time": "01:05:44.880 --> 01:05:46.860", "speaker": "Alexander Vasserman", "text": "and that's kind of easier."}, {"source_name": "lecture8", "index": 948, "time": "01:05:47.200 --> 01:05:48.990", "speaker": "Alexander Vasserman", "text": "And that's what we're doing. So"}, {"source_name": "lecture8", "index": 949, "time": "01:05:49.180 --> 01:05:51.530", "speaker": "Alexander Vasserman", "text": "this part of the"}, {"source_name": "lecture8", "index": 950, "time": "01:05:51.750 --> 01:05:54.859", "speaker": "Alexander Vasserman", "text": "project creation sometimes is the hardest part."}, {"source_name": "lecture8", "index": 951, "time": "01:05:54.880 --> 01:06:00.839", "speaker": "Alexander Vasserman", "text": "and sometimes it's done by the more most experienced engineers on the team."}, {"source_name": "lecture8", "index": 952, "time": "01:06:03.180 --> 01:06:06.530", "speaker": "Alexander Vasserman", "text": "So it definitely ask a lot of questions."}, {"source_name": "lecture8", "index": 953, "time": "01:06:06.680 --> 01:06:08.049", "speaker": "Alexander Vasserman", "text": "This is hard."}, {"source_name": "lecture8", "index": 954, "time": "01:06:08.210 --> 01:06:17.899", "speaker": "Alexander Vasserman", "text": "I happy to, you know, repeat things, Try to explain things in different ways, etc. But, like, you know, this is kind of"}, {"source_name": "lecture8", "index": 955, "time": "01:06:18.280 --> 01:06:22.530", "speaker": "Alexander Vasserman", "text": "how everything fits together. So it's important to understand this."}, {"source_name": "lecture8", "index": 956, "time": "01:06:24.570 --> 01:06:25.729", "speaker": "Alexander Vasserman", "text": "Okay? Well."}, {"source_name": "lecture8", "index": 957, "time": "01:06:26.730 --> 01:06:27.500", "speaker": "Rafal \"Ralph\" Jasielec", "text": "to kinda"}, {"source_name": "lecture8", "index": 958, "time": "01:06:29.010 --> 01:06:32.960", "speaker": "Rafal \"Ralph\" Jasielec", "text": "piggyback of what? What? What? He said"}, {"source_name": "lecture8", "index": 959, "time": "01:06:33.490 --> 01:06:37.339", "speaker": "Rafal \"Ralph\" Jasielec", "text": "I don't know if it needs to be now, because we might be wasting class time, but"}, {"source_name": "lecture8", "index": 960, "time": "01:06:37.610 --> 01:06:43.029", "speaker": "Rafal \"Ralph\" Jasielec", "text": "in between today's class, and next class would we be able to maybe get like a"}, {"source_name": "lecture8", "index": 961, "time": "01:06:43.810 --> 01:06:46.529", "speaker": "Rafal \"Ralph\" Jasielec", "text": "not necessarily a diagram, but like a"}, {"source_name": "lecture8", "index": 962, "time": "01:06:47.270 --> 01:06:52.460", "speaker": "Rafal \"Ralph\" Jasielec", "text": "like a like a list or something that's like, hey?"}, {"source_name": "lecture8", "index": 963, "time": "01:06:52.480 --> 01:06:58.160", "speaker": "Rafal \"Ralph\" Jasielec", "text": "The kind of like you. You had it on the bottom of the on the bottom of the file, just so that it's."}, {"source_name": "lecture8", "index": 964, "time": "01:07:00.650 --> 01:07:01.940", "speaker": "Rafal \"Ralph\" Jasielec", "text": "I guess."}, {"source_name": "lecture8", "index": 965, "time": "01:07:01.990 --> 01:07:05.760", "speaker": "Rafal \"Ralph\" Jasielec", "text": "like the process is a little bit more clearer as as"}, {"source_name": "lecture8", "index": 966, "time": "01:07:07.020 --> 01:07:07.859", "speaker": "Alexander Vasserman", "text": "right."}, {"source_name": "lecture8", "index": 967, "time": "01:07:08.230 --> 01:07:15.820", "speaker": "Alexander Vasserman", "text": "So I think that the process will be a little bit clearer once you're done with the basic implementation of"}, {"source_name": "lecture8", "index": 968, "time": "01:07:15.870 --> 01:07:18.259", "speaker": "Alexander Vasserman", "text": "both the indexing process"}, {"source_name": "lecture8", "index": 969, "time": "01:07:18.340 --> 01:07:20.510", "speaker": "Alexander Vasserman", "text": "and the query process."}, {"source_name": "lecture8", "index": 970, "time": "01:07:21.020 --> 01:07:22.209", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture8", "index": 971, "time": "01:07:24.120 --> 01:07:28.389", "speaker": "Alexander Vasserman", "text": "you know, if it's not completely clear right now."}, {"source_name": "lecture8", "index": 972, "time": "01:07:28.610 --> 01:07:33.449", "speaker": "Alexander Vasserman", "text": "maybe it is kind of okay, because really"}, {"source_name": "lecture8", "index": 973, "time": "01:07:33.600 --> 01:07:40.190", "speaker": "Alexander Vasserman", "text": "kind of the indexing process is done just in service kind of in the for the query process."}, {"source_name": "lecture8", "index": 974, "time": "01:07:42.670 --> 01:07:43.589", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture8", "index": 975, "time": "01:07:44.470 --> 01:07:49.919", "speaker": "Alexander Vasserman", "text": "one way, potentially, even to start would have been to start with the"}, {"source_name": "lecture8", "index": 976, "time": "01:07:49.990 --> 01:07:51.710", "speaker": "Alexander Vasserman", "text": "query process."}, {"source_name": "lecture8", "index": 977, "time": "01:07:51.940 --> 01:07:58.569", "speaker": "Alexander Vasserman", "text": "of course done. Things would be even more abstract because we are kind of saying, okay, here are the"}, {"source_name": "lecture8", "index": 978, "time": "01:07:59.750 --> 01:08:00.790", "speaker": "Alexander Vasserman", "text": "things"}, {"source_name": "lecture8", "index": 979, "time": "01:08:01.290 --> 01:08:09.889", "speaker": "Alexander Vasserman", "text": "document, data store and index that we kind of don't even know what those are at all. And but we're going to use them."}, {"source_name": "lecture8", "index": 980, "time": "01:08:10.370 --> 01:08:11.379", "speaker": "Alexander Vasserman", "text": "That's"}, {"source_name": "lecture8", "index": 981, "time": "01:08:12.310 --> 01:08:14.880", "speaker": "Alexander Vasserman", "text": "also potentially a good way to to to start."}, {"source_name": "lecture8", "index": 982, "time": "01:08:15.110 --> 01:08:16.740", "speaker": "Alexander Vasserman", "text": "and maybe you know."}, {"source_name": "lecture8", "index": 983, "time": "01:08:16.810 --> 01:08:18.609", "speaker": "Alexander Vasserman", "text": "that might have been"}, {"source_name": "lecture8", "index": 984, "time": "01:08:18.729 --> 01:08:21.109", "speaker": "Alexander Vasserman", "text": "an order of operation that would make"}, {"source_name": "lecture8", "index": 985, "time": "01:08:21.160 --> 01:08:22.810", "speaker": "Alexander Vasserman", "text": "a little bit more sense"}, {"source_name": "lecture8", "index": 986, "time": "01:08:23.779 --> 01:08:26.969", "speaker": "Alexander Vasserman", "text": "to say exactly. But but I think once we get"}, {"source_name": "lecture8", "index": 987, "time": "01:08:26.990 --> 01:08:28.410", "speaker": "Alexander Vasserman", "text": "through both"}, {"source_name": "lecture8", "index": 988, "time": "01:08:28.850 --> 01:08:31.789", "speaker": "Alexander Vasserman", "text": "it should make a little bit more sense."}, {"source_name": "lecture8", "index": 989, "time": "01:08:33.680 --> 01:08:35.859", "speaker": "Alexander Vasserman", "text": "and if not, maybe we can"}, {"source_name": "lecture8", "index": 990, "time": "01:08:38.010 --> 01:08:40.579", "speaker": "Alexander Vasserman", "text": "have more questions and answers."}, {"source_name": "lecture8", "index": 991, "time": "01:08:41.300 --> 01:08:42.040", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture8", "index": 992, "time": "01:08:45.740 --> 01:08:46.670", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture8", "index": 993, "time": "01:08:48.050 --> 01:08:49.019", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture8", "index": 994, "time": "01:08:49.950 --> 01:08:50.960", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture8", "index": 995, "time": "01:08:51.430 --> 01:08:53.910", "speaker": "Alexander Vasserman", "text": "who did the main point is that"}, {"source_name": "lecture8", "index": 996, "time": "01:08:54.130 --> 01:08:55.950", "speaker": "Alexander Vasserman", "text": "kind of for the"}, {"source_name": "lecture8", "index": 997, "time": "01:08:56.200 --> 01:08:56.969", "speaker": "Alexander Vasserman", "text": "oh"}, {"source_name": "lecture8", "index": 998, "time": "01:08:58.000 --> 01:09:02.210", "speaker": "Alexander Vasserman", "text": "query process or sorry for a document for the indexing process."}, {"source_name": "lecture8", "index": 999, "time": "01:09:02.840 --> 01:09:05.379", "speaker": "Alexander Vasserman", "text": "We have this stages"}, {"source_name": "lecture8", "index": 1000, "time": "01:09:05.779 --> 01:09:07.470", "speaker": "Alexander Vasserman", "text": "that we want to"}, {"source_name": "lecture8", "index": 1001, "time": "01:09:07.660 --> 01:09:10.120", "speaker": "Alexander Vasserman", "text": "run one after another."}, {"source_name": "lecture8", "index": 1002, "time": "01:09:10.170 --> 01:09:12.440", "speaker": "Alexander Vasserman", "text": "and the kind of the"}, {"source_name": "lecture8", "index": 1003, "time": "01:09:12.640 --> 01:09:18.350", "speaker": "Alexander Vasserman", "text": "output of the first stage is the input to the next stage, and then"}, {"source_name": "lecture8", "index": 1004, "time": "01:09:18.439 --> 01:09:24.530", "speaker": "Alexander Vasserman", "text": "the output of that stage is put to final final stage, etc. So we have this kind of pipeline"}, {"source_name": "lecture8", "index": 1005, "time": "01:09:26.840 --> 01:09:28.280", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture8", "index": 1006, "time": "01:09:29.680 --> 01:09:35.529", "speaker": "Alexander Vasserman", "text": "basically kind of coming back to the question, why we need"}, {"source_name": "lecture8", "index": 1007, "time": "01:09:35.770 --> 01:09:37.740", "speaker": "Alexander Vasserman", "text": "these obstructions."}, {"source_name": "lecture8", "index": 1008, "time": "01:09:38.850 --> 01:09:40.979", "speaker": "Alexander Vasserman", "text": "What we want to do is essentially"}, {"source_name": "lecture8", "index": 1009, "time": "01:09:41.100 --> 01:09:41.910", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture8", "index": 1010, "time": "01:09:43.600 --> 01:09:44.630", "speaker": "Alexander Vasserman", "text": "each"}, {"source_name": "lecture8", "index": 1011, "time": "01:09:45.670 --> 01:09:47.839", "speaker": "Alexander Vasserman", "text": "step in the pipeline"}, {"source_name": "lecture8", "index": 1012, "time": "01:09:49.160 --> 01:09:54.220", "speaker": "Alexander Vasserman", "text": "to be well defined and be kind of as"}, {"source_name": "lecture8", "index": 1013, "time": "01:09:54.279 --> 01:09:56.089", "speaker": "Alexander Vasserman", "text": "Oh, there is some"}, {"source_name": "lecture8", "index": 1014, "time": "01:09:56.510 --> 01:09:58.049", "speaker": "Alexander Vasserman", "text": "abstraction that"}, {"source_name": "lecture8", "index": 1015, "time": "01:09:59.080 --> 01:10:02.680", "speaker": "Alexander Vasserman", "text": "is an input, and some obstruction is now put."}, {"source_name": "lecture8", "index": 1016, "time": "01:10:03.010 --> 01:10:06.540", "speaker": "Alexander Vasserman", "text": "and if we define those, then they can deal."}, {"source_name": "lecture8", "index": 1017, "time": "01:10:06.590 --> 01:10:08.110", "speaker": "Alexander Vasserman", "text": "V. Is the"}, {"source_name": "lecture8", "index": 1018, "time": "01:10:08.160 --> 01:10:17.150", "speaker": "Alexander Vasserman", "text": "implementation both of the components or or of those abstractions kind of separately from the rest of"}, {"source_name": "lecture8", "index": 1019, "time": "01:10:17.270 --> 01:10:18.400", "speaker": "Alexander Vasserman", "text": "the search engine."}, {"source_name": "lecture8", "index": 1020, "time": "01:10:19.260 --> 01:10:24.340", "speaker": "Alexander Vasserman", "text": "So basically, once we create this abstractions, Once we understand"}, {"source_name": "lecture8", "index": 1021, "time": "01:10:24.580 --> 01:10:26.509", "speaker": "Alexander Vasserman", "text": "how they all fit together."}, {"source_name": "lecture8", "index": 1022, "time": "01:10:27.130 --> 01:10:32.399", "speaker": "Alexander Vasserman", "text": "we'll be able to work on pieces individually without having to think about"}, {"source_name": "lecture8", "index": 1023, "time": "01:10:32.850 --> 01:10:34.839", "speaker": "Alexander Vasserman", "text": "what the whole picture is."}, {"source_name": "lecture8", "index": 1024, "time": "01:10:35.510 --> 01:10:38.179", "speaker": "Alexander Vasserman", "text": "That's where we're trying to get to."}, {"source_name": "lecture8", "index": 1025, "time": "01:10:42.700 --> 01:10:43.490", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 1026, "time": "01:10:45.070 --> 01:10:46.150", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture8", "index": 1027, "time": "01:10:47.560 --> 01:10:48.840", "speaker": "Alexander Vasserman", "text": "let me"}, {"source_name": "lecture8", "index": 1028, "time": "01:10:49.080 --> 01:10:50.020", "speaker": "Alexander Vasserman", "text": "kind of"}, {"source_name": "lecture8", "index": 1029, "time": "01:10:50.850 --> 01:10:51.610", "speaker": "Alexander Vasserman", "text": "all"}, {"source_name": "lecture8", "index": 1030, "time": "01:10:52.240 --> 01:10:55.410", "speaker": "Alexander Vasserman", "text": "finish this transform document collection."}, {"source_name": "lecture8", "index": 1031, "time": "01:11:01.070 --> 01:11:02.550", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture8", "index": 1032, "time": "01:11:04.640 --> 01:11:05.900", "speaker": "Alexander Vasserman", "text": "or at least"}, {"source_name": "lecture8", "index": 1033, "time": "01:11:06.300 --> 01:11:06.960", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 1034, "time": "01:11:07.320 --> 01:11:08.100", "speaker": "Alexander Vasserman", "text": "I know."}, {"source_name": "lecture8", "index": 1035, "time": "01:11:08.160 --> 01:11:10.580", "speaker": "Alexander Vasserman", "text": "Yeah, I think, for for this it's going to be"}, {"source_name": "lecture8", "index": 1036, "time": "01:11:10.630 --> 01:11:12.129", "speaker": "Alexander Vasserman", "text": "done. So"}, {"source_name": "lecture8", "index": 1037, "time": "01:11:13.840 --> 01:11:17.199", "speaker": "Alexander Vasserman", "text": "basically we want to be able to read and write"}, {"source_name": "lecture8", "index": 1038, "time": "01:11:17.520 --> 01:11:21.500", "speaker": "Alexander Vasserman", "text": "output of each stage so that we can kind of preserve it."}, {"source_name": "lecture8", "index": 1039, "time": "01:11:21.680 --> 01:11:22.949", "speaker": "Alexander Vasserman", "text": "It's not"}, {"source_name": "lecture8", "index": 1040, "time": "01:11:23.800 --> 01:11:27.729", "speaker": "Alexander Vasserman", "text": "completely necessary for our"}, {"source_name": "lecture8", "index": 1041, "time": "01:11:30.580 --> 01:11:32.290", "speaker": "Alexander Vasserman", "text": "kind of for our diagram."}, {"source_name": "lecture8", "index": 1042, "time": "01:11:32.650 --> 01:11:38.259", "speaker": "Alexander Vasserman", "text": "right for for for the process that we have outlined here right? So the"}, {"source_name": "lecture8", "index": 1043, "time": "01:11:38.350 --> 01:11:40.860", "speaker": "Alexander Vasserman", "text": "output of text transformation."}, {"source_name": "lecture8", "index": 1044, "time": "01:11:40.950 --> 01:11:45.199", "speaker": "Alexander Vasserman", "text": "We don't necessarily store it because you're not going to use it"}, {"source_name": "lecture8", "index": 1045, "time": "01:11:45.440 --> 01:11:46.290", "speaker": "Alexander Vasserman", "text": "in"}, {"source_name": "lecture8", "index": 1046, "time": "01:11:46.520 --> 01:11:47.400", "speaker": "Alexander Vasserman", "text": "on"}, {"source_name": "lecture8", "index": 1047, "time": "01:11:48.590 --> 01:11:50.759", "speaker": "Alexander Vasserman", "text": "in the query process."}, {"source_name": "lecture8", "index": 1048, "time": "01:11:51.160 --> 01:11:52.889", "speaker": "Alexander Vasserman", "text": "but it's a good"}, {"source_name": "lecture8", "index": 1049, "time": "01:11:52.930 --> 01:11:56.869", "speaker": "Alexander Vasserman", "text": "practice, because we've done some amount of work."}, {"source_name": "lecture8", "index": 1050, "time": "01:11:57.140 --> 01:11:58.440", "speaker": "Alexander Vasserman", "text": "and if something."}, {"source_name": "lecture8", "index": 1051, "time": "01:11:58.660 --> 01:12:01.619", "speaker": "Alexander Vasserman", "text": "you know goes wrong with the program"}, {"source_name": "lecture8", "index": 1052, "time": "01:12:01.700 --> 01:12:02.650", "speaker": "Alexander Vasserman", "text": "it just."}, {"source_name": "lecture8", "index": 1053, "time": "01:12:02.930 --> 01:12:09.589", "speaker": "Alexander Vasserman", "text": "or you know, usually it will be running on some server that server might die for whatever reason"}, {"source_name": "lecture8", "index": 1054, "time": "01:12:10.030 --> 01:12:18.829", "speaker": "Alexander Vasserman", "text": "it's always good to have intermediate outputs preserved, so that you don't have to start your work from from the very beginning. You have the intermediate outputs."}, {"source_name": "lecture8", "index": 1055, "time": "01:12:19.140 --> 01:12:20.790", "speaker": "Alexander Vasserman", "text": "Also."}, {"source_name": "lecture8", "index": 1056, "time": "01:12:21.770 --> 01:12:24.399", "speaker": "Alexander Vasserman", "text": "you know, when we are."}, {"source_name": "lecture8", "index": 1057, "time": "01:12:24.820 --> 01:12:26.170", "speaker": "Alexander Vasserman", "text": "It's it's awesome."}, {"source_name": "lecture8", "index": 1058, "time": "01:12:26.350 --> 01:12:37.750", "speaker": "Alexander Vasserman", "text": "Easier to have those intermediate outputs for kind of debugging to see what one wrong right? So if somehow index contains something"}, {"source_name": "lecture8", "index": 1059, "time": "01:12:37.850 --> 01:12:39.340", "speaker": "Alexander Vasserman", "text": "that you didn't expect."}, {"source_name": "lecture8", "index": 1060, "time": "01:12:40.070 --> 01:12:42.589", "speaker": "Alexander Vasserman", "text": "it might be helpful to look at"}, {"source_name": "lecture8", "index": 1061, "time": "01:12:43.630 --> 01:12:45.040", "speaker": "Alexander Vasserman", "text": "what the document"}, {"source_name": "lecture8", "index": 1062, "time": "01:12:45.220 --> 01:12:46.040", "speaker": "Alexander Vasserman", "text": "see"}, {"source_name": "lecture8", "index": 1063, "time": "01:12:46.390 --> 01:12:50.499", "speaker": "Alexander Vasserman", "text": "all look like at the end of the text transformation stage?"}, {"source_name": "lecture8", "index": 1064, "time": "01:12:51.870 --> 01:12:52.830", "speaker": "Alexander Vasserman", "text": "Does"}, {"source_name": "lecture8", "index": 1065, "time": "01:12:53.540 --> 01:12:55.099", "speaker": "Alexander Vasserman", "text": "Does it make sense"}, {"source_name": "lecture8", "index": 1066, "time": "01:12:55.320 --> 01:13:00.170", "speaker": "Alexander Vasserman", "text": "at that stage? Is the problem inside of index creation staff?"}, {"source_name": "lecture8", "index": 1067, "time": "01:13:00.250 --> 01:13:07.020", "speaker": "Alexander Vasserman", "text": "Or was there an issue? That kind of this, the input data for the next."}, {"source_name": "lecture8", "index": 1068, "time": "01:13:07.560 --> 01:13:08.789", "speaker": "Alexander Vasserman", "text": "So kind of"}, {"source_name": "lecture8", "index": 1069, "time": "01:13:09.600 --> 01:13:13.490", "speaker": "Alexander Vasserman", "text": "another reason for doing that is debugging."}, {"source_name": "lecture8", "index": 1070, "time": "01:13:16.190 --> 01:13:17.110", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture8", "index": 1071, "time": "01:13:18.420 --> 01:13:19.590", "speaker": "Alexander Vasserman", "text": "oh, so yeah."}, {"source_name": "lecture8", "index": 1072, "time": "01:13:19.880 --> 01:13:24.349", "speaker": "Alexander Vasserman", "text": "different, definitely, Many different reasons to create this abstractions."}, {"source_name": "lecture8", "index": 1073, "time": "01:13:24.560 --> 01:13:25.519", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 1074, "time": "01:13:26.620 --> 01:13:28.490", "speaker": "Alexander Vasserman", "text": "one is for kind of"}, {"source_name": "lecture8", "index": 1075, "time": "01:13:28.590 --> 01:13:31.480", "speaker": "Alexander Vasserman", "text": "separating different pieces of"}, {"source_name": "lecture8", "index": 1076, "time": "01:13:31.630 --> 01:13:32.889", "speaker": "Alexander Vasserman", "text": "the search engine."}, {"source_name": "lecture8", "index": 1077, "time": "01:13:33.020 --> 01:13:41.100", "speaker": "Alexander Vasserman", "text": "Another is for like defining this ways of like, how do I store this? How do I? You know"}, {"source_name": "lecture8", "index": 1078, "time": "01:13:41.830 --> 01:13:44.750", "speaker": "Alexander Vasserman", "text": "all this kind of concerns that"}, {"source_name": "lecture8", "index": 1079, "time": "01:13:44.780 --> 01:13:45.719", "speaker": "Alexander Vasserman", "text": "are"}, {"source_name": "lecture8", "index": 1080, "time": "01:13:45.940 --> 01:13:47.569", "speaker": "Alexander Vasserman", "text": "You don't want to"}, {"source_name": "lecture8", "index": 1081, "time": "01:13:47.690 --> 01:13:48.750", "speaker": "Alexander Vasserman", "text": "for lute"}, {"source_name": "lecture8", "index": 1082, "time": "01:13:48.820 --> 01:13:50.840", "speaker": "Alexander Vasserman", "text": "our main implementation"}, {"source_name": "lecture8", "index": 1083, "time": "01:13:50.980 --> 01:13:53.039", "speaker": "Alexander Vasserman", "text": "kind of this very"}, {"source_name": "lecture8", "index": 1084, "time": "01:13:53.160 --> 01:13:56.999", "speaker": "Alexander Vasserman", "text": "simple function that says exactly what we're doing."}, {"source_name": "lecture8", "index": 1085, "time": "01:13:57.370 --> 01:13:58.570", "speaker": "Alexander Vasserman", "text": "We don't want"}, {"source_name": "lecture8", "index": 1086, "time": "01:13:58.680 --> 01:14:04.650", "speaker": "Alexander Vasserman", "text": "to have the all the details of how we'll be right. That stuff."}, {"source_name": "lecture8", "index": 1087, "time": "01:14:04.860 --> 01:14:09.670", "speaker": "Alexander Vasserman", "text": "All all of those details. Don't belong here. Otherwise this is going to be really hard to read"}, {"source_name": "lecture8", "index": 1088, "time": "01:14:10.020 --> 01:14:17.880", "speaker": "Alexander Vasserman", "text": "right right now. We have something that you know just a few steps that tells us at the higher level exactly what's going on."}, {"source_name": "lecture8", "index": 1089, "time": "01:14:18.280 --> 01:14:21.889", "speaker": "Alexander Vasserman", "text": "and all the details go into this kind of"}, {"source_name": "lecture8", "index": 1090, "time": "01:14:22.260 --> 01:14:24.820", "speaker": "Alexander Vasserman", "text": "classes and abstractions that"}, {"source_name": "lecture8", "index": 1091, "time": "01:14:25.010 --> 01:14:28.610", "speaker": "Alexander Vasserman", "text": "kind of hidden away, and can be changed at"}, {"source_name": "lecture8", "index": 1092, "time": "01:14:28.840 --> 01:14:30.109", "speaker": "Alexander Vasserman", "text": "different times."}, {"source_name": "lecture8", "index": 1093, "time": "01:14:30.440 --> 01:14:31.179", "speaker": "Alexander Vasserman", "text": "I mean."}, {"source_name": "lecture8", "index": 1094, "time": "01:14:31.960 --> 01:14:32.849", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture8", "index": 1095, "time": "01:14:36.890 --> 01:14:40.529", "speaker": "Alexander Vasserman", "text": "so yeah, so how W. What do you want?"}, {"source_name": "lecture8", "index": 1096, "time": "01:14:40.560 --> 01:14:41.570", "speaker": "Alexander Vasserman", "text": "All 4"}, {"source_name": "lecture8", "index": 1097, "time": "01:14:41.790 --> 01:14:43.260", "speaker": "Alexander Vasserman", "text": "leading stuff?"}, {"source_name": "lecture8", "index": 1098, "time": "01:14:44.900 --> 01:14:45.809", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture8", "index": 1099, "time": "01:14:45.890 --> 01:14:47.130", "speaker": "Alexander Vasserman", "text": "actually."}, {"source_name": "lecture8", "index": 1100, "time": "01:14:48.970 --> 01:14:50.590", "speaker": "Alexander Vasserman", "text": "oh, before"}, {"source_name": "lecture8", "index": 1101, "time": "01:14:50.810 --> 01:14:52.710", "speaker": "Alexander Vasserman", "text": "we start writing it."}, {"source_name": "lecture8", "index": 1102, "time": "01:14:52.730 --> 01:14:54.630", "speaker": "Alexander Vasserman", "text": "The read function is kind of"}, {"source_name": "lecture8", "index": 1103, "time": "01:14:54.800 --> 01:14:55.780", "speaker": "Alexander Vasserman", "text": "special."}, {"source_name": "lecture8", "index": 1104, "time": "01:14:56.150 --> 01:14:57.450", "speaker": "Alexander Vasserman", "text": "because"}, {"source_name": "lecture8", "index": 1105, "time": "01:14:58.030 --> 01:15:00.700", "speaker": "Alexander Vasserman", "text": "we don't really have an object"}, {"source_name": "lecture8", "index": 1106, "time": "01:15:02.150 --> 01:15:04.120", "speaker": "Alexander Vasserman", "text": "at the time when you want to read it."}, {"source_name": "lecture8", "index": 1107, "time": "01:15:04.780 --> 01:15:07.579", "speaker": "Alexander Vasserman", "text": "What we want is to create that object."}, {"source_name": "lecture8", "index": 1108, "time": "01:15:07.730 --> 01:15:08.429", "speaker": "Alexander Vasserman", "text": "right?"}, {"source_name": "lecture8", "index": 1109, "time": "01:15:08.580 --> 01:15:09.719", "speaker": "Alexander Vasserman", "text": "So the"}, {"source_name": "lecture8", "index": 1110, "time": "01:15:09.940 --> 01:15:12.919", "speaker": "Alexander Vasserman", "text": "essentially the output of it."}, {"source_name": "lecture8", "index": 1111, "time": "01:15:13.740 --> 01:15:17.950", "speaker": "Alexander Vasserman", "text": "What we want to be is to be transferred document, collection."}, {"source_name": "lecture8", "index": 1112, "time": "01:15:18.280 --> 01:15:21.170", "speaker": "Alexander Vasserman", "text": "right? So you want to say, read."}, {"source_name": "lecture8", "index": 1113, "time": "01:15:21.450 --> 01:15:23.819", "speaker": "Alexander Vasserman", "text": "and we want to reconstruct"}, {"source_name": "lecture8", "index": 1114, "time": "01:15:24.380 --> 01:15:27.670", "speaker": "Alexander Vasserman", "text": "the object that you've written out before"}, {"source_name": "lecture8", "index": 1115, "time": "01:15:28.570 --> 01:15:33.179", "speaker": "Alexander Vasserman", "text": "That's kind of the idea of this of the right and read"}, {"source_name": "lecture8", "index": 1116, "time": "01:15:33.210 --> 01:15:35.150", "speaker": "Alexander Vasserman", "text": "components, right? So that"}, {"source_name": "lecture8", "index": 1117, "time": "01:15:35.220 --> 01:15:36.960", "speaker": "Alexander Vasserman", "text": "that means if you're"}, {"source_name": "lecture8", "index": 1118, "time": "01:15:37.040 --> 01:15:39.580", "speaker": "Alexander Vasserman", "text": "the output of this stage."}, {"source_name": "lecture8", "index": 1119, "time": "01:15:41.280 --> 01:15:42.860", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture8", "index": 1120, "time": "01:15:42.890 --> 01:15:43.960", "speaker": "Alexander Vasserman", "text": "also"}, {"source_name": "lecture8", "index": 1121, "time": "01:15:44.970 --> 01:15:50.840", "speaker": "Alexander Vasserman", "text": "basically it's a special method that will not have a self."}, {"source_name": "lecture8", "index": 1122, "time": "01:15:51.110 --> 01:15:52.940", "speaker": "Alexander Vasserman", "text": "It's going to be"}, {"source_name": "lecture8", "index": 1123, "time": "01:15:52.960 --> 01:15:53.820", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture8", "index": 1124, "time": "01:15:53.970 --> 01:15:55.530", "speaker": "Alexander Vasserman", "text": "static method."}, {"source_name": "lecture8", "index": 1125, "time": "01:15:55.820 --> 01:15:57.920", "speaker": "Alexander Vasserman", "text": "which means that"}, {"source_name": "lecture8", "index": 1126, "time": "01:15:58.120 --> 01:16:08.220", "speaker": "Alexander Vasserman", "text": "it's not defined on in instance, over class. It's not defined. It's not for a specific object. It's just defined on the classes at home."}, {"source_name": "lecture8", "index": 1127, "time": "01:16:08.940 --> 01:16:12.829", "speaker": "Alexander Vasserman", "text": "right? So what you're going to be able to do is to"}, {"source_name": "lecture8", "index": 1128, "time": "01:16:12.870 --> 01:16:15.520", "speaker": "Alexander Vasserman", "text": "say something like."}, {"source_name": "lecture8", "index": 1129, "time": "01:16:15.550 --> 01:16:16.290", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 1130, "time": "01:16:17.280 --> 01:16:20.019", "speaker": "Alexander Vasserman", "text": "transfer and document collection. Dot lead."}, {"source_name": "lecture8", "index": 1131, "time": "01:16:21.530 --> 01:16:22.370", "speaker": "Alexander Vasserman", "text": "All right."}, {"source_name": "lecture8", "index": 1132, "time": "01:16:22.590 --> 01:16:26.079", "speaker": "Alexander Vasserman", "text": "So we just supplying the name of the class"}, {"source_name": "lecture8", "index": 1133, "time": "01:16:26.480 --> 01:16:28.199", "speaker": "Alexander Vasserman", "text": "rather than the option."}, {"source_name": "lecture8", "index": 1134, "time": "01:16:28.730 --> 01:16:30.359", "speaker": "Alexander Vasserman", "text": "I mean."}, {"source_name": "lecture8", "index": 1135, "time": "01:16:30.380 --> 01:16:34.579", "speaker": "Alexander Vasserman", "text": "for other things like a document. For example."}, {"source_name": "lecture8", "index": 1136, "time": "01:16:34.840 --> 01:16:37.819", "speaker": "Alexander Vasserman", "text": "we would need an object of that type."}, {"source_name": "lecture8", "index": 1137, "time": "01:16:37.850 --> 01:16:39.860", "speaker": "Alexander Vasserman", "text": "so they would say."}, {"source_name": "lecture8", "index": 1138, "time": "01:16:40.660 --> 01:16:42.849", "speaker": "Alexander Vasserman", "text": "create an object, and then"}, {"source_name": "lecture8", "index": 1139, "time": "01:16:43.270 --> 01:16:45.200", "speaker": "Alexander Vasserman", "text": "you can add document to it."}, {"source_name": "lecture8", "index": 1140, "time": "01:16:46.130 --> 01:16:48.349", "speaker": "Alexander Vasserman", "text": "But for digging in."}, {"source_name": "lecture8", "index": 1141, "time": "01:16:48.600 --> 01:16:50.319", "speaker": "Alexander Vasserman", "text": "we don't have an object yet."}, {"source_name": "lecture8", "index": 1142, "time": "01:16:50.520 --> 01:16:52.309", "speaker": "Alexander Vasserman", "text": "So really."}, {"source_name": "lecture8", "index": 1143, "time": "01:16:52.570 --> 01:16:57.569", "speaker": "Alexander Vasserman", "text": "that's kind of how we're going to use it. We're going to just say, this is the"}, {"source_name": "lecture8", "index": 1144, "time": "01:17:01.170 --> 01:17:03.800", "speaker": "Alexander Vasserman", "text": "basically this is a"}, {"source_name": "lecture8", "index": 1145, "time": "01:17:04.530 --> 01:17:05.219", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 1146, "time": "01:17:07.670 --> 01:17:08.420", "speaker": "Alexander Vasserman", "text": "what"}, {"source_name": "lecture8", "index": 1147, "time": "01:17:08.480 --> 01:17:10.059", "speaker": "Alexander Vasserman", "text": "another way to"}, {"source_name": "lecture8", "index": 1148, "time": "01:17:10.230 --> 01:17:10.980", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 1149, "time": "01:17:11.280 --> 01:17:16.139", "speaker": "Alexander Vasserman", "text": "do this would have been to say, You just define a function"}, {"source_name": "lecture8", "index": 1150, "time": "01:17:16.270 --> 01:17:17.990", "speaker": "Alexander Vasserman", "text": "outside of this class."}, {"source_name": "lecture8", "index": 1151, "time": "01:17:18.600 --> 01:17:19.930", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture8", "index": 1152, "time": "01:17:20.540 --> 01:17:21.799", "speaker": "Alexander Vasserman", "text": "you could say."}, {"source_name": "lecture8", "index": 1153, "time": "01:17:22.100 --> 01:17:24.679", "speaker": "Alexander Vasserman", "text": "Let's say you have a function, read."}, {"source_name": "lecture8", "index": 1154, "time": "01:17:24.740 --> 01:17:25.570", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 1155, "time": "01:17:27.340 --> 01:17:28.420", "speaker": "Alexander Vasserman", "text": "collection"}, {"source_name": "lecture8", "index": 1156, "time": "01:17:28.630 --> 01:17:29.570", "speaker": "Alexander Vasserman", "text": "that would."}, {"source_name": "lecture8", "index": 1157, "time": "01:17:31.290 --> 01:17:32.780", "speaker": "Alexander Vasserman", "text": "you know. Take it."}, {"source_name": "lecture8", "index": 1158, "time": "01:17:36.470 --> 01:17:38.450", "speaker": "Alexander Vasserman", "text": "Maybe that's what I should have"}, {"source_name": "lecture8", "index": 1159, "time": "01:17:38.500 --> 01:17:42.109", "speaker": "Alexander Vasserman", "text": "started with, actually, so that it's a little."}, {"source_name": "lecture8", "index": 1160, "time": "01:17:43.510 --> 01:17:44.770", "speaker": "Alexander Vasserman", "text": "So let me just"}, {"source_name": "lecture8", "index": 1161, "time": "01:17:45.080 --> 01:17:45.889", "speaker": "Alexander Vasserman", "text": "see"}, {"source_name": "lecture8", "index": 1162, "time": "01:17:46.930 --> 01:17:48.740", "speaker": "Alexander Vasserman", "text": "you implement this later."}, {"source_name": "lecture8", "index": 1163, "time": "01:17:51.040 --> 01:17:53.680", "speaker": "Alexander Vasserman", "text": "So one way to to say it is like, let's"}, {"source_name": "lecture8", "index": 1164, "time": "01:17:54.360 --> 01:17:56.250", "speaker": "Alexander Vasserman", "text": "define a function that"}, {"source_name": "lecture8", "index": 1165, "time": "01:17:56.340 --> 01:17:57.190", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 1166, "time": "01:17:58.780 --> 01:18:00.019", "speaker": "Alexander Vasserman", "text": "takes a"}, {"source_name": "lecture8", "index": 1167, "time": "01:18:00.190 --> 01:18:01.480", "speaker": "Alexander Vasserman", "text": "a file path"}, {"source_name": "lecture8", "index": 1168, "time": "01:18:01.620 --> 01:18:03.820", "speaker": "Alexander Vasserman", "text": "and outputs a"}, {"source_name": "lecture8", "index": 1169, "time": "01:18:03.850 --> 01:18:06.029", "speaker": "Alexander Vasserman", "text": "transform document collection."}, {"source_name": "lecture8", "index": 1170, "time": "01:18:06.840 --> 01:18:08.080", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture8", "index": 1171, "time": "01:18:09.670 --> 01:18:10.780", "speaker": "Alexander Vasserman", "text": "that's"}, {"source_name": "lecture8", "index": 1172, "time": "01:18:12.520 --> 01:18:13.690", "speaker": "Alexander Vasserman", "text": "that's actually"}, {"source_name": "lecture8", "index": 1173, "time": "01:18:13.820 --> 01:18:15.969", "speaker": "Alexander Vasserman", "text": "do that first. So let's"}, {"source_name": "lecture8", "index": 1174, "time": "01:18:16.780 --> 01:18:17.590", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture8", "index": 1175, "time": "01:18:18.590 --> 01:18:20.620", "speaker": "Alexander Vasserman", "text": "forget for a second about"}, {"source_name": "lecture8", "index": 1176, "time": "01:18:21.020 --> 01:18:24.090", "speaker": "Alexander Vasserman", "text": "you know, kind of fairly static method."}, {"source_name": "lecture8", "index": 1177, "time": "01:18:25.440 --> 01:18:26.790", "speaker": "Alexander Vasserman", "text": "And"}, {"source_name": "lecture8", "index": 1178, "time": "01:18:27.890 --> 01:18:30.409", "speaker": "Alexander Vasserman", "text": "just implement this function"}, {"source_name": "lecture8", "index": 1179, "time": "01:18:30.810 --> 01:18:31.420", "speaker": "Alexander Vasserman", "text": "alright."}, {"source_name": "lecture8", "index": 1180, "time": "01:18:34.140 --> 01:18:36.920", "speaker": "Alexander Vasserman", "text": "basically what we want to do is"}, {"source_name": "lecture8", "index": 1181, "time": "01:18:41.510 --> 01:18:44.690", "speaker": "Alexander Vasserman", "text": "invert the right function here."}, {"source_name": "lecture8", "index": 1182, "time": "01:18:45.170 --> 01:18:45.990", "speaker": "Alexander Vasserman", "text": "right?"}, {"source_name": "lecture8", "index": 1183, "time": "01:18:46.430 --> 01:18:52.160", "speaker": "Alexander Vasserman", "text": "So what we want to say is, well, we are creating"}, {"source_name": "lecture8", "index": 1184, "time": "01:18:52.820 --> 01:18:53.790", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture8", "index": 1185, "time": "01:18:54.920 --> 01:18:56.849", "speaker": "Alexander Vasserman", "text": "transform from the collection"}, {"source_name": "lecture8", "index": 1186, "time": "01:18:58.870 --> 01:19:01.660", "speaker": "Alexander Vasserman", "text": "we are going to"}, {"source_name": "lecture8", "index": 1187, "time": "01:19:01.730 --> 01:19:05.499", "speaker": "Alexander Vasserman", "text": "created from a Json file. So"}, {"source_name": "lecture8", "index": 1188, "time": "01:19:05.680 --> 01:19:07.480", "speaker": "Alexander Vasserman", "text": "you need to go to."}, {"source_name": "lecture8", "index": 1189, "time": "01:19:07.500 --> 01:19:10.529", "speaker": "Alexander Vasserman", "text": "We're going to need to open the"}, {"source_name": "lecture8", "index": 1190, "time": "01:19:12.310 --> 01:19:13.580", "speaker": "Alexander Vasserman", "text": "defiled it"}, {"source_name": "lecture8", "index": 1191, "time": "01:19:13.860 --> 01:19:15.559", "speaker": "Alexander Vasserman", "text": "you were given."}, {"source_name": "lecture8", "index": 1192, "time": "01:19:18.520 --> 01:19:19.540", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 1193, "time": "01:19:22.610 --> 01:19:24.299", "speaker": "Alexander Vasserman", "text": "you'll have"}, {"source_name": "lecture8", "index": 1194, "time": "01:19:26.100 --> 01:19:27.000", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 1195, "time": "01:19:29.630 --> 01:19:30.330", "speaker": "Alexander Vasserman", "text": "well."}, {"source_name": "lecture8", "index": 1196, "time": "01:19:33.770 --> 01:19:35.380", "speaker": "Alexander Vasserman", "text": "so let's say"}, {"source_name": "lecture8", "index": 1197, "time": "01:19:38.770 --> 01:19:39.530", "speaker": "Alexander Vasserman", "text": "some."}, {"source_name": "lecture8", "index": 1198, "time": "01:19:42.480 --> 01:19:44.490", "speaker": "Alexander Vasserman", "text": "So at the top level"}, {"source_name": "lecture8", "index": 1199, "time": "01:19:44.610 --> 01:19:47.359", "speaker": "Alexander Vasserman", "text": "of the data that you were storing."}, {"source_name": "lecture8", "index": 1200, "time": "01:19:47.440 --> 01:19:49.089", "speaker": "Alexander Vasserman", "text": "We have the dictionary"}, {"source_name": "lecture8", "index": 1201, "time": "01:19:49.930 --> 01:19:51.059", "speaker": "Alexander Vasserman", "text": "so."}, {"source_name": "lecture8", "index": 1202, "time": "01:19:52.640 --> 01:19:54.469", "speaker": "Alexander Vasserman", "text": "or brand new"}, {"source_name": "lecture8", "index": 1203, "time": "01:19:55.040 --> 01:19:57.070", "speaker": "Alexander Vasserman", "text": "or reading it"}, {"source_name": "lecture8", "index": 1204, "time": "01:19:59.320 --> 01:20:00.250", "speaker": "Alexander Vasserman", "text": "through"}, {"source_name": "lecture8", "index": 1205, "time": "01:20:01.220 --> 01:20:03.210", "speaker": "Alexander Vasserman", "text": "Jason dot load."}, {"source_name": "lecture8", "index": 1206, "time": "01:20:04.210 --> 01:20:05.110", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 1207, "time": "01:20:05.660 --> 01:20:08.819", "speaker": "Alexander Vasserman", "text": "what we get going to get back easy."}, {"source_name": "lecture8", "index": 1208, "time": "01:20:09.150 --> 01:20:10.170", "speaker": "Alexander Vasserman", "text": "The same"}, {"source_name": "lecture8", "index": 1209, "time": "01:20:10.280 --> 01:20:12.569", "speaker": "Alexander Vasserman", "text": "like dictionary in the same format"}, {"source_name": "lecture8", "index": 1210, "time": "01:20:13.060 --> 01:20:13.780", "speaker": "Alexander Vasserman", "text": "right"}, {"source_name": "lecture8", "index": 1211, "time": "01:20:15.320 --> 01:20:18.009", "speaker": "Alexander Vasserman", "text": "A, and they format that we have"}, {"source_name": "lecture8", "index": 1212, "time": "01:20:18.390 --> 01:20:20.150", "speaker": "Alexander Vasserman", "text": "is"}, {"source_name": "lecture8", "index": 1213, "time": "01:20:20.730 --> 01:20:22.780", "speaker": "Alexander Vasserman", "text": "Oh, that we have."}, {"source_name": "lecture8", "index": 1214, "time": "01:20:23.350 --> 01:20:24.529", "speaker": "Alexander Vasserman", "text": "You need to just"}, {"source_name": "lecture8", "index": 1215, "time": "01:20:24.900 --> 01:20:27.280", "speaker": "Alexander Vasserman", "text": "a single field in there"}, {"source_name": "lecture8", "index": 1216, "time": "01:20:27.430 --> 01:20:29.820", "speaker": "Alexander Vasserman", "text": "that is called"}, {"source_name": "lecture8", "index": 1217, "time": "01:20:30.040 --> 01:20:31.110", "speaker": "Alexander Vasserman", "text": "Docs."}, {"source_name": "lecture8", "index": 1218, "time": "01:20:34.400 --> 01:20:35.619", "speaker": "Alexander Vasserman", "text": "and that's"}, {"source_name": "lecture8", "index": 1219, "time": "01:20:35.640 --> 01:20:36.440", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture8", "index": 1220, "time": "01:20:36.760 --> 01:20:39.959", "speaker": "Alexander Vasserman", "text": "list of records, so we can say."}, {"source_name": "lecture8", "index": 1221, "time": "01:20:40.080 --> 01:20:41.040", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 1222, "time": "01:20:45.950 --> 01:20:46.740", "speaker": "Alexander Vasserman", "text": "dog"}, {"source_name": "lecture8", "index": 1223, "time": "01:20:47.200 --> 01:20:48.410", "speaker": "Alexander Vasserman", "text": "records!"}, {"source_name": "lecture8", "index": 1224, "time": "01:20:49.010 --> 01:20:49.840", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 1225, "time": "01:20:50.400 --> 01:20:51.250", "speaker": "Alexander Vasserman", "text": "is"}, {"source_name": "lecture8", "index": 1226, "time": "01:20:51.680 --> 01:20:52.620", "speaker": "Alexander Vasserman", "text": "this?"}, {"source_name": "lecture8", "index": 1227, "time": "01:20:52.850 --> 01:20:53.950", "speaker": "Alexander Vasserman", "text": "And then"}, {"source_name": "lecture8", "index": 1228, "time": "01:20:58.050 --> 01:21:02.080", "speaker": "Alexander Vasserman", "text": "that doesn't matter, you know. But so then"}, {"source_name": "lecture8", "index": 1229, "time": "01:21:03.500 --> 01:21:04.889", "speaker": "Alexander Vasserman", "text": "it'll say, for"}, {"source_name": "lecture8", "index": 1230, "time": "01:21:18.420 --> 01:21:20.990", "speaker": "Alexander Vasserman", "text": "we want to. Well."}, {"source_name": "lecture8", "index": 1231, "time": "01:21:21.330 --> 01:21:22.139", "speaker": "Alexander Vasserman", "text": "let's"}, {"source_name": "lecture8", "index": 1232, "time": "01:21:24.250 --> 01:21:29.870", "speaker": "Alexander Vasserman", "text": "you want to convert that record to transfer, to to transform Dot right so. Or"}, {"source_name": "lecture8", "index": 1233, "time": "01:21:30.070 --> 01:21:32.670", "speaker": "Alexander Vasserman", "text": "if you're going to any transform dock"}, {"source_name": "lecture8", "index": 1234, "time": "01:21:32.820 --> 01:21:34.469", "speaker": "Alexander Vasserman", "text": "is the"}, {"source_name": "lecture8", "index": 1235, "time": "01:21:34.680 --> 01:21:35.519", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 1236, "time": "01:21:36.580 --> 01:21:38.020", "speaker": "Alexander Vasserman", "text": "Doc, Id"}, {"source_name": "lecture8", "index": 1237, "time": "01:21:38.270 --> 01:21:39.559", "speaker": "Alexander Vasserman", "text": "He's a"}, {"source_name": "lecture8", "index": 1238, "time": "01:21:39.940 --> 01:21:41.219", "speaker": "Alexander Vasserman", "text": "record."}, {"source_name": "lecture8", "index": 1239, "time": "01:21:42.270 --> 01:21:43.230", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 1240, "time": "01:21:47.780 --> 01:21:50.280", "speaker": "Alexander Vasserman", "text": "of. And"}, {"source_name": "lecture8", "index": 1241, "time": "01:21:50.910 --> 01:21:53.660", "speaker": "Alexander Vasserman", "text": "Dawkins is."}, {"source_name": "lecture8", "index": 1242, "time": "01:22:02.870 --> 01:22:04.120", "speaker": "Alexander Vasserman", "text": "and then the"}, {"source_name": "lecture8", "index": 1243, "time": "01:22:05.670 --> 01:22:06.979", "speaker": "Alexander Vasserman", "text": "the dog."}, {"source_name": "lecture8", "index": 1244, "time": "01:22:07.740 --> 01:22:09.880", "speaker": "Alexander Vasserman", "text": "and we are done."}, {"source_name": "lecture8", "index": 1245, "time": "01:22:15.530 --> 01:22:16.349", "speaker": "Alexander Vasserman", "text": "Okay."}, {"source_name": "lecture8", "index": 1246, "time": "01:22:17.480 --> 01:22:19.110", "speaker": "Alexander Vasserman", "text": "So does this"}, {"source_name": "lecture8", "index": 1247, "time": "01:22:19.730 --> 01:22:23.029", "speaker": "Alexander Vasserman", "text": "make sense? Right? So basically we were."}, {"source_name": "lecture8", "index": 1248, "time": "01:22:23.680 --> 01:22:24.450", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 1249, "time": "01:22:25.500 --> 01:22:35.819", "speaker": "Alexander Vasserman", "text": "we are carefully and parking the data the same way that we kind of the inversing the operations that we done here"}, {"source_name": "lecture8", "index": 1250, "time": "01:22:38.160 --> 01:22:45.720", "speaker": "Alexander Vasserman", "text": "one confusing thing it might be what? What? Exactly as the does. And then really, it just creates a dictionary"}, {"source_name": "lecture8", "index": 1251, "time": "01:22:45.840 --> 01:22:48.229", "speaker": "Alexander Vasserman", "text": "where our keys are, then"}, {"source_name": "lecture8", "index": 1252, "time": "01:22:49.560 --> 01:22:54.609", "speaker": "Alexander Vasserman", "text": "field names and the values are Well, the the values of those fields"}, {"source_name": "lecture8", "index": 1253, "time": "01:22:55.010 --> 01:22:55.990", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture8", "index": 1254, "time": "01:22:56.160 --> 01:22:58.019", "speaker": "Alexander Vasserman", "text": "kind of here here here"}, {"source_name": "lecture8", "index": 1255, "time": "01:22:58.680 --> 01:23:00.960", "speaker": "Alexander Vasserman", "text": "inverging it explicitly."}, {"source_name": "lecture8", "index": 1256, "time": "01:23:05.860 --> 01:23:06.820", "speaker": "Alexander Vasserman", "text": "The"}, {"source_name": "lecture8", "index": 1257, "time": "01:23:07.520 --> 01:23:08.620", "speaker": "Alexander Vasserman", "text": "Oh, yeah."}, {"source_name": "lecture8", "index": 1258, "time": "01:23:09.350 --> 01:23:09.960", "speaker": "Alexander Vasserman", "text": "yes."}, {"source_name": "lecture8", "index": 1259, "time": "01:23:10.300 --> 01:23:11.500", "speaker": "Alexander Vasserman", "text": "Alex."}, {"source_name": "lecture8", "index": 1260, "time": "01:23:12.440 --> 01:23:15.060", "speaker": "Alex Wojtowicz", "text": "So in this function"}, {"source_name": "lecture8", "index": 1261, "time": "01:23:15.170 --> 01:23:17.469", "speaker": "Alex Wojtowicz", "text": "what we're doing is, we're taking up"}, {"source_name": "lecture8", "index": 1262, "time": "01:23:17.820 --> 01:23:21.230", "speaker": "Alex Wojtowicz", "text": "a file name and path of a document collection."}, {"source_name": "lecture8", "index": 1263, "time": "01:23:21.500 --> 01:23:22.519", "speaker": "Alex Wojtowicz", "text": "and for"}, {"source_name": "lecture8", "index": 1264, "time": "01:23:22.600 --> 01:23:26.200", "speaker": "Alex Wojtowicz", "text": "each one of those elections we go in, and then we"}, {"source_name": "lecture8", "index": 1265, "time": "01:23:26.650 --> 01:23:28.239", "speaker": "Alex Wojtowicz", "text": "write it out as"}, {"source_name": "lecture8", "index": 1266, "time": "01:23:28.610 --> 01:23:32.599", "speaker": "Alex Wojtowicz", "text": "can just a transform document itself instead of the selection"}, {"source_name": "lecture8", "index": 1267, "time": "01:23:32.700 --> 01:23:36.110", "speaker": "Alex Wojtowicz", "text": "and putting in dock Id. And then the tokens of it."}, {"source_name": "lecture8", "index": 1268, "time": "01:23:38.240 --> 01:23:39.300", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture8", "index": 1269, "time": "01:23:41.900 --> 01:23:45.459", "speaker": "Alexander Vasserman", "text": "so basically in this far in the read collection."}, {"source_name": "lecture8", "index": 1270, "time": "01:23:45.820 --> 01:23:47.809", "speaker": "Alexander Vasserman", "text": "or maybe I should have"}, {"source_name": "lecture8", "index": 1271, "time": "01:23:48.450 --> 01:23:49.480", "speaker": "Alexander Vasserman", "text": "hold it."}, {"source_name": "lecture8", "index": 1272, "time": "01:23:49.620 --> 01:23:50.630", "speaker": "Alexander Vasserman", "text": "the"}, {"source_name": "lecture8", "index": 1273, "time": "01:23:50.860 --> 01:23:52.960", "speaker": "Alexander Vasserman", "text": "transform document collection"}, {"source_name": "lecture8", "index": 1274, "time": "01:23:56.390 --> 01:23:57.650", "speaker": "Alexander Vasserman", "text": "we are"}, {"source_name": "lecture8", "index": 1275, "time": "01:23:57.910 --> 01:24:00.769", "speaker": "Alexander Vasserman", "text": "inverting whatever happened in right."}, {"source_name": "lecture8", "index": 1276, "time": "01:24:01.380 --> 01:24:03.429", "speaker": "Alexander Vasserman", "text": "So basically"}, {"source_name": "lecture8", "index": 1277, "time": "01:24:05.230 --> 01:24:08.520", "speaker": "Alexander Vasserman", "text": "in right, we created the single Json file"}, {"source_name": "lecture8", "index": 1278, "time": "01:24:08.930 --> 01:24:09.830", "speaker": "Alexander Vasserman", "text": "that"}, {"source_name": "lecture8", "index": 1279, "time": "01:24:10.170 --> 01:24:15.339", "speaker": "Alexander Vasserman", "text": "represents all the data in the transformed document collection"}, {"source_name": "lecture8", "index": 1280, "time": "01:24:16.240 --> 01:24:18.559", "speaker": "Alexander Vasserman", "text": "and in he."}, {"source_name": "lecture8", "index": 1281, "time": "01:24:18.730 --> 01:24:21.330", "speaker": "Alexander Vasserman", "text": "What we want to do is"}, {"source_name": "lecture8", "index": 1282, "time": "01:24:21.810 --> 01:24:24.460", "speaker": "Alexander Vasserman", "text": "to get that object back."}, {"source_name": "lecture8", "index": 1283, "time": "01:24:24.620 --> 01:24:25.490", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture8", "index": 1284, "time": "01:24:25.740 --> 01:24:30.119", "speaker": "Alexander Vasserman", "text": "take the file that was created here and store the this path."}, {"source_name": "lecture8", "index": 1285, "time": "01:24:31.080 --> 01:24:33.300", "speaker": "Alexander Vasserman", "text": "and maybe at the later time."}, {"source_name": "lecture8", "index": 1286, "time": "01:24:33.500 --> 01:24:35.370", "speaker": "Alexander Vasserman", "text": "in a separate program"}, {"source_name": "lecture8", "index": 1287, "time": "01:24:35.570 --> 01:24:37.320", "speaker": "Alexander Vasserman", "text": "we could say."}, {"source_name": "lecture8", "index": 1288, "time": "01:24:37.530 --> 01:24:42.620", "speaker": "Alexander Vasserman", "text": "read collection and recreate the collection exactly how it was."}, {"source_name": "lecture8", "index": 1289, "time": "01:24:44.000 --> 01:24:45.809", "speaker": "Alex Wojtowicz", "text": "so whatever."}, {"source_name": "lecture8", "index": 1290, "time": "01:24:48.600 --> 01:24:52.079", "speaker": "Alex Wojtowicz", "text": "So we store the object, and then we just read it back later."}, {"source_name": "lecture8", "index": 1291, "time": "01:24:52.380 --> 01:24:55.820", "speaker": "Alexander Vasserman", "text": "Exactly. That's exactly right. That's exactly what we're trying to do here."}, {"source_name": "lecture8", "index": 1292, "time": "01:24:59.230 --> 01:25:00.689", "speaker": "Alexander Vasserman", "text": "I'm on."}, {"source_name": "lecture8", "index": 1293, "time": "01:25:01.240 --> 01:25:10.570", "speaker": "Aimun Anwer", "text": "So when it comes to the document collection, that's being written, and then red. Does it only read like one document collection at a time, and then overwrite it"}, {"source_name": "lecture8", "index": 1294, "time": "01:25:10.730 --> 01:25:11.800", "speaker": "Aimun Anwer", "text": "afterwards."}, {"source_name": "lecture8", "index": 1295, "time": "01:25:11.820 --> 01:25:13.879", "speaker": "Alexander Vasserman", "text": "Well, we can certainly store"}, {"source_name": "lecture8", "index": 1296, "time": "01:25:14.100 --> 01:25:17.399", "speaker": "Alexander Vasserman", "text": "or things in different paths, right? So"}, {"source_name": "lecture8", "index": 1297, "time": "01:25:17.480 --> 01:25:23.450", "speaker": "Alexander Vasserman", "text": "we we can store at the different location. So the file path here is where we're storing it"}, {"source_name": "lecture8", "index": 1298, "time": "01:25:23.970 --> 01:25:27.720", "speaker": "Alexander Vasserman", "text": "right, and so we can. We can give it the same"}, {"source_name": "lecture8", "index": 1299, "time": "01:25:27.790 --> 01:25:30.770", "speaker": "Alexander Vasserman", "text": "our place, and then it's going to override it."}, {"source_name": "lecture8", "index": 1300, "time": "01:25:30.810 --> 01:25:35.019", "speaker": "Alexander Vasserman", "text": "or it's because you can give it a different name. And then"}, {"source_name": "lecture8", "index": 1301, "time": "01:25:35.370 --> 01:25:36.460", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture8", "index": 1302, "time": "01:25:36.710 --> 01:25:39.789", "speaker": "Alexander Vasserman", "text": "then it's going to be another copy."}, {"source_name": "lecture8", "index": 1303, "time": "01:25:42.390 --> 01:25:44.019", "speaker": "Alexander Vasserman", "text": "That's so"}, {"source_name": "lecture8", "index": 1304, "time": "01:25:44.270 --> 01:25:45.230", "speaker": "Alexander Vasserman", "text": "something"}, {"source_name": "lecture8", "index": 1305, "time": "01:25:45.850 --> 01:25:48.050", "speaker": "Alexander Vasserman", "text": "depending what we are trying to do."}, {"source_name": "lecture8", "index": 1306, "time": "01:25:48.150 --> 01:25:55.920", "speaker": "Alexander Vasserman", "text": "all right. So if if you've started with the same data and let's say we changed, how like."}, {"source_name": "lecture8", "index": 1307, "time": "01:25:56.230 --> 01:25:57.080", "speaker": "Alexander Vasserman", "text": "how good"}, {"source_name": "lecture8", "index": 1308, "time": "01:25:58.630 --> 01:26:00.639", "speaker": "Alexander Vasserman", "text": "transforming documents, right?"}, {"source_name": "lecture8", "index": 1309, "time": "01:26:00.940 --> 01:26:07.350", "speaker": "Alexander Vasserman", "text": "And we decided to improve that process. Maybe we want to override the the older version."}, {"source_name": "lecture8", "index": 1310, "time": "01:26:07.520 --> 01:26:14.569", "speaker": "Alexander Vasserman", "text": "Maybe we want to like have a version to output and say, Well, let's write out new version without"}, {"source_name": "lecture8", "index": 1311, "time": "01:26:14.650 --> 01:26:17.670", "speaker": "Alexander Vasserman", "text": "just throw in the old version, so that we can compare."}, {"source_name": "lecture8", "index": 1312, "time": "01:26:18.950 --> 01:26:22.940", "speaker": "Alexander Vasserman", "text": "Oh, this kind of gives us a lot of flexibility along those lines."}, {"source_name": "lecture8", "index": 1313, "time": "01:26:32.140 --> 01:26:33.429", "speaker": "Alexander Vasserman", "text": "Well, that's"}, {"source_name": "lecture8", "index": 1314, "time": "01:26:33.970 --> 01:26:34.860", "speaker": "Alexander Vasserman", "text": "so."}, {"source_name": "lecture8", "index": 1315, "time": "01:26:35.290 --> 01:26:36.580", "speaker": "Alexander Vasserman", "text": "No."}, {"source_name": "lecture8", "index": 1316, "time": "01:26:37.340 --> 01:26:40.490", "speaker": "Alexander Vasserman", "text": "The final thing that I want to do is to say, Well."}, {"source_name": "lecture8", "index": 1317, "time": "01:26:41.000 --> 01:26:44.890", "speaker": "Alexander Vasserman", "text": "it's kind of weird to have it as a separate function."}, {"source_name": "lecture8", "index": 1318, "time": "01:26:45.040 --> 01:26:47.610", "speaker": "Alexander Vasserman", "text": "right? It's very much"}, {"source_name": "lecture8", "index": 1319, "time": "01:26:47.810 --> 01:26:53.060", "speaker": "Alexander Vasserman", "text": "related to specifics of implementation of this right method"}, {"source_name": "lecture8", "index": 1320, "time": "01:26:53.110 --> 01:26:55.749", "speaker": "Alexander Vasserman", "text": "inside of transformed document collection"}, {"source_name": "lecture8", "index": 1321, "time": "01:26:58.350 --> 01:26:59.340", "speaker": "Alexander Vasserman", "text": "plus."}, {"source_name": "lecture8", "index": 1322, "time": "01:26:59.650 --> 01:27:06.720", "speaker": "Alexander Vasserman", "text": "So we want to essentially attach this function to that class, so that when we, changing implementation of that class."}, {"source_name": "lecture8", "index": 1323, "time": "01:27:07.170 --> 01:27:10.939", "speaker": "Alexander Vasserman", "text": "we know to change both of those things at the same time."}, {"source_name": "lecture8", "index": 1324, "time": "01:27:11.840 --> 01:27:14.630", "speaker": "Alexander Vasserman", "text": "And that's what static method is essentially for"}, {"source_name": "lecture8", "index": 1325, "time": "01:27:15.080 --> 01:27:17.209", "speaker": "Alexander Vasserman", "text": "right. So instead of"}, {"source_name": "lecture8", "index": 1326, "time": "01:27:17.830 --> 01:27:21.360", "speaker": "Alexander Vasserman", "text": "calling the 3 transfer document collection"}, {"source_name": "lecture8", "index": 1327, "time": "01:27:22.710 --> 01:27:25.460", "speaker": "Alexander Vasserman", "text": "so that we could kind of connect them."}, {"source_name": "lecture8", "index": 1328, "time": "01:27:25.540 --> 01:27:26.630", "speaker": "Alexander Vasserman", "text": "Oh, this"}, {"source_name": "lecture8", "index": 1329, "time": "01:27:27.330 --> 01:27:29.069", "speaker": "Alexander Vasserman", "text": "the naming conventions."}, {"source_name": "lecture8", "index": 1330, "time": "01:27:29.190 --> 01:27:32.160", "speaker": "Alexander Vasserman", "text": "We can just define a function"}, {"source_name": "lecture8", "index": 1331, "time": "01:27:32.580 --> 01:27:33.959", "speaker": "Alexander Vasserman", "text": "on the class"}, {"source_name": "lecture8", "index": 1332, "time": "01:27:34.690 --> 01:27:40.009", "speaker": "Alexander Vasserman", "text": "that you're going to be able to call just like a regular function without an object."}, {"source_name": "lecture8", "index": 1333, "time": "01:27:40.900 --> 01:27:41.740", "speaker": "Alexander Vasserman", "text": "and"}, {"source_name": "lecture8", "index": 1334, "time": "01:27:42.130 --> 01:27:46.709", "speaker": "Alexander Vasserman", "text": "but otherwise it's going to be exactly the same."}, {"source_name": "lecture8", "index": 1335, "time": "01:27:47.930 --> 01:27:48.849", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture8", "index": 1336, "time": "01:27:49.230 --> 01:27:50.839", "speaker": "Alexander Vasserman", "text": "it's going to."}, {"source_name": "lecture8", "index": 1337, "time": "01:27:51.720 --> 01:27:52.590", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 1338, "time": "01:27:55.140 --> 01:27:57.570", "speaker": "Alexander Vasserman", "text": "just do exactly the same things."}, {"source_name": "lecture8", "index": 1339, "time": "01:27:59.790 --> 01:28:00.440", "speaker": "Alexander Vasserman", "text": "Thanks."}, {"source_name": "lecture8", "index": 1340, "time": "01:28:04.270 --> 01:28:05.499", "speaker": "Alexander Vasserman", "text": "So. I just"}, {"source_name": "lecture8", "index": 1341, "time": "01:28:05.820 --> 01:28:10.010", "speaker": "Alexander Vasserman", "text": "call it based without changes. But now we know"}, {"source_name": "lecture8", "index": 1342, "time": "01:28:10.110 --> 01:28:14.159", "speaker": "Alexander Vasserman", "text": "that the street method would like. It makes sense that"}, {"source_name": "lecture8", "index": 1343, "time": "01:28:14.250 --> 01:28:15.790", "speaker": "Alexander Vasserman", "text": "when we call it"}, {"source_name": "lecture8", "index": 1344, "time": "01:28:16.230 --> 01:28:19.660", "speaker": "Alexander Vasserman", "text": "instead of the same, read collection."}, {"source_name": "lecture8", "index": 1345, "time": "01:28:19.900 --> 01:28:25.080", "speaker": "Alexander Vasserman", "text": "What you'll have to do is to say, transfer and document collection dot 3."}, {"source_name": "lecture8", "index": 1346, "time": "01:28:25.170 --> 01:28:28.380", "speaker": "Alexander Vasserman", "text": "So there is no question about"}, {"source_name": "lecture8", "index": 1347, "time": "01:28:28.550 --> 01:28:31.610", "speaker": "Alexander Vasserman", "text": "what is maybe what it is that it"}, {"source_name": "lecture8", "index": 1348, "time": "01:28:33.720 --> 01:28:39.489", "speaker": "Alexander Vasserman", "text": "So that just makes a lot of things clear to you, created as a static method."}, {"source_name": "lecture8", "index": 1349, "time": "01:28:43.870 --> 01:28:48.649", "speaker": "Alexander Vasserman", "text": "One complication is like, you know, beard or weirdness of python"}, {"source_name": "lecture8", "index": 1350, "time": "01:28:48.890 --> 01:28:50.450", "speaker": "Alexander Vasserman", "text": "here is that"}, {"source_name": "lecture8", "index": 1351, "time": "01:28:51.150 --> 01:28:56.759", "speaker": "Alexander Vasserman", "text": "we are still defining the class transform document collection. We haven't finished defining it"}, {"source_name": "lecture8", "index": 1352, "time": "01:28:56.820 --> 01:29:00.369", "speaker": "Alexander Vasserman", "text": "at the time where interpreter essentially gets to this line."}, {"source_name": "lecture8", "index": 1353, "time": "01:29:01.050 --> 01:29:03.789", "speaker": "Alexander Vasserman", "text": "so it kind of doesn't know"}, {"source_name": "lecture8", "index": 1354, "time": "01:29:03.850 --> 01:29:04.590", "speaker": "Alexander Vasserman", "text": "what"}, {"source_name": "lecture8", "index": 1355, "time": "01:29:04.730 --> 01:29:08.930", "speaker": "Alexander Vasserman", "text": "this is. So that's why it's kind of underlying here."}, {"source_name": "lecture8", "index": 1356, "time": "01:29:09.640 --> 01:29:10.670", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture8", "index": 1357, "time": "01:29:11.240 --> 01:29:14.189", "speaker": "Alexander Vasserman", "text": "the 3 that is used."}, {"source_name": "lecture8", "index": 1358, "time": "01:29:14.230 --> 01:29:15.190", "speaker": "Alexander Vasserman", "text": "He's"}, {"source_name": "lecture8", "index": 1359, "time": "01:29:15.290 --> 01:29:19.640", "speaker": "Alexander Vasserman", "text": "basically we can put the annotation in."}, {"source_name": "lecture8", "index": 1360, "time": "01:29:20.470 --> 01:29:25.469", "speaker": "Alexander Vasserman", "text": "and it's exactly the same thing as if we did it without the quotes."}, {"source_name": "lecture8", "index": 1361, "time": "01:29:25.710 --> 01:29:27.010", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture8", "index": 1362, "time": "01:29:28.540 --> 01:29:29.910", "speaker": "Alexander Vasserman", "text": "Bison Doesn't complain."}, {"source_name": "lecture8", "index": 1363, "time": "01:29:30.460 --> 01:29:32.730", "speaker": "Alexander Vasserman", "text": "So when you are referring"}, {"source_name": "lecture8", "index": 1364, "time": "01:29:32.880 --> 01:29:34.650", "speaker": "Alexander Vasserman", "text": "to an object"}, {"source_name": "lecture8", "index": 1365, "time": "01:29:35.430 --> 01:29:38.989", "speaker": "Alexander Vasserman", "text": "or to to the type of the object from within. The object"}, {"source_name": "lecture8", "index": 1366, "time": "01:29:39.790 --> 01:29:43.360", "speaker": "Alexander Vasserman", "text": "you have to put this in in quotes"}, {"source_name": "lecture8", "index": 1367, "time": "01:29:43.600 --> 01:29:45.790", "speaker": "Alexander Vasserman", "text": "otherwise. Python complains."}, {"source_name": "lecture8", "index": 1368, "time": "01:29:47.670 --> 01:29:49.189", "speaker": "Alexander Vasserman", "text": "So that's"}, {"source_name": "lecture8", "index": 1369, "time": "01:29:49.470 --> 01:29:55.129", "speaker": "Alexander Vasserman", "text": "partially the reason for that is, that types are not"}, {"source_name": "lecture8", "index": 1370, "time": "01:29:55.450 --> 01:29:57.669", "speaker": "Alexander Vasserman", "text": "native to python. Essentially."}, {"source_name": "lecture8", "index": 1371, "time": "01:29:58.040 --> 01:30:02.060", "speaker": "Alexander Vasserman", "text": "Python is kind of untied language"}, {"source_name": "lecture8", "index": 1372, "time": "01:30:02.110 --> 01:30:04.850", "speaker": "Alexander Vasserman", "text": "which makes it oftentimes hard"}, {"source_name": "lecture8", "index": 1373, "time": "01:30:05.210 --> 01:30:07.929", "speaker": "Alexander Vasserman", "text": "to write larger pieces of code in Python."}, {"source_name": "lecture8", "index": 1374, "time": "01:30:08.140 --> 01:30:09.599", "speaker": "Alexander Vasserman", "text": "So people"}, {"source_name": "lecture8", "index": 1375, "time": "01:30:10.280 --> 01:30:13.420", "speaker": "Alexander Vasserman", "text": "added this type annotations to make it easier."}, {"source_name": "lecture8", "index": 1376, "time": "01:30:13.530 --> 01:30:15.229", "speaker": "Alexander Vasserman", "text": "but because it's kind of"}, {"source_name": "lecture8", "index": 1377, "time": "01:30:15.550 --> 01:30:20.129", "speaker": "Alexander Vasserman", "text": "in addition to the language, rather than building component of the language like, we would have."}, {"source_name": "lecture8", "index": 1378, "time": "01:30:20.270 --> 01:30:24.689", "speaker": "Alexander Vasserman", "text": "Let's say in Java or C types are fundamental to the language."}, {"source_name": "lecture8", "index": 1379, "time": "01:30:24.780 --> 01:30:26.319", "speaker": "Alexander Vasserman", "text": "You have to sometimes"}, {"source_name": "lecture8", "index": 1380, "time": "01:30:26.860 --> 01:30:28.150", "speaker": "Alexander Vasserman", "text": "have this like"}, {"source_name": "lecture8", "index": 1381, "time": "01:30:28.170 --> 01:30:40.609", "speaker": "Alexander Vasserman", "text": "goodness around it, and that's one of the weird things that, like, you know, you can't refer to the type until you completely define it. So inside of this class we have to put it into ports."}, {"source_name": "lecture8", "index": 1382, "time": "01:30:42.530 --> 01:30:43.309", "speaker": "Alexander Vasserman", "text": "All right."}, {"source_name": "lecture8", "index": 1383, "time": "01:30:43.520 --> 01:30:44.340", "speaker": "Alexander Vasserman", "text": "all right."}, {"source_name": "lecture8", "index": 1384, "time": "01:30:45.030 --> 01:31:00.380", "speaker": "Fahad Khan", "text": "Yeah. So could you explain what the differences between them, since they're kind of using the same code? Is it just like one's being stored somewhere else, and then one will be like printed to the console or what's the"}, {"source_name": "lecture8", "index": 1385, "time": "01:31:00.410 --> 01:31:01.440", "speaker": "Fahad Khan", "text": "Oh, okay."}, {"source_name": "lecture8", "index": 1386, "time": "01:31:01.660 --> 01:31:03.600", "speaker": "Alexander Vasserman", "text": "yeah, it just basically."}, {"source_name": "lecture8", "index": 1387, "time": "01:31:03.780 --> 01:31:04.690", "speaker": "Alexander Vasserman", "text": "oh."}, {"source_name": "lecture8", "index": 1388, "time": "01:31:05.700 --> 01:31:11.200", "speaker": "Alexander Vasserman", "text": "it's how we are going to call this function is, you know I I just wanted to"}, {"source_name": "lecture8", "index": 1389, "time": "01:31:12.330 --> 01:31:14.930", "speaker": "Alexander Vasserman", "text": "write it as a separate function first, and"}, {"source_name": "lecture8", "index": 1390, "time": "01:31:15.420 --> 01:31:16.389", "speaker": "Alexander Vasserman", "text": "so that"}, {"source_name": "lecture8", "index": 1391, "time": "01:31:17.310 --> 01:31:18.899", "speaker": "Alexander Vasserman", "text": "we don't have to"}, {"source_name": "lecture8", "index": 1392, "time": "01:31:19.080 --> 01:31:33.320", "speaker": "Alexander Vasserman", "text": "right. We understand the static method concept, the typing all of that. So we can understand the logic first, and then we just move it into the class so that it's kind of in the same place as the right logic and all the other logic. And"}, {"source_name": "lecture8", "index": 1393, "time": "01:31:33.800 --> 01:31:35.749", "speaker": "Alexander Vasserman", "text": "basically it's looking at"}, {"source_name": "lecture8", "index": 1394, "time": "01:31:35.830 --> 01:31:37.150", "speaker": "Alexander Vasserman", "text": "both the"}, {"source_name": "lecture8", "index": 1395, "time": "01:31:37.820 --> 01:31:40.790", "speaker": "Alexander Vasserman", "text": "exact details of the implementation of the right"}, {"source_name": "lecture8", "index": 1396, "time": "01:31:41.090 --> 01:31:45.319", "speaker": "Alexander Vasserman", "text": "a method it's looking at exact details of"}, {"source_name": "lecture8", "index": 1397, "time": "01:31:45.420 --> 01:31:47.020", "speaker": "Alexander Vasserman", "text": "how we represent"}, {"source_name": "lecture8", "index": 1398, "time": "01:31:47.220 --> 01:31:54.019", "speaker": "Alexander Vasserman", "text": "all the internals of the class, so that it's documents, and it's a list of documents to some degree."}, {"source_name": "lecture8", "index": 1399, "time": "01:31:54.070 --> 01:31:56.760", "speaker": "Alexander Vasserman", "text": "even though we are aing it a little bit by"}, {"source_name": "lecture8", "index": 1400, "time": "01:31:56.780 --> 01:31:57.849", "speaker": "Alexander Vasserman", "text": "all kind of"}, {"source_name": "lecture8", "index": 1401, "time": "01:31:58.220 --> 01:32:03.639", "speaker": "Alexander Vasserman", "text": "calling. Add document here. But basically, it's very much part of the class."}, {"source_name": "lecture8", "index": 1402, "time": "01:32:03.840 --> 01:32:06.120", "speaker": "Alexander Vasserman", "text": "So that's that's why we are kind of."}, {"source_name": "lecture8", "index": 1403, "time": "01:32:06.180 --> 01:32:07.979", "speaker": "Alexander Vasserman", "text": "We didn't even inside the class."}, {"source_name": "lecture8", "index": 1404, "time": "01:32:09.440 --> 01:32:15.469", "speaker": "Fahad Khan", "text": "So when you call the read method on the transform document collection. What will it do like?"}, {"source_name": "lecture8", "index": 1405, "time": "01:32:16.660 --> 01:32:19.139", "speaker": "Alexander Vasserman", "text": "Well, it will just execute"}, {"source_name": "lecture8", "index": 1406, "time": "01:32:19.170 --> 01:32:19.940", "speaker": "Alexander Vasserman", "text": "just"}, {"source_name": "lecture8", "index": 1407, "time": "01:32:20.380 --> 01:32:25.460", "speaker": "Fahad Khan", "text": "it's a return that they"}, {"source_name": "lecture8", "index": 1408, "time": "01:32:25.730 --> 01:32:30.980", "speaker": "Alexander Vasserman", "text": "newly create a transform doctrine collection. Sometimes these methods are called"}, {"source_name": "lecture8", "index": 1409, "time": "01:32:31.270 --> 01:32:34.670", "speaker": "Alexander Vasserman", "text": "either builder methods or factory methods."}, {"source_name": "lecture8", "index": 1410, "time": "01:32:35.670 --> 01:32:39.849", "speaker": "Alexander Vasserman", "text": "So you'll do sometimes hear those kind of words. And"}, {"source_name": "lecture8", "index": 1411, "time": "01:32:39.900 --> 01:32:42.610", "speaker": "Alexander Vasserman", "text": "basically it's a method of the class that"}, {"source_name": "lecture8", "index": 1412, "time": "01:32:44.120 --> 01:32:46.869", "speaker": "Alexander Vasserman", "text": "build a class. It's like kind of like constructor."}, {"source_name": "lecture8", "index": 1413, "time": "01:32:47.300 --> 01:32:48.150", "speaker": "Alexander Vasserman", "text": "right?"}, {"source_name": "lecture8", "index": 1414, "time": "01:32:48.280 --> 01:32:50.200", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture8", "index": 1415, "time": "01:32:50.620 --> 01:32:52.529", "speaker": "Alexander Vasserman", "text": "you don't want to"}, {"source_name": "lecture8", "index": 1416, "time": "01:32:52.640 --> 01:32:53.610", "speaker": "Alexander Vasserman", "text": "have"}, {"source_name": "lecture8", "index": 1417, "time": "01:32:53.890 --> 01:33:00.729", "speaker": "Alexander Vasserman", "text": "too much stuff going on in constructor. It's a little weird to to say, constructor that reads stuff out of it"}, {"source_name": "lecture8", "index": 1418, "time": "01:33:02.320 --> 01:33:03.670", "speaker": "Alexander Vasserman", "text": "out of a file."}, {"source_name": "lecture8", "index": 1419, "time": "01:33:03.980 --> 01:33:08.009", "speaker": "Alexander Vasserman", "text": "So it's kind of like a constructor. But you know."}, {"source_name": "lecture8", "index": 1420, "time": "01:33:08.170 --> 01:33:10.910", "speaker": "Alexander Vasserman", "text": "in in the sense that it creates"}, {"source_name": "lecture8", "index": 1421, "time": "01:33:10.990 --> 01:33:12.500", "speaker": "Alexander Vasserman", "text": "this"}, {"source_name": "lecture8", "index": 1422, "time": "01:33:12.840 --> 01:33:14.609", "speaker": "Alexander Vasserman", "text": "an object of this type?"}, {"source_name": "lecture8", "index": 1423, "time": "01:33:15.300 --> 01:33:16.130", "speaker": "Alexander Vasserman", "text": "Oh."}, {"source_name": "lecture8", "index": 1424, "time": "01:33:17.230 --> 01:33:17.880", "speaker": "Alexander Vasserman", "text": "yeah."}, {"source_name": "lecture8", "index": 1425, "time": "01:33:17.900 --> 01:33:20.709", "speaker": "Alexander Vasserman", "text": "but it's a static method. Instead of constructing"}, {"source_name": "lecture8", "index": 1426, "time": "01:33:25.060 --> 01:33:25.929", "speaker": "Alexander Vasserman", "text": "Louise."}, {"source_name": "lecture8", "index": 1427, "time": "01:33:28.230 --> 01:33:33.059", "speaker": "Luis Gonzalez", "text": "Oh, yeah, Could you on quickly expand again what Json? That dump does."}, {"source_name": "lecture8", "index": 1428, "time": "01:33:34.890 --> 01:33:35.910", "speaker": "Alexander Vasserman", "text": "Yes."}, {"source_name": "lecture8", "index": 1429, "time": "01:33:36.500 --> 01:33:37.530", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture8", "index": 1430, "time": "01:33:37.630 --> 01:33:42.839", "speaker": "Alexander Vasserman", "text": "it does the exact opposite of Json dot load."}, {"source_name": "lecture8", "index": 1431, "time": "01:33:44.240 --> 01:33:45.290", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture8", "index": 1432, "time": "01:33:45.750 --> 01:33:47.530", "speaker": "Alexander Vasserman", "text": "basically"}, {"source_name": "lecture8", "index": 1433, "time": "01:33:47.920 --> 01:33:48.790", "speaker": "Alexander Vasserman", "text": "this"}, {"source_name": "lecture8", "index": 1434, "time": "01:33:49.170 --> 01:33:50.549", "speaker": "Alexander Vasserman", "text": "collection, Dicked."}, {"source_name": "lecture8", "index": 1435, "time": "01:33:51.330 --> 01:33:55.039", "speaker": "Alexander Vasserman", "text": "is exactly the same"}, {"source_name": "lecture8", "index": 1436, "time": "01:33:55.160 --> 01:33:57.179", "speaker": "Alexander Vasserman", "text": "python data structure"}, {"source_name": "lecture8", "index": 1437, "time": "01:33:57.330 --> 01:34:00.529", "speaker": "Alexander Vasserman", "text": "as the G sundated here."}, {"source_name": "lecture8", "index": 1438, "time": "01:34:01.470 --> 01:34:04.480", "speaker": "Alexander Vasserman", "text": "and maybe I should have called it to get the same thing."}, {"source_name": "lecture8", "index": 1439, "time": "01:34:05.230 --> 01:34:07.399", "speaker": "Alexander Vasserman", "text": "But"}, {"source_name": "lecture8", "index": 1440, "time": "01:34:08.870 --> 01:34:10.240", "speaker": "Alexander Vasserman", "text": "right so"}, {"source_name": "lecture8", "index": 1441, "time": "01:34:10.660 --> 01:34:12.150", "speaker": "Alexander Vasserman", "text": "in some sense"}, {"source_name": "lecture8", "index": 1442, "time": "01:34:12.780 --> 01:34:16.490", "speaker": "Alexander Vasserman", "text": "here Jason Library provides us also. There is an obstruction."}, {"source_name": "lecture8", "index": 1443, "time": "01:34:17.220 --> 01:34:21.809", "speaker": "Alexander Vasserman", "text": "and we do something. We don't have to know the details"}, {"source_name": "lecture8", "index": 1444, "time": "01:34:21.840 --> 01:34:24.910", "speaker": "Alexander Vasserman", "text": "of how the data is stored."}, {"source_name": "lecture8", "index": 1445, "time": "01:34:25.450 --> 01:34:29.940", "speaker": "Alexander Vasserman", "text": "but we have a guarantee that whatever the dump."}, {"source_name": "lecture8", "index": 1446, "time": "01:34:30.060 --> 01:34:32.820", "speaker": "Alexander Vasserman", "text": "when we load it we get exactly the same thing."}, {"source_name": "lecture8", "index": 1447, "time": "01:34:35.310 --> 01:34:36.879", "speaker": "Alexander Vasserman", "text": "and that's kind of the"}, {"source_name": "lecture8", "index": 1448, "time": "01:34:37.180 --> 01:34:38.900", "speaker": "Alexander Vasserman", "text": "nice thing about it."}, {"source_name": "lecture8", "index": 1449, "time": "01:34:40.820 --> 01:34:41.800", "speaker": "Alexander Vasserman", "text": "Make sense."}, {"source_name": "lecture8", "index": 1450, "time": "01:34:43.230 --> 01:34:44.590", "speaker": "Luis Gonzalez", "text": "Yes, thank you"}, {"source_name": "lecture8", "index": 1451, "time": "01:34:47.710 --> 01:34:48.540", "speaker": "Alexander Vasserman", "text": "all right."}, {"source_name": "lecture8", "index": 1452, "time": "01:34:49.470 --> 01:34:50.710", "speaker": "Alexander Vasserman", "text": "So"}, {"source_name": "lecture8", "index": 1453, "time": "01:34:51.120 --> 01:34:54.690", "speaker": "Alexander Vasserman", "text": "I think that's all we have time for"}, {"source_name": "lecture8", "index": 1454, "time": "01:34:54.730 --> 01:34:55.719", "speaker": "Alexander Vasserman", "text": "today."}, {"source_name": "lecture8", "index": 1455, "time": "01:35:00.500 --> 01:35:01.340", "speaker": "Alexander Vasserman", "text": "The"}, {"source_name": "lecture8", "index": 1456, "time": "01:35:01.900 --> 01:35:05.819", "speaker": "Alexander Vasserman", "text": "assignment this week. I'll have to"}, {"source_name": "lecture8", "index": 1457, "time": "01:35:06.520 --> 01:35:22.819", "speaker": "Alexander Vasserman", "text": "think about it a little bit, because we're not making as much progress as I was hoping, which is totally fine, I think it's it's better to kind of answer this questions and get you guys all on the same page."}, {"source_name": "lecture8", "index": 1458, "time": "01:35:26.030 --> 01:35:27.760", "speaker": "Alexander Vasserman", "text": "So?"}, {"source_name": "lecture8", "index": 1459, "time": "01:35:29.320 --> 01:35:30.910", "speaker": "Alexander Vasserman", "text": "Yes."}, {"source_name": "lecture8", "index": 1460, "time": "01:35:32.700 --> 01:35:33.849", "speaker": "Alexander Vasserman", "text": "so"}, {"source_name": "lecture8", "index": 1461, "time": "01:35:34.290 --> 01:35:36.459", "speaker": "Alexander Vasserman", "text": "basically. I'll. We'll have to"}, {"source_name": "lecture8", "index": 1462, "time": "01:35:36.480 --> 01:35:39.410", "speaker": "Alexander Vasserman", "text": "watch out for announcements essentially on the 2. L."}, {"source_name": "lecture8", "index": 1463, "time": "01:35:39.550 --> 01:35:43.190", "speaker": "Alexander Vasserman", "text": "I'll try to see if it makes sense to"}, {"source_name": "lecture8", "index": 1464, "time": "01:35:43.360 --> 01:35:46.859", "speaker": "Alexander Vasserman", "text": "create an assignment based on what we've covered so far."}, {"source_name": "lecture8", "index": 1465, "time": "01:35:46.950 --> 01:35:50.929", "speaker": "Alexander Vasserman", "text": "or i'll wait for another lecture to to to give you an assignment."}, {"source_name": "lecture8", "index": 1466, "time": "01:35:51.170 --> 01:35:52.770", "speaker": "Alexander Vasserman", "text": "Maybe i'll."}, {"source_name": "lecture8", "index": 1467, "time": "01:35:52.800 --> 01:35:56.170", "speaker": "Alexander Vasserman", "text": "Yeah, i'll probably adjust the assignment that I was planning to give you"}, {"source_name": "lecture8", "index": 1468, "time": "01:35:56.200 --> 01:35:59.480", "speaker": "Alexander Vasserman", "text": "to just restrict it to what we've covered so far."}, {"source_name": "lecture8", "index": 1469, "time": "01:36:01.840 --> 01:36:04.730", "speaker": "Alexander Vasserman", "text": "So watch out for you to do a lot of those things"}, {"source_name": "lecture8", "index": 1470, "time": "01:36:09.280 --> 01:36:12.369", "speaker": "Alexander Vasserman", "text": "all right, any other questions."}, {"source_name": "lecture8", "index": 1471, "time": "01:36:18.740 --> 01:36:19.860", "speaker": "Alexander Vasserman", "text": "So."}]